
Controller_Modul_F446VCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf68  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800c12c  0800c12c  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1a0  0800c1a0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1a0  0800c1a0  0001c1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1a8  0800c1a8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a8  0800c1a8  0001c1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1ac  0800c1ac  0001c1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000214c  200001f4  0800c3a4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002340  0800c3a4  00022340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026306  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004afc  00000000  00000000  0004652a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e48  00000000  00000000  0004b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c38  00000000  00000000  0004ce70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029714  00000000  00000000  0004eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ad88  00000000  00000000  000781bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e563f  00000000  00000000  00092f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178583  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081e4  00000000  00000000  00178600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001f4 	.word	0x200001f4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800c114 	.word	0x0800c114

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001f8 	.word	0x200001f8
 8000200:	0800c114 	.word	0x0800c114

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f001 fb3c 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f82c 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 fd40 	bl	8000f94 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000514:	f000 f906 	bl	8000724 <MX_CAN1_Init>
  //MX_CAN2_Init();
  MX_I2C1_Init();
 8000518:	f000 f938 	bl	800078c <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800051c:	f000 f964 	bl	80007e8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000520:	f000 f982 	bl	8000828 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000524:	f000 f9b8 	bl	8000898 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000528:	f000 fa56 	bl	80009d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 faca 	bl	8000ac4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000530:	f000 fb3e 	bl	8000bb0 <MX_TIM4_Init>
  MX_UART4_Init();
 8000534:	f000 fd04 	bl	8000f40 <MX_UART4_Init>
  MX_FATFS_Init();
 8000538:	f009 f9b6 	bl	80098a8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800053c:	f00a ffb4 	bl	800b4a8 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000540:	f000 fbce 	bl	8000ce0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000544:	f000 fc42 	bl	8000dcc <MX_TIM8_Init>
  MX_TIM9_Init();
 8000548:	f000 fc98 	bl	8000e7c <MX_TIM9_Init>
  MX_ADC1_Init();
 800054c:	f000 f898 	bl	8000680 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_Status_GPIO_Port, LED_Status_Pin);
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0x60>)
 8000554:	f002 f9ed 	bl	8002932 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000558:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055c:	f001 fb84 	bl	8001c68 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_Status_GPIO_Port, LED_Status_Pin);
 8000560:	e7f6      	b.n	8000550 <main+0x4c>
 8000562:	bf00      	nop
 8000564:	40020000 	.word	0x40020000

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0ac      	sub	sp, #176	; 0xb0
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f00b fd0a 	bl	800bf90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	225c      	movs	r2, #92	; 0x5c
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f00b fcfb 	bl	800bf90 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b36      	ldr	r3, [pc, #216]	; (8000678 <SystemClock_Config+0x110>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	4a35      	ldr	r2, [pc, #212]	; (8000678 <SystemClock_Config+0x110>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	6413      	str	r3, [r2, #64]	; 0x40
 80005aa:	4b33      	ldr	r3, [pc, #204]	; (8000678 <SystemClock_Config+0x110>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <SystemClock_Config+0x114>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a2f      	ldr	r2, [pc, #188]	; (800067c <SystemClock_Config+0x114>)
 80005c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <SystemClock_Config+0x114>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f2:	23a8      	movs	r3, #168	; 0xa8
 80005f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fa96 	bl	8004b40 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800061a:	f000 fdc5 	bl	80011a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000636:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800063a:	2105      	movs	r1, #5
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fc9b 	bl	8003f78 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000648:	f000 fdae 	bl	80011a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800064c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000650:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000652:	2300      	movs	r3, #0
 8000654:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000656:	2300      	movs	r3, #0
 8000658:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fda4 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x106>
  {
    Error_Handler();
 800066a:	f000 fd9d 	bl	80011a8 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	37b0      	adds	r7, #176	; 0xb0
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_ADC1_Init+0x98>)
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <MX_ADC1_Init+0x9c>)
 8000696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_ADC1_Init+0x98>)
 800069a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800069e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_ADC1_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_ADC1_Init+0x98>)
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <MX_ADC1_Init+0xa0>)
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_ADC1_Init+0x98>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_ADC1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_ADC1_Init+0x98>)
 80006dc:	2201      	movs	r2, #1
 80006de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_ADC1_Init+0x98>)
 80006e2:	f001 fae3 	bl	8001cac <HAL_ADC_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 fd5c 	bl	80011a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_ADC1_Init+0x98>)
 8000702:	f001 fb17 	bl	8001d34 <HAL_ADC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800070c:	f000 fd4c 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000384 	.word	0x20000384
 800071c:	40012000 	.word	0x40012000
 8000720:	0f000001 	.word	0x0f000001

08000724 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_CAN1_Init+0x60>)
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_CAN1_Init+0x64>)
 800072c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_CAN1_Init+0x60>)
 8000730:	2210      	movs	r2, #16
 8000732:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_CAN1_Init+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_CAN1_Init+0x60>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_CAN1_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_CAN1_Init+0x60>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_CAN1_Init+0x60>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_CAN1_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_CAN1_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_CAN1_Init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_CAN1_Init+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_CAN1_Init+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_CAN1_Init+0x60>)
 8000772:	f001 fd0d 	bl	8002190 <HAL_CAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800077c:	f000 fd14 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200005d0 	.word	0x200005d0
 8000788:	40006400 	.word	0x40006400

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f002 f8cd 	bl	8002968 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 fce8 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200002b0 	.word	0x200002b0
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SDIO_SD_Init+0x38>)
 80007ee:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <MX_SDIO_SD_Init+0x3c>)
 80007f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_SDIO_SD_Init+0x38>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SDIO_SD_Init+0x38>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_SDIO_SD_Init+0x38>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SDIO_SD_Init+0x38>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <MX_SDIO_SD_Init+0x38>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <MX_SDIO_SD_Init+0x38>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	20000474 	.word	0x20000474
 8000824:	40012c00 	.word	0x40012c00

08000828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_SPI1_Init+0x68>)
 800082e:	4a19      	ldr	r2, [pc, #100]	; (8000894 <MX_SPI1_Init+0x6c>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_SPI1_Init+0x68>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_SPI1_Init+0x68>)
 800083c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000840:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_SPI1_Init+0x68>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_SPI1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_SPI1_Init+0x68>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_SPI1_Init+0x68>)
 8000856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800085a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_SPI1_Init+0x68>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_SPI1_Init+0x68>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_SPI1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_SPI1_Init+0x68>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_SPI1_Init+0x68>)
 8000876:	220a      	movs	r2, #10
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_SPI1_Init+0x68>)
 800087c:	f005 fd32 	bl	80062e4 <HAL_SPI_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000886:	f000 fc8f 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000538 	.word	0x20000538
 8000894:	40013000 	.word	0x40013000

08000898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b096      	sub	sp, #88	; 0x58
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2220      	movs	r2, #32
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00b fb5d 	bl	800bf90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008d8:	4a3e      	ldr	r2, [pc, #248]	; (80009d4 <MX_TIM1_Init+0x13c>)
 80008da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008dc:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008e8:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000902:	4833      	ldr	r0, [pc, #204]	; (80009d0 <MX_TIM1_Init+0x138>)
 8000904:	f005 fd52 	bl	80063ac <HAL_TIM_Base_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800090e:	f000 fc4b 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800091c:	4619      	mov	r1, r3
 800091e:	482c      	ldr	r0, [pc, #176]	; (80009d0 <MX_TIM1_Init+0x138>)
 8000920:	f005 fefc 	bl	800671c <HAL_TIM_ConfigClockSource>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800092a:	f000 fc3d 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800092e:	4828      	ldr	r0, [pc, #160]	; (80009d0 <MX_TIM1_Init+0x138>)
 8000930:	f005 fd67 	bl	8006402 <HAL_TIM_PWM_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800093a:	f000 fc35 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800094a:	4619      	mov	r1, r3
 800094c:	4820      	ldr	r0, [pc, #128]	; (80009d0 <MX_TIM1_Init+0x138>)
 800094e:	f006 fa87 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000958:	f000 fc26 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095c:	2360      	movs	r3, #96	; 0x60
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_TIM1_Init+0x138>)
 8000982:	f005 fe05 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800098c:	f000 fc0c 	bl	80011a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <MX_TIM1_Init+0x138>)
 80009b4:	f006 fad0 	bl	8006f58 <HAL_TIMEx_ConfigBreakDeadTime>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80009be:	f000 fbf3 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <MX_TIM1_Init+0x138>)
 80009c4:	f000 feee 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3758      	adds	r7, #88	; 0x58
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200003f4 	.word	0x200003f4
 80009d4:	40010000 	.word	0x40010000

080009d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	; 0x38
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
 8000a06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a1c:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a30:	4823      	ldr	r0, [pc, #140]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a32:	f005 fcbb 	bl	80063ac <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a3c:	f000 fbb4 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481c      	ldr	r0, [pc, #112]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a4e:	f005 fe65 	bl	800671c <HAL_TIM_ConfigClockSource>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a58:	f000 fba6 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a5c:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a5e:	f005 fcd0 	bl	8006402 <HAL_TIM_PWM_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a68:	f000 fb9e 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a74:	f107 0320 	add.w	r3, r7, #32
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000a7c:	f006 f9f0 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a86:	f000 fb8f 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8a:	2360      	movs	r3, #96	; 0x60
 8000a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000aa2:	f005 fd75 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000aac:	f000 fb7c 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <MX_TIM2_Init+0xe8>)
 8000ab2:	f000 fe77 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8000ab6:	bf00      	nop
 8000ab8:	3738      	adds	r7, #56	; 0x38
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000590 	.word	0x20000590

08000ac4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af4:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000af6:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <MX_TIM3_Init+0xe8>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b1a:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b1c:	f005 fc46 	bl	80063ac <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b26:	f000 fb3f 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b38:	f005 fdf0 	bl	800671c <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b42:	f000 fb31 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b46:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b48:	f005 fc5b 	bl	8006402 <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b52:	f000 fb29 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4619      	mov	r1, r3
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b66:	f006 f97b 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b70:	f000 fb1a 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b74:	2360      	movs	r3, #96	; 0x60
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b8c:	f005 fd00 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b96:	f000 fb07 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b9c:	f000 fe02 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8000ba0:	bf00      	nop
 8000ba2:	3738      	adds	r7, #56	; 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000344 	.word	0x20000344
 8000bac:	40000400 	.word	0x40000400

08000bb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]
 8000bde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000be2:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <MX_TIM4_Init+0x12c>)
 8000be4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000be6:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bf2:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c06:	4834      	ldr	r0, [pc, #208]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000c08:	f005 fbd0 	bl	80063ac <HAL_TIM_Base_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000c12:	f000 fac9 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c20:	4619      	mov	r1, r3
 8000c22:	482d      	ldr	r0, [pc, #180]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000c24:	f005 fd7a 	bl	800671c <HAL_TIM_ConfigClockSource>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000c2e:	f000 fabb 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c32:	4829      	ldr	r0, [pc, #164]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000c34:	f005 fbe5 	bl	8006402 <HAL_TIM_PWM_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000c3e:	f000 fab3 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4821      	ldr	r0, [pc, #132]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000c52:	f006 f905 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000c5c:	f000 faa4 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c60:	2360      	movs	r3, #96	; 0x60
 8000c62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000c78:	f005 fc8a 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000c82:	f000 fa91 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2204      	movs	r2, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000c8e:	f005 fc7f 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000c98:	f000 fa86 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000ca4:	f005 fc74 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000cae:	f000 fa7b 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	220c      	movs	r2, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000cba:	f005 fc69 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000cc4:	f000 fa70 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <MX_TIM4_Init+0x128>)
 8000cca:	f000 fd6b 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8000cce:	bf00      	nop
 8000cd0:	3738      	adds	r7, #56	; 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000270 	.word	0x20000270
 8000cdc:	40000800 	.word	0x40000800

08000ce0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	f107 0320 	add.w	r3, r7, #32
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d12:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <MX_TIM5_Init+0xe8>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d36:	4823      	ldr	r0, [pc, #140]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d38:	f005 fb38 	bl	80063ac <HAL_TIM_Base_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000d42:	f000 fa31 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d50:	4619      	mov	r1, r3
 8000d52:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d54:	f005 fce2 	bl	800671c <HAL_TIM_ConfigClockSource>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000d5e:	f000 fa23 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000d62:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d64:	f005 fb4d 	bl	8006402 <HAL_TIM_PWM_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000d6e:	f000 fa1b 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4810      	ldr	r0, [pc, #64]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000d82:	f006 f86d 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000d8c:	f000 fa0c 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d90:	2360      	movs	r3, #96	; 0x60
 8000d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000da8:	f005 fbf2 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000db2:	f000 f9f9 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <MX_TIM5_Init+0xe4>)
 8000db8:	f000 fcf4 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8000dbc:	bf00      	nop
 8000dbe:	3738      	adds	r7, #56	; 0x38
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000304 	.word	0x20000304
 8000dc8:	40000c00 	.word	0x40000c00

08000dcc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2224      	movs	r2, #36	; 0x24
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00b f8d8 	bl	800bf90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_TIM8_Init+0xa8>)
 8000dea:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <MX_TIM8_Init+0xac>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <MX_TIM8_Init+0xa8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_TIM8_Init+0xa8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_TIM8_Init+0xa8>)
 8000dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_TIM8_Init+0xa8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_TIM8_Init+0xa8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_TIM8_Init+0xa8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_TIM8_Init+0xa8>)
 8000e40:	f005 fb14 	bl	800646c <HAL_TIM_Encoder_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000e4a:	f000 f9ad 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <MX_TIM8_Init+0xa8>)
 8000e5c:	f006 f800 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000e66:	f000 f99f 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3730      	adds	r7, #48	; 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000230 	.word	0x20000230
 8000e78:	40010400 	.word	0x40010400

08000e7c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000ea4:	4a25      	ldr	r2, [pc, #148]	; (8000f3c <MX_TIM9_Init+0xc0>)
 8000ea6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eba:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000eca:	f005 fa6f 	bl	80063ac <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f000 f968 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000ee6:	f005 fc19 	bl	800671c <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000ef0:	f000 f95a 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000ef6:	f005 fa84 	bl	8006402 <HAL_TIM_PWM_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000f00:	f000 f952 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f04:	2360      	movs	r3, #96	; 0x60
 8000f06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000f1c:	f005 fb38 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000f26:	f000 f93f 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <MX_TIM9_Init+0xbc>)
 8000f2c:	f000 fc3a 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8000f30:	bf00      	nop
 8000f32:	3730      	adds	r7, #48	; 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000434 	.word	0x20000434
 8000f3c:	40014000 	.word	0x40014000

08000f40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_UART4_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f78:	f006 f840 	bl	8006ffc <HAL_HalfDuplex_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f82:	f000 f911 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200004f8 	.word	0x200004f8
 8000f90:	40004c00 	.word	0x40004c00

08000f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	4b78      	ldr	r3, [pc, #480]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a77      	ldr	r2, [pc, #476]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b75      	ldr	r3, [pc, #468]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	4b71      	ldr	r3, [pc, #452]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a70      	ldr	r2, [pc, #448]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b6e      	ldr	r3, [pc, #440]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b6a      	ldr	r3, [pc, #424]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a69      	ldr	r2, [pc, #420]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b67      	ldr	r3, [pc, #412]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b63      	ldr	r3, [pc, #396]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a62      	ldr	r2, [pc, #392]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b60      	ldr	r3, [pc, #384]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a5b      	ldr	r2, [pc, #364]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b59      	ldr	r3, [pc, #356]	; (8001190 <MX_GPIO_Init+0x1fc>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b55      	ldr	r3, [pc, #340]	; (8001190 <MX_GPIO_Init+0x1fc>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a54      	ldr	r2, [pc, #336]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b52      	ldr	r3, [pc, #328]	; (8001190 <MX_GPIO_Init+0x1fc>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_Z_Pin|DIR_Z_Pin|GPIO_PIN_10|DIR_X_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f242 4124 	movw	r1, #9252	; 0x2424
 8001058:	484e      	ldr	r0, [pc, #312]	; (8001194 <MX_GPIO_Init+0x200>)
 800105a:	f001 fc51 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_ROT_Pin|DIR_ROT_Pin|SPI_DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2139      	movs	r1, #57	; 0x39
 8001062:	484d      	ldr	r0, [pc, #308]	; (8001198 <MX_GPIO_Init+0x204>)
 8001064:	f001 fc4c 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_RESET_Pin|LED_Status_Pin|OUTPUT_RES6_Pin|OUTPUT_RES5_Pin
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800106e:	484b      	ldr	r0, [pc, #300]	; (800119c <MX_GPIO_Init+0x208>)
 8001070:	f001 fc46 	bl	8002900 <HAL_GPIO_WritePin>
                          |OUTPUT_RES4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_RES7_Pin|OUTPUT_RES3_Pin|OUTPUT_RES2_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800107a:	4849      	ldr	r0, [pc, #292]	; (80011a0 <MX_GPIO_Init+0x20c>)
 800107c:	f001 fc40 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT_RES1_Pin|VACUUM_PUMP_Pin|VENTIL2_Pin|VENTIL1_Pin
 8001080:	2200      	movs	r2, #0
 8001082:	f640 7148 	movw	r1, #3912	; 0xf48
 8001086:	4847      	ldr	r0, [pc, #284]	; (80011a4 <MX_GPIO_Init+0x210>)
 8001088:	f001 fc3a 	bl	8002900 <HAL_GPIO_WritePin>
                          |EN_Y_Pin|DIR_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_Z_Pin DIR_Z_Pin PE10 DIR_X_Pin */
  GPIO_InitStruct.Pin = EN_Z_Pin|DIR_Z_Pin|GPIO_PIN_10|DIR_X_Pin;
 800108c:	f242 4324 	movw	r3, #9252	; 0x2424
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	483b      	ldr	r0, [pc, #236]	; (8001194 <MX_GPIO_Init+0x200>)
 80010a6:	f001 fa81 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DIAG_Z_Pin INDEX_Z_Pin ENDSTOP_X1_Pin SDIO_CD_Pin
                           DIAG_X_Pin INDEX_X_Pin ENDSTOP_Z2_Pin ENDSTOP_Z1_Pin */
  GPIO_InitStruct.Pin = DIAG_Z_Pin|INDEX_Z_Pin|ENDSTOP_X1_Pin|SDIO_CD_Pin
 80010aa:	f641 03db 	movw	r3, #6363	; 0x18db
 80010ae:	61fb      	str	r3, [r7, #28]
                          |DIAG_X_Pin|INDEX_X_Pin|ENDSTOP_Z2_Pin|ENDSTOP_Z1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4835      	ldr	r0, [pc, #212]	; (8001194 <MX_GPIO_Init+0x200>)
 80010c0:	f001 fa74 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ENDSTOP_X2_Pin ENDSTOP_Y1_Pin ENSTOP_Y2_Pin DIAG_ROT_Pin
                           INDEX_ROT_Pin ENC_BTN_Pin INPUT_RES2_Pin */
  GPIO_InitStruct.Pin = ENDSTOP_X2_Pin|ENDSTOP_Y1_Pin|ENSTOP_Y2_Pin|DIAG_ROT_Pin
 80010c4:	f24f 2306 	movw	r3, #61958	; 0xf206
 80010c8:	61fb      	str	r3, [r7, #28]
                          |INDEX_ROT_Pin|ENC_BTN_Pin|INPUT_RES2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	482f      	ldr	r0, [pc, #188]	; (8001198 <MX_GPIO_Init+0x204>)
 80010da:	f001 fa67 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_ROT_Pin DIR_ROT_Pin SPI_DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = EN_ROT_Pin|DIR_ROT_Pin|SPI_DC_Pin|SPI_CS_Pin;
 80010de:	2339      	movs	r3, #57	; 0x39
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4828      	ldr	r0, [pc, #160]	; (8001198 <MX_GPIO_Init+0x204>)
 80010f6:	f001 fa59 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RESET_Pin LED_Status_Pin OUTPUT_RES6_Pin OUTPUT_RES5_Pin
                           OUTPUT_RES4_Pin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin|LED_Status_Pin|OUTPUT_RES6_Pin|OUTPUT_RES5_Pin
 80010fa:	f44f 63f2 	mov.w	r3, #1936	; 0x790
 80010fe:	61fb      	str	r3, [r7, #28]
                          |OUTPUT_RES4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4822      	ldr	r0, [pc, #136]	; (800119c <MX_GPIO_Init+0x208>)
 8001114:	f001 fa4a 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_RES7_Pin OUTPUT_RES3_Pin OUTPUT_RES2_Pin */
  GPIO_InitStruct.Pin = OUTPUT_RES7_Pin|OUTPUT_RES3_Pin|OUTPUT_RES2_Pin;
 8001118:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	481b      	ldr	r0, [pc, #108]	; (80011a0 <MX_GPIO_Init+0x20c>)
 8001132:	f001 fa3b 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_RES1_Pin VACUUM_PUMP_Pin VENTIL2_Pin VENTIL1_Pin
                           EN_Y_Pin DIR_Y_Pin */
  GPIO_InitStruct.Pin = OUTPUT_RES1_Pin|VACUUM_PUMP_Pin|VENTIL2_Pin|VENTIL1_Pin
 8001136:	f640 7348 	movw	r3, #3912	; 0xf48
 800113a:	61fb      	str	r3, [r7, #28]
                          |EN_Y_Pin|DIR_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4815      	ldr	r0, [pc, #84]	; (80011a4 <MX_GPIO_Init+0x210>)
 8001150:	f001 fa2c 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 INDEX_Y_Pin INPUT_RES1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|INDEX_Y_Pin|INPUT_RES1_Pin;
 8001154:	23b0      	movs	r3, #176	; 0xb0
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	480f      	ldr	r0, [pc, #60]	; (80011a4 <MX_GPIO_Init+0x210>)
 8001168:	f001 fa20 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ENDSTOP_ROT2_Pin ENDSTOP_ROT1_Pin */
  GPIO_InitStruct.Pin = ENDSTOP_ROT2_Pin|ENDSTOP_ROT1_Pin;
 800116c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <MX_GPIO_Init+0x20c>)
 8001182:	f001 fa13 	bl	80025ac <HAL_GPIO_Init>

}
 8001186:	bf00      	nop
 8001188:	3730      	adds	r7, #48	; 0x30
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40021000 	.word	0x40021000
 8001198:	40020800 	.word	0x40020800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020c00 	.word	0x40020c00

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ae:	e7fe      	b.n	80011ae <Error_Handler+0x6>

080011b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_MspInit+0x4c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x4c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_ADC_MspInit+0x7c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d127      	bne.n	8001272 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_ADC_MspInit+0x80>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <HAL_ADC_MspInit+0x80>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_ADC_MspInit+0x80>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_ADC_MspInit+0x80>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_ADC_MspInit+0x80>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_ADC_MspInit+0x80>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800125a:	236a      	movs	r3, #106	; 0x6a
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_ADC_MspInit+0x84>)
 800126e:	f001 f99d 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40012000 	.word	0x40012000
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000

08001288 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a42      	ldr	r2, [pc, #264]	; (80013b0 <HAL_CAN_MspInit+0x128>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d135      	bne.n	8001316 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012aa:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <HAL_CAN_MspInit+0x12c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <HAL_CAN_MspInit+0x12c>)
 80012b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012b4:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <HAL_CAN_MspInit+0x12c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d10d      	bne.n	80012d8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a3c      	ldr	r2, [pc, #240]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 80012c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a35      	ldr	r2, [pc, #212]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f4:	2303      	movs	r3, #3
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001304:	2309      	movs	r3, #9
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	482b      	ldr	r0, [pc, #172]	; (80013bc <HAL_CAN_MspInit+0x134>)
 8001310:	f001 f94c 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001314:	e048      	b.n	80013a8 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a29      	ldr	r2, [pc, #164]	; (80013c0 <HAL_CAN_MspInit+0x138>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d143      	bne.n	80013a8 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 800132a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_CAN_MspInit+0x12c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_CAN_MspInit+0x12c>)
 8001344:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_CAN_MspInit+0x12c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d10d      	bne.n	800136a <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 8001358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_CAN_MspInit+0x130>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001386:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001398:	2309      	movs	r3, #9
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4808      	ldr	r0, [pc, #32]	; (80013c4 <HAL_CAN_MspInit+0x13c>)
 80013a4:	f001 f902 	bl	80025ac <HAL_GPIO_Init>
}
 80013a8:	bf00      	nop
 80013aa:	3730      	adds	r7, #48	; 0x30
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40006400 	.word	0x40006400
 80013b4:	20000210 	.word	0x20000210
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40006800 	.word	0x40006800
 80013c4:	40020400 	.word	0x40020400

080013c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_I2C_MspInit+0x84>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12b      	bne.n	8001442 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_I2C_MspInit+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <HAL_I2C_MspInit+0x88>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_I2C_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001406:	23c0      	movs	r3, #192	; 0xc0
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140a:	2312      	movs	r3, #18
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140e:	2301      	movs	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001416:	2304      	movs	r3, #4
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <HAL_I2C_MspInit+0x8c>)
 8001422:	f001 f8c3 	bl	80025ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_I2C_MspInit+0x88>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_I2C_MspInit+0x88>)
 8001430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_I2C_MspInit+0x88>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40005400 	.word	0x40005400
 8001450:	40023800 	.word	0x40023800
 8001454:	40020400 	.word	0x40020400

08001458 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a37      	ldr	r2, [pc, #220]	; (8001554 <HAL_SD_MspInit+0xfc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d168      	bne.n	800154c <HAL_SD_MspInit+0xf4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_SD_MspInit+0x100>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a35      	ldr	r2, [pc, #212]	; (8001558 <HAL_SD_MspInit+0x100>)
 8001484:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_SD_MspInit+0x100>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_SD_MspInit+0x100>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <HAL_SD_MspInit+0x100>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <HAL_SD_MspInit+0x100>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_SD_MspInit+0x100>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_SD_MspInit+0x100>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_SD_MspInit+0x100>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_SD_MspInit+0x100>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_SD_MspInit+0x100>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_SD_MspInit+0x100>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80014ea:	2307      	movs	r3, #7
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014fa:	230c      	movs	r3, #12
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4815      	ldr	r0, [pc, #84]	; (800155c <HAL_SD_MspInit+0x104>)
 8001506:	f001 f851 	bl	80025ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800150a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800151c:	230c      	movs	r3, #12
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	480e      	ldr	r0, [pc, #56]	; (8001560 <HAL_SD_MspInit+0x108>)
 8001528:	f001 f840 	bl	80025ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800152c:	2304      	movs	r3, #4
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800153c:	230c      	movs	r3, #12
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4807      	ldr	r0, [pc, #28]	; (8001564 <HAL_SD_MspInit+0x10c>)
 8001548:	f001 f830 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3730      	adds	r7, #48	; 0x30
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40012c00 	.word	0x40012c00
 8001558:	40023800 	.word	0x40023800
 800155c:	40020400 	.word	0x40020400
 8001560:	40020800 	.word	0x40020800
 8001564:	40020c00 	.word	0x40020c00

08001568 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a19      	ldr	r2, [pc, #100]	; (80015ec <HAL_SPI_MspInit+0x84>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d12b      	bne.n	80015e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_SPI_MspInit+0x88>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_SPI_MspInit+0x88>)
 8001594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_SPI_MspInit+0x88>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_SPI_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_SPI_MspInit+0x88>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_SPI_MspInit+0x88>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80015c2:	2328      	movs	r3, #40	; 0x28
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d2:	2305      	movs	r3, #5
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_SPI_MspInit+0x8c>)
 80015de:	f000 ffe5 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40013000 	.word	0x40013000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020400 	.word	0x40020400

080015f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a3d      	ldr	r2, [pc, #244]	; (80016fc <HAL_TIM_Base_MspInit+0x104>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10e      	bne.n	8001628 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a3b      	ldr	r2, [pc, #236]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001626:	e062      	b.n	80016ee <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001630:	d10e      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a31      	ldr	r2, [pc, #196]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	69bb      	ldr	r3, [r7, #24]
}
 800164e:	e04e      	b.n	80016ee <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2b      	ldr	r2, [pc, #172]	; (8001704 <HAL_TIM_Base_MspInit+0x10c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d10e      	bne.n	8001678 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a27      	ldr	r2, [pc, #156]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697b      	ldr	r3, [r7, #20]
}
 8001676:	e03a      	b.n	80016ee <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM4)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_TIM_Base_MspInit+0x110>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10e      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
}
 800169e:	e026      	b.n	80016ee <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM5)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_TIM_Base_MspInit+0x114>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10e      	bne.n	80016c8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
}
 80016c6:	e012      	b.n	80016ee <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM9)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_TIM_Base_MspInit+0x118>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10d      	bne.n	80016ee <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <HAL_TIM_Base_MspInit+0x108>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
}
 80016ee:	bf00      	nop
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40010000 	.word	0x40010000
 8001700:	40023800 	.word	0x40023800
 8001704:	40000400 	.word	0x40000400
 8001708:	40000800 	.word	0x40000800
 800170c:	40000c00 	.word	0x40000c00
 8001710:	40014000 	.word	0x40014000

08001714 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_TIM_Encoder_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12b      	bne.n	800178e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_TIM_Encoder_MspInit+0x88>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_TIM_Encoder_MspInit+0x88>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_TIM_Encoder_MspInit+0x88>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_TIM_Encoder_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_TIM_Encoder_MspInit+0x88>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_TIM_Encoder_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176e:	23c0      	movs	r3, #192	; 0xc0
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800177e:	2303      	movs	r3, #3
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800178a:	f000 ff0f 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40010400 	.word	0x40010400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020800 	.word	0x40020800

080017a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6d      	ldr	r2, [pc, #436]	; (8001978 <HAL_TIM_MspPostInit+0x1d4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d11f      	bne.n	8001806 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
 80017ca:	4b6c      	ldr	r3, [pc, #432]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a6b      	ldr	r2, [pc, #428]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b69      	ldr	r3, [pc, #420]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	623b      	str	r3, [r7, #32]
 80017e0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Z_Pin;
 80017e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM1_CH1_Z_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4860      	ldr	r0, [pc, #384]	; (8001980 <HAL_TIM_MspPostInit+0x1dc>)
 8001800:	f000 fed4 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001804:	e0b4      	b.n	8001970 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180e:	d11f      	bne.n	8001850 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b56      	ldr	r3, [pc, #344]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM2_CH1_X_Pin;
 800182c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800183e:	2301      	movs	r3, #1
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH1_X_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	484e      	ldr	r0, [pc, #312]	; (8001984 <HAL_TIM_MspPostInit+0x1e0>)
 800184a:	f000 feaf 	bl	80025ac <HAL_GPIO_Init>
}
 800184e:	e08f      	b.n	8001970 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a4c      	ldr	r2, [pc, #304]	; (8001988 <HAL_TIM_MspPostInit+0x1e4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d11e      	bne.n	8001898 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a46      	ldr	r2, [pc, #280]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b44      	ldr	r3, [pc, #272]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM3_CH1_ROT_Pin;
 8001876:	2310      	movs	r3, #16
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001886:	2302      	movs	r3, #2
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM3_CH1_ROT_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	4619      	mov	r1, r3
 8001890:	483e      	ldr	r0, [pc, #248]	; (800198c <HAL_TIM_MspPostInit+0x1e8>)
 8001892:	f000 fe8b 	bl	80025ac <HAL_GPIO_Init>
}
 8001896:	e06b      	b.n	8001970 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM4)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3c      	ldr	r2, [pc, #240]	; (8001990 <HAL_TIM_MspPostInit+0x1ec>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d11f      	bne.n	80018e2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	4b35      	ldr	r3, [pc, #212]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a34      	ldr	r2, [pc, #208]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018d0:	2302      	movs	r3, #2
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	482e      	ldr	r0, [pc, #184]	; (8001994 <HAL_TIM_MspPostInit+0x1f0>)
 80018dc:	f000 fe66 	bl	80025ac <HAL_GPIO_Init>
}
 80018e0:	e046      	b.n	8001970 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM5)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a2c      	ldr	r2, [pc, #176]	; (8001998 <HAL_TIM_MspPostInit+0x1f4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d11e      	bne.n	800192a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a21      	ldr	r2, [pc, #132]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_Y_Pin;
 8001908:	2301      	movs	r3, #1
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001918:	2302      	movs	r3, #2
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM5_CH1_Y_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	4818      	ldr	r0, [pc, #96]	; (8001984 <HAL_TIM_MspPostInit+0x1e0>)
 8001924:	f000 fe42 	bl	80025ac <HAL_GPIO_Init>
}
 8001928:	e022      	b.n	8001970 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM9)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1b      	ldr	r2, [pc, #108]	; (800199c <HAL_TIM_MspPostInit+0x1f8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d11d      	bne.n	8001970 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_TIM_MspPostInit+0x1d8>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001950:	2304      	movs	r3, #4
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001960:	2303      	movs	r3, #3
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <HAL_TIM_MspPostInit+0x1e0>)
 800196c:	f000 fe1e 	bl	80025ac <HAL_GPIO_Init>
}
 8001970:	bf00      	nop
 8001972:	3738      	adds	r7, #56	; 0x38
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40010000 	.word	0x40010000
 800197c:	40023800 	.word	0x40023800
 8001980:	40021000 	.word	0x40021000
 8001984:	40020000 	.word	0x40020000
 8001988:	40000400 	.word	0x40000400
 800198c:	40020400 	.word	0x40020400
 8001990:	40000800 	.word	0x40000800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40000c00 	.word	0x40000c00
 800199c:	40014000 	.word	0x40014000

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_UART_MspInit+0x84>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12c      	bne.n	8001a1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_UART_MspInit+0x88>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_UART_MspInit+0x88>)
 80019cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_UART_MspInit+0x88>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_UART_MspInit+0x88>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_UART_MspInit+0x88>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_UART_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a00:	2312      	movs	r3, #18
 8001a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <HAL_UART_MspInit+0x8c>)
 8001a18:	f000 fdc8 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40004c00 	.word	0x40004c00
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020800 	.word	0x40020800

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler+0x4>

08001a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler+0x4>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7c:	f000 f8d4 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <OTG_FS_IRQHandler+0x10>)
 8001a8a:	f001 f9fc 	bl	8002e86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20001f34 	.word	0x20001f34

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac8:	f00a fa28 	bl	800bf1c <__errno>
 8001acc:	4602      	mov	r2, r0
 8001ace:	230c      	movs	r3, #12
 8001ad0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20020000 	.word	0x20020000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	20000214 	.word	0x20000214
 8001b00:	20002340 	.word	0x20002340

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <SystemInit+0x28>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <SystemInit+0x28>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SystemInit+0x28>)
 8001b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b36:	e003      	b.n	8001b40 <LoopCopyDataInit>

08001b38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b3e:	3104      	adds	r1, #4

08001b40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b48:	d3f6      	bcc.n	8001b38 <CopyDataInit>
  ldr  r2, =_sbss
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b4c:	e002      	b.n	8001b54 <LoopFillZerobss>

08001b4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b50:	f842 3b04 	str.w	r3, [r2], #4

08001b54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b58:	d3f9      	bcc.n	8001b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b5a:	f7ff ffd3 	bl	8001b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f00a f9e3 	bl	800bf28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7fe fccf 	bl	8000504 <main>
  bx  lr    
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b6c:	0800c1b0 	.word	0x0800c1b0
  ldr  r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b74:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001b78:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001b7c:	20002340 	.word	0x20002340

08001b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_Init+0x40>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_Init+0x40>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x40>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 fcbb 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fafa 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fcd3 	bl	8002592 <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c04:	f000 fc9b 	bl	800253e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	200005f8 	.word	0x200005f8

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200005f8 	.word	0x200005f8

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_Delay+0x40>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000008 	.word	0x20000008

08001cac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e033      	b.n	8001d2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fa98 	bl	8001200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf2:	f023 0302 	bic.w	r3, r3, #2
 8001cf6:	f043 0202 	orr.w	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f94a 	bl	8001f98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
 8001d1a:	e001      	b.n	8001d20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1c>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e113      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x244>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b09      	cmp	r3, #9
 8001d5e:	d925      	bls.n	8001dac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68d9      	ldr	r1, [r3, #12]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	3b1e      	subs	r3, #30
 8001d76:	2207      	movs	r2, #7
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	400a      	ands	r2, r1
 8001d84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68d9      	ldr	r1, [r3, #12]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	4603      	mov	r3, r0
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4403      	add	r3, r0
 8001d9e:	3b1e      	subs	r3, #30
 8001da0:	409a      	lsls	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	e022      	b.n	8001df2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6919      	ldr	r1, [r3, #16]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	400a      	ands	r2, r1
 8001dce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6919      	ldr	r1, [r3, #16]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4403      	add	r3, r0
 8001de8:	409a      	lsls	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d824      	bhi.n	8001e44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b05      	subs	r3, #5
 8001e0c:	221f      	movs	r2, #31
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	400a      	ands	r2, r1
 8001e1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b05      	subs	r3, #5
 8001e36:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34
 8001e42:	e04c      	b.n	8001ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d824      	bhi.n	8001e96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b23      	subs	r3, #35	; 0x23
 8001e5e:	221f      	movs	r2, #31
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43da      	mvns	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b23      	subs	r3, #35	; 0x23
 8001e88:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
 8001e94:	e023      	b.n	8001ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b41      	subs	r3, #65	; 0x41
 8001ea8:	221f      	movs	r2, #31
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b41      	subs	r3, #65	; 0x41
 8001ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_ADC_ConfigChannel+0x250>)
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <HAL_ADC_ConfigChannel+0x254>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d10f      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1d8>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b12      	cmp	r3, #18
 8001ef2:	d10b      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_ADC_ConfigChannel+0x254>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12b      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x23a>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_ADC_ConfigChannel+0x258>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0x1f4>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b11      	cmp	r3, #17
 8001f26:	d122      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_ADC_ConfigChannel+0x258>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d111      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_ADC_ConfigChannel+0x25c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <HAL_ADC_ConfigChannel+0x260>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9a      	lsrs	r2, r3, #18
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f60:	e002      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40012300 	.word	0x40012300
 8001f88:	40012000 	.word	0x40012000
 8001f8c:	10000012 	.word	0x10000012
 8001f90:	20000000 	.word	0x20000000
 8001f94:	431bde83 	.word	0x431bde83

08001f98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa0:	4b79      	ldr	r3, [pc, #484]	; (8002188 <ADC_Init+0x1f0>)
 8001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	021a      	lsls	r2, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6899      	ldr	r1, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <ADC_Init+0x1f4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800203e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6899      	ldr	r1, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	e00f      	b.n	8002096 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002094:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0202 	bic.w	r2, r2, #2
 80020a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7e1b      	ldrb	r3, [r3, #24]
 80020b0:	005a      	lsls	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6859      	ldr	r1, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	3b01      	subs	r3, #1
 80020f0:	035a      	lsls	r2, r3, #13
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	e007      	b.n	800210c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	3b01      	subs	r3, #1
 8002128:	051a      	lsls	r2, r3, #20
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6899      	ldr	r1, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800214e:	025a      	lsls	r2, r3, #9
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	029a      	lsls	r2, r3, #10
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	609a      	str	r2, [r3, #8]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40012300 	.word	0x40012300
 800218c:	0f000001 	.word	0x0f000001

08002190 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0ed      	b.n	800237e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff f86a 	bl	8001288 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0202 	bic.w	r2, r2, #2
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff fd44 	bl	8001c50 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ca:	e012      	b.n	80021f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021cc:	f7ff fd40 	bl	8001c50 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b0a      	cmp	r3, #10
 80021d8:	d90b      	bls.n	80021f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2205      	movs	r2, #5
 80021ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0c5      	b.n	800237e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e5      	bne.n	80021cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002210:	f7ff fd1e 	bl	8001c50 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002216:	e012      	b.n	800223e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002218:	f7ff fd1a 	bl	8001c50 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b0a      	cmp	r3, #10
 8002224:	d90b      	bls.n	800223e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2205      	movs	r2, #5
 8002236:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e09f      	b.n	800237e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0e5      	beq.n	8002218 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e1b      	ldrb	r3, [r3, #24]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e007      	b.n	8002276 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7e5b      	ldrb	r3, [r3, #25]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e007      	b.n	80022a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e9b      	ldrb	r3, [r3, #26]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e007      	b.n	80022ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0220 	bic.w	r2, r2, #32
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7edb      	ldrb	r3, [r3, #27]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0210 	bic.w	r2, r2, #16
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e007      	b.n	80022f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0210 	orr.w	r2, r2, #16
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7f1b      	ldrb	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e007      	b.n	800231e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0208 	bic.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7f5b      	ldrb	r3, [r3, #29]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0204 	orr.w	r2, r2, #4
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e007      	b.n	8002348 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0204 	bic.w	r2, r2, #4
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	ea42 0103 	orr.w	r1, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	; (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	; (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
         );
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002508:	f7ff ff8e 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff29 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002550:	f7ff ff3e 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff8e 	bl	800247c <NVIC_EncodePriority>
 8002560:	4602      	mov	r2, r0
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff5d 	bl	8002428 <__NVIC_SetPriority>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff31 	bl	80023ec <__NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffa2 	bl	80024e4 <SysTick_Config>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	; 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e165      	b.n	8002894 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	f040 8154 	bne.w	800288e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d00b      	beq.n	8002606 <HAL_GPIO_Init+0x5a>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fa:	2b11      	cmp	r3, #17
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b12      	cmp	r3, #18
 8002604:	d130      	bne.n	8002668 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 0201 	and.w	r2, r3, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0xfc>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b12      	cmp	r3, #18
 80026a6:	d123      	bne.n	80026f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	08da      	lsrs	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3208      	adds	r2, #8
 80026b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	08da      	lsrs	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3208      	adds	r2, #8
 80026ea:	69b9      	ldr	r1, [r7, #24]
 80026ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80ae 	beq.w	800288e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_GPIO_Init+0x2fc>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a5b      	ldr	r2, [pc, #364]	; (80028a8 <HAL_GPIO_Init+0x2fc>)
 800273c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_GPIO_Init+0x2fc>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800274e:	4a57      	ldr	r2, [pc, #348]	; (80028ac <HAL_GPIO_Init+0x300>)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	3302      	adds	r3, #2
 8002756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	220f      	movs	r2, #15
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4e      	ldr	r2, [pc, #312]	; (80028b0 <HAL_GPIO_Init+0x304>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d025      	beq.n	80027c6 <HAL_GPIO_Init+0x21a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4d      	ldr	r2, [pc, #308]	; (80028b4 <HAL_GPIO_Init+0x308>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01f      	beq.n	80027c2 <HAL_GPIO_Init+0x216>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_GPIO_Init+0x30c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d019      	beq.n	80027be <HAL_GPIO_Init+0x212>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <HAL_GPIO_Init+0x310>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0x20e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4a      	ldr	r2, [pc, #296]	; (80028c0 <HAL_GPIO_Init+0x314>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00d      	beq.n	80027b6 <HAL_GPIO_Init+0x20a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a49      	ldr	r2, [pc, #292]	; (80028c4 <HAL_GPIO_Init+0x318>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x206>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a48      	ldr	r2, [pc, #288]	; (80028c8 <HAL_GPIO_Init+0x31c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_GPIO_Init+0x202>
 80027aa:	2306      	movs	r3, #6
 80027ac:	e00c      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027ae:	2307      	movs	r3, #7
 80027b0:	e00a      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027b2:	2305      	movs	r3, #5
 80027b4:	e008      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027b6:	2304      	movs	r3, #4
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e004      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027be:	2302      	movs	r3, #2
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027c6:	2300      	movs	r3, #0
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	f002 0203 	and.w	r2, r2, #3
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	4093      	lsls	r3, r2
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d8:	4934      	ldr	r1, [pc, #208]	; (80028ac <HAL_GPIO_Init+0x300>)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_GPIO_Init+0x320>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280a:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_GPIO_Init+0x320>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002810:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_GPIO_Init+0x320>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002834:	4a25      	ldr	r2, [pc, #148]	; (80028cc <HAL_GPIO_Init+0x320>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_GPIO_Init+0x320>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_GPIO_Init+0x320>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_GPIO_Init+0x320>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002888:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_GPIO_Init+0x320>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3301      	adds	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	f67f ae96 	bls.w	80025c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800289c:	bf00      	nop
 800289e:	3724      	adds	r7, #36	; 0x24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40020400 	.word	0x40020400
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40021400 	.word	0x40021400
 80028c8:	40021800 	.word	0x40021800
 80028cc:	40013c00 	.word	0x40013c00

080028d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	887b      	ldrh	r3, [r7, #2]
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	e001      	b.n	80028f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
 800290c:	4613      	mov	r3, r2
 800290e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800291c:	e003      	b.n	8002926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	619a      	str	r2, [r3, #24]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	401a      	ands	r2, r3
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	429a      	cmp	r2, r3
 800294a:	d104      	bne.n	8002956 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	041a      	lsls	r2, r3, #16
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002954:	e002      	b.n	800295c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e11f      	b.n	8002bba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fd1a 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029cc:	f001 fbc6 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 80029d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a7b      	ldr	r2, [pc, #492]	; (8002bc4 <HAL_I2C_Init+0x25c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d807      	bhi.n	80029ec <HAL_I2C_Init+0x84>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a7a      	ldr	r2, [pc, #488]	; (8002bc8 <HAL_I2C_Init+0x260>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e006      	b.n	80029fa <HAL_I2C_Init+0x92>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a77      	ldr	r2, [pc, #476]	; (8002bcc <HAL_I2C_Init+0x264>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf94      	ite	ls
 80029f4:	2301      	movls	r3, #1
 80029f6:	2300      	movhi	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0db      	b.n	8002bba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a72      	ldr	r2, [pc, #456]	; (8002bd0 <HAL_I2C_Init+0x268>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0c9b      	lsrs	r3, r3, #18
 8002a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a64      	ldr	r2, [pc, #400]	; (8002bc4 <HAL_I2C_Init+0x25c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d802      	bhi.n	8002a3c <HAL_I2C_Init+0xd4>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	e009      	b.n	8002a50 <HAL_I2C_Init+0xe8>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	4a63      	ldr	r2, [pc, #396]	; (8002bd4 <HAL_I2C_Init+0x26c>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	3301      	adds	r3, #1
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4956      	ldr	r1, [pc, #344]	; (8002bc4 <HAL_I2C_Init+0x25c>)
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d80d      	bhi.n	8002a8c <HAL_I2C_Init+0x124>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e59      	subs	r1, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	bf38      	it	cc
 8002a88:	2304      	movcc	r3, #4
 8002a8a:	e04f      	b.n	8002b2c <HAL_I2C_Init+0x1c4>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d111      	bne.n	8002ab8 <HAL_I2C_Init+0x150>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e012      	b.n	8002ade <HAL_I2C_Init+0x176>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e58      	subs	r0, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	0099      	lsls	r1, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Init+0x17e>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e022      	b.n	8002b2c <HAL_I2C_Init+0x1c4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10e      	bne.n	8002b0c <HAL_I2C_Init+0x1a4>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1e58      	subs	r0, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6859      	ldr	r1, [r3, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	440b      	add	r3, r1
 8002afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0a:	e00f      	b.n	8002b2c <HAL_I2C_Init+0x1c4>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e58      	subs	r0, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	0099      	lsls	r1, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	6809      	ldr	r1, [r1, #0]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6911      	ldr	r1, [r2, #16]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68d2      	ldr	r2, [r2, #12]
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	000186a0 	.word	0x000186a0
 8002bc8:	001e847f 	.word	0x001e847f
 8002bcc:	003d08ff 	.word	0x003d08ff
 8002bd0:	431bde83 	.word	0x431bde83
 8002bd4:	10624dd3 	.word	0x10624dd3

08002bd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bda:	b08f      	sub	sp, #60	; 0x3c
 8002bdc:	af0a      	add	r7, sp, #40	; 0x28
 8002bde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e116      	b.n	8002e18 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d106      	bne.n	8002c0a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f008 fe3f 	bl	800b888 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f005 fc32 	bl	8008492 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	687e      	ldr	r6, [r7, #4]
 8002c36:	466d      	mov	r5, sp
 8002c38:	f106 0410 	add.w	r4, r6, #16
 8002c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c48:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c4c:	1d33      	adds	r3, r6, #4
 8002c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c50:	6838      	ldr	r0, [r7, #0]
 8002c52:	f005 fb09 	bl	8008268 <USB_CoreInit>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0d7      	b.n	8002e18 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f005 fc20 	bl	80084b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]
 8002c78:	e04a      	b.n	8002d10 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	333d      	adds	r3, #61	; 0x3d
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	333c      	adds	r3, #60	; 0x3c
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	b298      	uxth	r0, r3
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3342      	adds	r3, #66	; 0x42
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	333f      	adds	r3, #63	; 0x3f
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3344      	adds	r3, #68	; 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ce2:	7bfa      	ldrb	r2, [r7, #15]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3348      	adds	r3, #72	; 0x48
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3350      	adds	r3, #80	; 0x50
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3af      	bcc.n	8002c7a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	e044      	b.n	8002daa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	3301      	adds	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3b5      	bcc.n	8002d20 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	687e      	ldr	r6, [r7, #4]
 8002dbc:	466d      	mov	r5, sp
 8002dbe:	f106 0410 	add.w	r4, r6, #16
 8002dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dd2:	1d33      	adds	r3, r6, #4
 8002dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dd6:	6838      	ldr	r0, [r7, #0]
 8002dd8:	f005 fb96 	bl	8008508 <USB_DevInit>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e014      	b.n	8002e18 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f001 f892 	bl	8003f30 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f006 fbd1 	bl	80095b8 <USB_DevDisconnect>

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_PCD_Start+0x1c>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e020      	b.n	8002e7e <HAL_PCD_Start+0x5e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d109      	bne.n	8002e60 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d005      	beq.n	8002e60 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f005 fb03 	bl	8008470 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f006 fb81 	bl	8009576 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e86:	b590      	push	{r4, r7, lr}
 8002e88:	b08d      	sub	sp, #52	; 0x34
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f006 fc3f 	bl	8009720 <USB_GetMode>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 83ca 	bne.w	800363e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f006 fba3 	bl	80095fa <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 83c0 	beq.w	800363c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f006 fb9a 	bl	80095fa <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d107      	bne.n	8002ee0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f002 0202 	and.w	r2, r2, #2
 8002ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f006 fb88 	bl	80095fa <USB_ReadInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d161      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0210 	bic.w	r2, r2, #16
 8002f02:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f003 020f 	and.w	r2, r3, #15
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	0c5b      	lsrs	r3, r3, #17
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d124      	bne.n	8002f7a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d035      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6a38      	ldr	r0, [r7, #32]
 8002f50:	f006 f9ee 	bl	8009330 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f60:	441a      	add	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f72:	441a      	add	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	619a      	str	r2, [r3, #24]
 8002f78:	e016      	b.n	8002fa8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	0c5b      	lsrs	r3, r3, #17
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d110      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6a38      	ldr	r0, [r7, #32]
 8002f92:	f006 f9cd 	bl	8009330 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa2:	441a      	add	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0210 	orr.w	r2, r2, #16
 8002fb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f006 fb1c 	bl	80095fa <USB_ReadInterrupts>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fcc:	d16e      	bne.n	80030ac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f006 fb22 	bl	8009620 <USB_ReadDevAllOutEpInterrupt>
 8002fdc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fde:	e062      	b.n	80030a6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d057      	beq.n	800309a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f006 fb47 	bl	8009688 <USB_ReadDevOutEPInterrupt>
 8002ffa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	461a      	mov	r2, r3
 8003014:	2301      	movs	r3, #1
 8003016:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fdde 	bl	8003bdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	461a      	mov	r2, r3
 8003038:	2308      	movs	r3, #8
 800303a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800303c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fed8 	bl	8003df4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305a:	461a      	mov	r2, r3
 800305c:	2310      	movs	r3, #16
 800305e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003076:	461a      	mov	r2, r3
 8003078:	2320      	movs	r3, #32
 800307a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003092:	461a      	mov	r2, r3
 8003094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003098:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	3301      	adds	r3, #1
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d199      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f006 faa2 	bl	80095fa <USB_ReadInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030c0:	f040 80c0 	bne.w	8003244 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f006 fac3 	bl	8009654 <USB_ReadDevAllInEpInterrupt>
 80030ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030d4:	e0b2      	b.n	800323c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80a7 	beq.w	8003230 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f006 fae9 	bl	80096c4 <USB_ReadDevInEPInterrupt>
 80030f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d057      	beq.n	80031ae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	2201      	movs	r2, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	43db      	mvns	r3, r3
 8003118:	69f9      	ldr	r1, [r7, #28]
 800311a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800311e:	4013      	ands	r3, r2
 8003120:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312e:	461a      	mov	r2, r3
 8003130:	2301      	movs	r3, #1
 8003132:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d132      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3348      	adds	r3, #72	; 0x48
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4403      	add	r3, r0
 800315c:	3344      	adds	r3, #68	; 0x44
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4419      	add	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4403      	add	r3, r0
 8003170:	3348      	adds	r3, #72	; 0x48
 8003172:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	2b00      	cmp	r3, #0
 8003178:	d113      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x31c>
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3350      	adds	r3, #80	; 0x50
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d108      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800319a:	461a      	mov	r2, r3
 800319c:	2101      	movs	r1, #1
 800319e:	f006 faf1 	bl	8009784 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f008 fbee 	bl	800b98a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c4:	461a      	mov	r2, r3
 80031c6:	2308      	movs	r3, #8
 80031c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e0:	461a      	mov	r2, r3
 80031e2:	2310      	movs	r3, #16
 80031e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fc:	461a      	mov	r2, r3
 80031fe:	2340      	movs	r3, #64	; 0x40
 8003200:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	461a      	mov	r2, r3
 800321a:	2302      	movs	r3, #2
 800321c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fc48 	bl	8003ac0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	3301      	adds	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	2b00      	cmp	r3, #0
 8003240:	f47f af49 	bne.w	80030d6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f006 f9d6 	bl	80095fa <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003258:	d122      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003274:	2b01      	cmp	r3, #1
 8003276:	d108      	bne.n	800328a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003280:	2100      	movs	r1, #0
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f008 fdd0 	bl	800be28 <HAL_PCDEx_LPM_Callback>
 8003288:	e002      	b.n	8003290 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f008 fbf4 	bl	800ba78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800329e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f006 f9a8 	bl	80095fa <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b4:	d112      	bne.n	80032dc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f008 fbb0 	bl	800ba2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032da:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f006 f98a 	bl	80095fa <USB_ReadInterrupts>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f0:	d121      	bne.n	8003336 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003300:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d111      	bne.n	8003330 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003326:	2101      	movs	r1, #1
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f008 fd7d 	bl	800be28 <HAL_PCDEx_LPM_Callback>
 800332e:	e002      	b.n	8003336 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f008 fb7b 	bl	800ba2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f006 f95d 	bl	80095fa <USB_ReadInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	f040 80c7 	bne.w	80034dc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2110      	movs	r1, #16
 8003368:	4618      	mov	r0, r3
 800336a:	f005 fa2b 	bl	80087c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336e:	2300      	movs	r3, #0
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003372:	e056      	b.n	8003422 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003380:	461a      	mov	r2, r3
 8003382:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003386:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003398:	0151      	lsls	r1, r2, #5
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	440a      	add	r2, r1
 800339e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b8:	0151      	lsls	r1, r2, #5
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	440a      	add	r2, r1
 80033be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d4:	461a      	mov	r2, r3
 80033d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	440a      	add	r2, r1
 8003412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003416:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800341a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	3301      	adds	r3, #1
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003428:	429a      	cmp	r2, r3
 800342a:	d3a3      	bcc.n	8003374 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800343a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800343e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003458:	f043 030b 	orr.w	r3, r3, #11
 800345c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346e:	f043 030b 	orr.w	r3, r3, #11
 8003472:	6453      	str	r3, [r2, #68]	; 0x44
 8003474:	e015      	b.n	80034a2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003488:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800348c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349c:	f043 030b 	orr.w	r3, r3, #11
 80034a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034c6:	461a      	mov	r2, r3
 80034c8:	f006 f95c 	bl	8009784 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f006 f88a 	bl	80095fa <USB_ReadInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f0:	d124      	bne.n	800353c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f006 f920 	bl	800973c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f005 f9c0 	bl	8008886 <USB_GetDevSpeed>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681c      	ldr	r4, [r3, #0]
 8003512:	f000 fe17 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8003516:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	4620      	mov	r0, r4
 8003522:	f004 ff03 	bl	800832c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f008 fa57 	bl	800b9da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800353a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f006 f85a 	bl	80095fa <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d10a      	bne.n	8003566 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f008 fa34 	bl	800b9be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f002 0208 	and.w	r2, r2, #8
 8003564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f006 f845 	bl	80095fa <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357a:	d10f      	bne.n	800359c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	b2db      	uxtb	r3, r3
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f008 fa96 	bl	800bab8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800359a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f006 f82a 	bl	80095fa <USB_ReadInterrupts>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b0:	d10f      	bne.n	80035d2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f008 fa69 	bl	800ba94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f006 f80f 	bl	80095fa <USB_ReadInterrupts>
 80035dc:	4603      	mov	r3, r0
 80035de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d10a      	bne.n	80035fe <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f008 fa77 	bl	800badc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f005 fff9 	bl	80095fa <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b04      	cmp	r3, #4
 8003610:	d115      	bne.n	800363e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f008 fa67 	bl	800baf8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	e000      	b.n	800363e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800363c:	bf00      	nop
    }
  }
}
 800363e:	3734      	adds	r7, #52	; 0x34
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}

08003644 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_PCD_SetAddress+0x1a>
 800365a:	2302      	movs	r3, #2
 800365c:	e013      	b.n	8003686 <HAL_PCD_SetAddress+0x42>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f005 ff57 	bl	800952a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	4608      	mov	r0, r1
 8003698:	4611      	mov	r1, r2
 800369a:	461a      	mov	r2, r3
 800369c:	4603      	mov	r3, r0
 800369e:	70fb      	strb	r3, [r7, #3]
 80036a0:	460b      	mov	r3, r1
 80036a2:	803b      	strh	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	da0f      	bge.n	80036d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	f003 020f 	and.w	r2, r3, #15
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	3338      	adds	r3, #56	; 0x38
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	705a      	strb	r2, [r3, #1]
 80036d2:	e00f      	b.n	80036f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	f003 020f 	and.w	r2, r3, #15
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	3304      	adds	r3, #4
 80036ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003700:	883a      	ldrh	r2, [r7, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	78ba      	ldrb	r2, [r7, #2]
 800370a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800371e:	78bb      	ldrb	r3, [r7, #2]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d102      	bne.n	800372a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_PCD_EP_Open+0xaa>
 8003734:	2302      	movs	r3, #2
 8003736:	e00e      	b.n	8003756 <HAL_PCD_EP_Open+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	4618      	mov	r0, r3
 8003748:	f005 f8c2 	bl	80088d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003754:	7afb      	ldrb	r3, [r7, #11]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800376a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da0f      	bge.n	8003792 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	3338      	adds	r3, #56	; 0x38
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	3304      	adds	r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	705a      	strb	r2, [r3, #1]
 8003790:	e00f      	b.n	80037b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	3304      	adds	r3, #4
 80037aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_PCD_EP_Close+0x6e>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e00e      	b.n	80037ea <HAL_PCD_EP_Close+0x8c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	4618      	mov	r0, r3
 80037dc:	f005 f900 	bl	80089e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	460b      	mov	r3, r1
 8003800:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2200      	movs	r2, #0
 800382c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003834:	7afb      	ldrb	r3, [r7, #11]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	b2da      	uxtb	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d102      	bne.n	800384e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800384e:	7afb      	ldrb	r3, [r7, #11]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	6979      	ldr	r1, [r7, #20]
 8003866:	f005 fbdb 	bl	8009020 <USB_EP0StartXfer>
 800386a:	e008      	b.n	800387e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	6979      	ldr	r1, [r7, #20]
 800387a:	f005 f98d 	bl	8008b98 <USB_EPStartXfer>
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 020f 	and.w	r2, r3, #15
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	460b      	mov	r3, r1
 80038c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c8:	7afb      	ldrb	r3, [r7, #11]
 80038ca:	f003 020f 	and.w	r2, r3, #15
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	3338      	adds	r3, #56	; 0x38
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	3304      	adds	r3, #4
 80038de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2201      	movs	r2, #1
 80038f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f8:	7afb      	ldrb	r3, [r7, #11]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d102      	bne.n	8003912 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	6979      	ldr	r1, [r7, #20]
 800392a:	f005 fb79 	bl	8009020 <USB_EP0StartXfer>
 800392e:	e008      	b.n	8003942 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	f005 f92b 	bl	8008b98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	f003 020f 	and.w	r2, r3, #15
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d901      	bls.n	800396a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e050      	b.n	8003a0c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800396a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396e:	2b00      	cmp	r3, #0
 8003970:	da0f      	bge.n	8003992 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	f003 020f 	and.w	r2, r3, #15
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	3338      	adds	r3, #56	; 0x38
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	3304      	adds	r3, #4
 8003988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	705a      	strb	r2, [r3, #1]
 8003990:	e00d      	b.n	80039ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	3304      	adds	r3, #4
 80039a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_PCD_EP_SetStall+0x82>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e01e      	b.n	8003a0c <HAL_PCD_EP_SetStall+0xc0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	4618      	mov	r0, r3
 80039de:	f005 fcd0 	bl	8009382 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	b2d9      	uxtb	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039fc:	461a      	mov	r2, r3
 80039fe:	f005 fec1 	bl	8009784 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	f003 020f 	and.w	r2, r3, #15
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d901      	bls.n	8003a32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e042      	b.n	8003ab8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	da0f      	bge.n	8003a5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 020f 	and.w	r2, r3, #15
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	3338      	adds	r3, #56	; 0x38
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3304      	adds	r3, #4
 8003a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	705a      	strb	r2, [r3, #1]
 8003a58:	e00f      	b.n	8003a7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	f003 020f 	and.w	r2, r3, #15
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	3304      	adds	r3, #4
 8003a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_PCD_EP_ClrStall+0x86>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e00e      	b.n	8003ab8 <HAL_PCD_EP_ClrStall+0xa4>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f005 fcd8 	bl	800945e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	3338      	adds	r3, #56	; 0x38
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d901      	bls.n	8003af8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e06c      	b.n	8003bd2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d902      	bls.n	8003b14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	3303      	adds	r3, #3
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b1c:	e02b      	b.n	8003b76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d902      	bls.n	8003b3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3303      	adds	r3, #3
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68d9      	ldr	r1, [r3, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	4603      	mov	r3, r0
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f005 fbb4 	bl	80092c6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	441a      	add	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	441a      	add	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d809      	bhi.n	8003ba0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d203      	bcs.n	8003ba0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1be      	bne.n	8003b1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d811      	bhi.n	8003bd0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	6939      	ldr	r1, [r7, #16]
 8003bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bcc:	4013      	ands	r3, r2
 8003bce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	333c      	adds	r3, #60	; 0x3c
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	f040 80a0 	bne.w	8003d54 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d015      	beq.n	8003c4a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a72      	ldr	r2, [pc, #456]	; (8003dec <PCD_EP_OutXfrComplete_int+0x210>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	f240 80dd 	bls.w	8003de2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80d7 	beq.w	8003de2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	461a      	mov	r2, r3
 8003c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c46:	6093      	str	r3, [r2, #8]
 8003c48:	e0cb      	b.n	8003de2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c60:	461a      	mov	r2, r3
 8003c62:	2320      	movs	r3, #32
 8003c64:	6093      	str	r3, [r2, #8]
 8003c66:	e0bc      	b.n	8003de2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 80b7 	bne.w	8003de2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a5d      	ldr	r2, [pc, #372]	; (8003dec <PCD_EP_OutXfrComplete_int+0x210>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d90f      	bls.n	8003c9c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	461a      	mov	r2, r3
 8003c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c98:	6093      	str	r3, [r2, #8]
 8003c9a:	e0a2      	b.n	8003de2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003cc2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4403      	add	r3, r0
 8003cd2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cd6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4403      	add	r3, r0
 8003cfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4419      	add	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4403      	add	r3, r0
 8003d10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d14:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d114      	bne.n	8003d46 <PCD_EP_OutXfrComplete_int+0x16a>
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d108      	bne.n	8003d46 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2101      	movs	r1, #1
 8003d42:	f005 fd1f 	bl	8009784 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f007 fe01 	bl	800b954 <HAL_PCD_DataOutStageCallback>
 8003d52:	e046      	b.n	8003de2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d124      	bne.n	8003da6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d72:	461a      	mov	r2, r3
 8003d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d78:	6093      	str	r3, [r2, #8]
 8003d7a:	e032      	b.n	8003de2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d92:	461a      	mov	r2, r3
 8003d94:	2320      	movs	r3, #32
 8003d96:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f007 fdd8 	bl	800b954 <HAL_PCD_DataOutStageCallback>
 8003da4:	e01d      	b.n	8003de2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d114      	bne.n	8003dd6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d108      	bne.n	8003dd6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	f005 fcd7 	bl	8009784 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f007 fdb9 	bl	800b954 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	4f54300a 	.word	0x4f54300a
 8003df0:	4f54310a 	.word	0x4f54310a

08003df4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	333c      	adds	r3, #60	; 0x3c
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d90e      	bls.n	8003e48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	461a      	mov	r2, r3
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f007 fd71 	bl	800b930 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d90c      	bls.n	8003e70 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d108      	bne.n	8003e70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	f005 fc8a 	bl	8009784 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	4f54300a 	.word	0x4f54300a

08003e80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d107      	bne.n	8003eae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e9e:	883b      	ldrh	r3, [r7, #0]
 8003ea0:	0419      	lsls	r1, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8003eac:	e028      	b.n	8003f00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	e00d      	b.n	8003ede <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	3340      	adds	r3, #64	; 0x40
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	3301      	adds	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d3ec      	bcc.n	8003ec2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ee8:	883b      	ldrh	r3, [r7, #0]
 8003eea:	0418      	lsls	r0, r3, #16
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	4302      	orrs	r2, r0
 8003ef8:	3340      	adds	r3, #64	; 0x40
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	887a      	ldrh	r2, [r7, #2]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f62:	f043 0303 	orr.w	r3, r3, #3
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cc      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90c      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d044      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e067      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4934      	ldr	r1, [pc, #208]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fd fdf2 	bl	8001c50 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fd fdee 	bl	8001c50 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d20c      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 fb7f 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8004102:	4601      	mov	r1, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	5cd3      	ldrb	r3, [r2, r3]
 8004112:	fa21 f303 	lsr.w	r3, r1, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd fd52 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	0800c174 	.word	0x0800c174
 800413c:	20000000 	.word	0x20000000
 8004140:	20000004 	.word	0x20000004

08004144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_RCC_GetHCLKFreq+0x14>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000000 	.word	0x20000000

0800415c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004160:	f7ff fff0 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8004164:	4601      	mov	r1, r0
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	0a9b      	lsrs	r3, r3, #10
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4a03      	ldr	r2, [pc, #12]	; (8004180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004172:	5cd3      	ldrb	r3, [r2, r3]
 8004174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40023800 	.word	0x40023800
 8004180:	0800c184 	.word	0x0800c184

08004184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004188:	f7ff ffdc 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 800418c:	4601      	mov	r1, r0
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0b5b      	lsrs	r3, r3, #13
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4a03      	ldr	r2, [pc, #12]	; (80041a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40023800 	.word	0x40023800
 80041a8:	0800c184 	.word	0x0800c184

080041ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d010      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80041e4:	4b6f      	ldr	r3, [pc, #444]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	496c      	ldr	r1, [pc, #432]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004202:	2301      	movs	r3, #1
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d010      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004212:	4b64      	ldr	r3, [pc, #400]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004218:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	4960      	ldr	r1, [pc, #384]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004230:	2301      	movs	r3, #1
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d017      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004240:	4b58      	ldr	r3, [pc, #352]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4955      	ldr	r1, [pc, #340]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425e:	d101      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004260:	2301      	movs	r3, #1
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800426c:	2301      	movs	r3, #1
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d017      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800427c:	4b49      	ldr	r3, [pc, #292]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800427e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	4946      	ldr	r1, [pc, #280]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429a:	d101      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800429c:	2301      	movs	r3, #1
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 808a 	beq.w	80043ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ca:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042d6:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042e2:	f7fd fcb5 	bl	8001c50 <HAL_GetTick>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fd fcb1 	bl	8001c50 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e278      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042fc:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004308:	4b26      	ldr	r3, [pc, #152]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d02f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	429a      	cmp	r2, r3
 8004324:	d028      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004326:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800433c:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004342:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d114      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800434e:	f7fd fc7f 	bl	8001c50 <HAL_GetTick>
 8004352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fd fc7b 	bl	8001c50 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e240      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004384:	d114      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	4902      	ldr	r1, [pc, #8]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
 80043a0:	e00c      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40007000 	.word	0x40007000
 80043ac:	42470e40 	.word	0x42470e40
 80043b0:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a49      	ldr	r2, [pc, #292]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043ba:	6093      	str	r3, [r2, #8]
 80043bc:	4b47      	ldr	r3, [pc, #284]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	4944      	ldr	r1, [pc, #272]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80043e0:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80043e2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80043f0:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	4937      	ldr	r1, [pc, #220]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004412:	4b32      	ldr	r3, [pc, #200]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004418:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004420:	492e      	ldr	r1, [pc, #184]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d011      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	4926      	ldr	r1, [pc, #152]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004452:	d101      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004454:	2301      	movs	r3, #1
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	491a      	ldr	r1, [pc, #104]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004482:	2b00      	cmp	r3, #0
 8004484:	d011      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004494:	4911      	ldr	r1, [pc, #68]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a4:	d101      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80044a6:	2301      	movs	r3, #1
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d005      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b8:	f040 80ff 	bne.w	80046ba <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044c2:	f7fd fbc5 	bl	8001c50 <HAL_GetTick>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044c8:	e00e      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044ca:	f7fd fbc1 	bl	8001c50 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d907      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e188      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80044dc:	40023800 	.word	0x40023800
 80044e0:	424711e0 	.word	0x424711e0
 80044e4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e8:	4b7e      	ldr	r3, [pc, #504]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1ea      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004510:	2b00      	cmp	r3, #0
 8004512:	d028      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d124      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800451c:	4b71      	ldr	r3, [pc, #452]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800451e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004522:	0c1b      	lsrs	r3, r3, #16
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	3301      	adds	r3, #1
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800452e:	4b6d      	ldr	r3, [pc, #436]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004534:	0e1b      	lsrs	r3, r3, #24
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	431a      	orrs	r2, r3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	3b01      	subs	r3, #1
 800454e:	041b      	lsls	r3, r3, #16
 8004550:	431a      	orrs	r2, r3
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	071b      	lsls	r3, r3, #28
 800455e:	4961      	ldr	r1, [pc, #388]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004584:	2b00      	cmp	r3, #0
 8004586:	d035      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004590:	d130      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004592:	4b54      	ldr	r3, [pc, #336]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	3301      	adds	r3, #1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045a4:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045aa:	0f1b      	lsrs	r3, r3, #28
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	019b      	lsls	r3, r3, #6
 80045bc:	431a      	orrs	r2, r3
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	431a      	orrs	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	071b      	lsls	r3, r3, #28
 80045d4:	4943      	ldr	r1, [pc, #268]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045dc:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e2:	f023 021f 	bic.w	r2, r3, #31
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	493d      	ldr	r1, [pc, #244]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d029      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004608:	d124      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800460a:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800460c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800461c:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	0f1b      	lsrs	r3, r3, #28
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	019b      	lsls	r3, r3, #6
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	3b01      	subs	r3, #1
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	431a      	orrs	r2, r3
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	431a      	orrs	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	071b      	lsls	r3, r3, #28
 800464c:	4925      	ldr	r1, [pc, #148]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d016      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	3b01      	subs	r3, #1
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	071b      	lsls	r3, r3, #28
 8004686:	4917      	ldr	r1, [pc, #92]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800468e:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004694:	f7fd fadc 	bl	8001c50 <HAL_GetTick>
 8004698:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800469c:	f7fd fad8 	bl	8001c50 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e09f      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	2b01      	cmp	r3, #1
 80046be:	f040 8095 	bne.w	80047ec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046c8:	f7fd fac2 	bl	8001c50 <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046ce:	e00f      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80046d0:	f7fd fabe 	bl	8001c50 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d908      	bls.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e085      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800
 80046e8:	42470068 	.word	0x42470068
 80046ec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046fc:	d0e8      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800471a:	2b00      	cmp	r3, #0
 800471c:	d02b      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	2b00      	cmp	r3, #0
 8004724:	d127      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004726:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	3301      	adds	r3, #1
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	019b      	lsls	r3, r3, #6
 8004742:	431a      	orrs	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	4928      	ldr	r1, [pc, #160]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800475c:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800475e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004762:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	3b01      	subs	r3, #1
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	4922      	ldr	r1, [pc, #136]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01d      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478a:	d118      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	0e1b      	lsrs	r3, r3, #24
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	019b      	lsls	r3, r3, #6
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	3b01      	subs	r3, #1
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	4910      	ldr	r1, [pc, #64]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047c4:	f7fd fa44 	bl	8001c50 <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80047cc:	f7fd fa40 	bl	8001c50 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e007      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ea:	d1ef      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3730      	adds	r7, #48	; 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40023800 	.word	0x40023800
 80047fc:	42470070 	.word	0x42470070

08004800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800481a:	4bc6      	ldr	r3, [pc, #792]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b0c      	cmp	r3, #12
 8004824:	f200 817e 	bhi.w	8004b24 <HAL_RCC_GetSysClockFreq+0x324>
 8004828:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <HAL_RCC_GetSysClockFreq+0x30>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004865 	.word	0x08004865
 8004834:	08004b25 	.word	0x08004b25
 8004838:	08004b25 	.word	0x08004b25
 800483c:	08004b25 	.word	0x08004b25
 8004840:	0800486b 	.word	0x0800486b
 8004844:	08004b25 	.word	0x08004b25
 8004848:	08004b25 	.word	0x08004b25
 800484c:	08004b25 	.word	0x08004b25
 8004850:	08004871 	.word	0x08004871
 8004854:	08004b25 	.word	0x08004b25
 8004858:	08004b25 	.word	0x08004b25
 800485c:	08004b25 	.word	0x08004b25
 8004860:	080049cd 	.word	0x080049cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4bb4      	ldr	r3, [pc, #720]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x338>)
 8004866:	613b      	str	r3, [r7, #16]
       break;
 8004868:	e15f      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800486a:	4bb4      	ldr	r3, [pc, #720]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x33c>)
 800486c:	613b      	str	r3, [r7, #16]
      break;
 800486e:	e15c      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004870:	4bb0      	ldr	r3, [pc, #704]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004878:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800487a:	4bae      	ldr	r3, [pc, #696]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d04a      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004886:	4bab      	ldr	r3, [pc, #684]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	f04f 0400 	mov.w	r4, #0
 8004890:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	ea03 0501 	and.w	r5, r3, r1
 800489c:	ea04 0602 	and.w	r6, r4, r2
 80048a0:	4629      	mov	r1, r5
 80048a2:	4632      	mov	r2, r6
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	f04f 0400 	mov.w	r4, #0
 80048ac:	0154      	lsls	r4, r2, #5
 80048ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048b2:	014b      	lsls	r3, r1, #5
 80048b4:	4619      	mov	r1, r3
 80048b6:	4622      	mov	r2, r4
 80048b8:	1b49      	subs	r1, r1, r5
 80048ba:	eb62 0206 	sbc.w	r2, r2, r6
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	f04f 0400 	mov.w	r4, #0
 80048c6:	0194      	lsls	r4, r2, #6
 80048c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048cc:	018b      	lsls	r3, r1, #6
 80048ce:	1a5b      	subs	r3, r3, r1
 80048d0:	eb64 0402 	sbc.w	r4, r4, r2
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	00e2      	lsls	r2, r4, #3
 80048de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048e2:	00d9      	lsls	r1, r3, #3
 80048e4:	460b      	mov	r3, r1
 80048e6:	4614      	mov	r4, r2
 80048e8:	195b      	adds	r3, r3, r5
 80048ea:	eb44 0406 	adc.w	r4, r4, r6
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	0262      	lsls	r2, r4, #9
 80048f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80048fc:	0259      	lsls	r1, r3, #9
 80048fe:	460b      	mov	r3, r1
 8004900:	4614      	mov	r4, r2
 8004902:	4618      	mov	r0, r3
 8004904:	4621      	mov	r1, r4
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f04f 0400 	mov.w	r4, #0
 800490c:	461a      	mov	r2, r3
 800490e:	4623      	mov	r3, r4
 8004910:	f7fb fc78 	bl	8000204 <__aeabi_uldivmod>
 8004914:	4603      	mov	r3, r0
 8004916:	460c      	mov	r4, r1
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e049      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491c:	4b85      	ldr	r3, [pc, #532]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	f04f 0400 	mov.w	r4, #0
 8004926:	f240 11ff 	movw	r1, #511	; 0x1ff
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	ea03 0501 	and.w	r5, r3, r1
 8004932:	ea04 0602 	and.w	r6, r4, r2
 8004936:	4629      	mov	r1, r5
 8004938:	4632      	mov	r2, r6
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	0154      	lsls	r4, r2, #5
 8004944:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004948:	014b      	lsls	r3, r1, #5
 800494a:	4619      	mov	r1, r3
 800494c:	4622      	mov	r2, r4
 800494e:	1b49      	subs	r1, r1, r5
 8004950:	eb62 0206 	sbc.w	r2, r2, r6
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	f04f 0400 	mov.w	r4, #0
 800495c:	0194      	lsls	r4, r2, #6
 800495e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004962:	018b      	lsls	r3, r1, #6
 8004964:	1a5b      	subs	r3, r3, r1
 8004966:	eb64 0402 	sbc.w	r4, r4, r2
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	00e2      	lsls	r2, r4, #3
 8004974:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004978:	00d9      	lsls	r1, r3, #3
 800497a:	460b      	mov	r3, r1
 800497c:	4614      	mov	r4, r2
 800497e:	195b      	adds	r3, r3, r5
 8004980:	eb44 0406 	adc.w	r4, r4, r6
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	02a2      	lsls	r2, r4, #10
 800498e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004992:	0299      	lsls	r1, r3, #10
 8004994:	460b      	mov	r3, r1
 8004996:	4614      	mov	r4, r2
 8004998:	4618      	mov	r0, r3
 800499a:	4621      	mov	r1, r4
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f04f 0400 	mov.w	r4, #0
 80049a2:	461a      	mov	r2, r3
 80049a4:	4623      	mov	r3, r4
 80049a6:	f7fb fc2d 	bl	8000204 <__aeabi_uldivmod>
 80049aa:	4603      	mov	r3, r0
 80049ac:	460c      	mov	r4, r1
 80049ae:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b0:	4b60      	ldr	r3, [pc, #384]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	3301      	adds	r3, #1
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	613b      	str	r3, [r7, #16]
      break;
 80049ca:	e0ae      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049cc:	4b59      	ldr	r3, [pc, #356]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d6:	4b57      	ldr	r3, [pc, #348]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d04a      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b54      	ldr	r3, [pc, #336]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	f04f 0400 	mov.w	r4, #0
 80049ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	ea03 0501 	and.w	r5, r3, r1
 80049f8:	ea04 0602 	and.w	r6, r4, r2
 80049fc:	4629      	mov	r1, r5
 80049fe:	4632      	mov	r2, r6
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	f04f 0400 	mov.w	r4, #0
 8004a08:	0154      	lsls	r4, r2, #5
 8004a0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a0e:	014b      	lsls	r3, r1, #5
 8004a10:	4619      	mov	r1, r3
 8004a12:	4622      	mov	r2, r4
 8004a14:	1b49      	subs	r1, r1, r5
 8004a16:	eb62 0206 	sbc.w	r2, r2, r6
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	f04f 0400 	mov.w	r4, #0
 8004a22:	0194      	lsls	r4, r2, #6
 8004a24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a28:	018b      	lsls	r3, r1, #6
 8004a2a:	1a5b      	subs	r3, r3, r1
 8004a2c:	eb64 0402 	sbc.w	r4, r4, r2
 8004a30:	f04f 0100 	mov.w	r1, #0
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	00e2      	lsls	r2, r4, #3
 8004a3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a3e:	00d9      	lsls	r1, r3, #3
 8004a40:	460b      	mov	r3, r1
 8004a42:	4614      	mov	r4, r2
 8004a44:	195b      	adds	r3, r3, r5
 8004a46:	eb44 0406 	adc.w	r4, r4, r6
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	0262      	lsls	r2, r4, #9
 8004a54:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a58:	0259      	lsls	r1, r3, #9
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	4621      	mov	r1, r4
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f04f 0400 	mov.w	r4, #0
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	f7fb fbca 	bl	8000204 <__aeabi_uldivmod>
 8004a70:	4603      	mov	r3, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e049      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a78:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	099b      	lsrs	r3, r3, #6
 8004a7e:	f04f 0400 	mov.w	r4, #0
 8004a82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	ea03 0501 	and.w	r5, r3, r1
 8004a8e:	ea04 0602 	and.w	r6, r4, r2
 8004a92:	4629      	mov	r1, r5
 8004a94:	4632      	mov	r2, r6
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	f04f 0400 	mov.w	r4, #0
 8004a9e:	0154      	lsls	r4, r2, #5
 8004aa0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aa4:	014b      	lsls	r3, r1, #5
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4622      	mov	r2, r4
 8004aaa:	1b49      	subs	r1, r1, r5
 8004aac:	eb62 0206 	sbc.w	r2, r2, r6
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	f04f 0400 	mov.w	r4, #0
 8004ab8:	0194      	lsls	r4, r2, #6
 8004aba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004abe:	018b      	lsls	r3, r1, #6
 8004ac0:	1a5b      	subs	r3, r3, r1
 8004ac2:	eb64 0402 	sbc.w	r4, r4, r2
 8004ac6:	f04f 0100 	mov.w	r1, #0
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	00e2      	lsls	r2, r4, #3
 8004ad0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ad4:	00d9      	lsls	r1, r3, #3
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4614      	mov	r4, r2
 8004ada:	195b      	adds	r3, r3, r5
 8004adc:	eb44 0406 	adc.w	r4, r4, r6
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	02a2      	lsls	r2, r4, #10
 8004aea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004aee:	0299      	lsls	r1, r3, #10
 8004af0:	460b      	mov	r3, r1
 8004af2:	4614      	mov	r4, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	4621      	mov	r1, r4
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f04f 0400 	mov.w	r4, #0
 8004afe:	461a      	mov	r2, r3
 8004b00:	4623      	mov	r3, r4
 8004b02:	f7fb fb7f 	bl	8000204 <__aeabi_uldivmod>
 8004b06:	4603      	mov	r3, r0
 8004b08:	460c      	mov	r4, r1
 8004b0a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	0f1b      	lsrs	r3, r3, #28
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	613b      	str	r3, [r7, #16]
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x338>)
 8004b26:	613b      	str	r3, [r7, #16]
      break;
 8004b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2a:	693b      	ldr	r3, [r7, #16]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b34:	40023800 	.word	0x40023800
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	007a1200 	.word	0x007a1200

08004b40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8083 	beq.w	8004c60 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b5a:	4b95      	ldr	r3, [pc, #596]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d019      	beq.n	8004b9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b66:	4b92      	ldr	r3, [pc, #584]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d106      	bne.n	8004b80 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b72:	4b8f      	ldr	r3, [pc, #572]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b7e:	d00c      	beq.n	8004b9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b80:	4b8b      	ldr	r3, [pc, #556]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d112      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8c:	4b88      	ldr	r3, [pc, #544]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b98:	d10b      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9a:	4b85      	ldr	r3, [pc, #532]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d05b      	beq.n	8004c5e <HAL_RCC_OscConfig+0x11e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d157      	bne.n	8004c5e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e216      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bba:	d106      	bne.n	8004bca <HAL_RCC_OscConfig+0x8a>
 8004bbc:	4b7c      	ldr	r3, [pc, #496]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a7b      	ldr	r2, [pc, #492]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e01d      	b.n	8004c06 <HAL_RCC_OscConfig+0xc6>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd2:	d10c      	bne.n	8004bee <HAL_RCC_OscConfig+0xae>
 8004bd4:	4b76      	ldr	r3, [pc, #472]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a75      	ldr	r2, [pc, #468]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	4b73      	ldr	r3, [pc, #460]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a72      	ldr	r2, [pc, #456]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	e00b      	b.n	8004c06 <HAL_RCC_OscConfig+0xc6>
 8004bee:	4b70      	ldr	r3, [pc, #448]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a6f      	ldr	r2, [pc, #444]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b6d      	ldr	r3, [pc, #436]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6c      	ldr	r2, [pc, #432]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d013      	beq.n	8004c36 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0e:	f7fd f81f 	bl	8001c50 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c16:	f7fd f81b 	bl	8001c50 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b64      	cmp	r3, #100	; 0x64
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e1db      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c28:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0xd6>
 8004c34:	e014      	b.n	8004c60 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c36:	f7fd f80b 	bl	8001c50 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c3e:	f7fd f807 	bl	8001c50 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b64      	cmp	r3, #100	; 0x64
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e1c7      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c50:	4b57      	ldr	r3, [pc, #348]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0xfe>
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d06f      	beq.n	8004d4c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c6c:	4b50      	ldr	r3, [pc, #320]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d017      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c78:	4b4d      	ldr	r3, [pc, #308]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d105      	bne.n	8004c90 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c84:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c90:	4b47      	ldr	r3, [pc, #284]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c98:	2b0c      	cmp	r3, #12
 8004c9a:	d11c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c9c:	4b44      	ldr	r3, [pc, #272]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d116      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca8:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x180>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e18f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4938      	ldr	r1, [pc, #224]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd4:	e03a      	b.n	8004d4c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d020      	beq.n	8004d20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cde:	4b35      	ldr	r3, [pc, #212]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fc ffb4 	bl	8001c50 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cec:	f7fc ffb0 	bl	8001c50 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e170      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0a:	4b29      	ldr	r3, [pc, #164]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4925      	ldr	r1, [pc, #148]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
 8004d1e:	e015      	b.n	8004d4c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d20:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc ff93 	bl	8001c50 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2e:	f7fc ff8f 	bl	8001c50 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e14f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d037      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d016      	beq.n	8004d8e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <HAL_RCC_OscConfig+0x278>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d66:	f7fc ff73 	bl	8001c50 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d6e:	f7fc ff6f 	bl	8001c50 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e12f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x22e>
 8004d8c:	e01c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RCC_OscConfig+0x278>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7fc ff5c 	bl	8001c50 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9a:	e00f      	b.n	8004dbc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d9c:	f7fc ff58 	bl	8001c50 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d908      	bls.n	8004dbc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e118      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800
 8004db4:	42470000 	.word	0x42470000
 8004db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	4b8a      	ldr	r3, [pc, #552]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e9      	bne.n	8004d9c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8097 	beq.w	8004f04 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dda:	4b83      	ldr	r3, [pc, #524]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10f      	bne.n	8004e06 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	4b7f      	ldr	r3, [pc, #508]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	4a7e      	ldr	r2, [pc, #504]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df4:	6413      	str	r3, [r2, #64]	; 0x40
 8004df6:	4b7c      	ldr	r3, [pc, #496]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e06:	4b79      	ldr	r3, [pc, #484]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d118      	bne.n	8004e44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e12:	4b76      	ldr	r3, [pc, #472]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a75      	ldr	r2, [pc, #468]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1e:	f7fc ff17 	bl	8001c50 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e26:	f7fc ff13 	bl	8001c50 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0d3      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	4b6c      	ldr	r3, [pc, #432]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCC_OscConfig+0x31a>
 8004e4c:	4b66      	ldr	r3, [pc, #408]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	4a65      	ldr	r2, [pc, #404]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6713      	str	r3, [r2, #112]	; 0x70
 8004e58:	e01c      	b.n	8004e94 <HAL_RCC_OscConfig+0x354>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x33c>
 8004e62:	4b61      	ldr	r3, [pc, #388]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a60      	ldr	r2, [pc, #384]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e68:	f043 0304 	orr.w	r3, r3, #4
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6e:	4b5e      	ldr	r3, [pc, #376]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	4a5d      	ldr	r2, [pc, #372]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0x354>
 8004e7c:	4b5a      	ldr	r3, [pc, #360]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a59      	ldr	r2, [pc, #356]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70
 8004e88:	4b57      	ldr	r3, [pc, #348]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4a56      	ldr	r2, [pc, #344]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004e8e:	f023 0304 	bic.w	r3, r3, #4
 8004e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d015      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fc fed8 	bl	8001c50 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea2:	e00a      	b.n	8004eba <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea4:	f7fc fed4 	bl	8001c50 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e092      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	4b4b      	ldr	r3, [pc, #300]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0ee      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x364>
 8004ec6:	e014      	b.n	8004ef2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fc fec2 	bl	8001c50 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed0:	f7fc febe 	bl	8001c50 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e07c      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee6:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1ee      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef8:	4b3b      	ldr	r3, [pc, #236]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	4a3a      	ldr	r2, [pc, #232]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d068      	beq.n	8004fde <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f0c:	4b36      	ldr	r3, [pc, #216]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d060      	beq.n	8004fda <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d145      	bne.n	8004fac <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f20:	4b33      	ldr	r3, [pc, #204]	; (8004ff0 <HAL_RCC_OscConfig+0x4b0>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f26:	f7fc fe93 	bl	8001c50 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2e:	f7fc fe8f 	bl	8001c50 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e04f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f40:	4b29      	ldr	r3, [pc, #164]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f0      	bne.n	8004f2e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	019b      	lsls	r3, r3, #6
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	3b01      	subs	r3, #1
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	061b      	lsls	r3, r3, #24
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	071b      	lsls	r3, r3, #28
 8004f78:	491b      	ldr	r1, [pc, #108]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ff0 <HAL_RCC_OscConfig+0x4b0>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fc fe64 	bl	8001c50 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fc fe60 	bl	8001c50 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e020      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9e:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x44c>
 8004faa:	e018      	b.n	8004fde <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fac:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <HAL_RCC_OscConfig+0x4b0>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7fc fe4d 	bl	8001c50 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fba:	f7fc fe49 	bl	8001c50 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e009      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_RCC_OscConfig+0x4a8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f0      	bne.n	8004fba <HAL_RCC_OscConfig+0x47a>
 8004fd8:	e001      	b.n	8004fde <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40007000 	.word	0x40007000
 8004ff0:	42470060 	.word	0x42470060

08004ff4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e022      	b.n	800504c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fc fa1d 	bl	8001458 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2203      	movs	r2, #3
 8005022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f814 	bl	8005054 <HAL_SD_InitCard>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e00a      	b.n	800504c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005054:	b5b0      	push	{r4, r5, r7, lr}
 8005056:	b08e      	sub	sp, #56	; 0x38
 8005058:	af04      	add	r7, sp, #16
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800505c:	2300      	movs	r3, #0
 800505e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005070:	2376      	movs	r3, #118	; 0x76
 8005072:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681d      	ldr	r5, [r3, #0]
 8005078:	466c      	mov	r4, sp
 800507a:	f107 0314 	add.w	r3, r7, #20
 800507e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800508c:	4628      	mov	r0, r5
 800508e:	f002 fb87 	bl	80077a0 <SDIO_Init>
 8005092:	4603      	mov	r3, r0
 8005094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e031      	b.n	8005108 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <HAL_SD_InitCard+0xbc>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f002 fbbf 	bl	8007832 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80050b4:	4b16      	ldr	r3, [pc, #88]	; (8005110 <HAL_SD_InitCard+0xbc>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fefc 	bl	8005eb8 <SD_PowerON>
 80050c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e013      	b.n	8005108 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fe1b 	bl	8005d1c <SD_InitCard>
 80050e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3728      	adds	r7, #40	; 0x28
 800510c:	46bd      	mov	sp, r7
 800510e:	bdb0      	pop	{r4, r5, r7, pc}
 8005110:	422580a0 	.word	0x422580a0

08005114 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b092      	sub	sp, #72	; 0x48
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005122:	f7fc fd95 	bl	8001c50 <HAL_GetTick>
 8005126:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d107      	bne.n	8005146 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e1d7      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	f040 81ca 	bne.w	80054e8 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800515a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	441a      	add	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005164:	429a      	cmp	r2, r3
 8005166:	d907      	bls.n	8005178 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e1be      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2203      	movs	r2, #3
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2200      	movs	r2, #0
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518c:	2b01      	cmp	r3, #1
 800518e:	d002      	beq.n	8005196 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	025b      	lsls	r3, r3, #9
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800519e:	4618      	mov	r0, r3
 80051a0:	f002 fbda 	bl	8007958 <SDMMC_CmdBlockLength>
 80051a4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80051a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00f      	beq.n	80051cc <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a9a      	ldr	r2, [pc, #616]	; (800541c <HAL_SD_ReadBlocks+0x308>)
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ba:	431a      	orrs	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e194      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d0:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	025b      	lsls	r3, r3, #9
 80051d6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80051d8:	2390      	movs	r3, #144	; 0x90
 80051da:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80051dc:	2302      	movs	r3, #2
 80051de:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80051e4:	2301      	movs	r3, #1
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f107 0214 	add.w	r2, r7, #20
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f002 fb84 	bl	8007900 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d90a      	bls.n	8005214 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2202      	movs	r2, #2
 8005202:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800520a:	4618      	mov	r0, r3
 800520c:	f002 fbe8 	bl	80079e0 <SDMMC_CmdReadMultiBlock>
 8005210:	6478      	str	r0, [r7, #68]	; 0x44
 8005212:	e009      	b.n	8005228 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005220:	4618      	mov	r0, r3
 8005222:	f002 fbbb 	bl	800799c <SDMMC_CmdReadSingleBlock>
 8005226:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522a:	2b00      	cmp	r3, #0
 800522c:	d012      	beq.n	8005254 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a7a      	ldr	r2, [pc, #488]	; (800541c <HAL_SD_ReadBlocks+0x308>)
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800523a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800523c:	431a      	orrs	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e150      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005258:	e061      	b.n	800531e <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d03c      	beq.n	80052e2 <HAL_SD_ReadBlocks+0x1ce>
 8005268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d039      	beq.n	80052e2 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800526e:	2300      	movs	r3, #0
 8005270:	643b      	str	r3, [r7, #64]	; 0x40
 8005272:	e033      	b.n	80052dc <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f002 fabc 	bl	80077f6 <SDIO_ReadFIFO>
 800527e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	b2da      	uxtb	r2, r3
 8005284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005286:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	3301      	adds	r3, #1
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800528e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005290:	3b01      	subs	r3, #1
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	0a1b      	lsrs	r3, r3, #8
 8005298:	b2da      	uxtb	r2, r3
 800529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	3301      	adds	r3, #1
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a6:	3b01      	subs	r3, #1
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	0c1b      	lsrs	r3, r3, #16
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80052b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b6:	3301      	adds	r3, #1
 80052b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052bc:	3b01      	subs	r3, #1
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	0e1b      	lsrs	r3, r3, #24
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	3301      	adds	r3, #1
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d2:	3b01      	subs	r3, #1
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80052d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d8:	3301      	adds	r3, #1
 80052da:	643b      	str	r3, [r7, #64]	; 0x40
 80052dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052de:	2b07      	cmp	r3, #7
 80052e0:	d9c8      	bls.n	8005274 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80052e2:	f7fc fcb5 	bl	8001c50 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d902      	bls.n	80052f8 <HAL_SD_ReadBlocks+0x1e4>
 80052f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d112      	bne.n	800531e <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a47      	ldr	r2, [pc, #284]	; (800541c <HAL_SD_ReadBlocks+0x308>)
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e0eb      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005328:	2b00      	cmp	r3, #0
 800532a:	d096      	beq.n	800525a <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d022      	beq.n	8005380 <HAL_SD_ReadBlocks+0x26c>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d91f      	bls.n	8005380 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	2b03      	cmp	r3, #3
 8005346:	d01b      	beq.n	8005380 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f002 fbad 	bl	8007aac <SDMMC_CmdStopTransfer>
 8005352:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005356:	2b00      	cmp	r3, #0
 8005358:	d012      	beq.n	8005380 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2f      	ldr	r2, [pc, #188]	; (800541c <HAL_SD_ReadBlocks+0x308>)
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005368:	431a      	orrs	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0ba      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d012      	beq.n	80053b4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a22      	ldr	r2, [pc, #136]	; (800541c <HAL_SD_ReadBlocks+0x308>)
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	f043 0208 	orr.w	r2, r3, #8
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0a0      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d012      	beq.n	80053e8 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a15      	ldr	r2, [pc, #84]	; (800541c <HAL_SD_ReadBlocks+0x308>)
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	f043 0202 	orr.w	r2, r3, #2
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e086      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d063      	beq.n	80054be <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a08      	ldr	r2, [pc, #32]	; (800541c <HAL_SD_ReadBlocks+0x308>)
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e06c      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
 800541c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f002 f9e6 	bl	80077f6 <SDIO_ReadFIFO>
 800542a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005436:	3301      	adds	r3, #1
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800543a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543c:	3b01      	subs	r3, #1
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	b2da      	uxtb	r2, r3
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544c:	3301      	adds	r3, #1
 800544e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005452:	3b01      	subs	r3, #1
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	b2da      	uxtb	r2, r3
 800545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	3301      	adds	r3, #1
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005468:	3b01      	subs	r3, #1
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	0e1b      	lsrs	r3, r3, #24
 8005470:	b2da      	uxtb	r2, r3
 8005472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005474:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	3301      	adds	r3, #1
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800547c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547e:	3b01      	subs	r3, #1
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005482:	f7fc fbe5 	bl	8001c50 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800548e:	429a      	cmp	r2, r3
 8005490:	d902      	bls.n	8005498 <HAL_SD_ReadBlocks+0x384>
 8005492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005494:	2b00      	cmp	r3, #0
 8005496:	d112      	bne.n	80054be <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a18      	ldr	r2, [pc, #96]	; (8005500 <HAL_SD_ReadBlocks+0x3ec>)
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e01b      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
 80054cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1a6      	bne.n	8005420 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80054da:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e006      	b.n	80054f6 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3748      	adds	r7, #72	; 0x48
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	004005ff 	.word	0x004005ff

08005504 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b092      	sub	sp, #72	; 0x48
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005512:	f7fc fb9d 	bl	8001c50 <HAL_GetTick>
 8005516:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d107      	bne.n	8005536 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e182      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	f040 8175 	bne.w	800582e <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800554a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	441a      	add	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005554:	429a      	cmp	r2, r3
 8005556:	d907      	bls.n	8005568 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e169      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2203      	movs	r2, #3
 800556c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2200      	movs	r2, #0
 8005576:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	2b01      	cmp	r3, #1
 800557e:	d002      	beq.n	8005586 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	025b      	lsls	r3, r3, #9
 8005584:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800558e:	4618      	mov	r0, r3
 8005590:	f002 f9e2 	bl	8007958 <SDMMC_CmdBlockLength>
 8005594:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00f      	beq.n	80055bc <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a9c      	ldr	r2, [pc, #624]	; (8005814 <HAL_SD_WriteBlocks+0x310>)
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e13f      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80055bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055c0:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	025b      	lsls	r3, r3, #9
 80055c6:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80055c8:	2390      	movs	r3, #144	; 0x90
 80055ca:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80055cc:	2300      	movs	r3, #0
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f107 0218 	add.w	r2, r7, #24
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 f98c 	bl	8007900 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d90a      	bls.n	8005604 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055fa:	4618      	mov	r0, r3
 80055fc:	f002 fa34 	bl	8007a68 <SDMMC_CmdWriteMultiBlock>
 8005600:	6478      	str	r0, [r7, #68]	; 0x44
 8005602:	e009      	b.n	8005618 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2210      	movs	r2, #16
 8005608:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005610:	4618      	mov	r0, r3
 8005612:	f002 fa07 	bl	8007a24 <SDMMC_CmdWriteSingleBlock>
 8005616:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561a:	2b00      	cmp	r3, #0
 800561c:	d012      	beq.n	8005644 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a7c      	ldr	r2, [pc, #496]	; (8005814 <HAL_SD_WriteBlocks+0x310>)
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0fb      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005648:	e065      	b.n	8005716 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d040      	beq.n	80056da <HAL_SD_WriteBlocks+0x1d6>
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d03d      	beq.n	80056da <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800565e:	2300      	movs	r3, #0
 8005660:	643b      	str	r3, [r7, #64]	; 0x40
 8005662:	e037      	b.n	80056d4 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	3301      	adds	r3, #1
 800566e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005672:	3b01      	subs	r3, #1
 8005674:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	021a      	lsls	r2, r3, #8
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	3301      	adds	r3, #1
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	3b01      	subs	r3, #1
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	041a      	lsls	r2, r3, #16
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569c:	3301      	adds	r3, #1
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a2:	3b01      	subs	r3, #1
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	061a      	lsls	r2, r3, #24
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	3301      	adds	r3, #1
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ba:	3b01      	subs	r3, #1
 80056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f107 0214 	add.w	r2, r7, #20
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f002 f8a1 	bl	8007810 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80056ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d0:	3301      	adds	r3, #1
 80056d2:	643b      	str	r3, [r7, #64]	; 0x40
 80056d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d6:	2b07      	cmp	r3, #7
 80056d8:	d9c4      	bls.n	8005664 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80056da:	f7fc fab9 	bl	8001c50 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d902      	bls.n	80056f0 <HAL_SD_WriteBlocks+0x1ec>
 80056ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d112      	bne.n	8005716 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a47      	ldr	r2, [pc, #284]	; (8005814 <HAL_SD_WriteBlocks+0x310>)
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fe:	431a      	orrs	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e092      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005720:	2b00      	cmp	r3, #0
 8005722:	d092      	beq.n	800564a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d022      	beq.n	8005778 <HAL_SD_WriteBlocks+0x274>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d91f      	bls.n	8005778 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	2b03      	cmp	r3, #3
 800573e:	d01b      	beq.n	8005778 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f002 f9b1 	bl	8007aac <SDMMC_CmdStopTransfer>
 800574a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800574c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574e:	2b00      	cmp	r3, #0
 8005750:	d012      	beq.n	8005778 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2f      	ldr	r2, [pc, #188]	; (8005814 <HAL_SD_WriteBlocks+0x310>)
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005760:	431a      	orrs	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e061      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d012      	beq.n	80057ac <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a22      	ldr	r2, [pc, #136]	; (8005814 <HAL_SD_WriteBlocks+0x310>)
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f043 0208 	orr.w	r2, r3, #8
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e047      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d012      	beq.n	80057e0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a15      	ldr	r2, [pc, #84]	; (8005814 <HAL_SD_WriteBlocks+0x310>)
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	f043 0202 	orr.w	r2, r3, #2
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e02d      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d014      	beq.n	8005818 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a08      	ldr	r2, [pc, #32]	; (8005814 <HAL_SD_WriteBlocks+0x310>)
 80057f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	f043 0210 	orr.w	r2, r3, #16
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e013      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
 8005814:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005820:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e006      	b.n	800583c <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
  }
}
 800583c:	4618      	mov	r0, r3
 800583e:	3748      	adds	r7, #72	; 0x48
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005852:	0f9b      	lsrs	r3, r3, #30
 8005854:	b2da      	uxtb	r2, r3
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585e:	0e9b      	lsrs	r3, r3, #26
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	b2da      	uxtb	r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005870:	0e1b      	lsrs	r3, r3, #24
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	b2da      	uxtb	r2, r3
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005882:	0c1b      	lsrs	r3, r3, #16
 8005884:	b2da      	uxtb	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b2da      	uxtb	r2, r3
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800589a:	b2da      	uxtb	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a4:	0d1b      	lsrs	r3, r3, #20
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c2:	0bdb      	lsrs	r3, r3, #15
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d4:	0b9b      	lsrs	r3, r3, #14
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058e6:	0b5b      	lsrs	r3, r3, #13
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f8:	0b1b      	lsrs	r3, r3, #12
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	b2da      	uxtb	r2, r3
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2200      	movs	r2, #0
 800590a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	2b00      	cmp	r3, #0
 8005912:	d163      	bne.n	80059dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005918:	009a      	lsls	r2, r3, #2
 800591a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800591e:	4013      	ands	r3, r2
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005924:	0f92      	lsrs	r2, r2, #30
 8005926:	431a      	orrs	r2, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005930:	0edb      	lsrs	r3, r3, #27
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	b2da      	uxtb	r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005942:	0e1b      	lsrs	r3, r3, #24
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	b2da      	uxtb	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005954:	0d5b      	lsrs	r3, r3, #21
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	b2da      	uxtb	r2, r3
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005966:	0c9b      	lsrs	r3, r3, #18
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	b2da      	uxtb	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005978:	0bdb      	lsrs	r3, r3, #15
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	b2da      	uxtb	r2, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	7e1b      	ldrb	r3, [r3, #24]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	3302      	adds	r3, #2
 800599c:	2201      	movs	r2, #1
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80059a6:	fb02 f203 	mul.w	r2, r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	7a1b      	ldrb	r3, [r3, #8]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	2201      	movs	r2, #1
 80059ba:	409a      	lsls	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80059c8:	0a52      	lsrs	r2, r2, #9
 80059ca:	fb02 f203 	mul.w	r2, r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d8:	661a      	str	r2, [r3, #96]	; 0x60
 80059da:	e031      	b.n	8005a40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d11d      	bne.n	8005a20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	431a      	orrs	r2, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	3301      	adds	r3, #1
 8005a00:	029a      	lsls	r2, r3, #10
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a14:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	661a      	str	r2, [r3, #96]	; 0x60
 8005a1e:	e00f      	b.n	8005a40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a58      	ldr	r2, [pc, #352]	; (8005b88 <HAL_SD_GetCardCSD+0x344>)
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e09d      	b.n	8005b7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a44:	0b9b      	lsrs	r3, r3, #14
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a56:	09db      	lsrs	r3, r3, #7
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a78:	0fdb      	lsrs	r3, r3, #31
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	0f5b      	lsrs	r3, r3, #29
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	0e9b      	lsrs	r3, r3, #26
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa8:	0d9b      	lsrs	r3, r3, #22
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aba:	0d5b      	lsrs	r3, r3, #21
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	0c1b      	lsrs	r3, r3, #16
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aea:	0bdb      	lsrs	r3, r3, #15
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	0b9b      	lsrs	r3, r3, #14
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	0b5b      	lsrs	r3, r3, #13
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	0b1b      	lsrs	r3, r3, #12
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	0a9b      	lsrs	r3, r3, #10
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	004005ff 	.word	0x004005ff

08005b8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005be4:	b5b0      	push	{r4, r5, r7, lr}
 8005be6:	b08e      	sub	sp, #56	; 0x38
 8005be8:	af04      	add	r7, sp, #16
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d02e      	beq.n	8005c5c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d106      	bne.n	8005c14 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
 8005c12:	e029      	b.n	8005c68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1a:	d10a      	bne.n	8005c32 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa01 	bl	8006024 <SD_WideBus_Enable>
 8005c22:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
 8005c30:	e01a      	b.n	8005c68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fa3e 	bl	80060ba <SD_WideBus_Disable>
 8005c3e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c4c:	e00c      	b.n	8005c68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
 8005c5a:	e005      	b.n	8005c68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e024      	b.n	8005cce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681d      	ldr	r5, [r3, #0]
 8005caa:	466c      	mov	r4, sp
 8005cac:	f107 0318 	add.w	r3, r7, #24
 8005cb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cb8:	f107 030c 	add.w	r3, r7, #12
 8005cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f001 fd6e 	bl	80077a0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3728      	adds	r7, #40	; 0x28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	004005ff 	.word	0x004005ff

08005cdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ce8:	f107 030c 	add.w	r3, r7, #12
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f970 	bl	8005fd4 <SD_SendStatus>
 8005cf4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	0a5b      	lsrs	r3, r3, #9
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005d12:	693b      	ldr	r3, [r7, #16]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d1c:	b5b0      	push	{r4, r5, r7, lr}
 8005d1e:	b094      	sub	sp, #80	; 0x50
 8005d20:	af04      	add	r7, sp, #16
 8005d22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005d24:	2301      	movs	r3, #1
 8005d26:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 fd8f 	bl	8007850 <SDIO_GetPowerState>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d3c:	e0b7      	b.n	8005eae <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d02f      	beq.n	8005da6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 ffb8 	bl	8007cc0 <SDMMC_CmdSendCID>
 8005d50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <SD_InitCard+0x40>
    {
      return errorstate;
 8005d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5a:	e0a8      	b.n	8005eae <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2100      	movs	r1, #0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 fdb9 	bl	80078da <SDIO_GetResponse>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2104      	movs	r1, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fdb0 	bl	80078da <SDIO_GetResponse>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2108      	movs	r1, #8
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fda7 	bl	80078da <SDIO_GetResponse>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	210c      	movs	r1, #12
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 fd9e 	bl	80078da <SDIO_GetResponse>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d00d      	beq.n	8005dca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f107 020e 	add.w	r2, r7, #14
 8005db6:	4611      	mov	r1, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 ffbe 	bl	8007d3a <SDMMC_CmdSetRelAdd>
 8005dbe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <SD_InitCard+0xae>
    {
      return errorstate;
 8005dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc8:	e071      	b.n	8005eae <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d036      	beq.n	8005e40 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005dd2:	89fb      	ldrh	r3, [r7, #14]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de2:	041b      	lsls	r3, r3, #16
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f001 ff88 	bl	8007cfc <SDMMC_CmdSendCSD>
 8005dec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df6:	e05a      	b.n	8005eae <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 fd6b 	bl	80078da <SDIO_GetResponse>
 8005e04:	4602      	mov	r2, r0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2104      	movs	r1, #4
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fd62 	bl	80078da <SDIO_GetResponse>
 8005e16:	4602      	mov	r2, r0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2108      	movs	r1, #8
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 fd59 	bl	80078da <SDIO_GetResponse>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	210c      	movs	r1, #12
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fd50 	bl	80078da <SDIO_GetResponse>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2104      	movs	r1, #4
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 fd47 	bl	80078da <SDIO_GetResponse>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	0d1a      	lsrs	r2, r3, #20
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005e54:	f107 0310 	add.w	r3, r7, #16
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fcf2 	bl	8005844 <HAL_SD_GetCardCSD>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e6a:	e020      	b.n	8005eae <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6819      	ldr	r1, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	f04f 0400 	mov.w	r4, #0
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	4608      	mov	r0, r1
 8005e80:	f001 fe36 	bl	8007af0 <SDMMC_CmdSelDesel>
 8005e84:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <SD_InitCard+0x174>
  {
    return errorstate;
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	e00e      	b.n	8005eae <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681d      	ldr	r5, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	466c      	mov	r4, sp
 8005e98:	f103 0210 	add.w	r2, r3, #16
 8005e9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f001 fc7a 	bl	80077a0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3740      	adds	r7, #64	; 0x40
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005eb8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 fe30 	bl	8007b36 <SDMMC_CmdGoIdleState>
 8005ed6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	e072      	b.n	8005fc8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fe43 	bl	8007b72 <SDMMC_CmdOperCond>
 8005eec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00d      	beq.n	8005f10 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 fe19 	bl	8007b36 <SDMMC_CmdGoIdleState>
 8005f04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	e05b      	b.n	8005fc8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d137      	bne.n	8005f8e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 fe43 	bl	8007bb0 <SDMMC_CmdAppCommand>
 8005f2a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d02d      	beq.n	8005f8e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f36:	e047      	b.n	8005fc8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fe36 	bl	8007bb0 <SDMMC_CmdAppCommand>
 8005f44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <SD_PowerON+0x98>
    {
      return errorstate;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	e03b      	b.n	8005fc8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	491e      	ldr	r1, [pc, #120]	; (8005fd0 <SD_PowerON+0x118>)
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 fe4c 	bl	8007bf4 <SDMMC_CmdAppOperCommand>
 8005f5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f68:	e02e      	b.n	8005fc8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 fcb2 	bl	80078da <SDIO_GetResponse>
 8005f76:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	0fdb      	lsrs	r3, r3, #31
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <SD_PowerON+0xcc>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <SD_PowerON+0xce>
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]

    count++;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d802      	bhi.n	8005f9e <SD_PowerON+0xe6>
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0cc      	beq.n	8005f38 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d902      	bls.n	8005fae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fac:	e00c      	b.n	8005fc8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	645a      	str	r2, [r3, #68]	; 0x44
 8005fbe:	e002      	b.n	8005fc6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	c1100000 	.word	0xc1100000

08005fd4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005fe4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fe8:	e018      	b.n	800601c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff2:	041b      	lsls	r3, r3, #16
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f001 fec0 	bl	8007d7c <SDMMC_CmdSendStatus>
 8005ffc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	e009      	b.n	800601c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fc63 	bl	80078da <SDIO_GetResponse>
 8006014:	4602      	mov	r2, r0
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2100      	movs	r1, #0
 800603a:	4618      	mov	r0, r3
 800603c:	f001 fc4d 	bl	80078da <SDIO_GetResponse>
 8006040:	4603      	mov	r3, r0
 8006042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800604a:	d102      	bne.n	8006052 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800604c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006050:	e02f      	b.n	80060b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006052:	f107 030c 	add.w	r3, r7, #12
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f879 	bl	8006150 <SD_FindSCR>
 800605e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	e023      	b.n	80060b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01c      	beq.n	80060ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	041b      	lsls	r3, r3, #16
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f001 fd95 	bl	8007bb0 <SDMMC_CmdAppCommand>
 8006086:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	e00f      	b.n	80060b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2102      	movs	r1, #2
 8006098:	4618      	mov	r0, r3
 800609a:	f001 fdce 	bl	8007c3a <SDMMC_CmdBusWidth>
 800609e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	e003      	b.n	80060b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e001      	b.n	80060b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80060ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 fc02 	bl	80078da <SDIO_GetResponse>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060e0:	d102      	bne.n	80060e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80060e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060e6:	e02f      	b.n	8006148 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f82e 	bl	8006150 <SD_FindSCR>
 80060f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	e023      	b.n	8006148 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01c      	beq.n	8006144 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006112:	041b      	lsls	r3, r3, #16
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f001 fd4a 	bl	8007bb0 <SDMMC_CmdAppCommand>
 800611c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	e00f      	b.n	8006148 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f001 fd83 	bl	8007c3a <SDMMC_CmdBusWidth>
 8006134:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	e003      	b.n	8006148 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006140:	2300      	movs	r3, #0
 8006142:	e001      	b.n	8006148 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006144:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006150:	b590      	push	{r4, r7, lr}
 8006152:	b08f      	sub	sp, #60	; 0x3c
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800615a:	f7fb fd79 	bl	8001c50 <HAL_GetTick>
 800615e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006164:	2300      	movs	r3, #0
 8006166:	60bb      	str	r3, [r7, #8]
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2108      	movs	r1, #8
 8006176:	4618      	mov	r0, r3
 8006178:	f001 fbee 	bl	8007958 <SDMMC_CmdBlockLength>
 800617c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	e0a9      	b.n	80062dc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f001 fd0b 	bl	8007bb0 <SDMMC_CmdAppCommand>
 800619a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	e09a      	b.n	80062dc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80061ac:	2308      	movs	r3, #8
 80061ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80061b0:	2330      	movs	r3, #48	; 0x30
 80061b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80061b4:	2302      	movs	r3, #2
 80061b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80061bc:	2301      	movs	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f107 0210 	add.w	r2, r7, #16
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 fb98 	bl	8007900 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f001 fd52 	bl	8007c7e <SDMMC_CmdSendSCR>
 80061da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d022      	beq.n	8006228 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	e07a      	b.n	80062dc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00e      	beq.n	8006212 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6819      	ldr	r1, [r3, #0]
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	f107 0208 	add.w	r2, r7, #8
 8006200:	18d4      	adds	r4, r2, r3
 8006202:	4608      	mov	r0, r1
 8006204:	f001 faf7 	bl	80077f6 <SDIO_ReadFIFO>
 8006208:	4603      	mov	r3, r0
 800620a:	6023      	str	r3, [r4, #0]
      index++;
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	3301      	adds	r3, #1
 8006210:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006212:	f7fb fd1d 	bl	8001c50 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006220:	d102      	bne.n	8006228 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006222:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006226:	e059      	b.n	80062dc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800622e:	f240 432a 	movw	r3, #1066	; 0x42a
 8006232:	4013      	ands	r3, r2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0d6      	beq.n	80061e6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	f003 0308 	and.w	r3, r3, #8
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2208      	movs	r2, #8
 800624c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800624e:	2308      	movs	r3, #8
 8006250:	e044      	b.n	80062dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2202      	movs	r2, #2
 8006266:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006268:	2302      	movs	r3, #2
 800626a:	e037      	b.n	80062dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2220      	movs	r2, #32
 8006280:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006282:	2320      	movs	r3, #32
 8006284:	e02a      	b.n	80062dc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f240 523a 	movw	r2, #1338	; 0x53a
 800628e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	061a      	lsls	r2, r3, #24
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800629c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	0a1b      	lsrs	r3, r3, #8
 80062a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	0e1b      	lsrs	r3, r3, #24
 80062ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	601a      	str	r2, [r3, #0]
    scr++;
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	3304      	adds	r3, #4
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	061a      	lsls	r2, r3, #24
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	0e1b      	lsrs	r3, r3, #24
 80062d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	373c      	adds	r7, #60	; 0x3c
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd90      	pop	{r4, r7, pc}

080062e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e056      	b.n	80063a4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7fb f929 	bl	8001568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800632c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	ea42 0103 	orr.w	r1, r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	f003 0104 	and.w	r1, r3, #4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69da      	ldr	r2, [r3, #28]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006392:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e01d      	b.n	80063fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fb f910 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f000 fa4e 	bl	800688c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e01d      	b.n	8006450 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f815 	bl	8006458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3304      	adds	r3, #4
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f000 fa23 	bl	800688c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e083      	b.n	8006588 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fb f93d 	bl	8001714 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3304      	adds	r3, #4
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f000 f9e3 	bl	800688c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	4313      	orrs	r3, r2
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800650c:	f023 030c 	bic.w	r3, r3, #12
 8006510:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800651c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	4313      	orrs	r3, r2
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	011a      	lsls	r2, r3, #4
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	031b      	lsls	r3, r3, #12
 800653c:	4313      	orrs	r3, r2
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006552:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	4313      	orrs	r3, r2
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e0b4      	b.n	8006714 <HAL_TIM_PWM_ConfigChannel+0x184>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b0c      	cmp	r3, #12
 80065be:	f200 809f 	bhi.w	8006700 <HAL_TIM_PWM_ConfigChannel+0x170>
 80065c2:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c8:	080065fd 	.word	0x080065fd
 80065cc:	08006701 	.word	0x08006701
 80065d0:	08006701 	.word	0x08006701
 80065d4:	08006701 	.word	0x08006701
 80065d8:	0800663d 	.word	0x0800663d
 80065dc:	08006701 	.word	0x08006701
 80065e0:	08006701 	.word	0x08006701
 80065e4:	08006701 	.word	0x08006701
 80065e8:	0800667f 	.word	0x0800667f
 80065ec:	08006701 	.word	0x08006701
 80065f0:	08006701 	.word	0x08006701
 80065f4:	08006701 	.word	0x08006701
 80065f8:	080066bf 	.word	0x080066bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f9e2 	bl	80069cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0208 	orr.w	r2, r2, #8
 8006616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0204 	bic.w	r2, r2, #4
 8006626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6999      	ldr	r1, [r3, #24]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	619a      	str	r2, [r3, #24]
      break;
 800663a:	e062      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fa32 	bl	8006aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6999      	ldr	r1, [r3, #24]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	021a      	lsls	r2, r3, #8
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	619a      	str	r2, [r3, #24]
      break;
 800667c:	e041      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fa87 	bl	8006b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0208 	orr.w	r2, r2, #8
 8006698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0204 	bic.w	r2, r2, #4
 80066a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69d9      	ldr	r1, [r3, #28]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	61da      	str	r2, [r3, #28]
      break;
 80066bc:	e021      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fadb 	bl	8006c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69d9      	ldr	r1, [r3, #28]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	021a      	lsls	r2, r3, #8
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	61da      	str	r2, [r3, #28]
      break;
 80066fe:	e000      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006700:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_TIM_ConfigClockSource+0x18>
 8006730:	2302      	movs	r3, #2
 8006732:	e0a6      	b.n	8006882 <HAL_TIM_ConfigClockSource+0x166>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800675a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b40      	cmp	r3, #64	; 0x40
 800676a:	d067      	beq.n	800683c <HAL_TIM_ConfigClockSource+0x120>
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d80b      	bhi.n	8006788 <HAL_TIM_ConfigClockSource+0x6c>
 8006770:	2b10      	cmp	r3, #16
 8006772:	d073      	beq.n	800685c <HAL_TIM_ConfigClockSource+0x140>
 8006774:	2b10      	cmp	r3, #16
 8006776:	d802      	bhi.n	800677e <HAL_TIM_ConfigClockSource+0x62>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d06f      	beq.n	800685c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800677c:	e078      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800677e:	2b20      	cmp	r3, #32
 8006780:	d06c      	beq.n	800685c <HAL_TIM_ConfigClockSource+0x140>
 8006782:	2b30      	cmp	r3, #48	; 0x30
 8006784:	d06a      	beq.n	800685c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006786:	e073      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006788:	2b70      	cmp	r3, #112	; 0x70
 800678a:	d00d      	beq.n	80067a8 <HAL_TIM_ConfigClockSource+0x8c>
 800678c:	2b70      	cmp	r3, #112	; 0x70
 800678e:	d804      	bhi.n	800679a <HAL_TIM_ConfigClockSource+0x7e>
 8006790:	2b50      	cmp	r3, #80	; 0x50
 8006792:	d033      	beq.n	80067fc <HAL_TIM_ConfigClockSource+0xe0>
 8006794:	2b60      	cmp	r3, #96	; 0x60
 8006796:	d041      	beq.n	800681c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006798:	e06a      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800679a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679e:	d066      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x152>
 80067a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a4:	d017      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80067a6:	e063      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	6899      	ldr	r1, [r3, #8]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f000 fb32 	bl	8006e20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	609a      	str	r2, [r3, #8]
      break;
 80067d4:	e04c      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6899      	ldr	r1, [r3, #8]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f000 fb1b 	bl	8006e20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067f8:	609a      	str	r2, [r3, #8]
      break;
 80067fa:	e039      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	461a      	mov	r2, r3
 800680a:	f000 fa8f 	bl	8006d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2150      	movs	r1, #80	; 0x50
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fae8 	bl	8006dea <TIM_ITRx_SetConfig>
      break;
 800681a:	e029      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6859      	ldr	r1, [r3, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	461a      	mov	r2, r3
 800682a:	f000 faae 	bl	8006d8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2160      	movs	r1, #96	; 0x60
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fad8 	bl	8006dea <TIM_ITRx_SetConfig>
      break;
 800683a:	e019      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	6859      	ldr	r1, [r3, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	461a      	mov	r2, r3
 800684a:	f000 fa6f 	bl	8006d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2140      	movs	r1, #64	; 0x40
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fac8 	bl	8006dea <TIM_ITRx_SetConfig>
      break;
 800685a:	e009      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f000 fabf 	bl	8006dea <TIM_ITRx_SetConfig>
      break;
 800686c:	e000      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800686e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a40      	ldr	r2, [pc, #256]	; (80069a0 <TIM_Base_SetConfig+0x114>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068aa:	d00f      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a3d      	ldr	r2, [pc, #244]	; (80069a4 <TIM_Base_SetConfig+0x118>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3c      	ldr	r2, [pc, #240]	; (80069a8 <TIM_Base_SetConfig+0x11c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3b      	ldr	r2, [pc, #236]	; (80069ac <TIM_Base_SetConfig+0x120>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3a      	ldr	r2, [pc, #232]	; (80069b0 <TIM_Base_SetConfig+0x124>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d108      	bne.n	80068de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2f      	ldr	r2, [pc, #188]	; (80069a0 <TIM_Base_SetConfig+0x114>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d02b      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ec:	d027      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2c      	ldr	r2, [pc, #176]	; (80069a4 <TIM_Base_SetConfig+0x118>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d023      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2b      	ldr	r2, [pc, #172]	; (80069a8 <TIM_Base_SetConfig+0x11c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01f      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2a      	ldr	r2, [pc, #168]	; (80069ac <TIM_Base_SetConfig+0x120>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01b      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a29      	ldr	r2, [pc, #164]	; (80069b0 <TIM_Base_SetConfig+0x124>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d017      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <TIM_Base_SetConfig+0x128>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a27      	ldr	r2, [pc, #156]	; (80069b8 <TIM_Base_SetConfig+0x12c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00f      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a26      	ldr	r2, [pc, #152]	; (80069bc <TIM_Base_SetConfig+0x130>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00b      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a25      	ldr	r2, [pc, #148]	; (80069c0 <TIM_Base_SetConfig+0x134>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d007      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a24      	ldr	r2, [pc, #144]	; (80069c4 <TIM_Base_SetConfig+0x138>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a23      	ldr	r2, [pc, #140]	; (80069c8 <TIM_Base_SetConfig+0x13c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d108      	bne.n	8006950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a0a      	ldr	r2, [pc, #40]	; (80069a0 <TIM_Base_SetConfig+0x114>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0xf8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a0c      	ldr	r2, [pc, #48]	; (80069b0 <TIM_Base_SetConfig+0x124>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d103      	bne.n	800698c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	615a      	str	r2, [r3, #20]
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40010400 	.word	0x40010400
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40014400 	.word	0x40014400
 80069bc:	40014800 	.word	0x40014800
 80069c0:	40001800 	.word	0x40001800
 80069c4:	40001c00 	.word	0x40001c00
 80069c8:	40002000 	.word	0x40002000

080069cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 0302 	bic.w	r3, r3, #2
 8006a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a20      	ldr	r2, [pc, #128]	; (8006aa4 <TIM_OC1_SetConfig+0xd8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC1_SetConfig+0x64>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <TIM_OC1_SetConfig+0xdc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10c      	bne.n	8006a4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0308 	bic.w	r3, r3, #8
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f023 0304 	bic.w	r3, r3, #4
 8006a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	; (8006aa4 <TIM_OC1_SetConfig+0xd8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC1_SetConfig+0x8e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a14      	ldr	r2, [pc, #80]	; (8006aa8 <TIM_OC1_SetConfig+0xdc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d111      	bne.n	8006a7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	621a      	str	r2, [r3, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	40010000 	.word	0x40010000
 8006aa8:	40010400 	.word	0x40010400

08006aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f023 0210 	bic.w	r2, r3, #16
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f023 0320 	bic.w	r3, r3, #32
 8006af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <TIM_OC2_SetConfig+0xe4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_OC2_SetConfig+0x68>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <TIM_OC2_SetConfig+0xe8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d10d      	bne.n	8006b30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a17      	ldr	r2, [pc, #92]	; (8006b90 <TIM_OC2_SetConfig+0xe4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_OC2_SetConfig+0x94>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a16      	ldr	r2, [pc, #88]	; (8006b94 <TIM_OC2_SetConfig+0xe8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d113      	bne.n	8006b68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40010400 	.word	0x40010400

08006b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a21      	ldr	r2, [pc, #132]	; (8006c78 <TIM_OC3_SetConfig+0xe0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_OC3_SetConfig+0x66>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a20      	ldr	r2, [pc, #128]	; (8006c7c <TIM_OC3_SetConfig+0xe4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d10d      	bne.n	8006c1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a16      	ldr	r2, [pc, #88]	; (8006c78 <TIM_OC3_SetConfig+0xe0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_OC3_SetConfig+0x92>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <TIM_OC3_SetConfig+0xe4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d113      	bne.n	8006c52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	621a      	str	r2, [r3, #32]
}
 8006c6c:	bf00      	nop
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40010400 	.word	0x40010400

08006c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	031b      	lsls	r3, r3, #12
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a12      	ldr	r2, [pc, #72]	; (8006d24 <TIM_OC4_SetConfig+0xa4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_OC4_SetConfig+0x68>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a11      	ldr	r2, [pc, #68]	; (8006d28 <TIM_OC4_SetConfig+0xa8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d109      	bne.n	8006cfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	019b      	lsls	r3, r3, #6
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40010000 	.word	0x40010000
 8006d28:	40010400 	.word	0x40010400

08006d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	f023 0201 	bic.w	r2, r3, #1
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 030a 	bic.w	r3, r3, #10
 8006d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b087      	sub	sp, #28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	60f8      	str	r0, [r7, #12]
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f023 0210 	bic.w	r2, r3, #16
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	031b      	lsls	r3, r3, #12
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b085      	sub	sp, #20
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f043 0307 	orr.w	r3, r3, #7
 8006e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	609a      	str	r2, [r3, #8]
}
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	021a      	lsls	r2, r3, #8
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e05a      	b.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d022      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec4:	d01d      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a1d      	ldr	r2, [pc, #116]	; (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d018      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1b      	ldr	r2, [pc, #108]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d013      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1a      	ldr	r2, [pc, #104]	; (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00e      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a18      	ldr	r2, [pc, #96]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d009      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d004      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d10c      	bne.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40010000 	.word	0x40010000
 8006f40:	40000400 	.word	0x40000400
 8006f44:	40000800 	.word	0x40000800
 8006f48:	40000c00 	.word	0x40000c00
 8006f4c:	40010400 	.word	0x40010400
 8006f50:	40014000 	.word	0x40014000
 8006f54:	40001800 	.word	0x40001800

08006f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e03d      	b.n	8006ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e047      	b.n	800709e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fa fcbc 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2224      	movs	r2, #36	; 0x24
 800702c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800703e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f831 	bl	80070a8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695a      	ldr	r2, [r3, #20]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8007064:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695a      	ldr	r2, [r3, #20]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0208 	orr.w	r2, r2, #8
 8007074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80070ea:	f023 030c 	bic.w	r3, r3, #12
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	430b      	orrs	r3, r1
 80070f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007116:	f040 818b 	bne.w	8007430 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4ac1      	ldr	r2, [pc, #772]	; (8007424 <UART_SetConfig+0x37c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d005      	beq.n	8007130 <UART_SetConfig+0x88>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4abf      	ldr	r2, [pc, #764]	; (8007428 <UART_SetConfig+0x380>)
 800712a:	4293      	cmp	r3, r2
 800712c:	f040 80bd 	bne.w	80072aa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007130:	f7fd f828 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 8007134:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	461d      	mov	r5, r3
 800713a:	f04f 0600 	mov.w	r6, #0
 800713e:	46a8      	mov	r8, r5
 8007140:	46b1      	mov	r9, r6
 8007142:	eb18 0308 	adds.w	r3, r8, r8
 8007146:	eb49 0409 	adc.w	r4, r9, r9
 800714a:	4698      	mov	r8, r3
 800714c:	46a1      	mov	r9, r4
 800714e:	eb18 0805 	adds.w	r8, r8, r5
 8007152:	eb49 0906 	adc.w	r9, r9, r6
 8007156:	f04f 0100 	mov.w	r1, #0
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007162:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007166:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800716a:	4688      	mov	r8, r1
 800716c:	4691      	mov	r9, r2
 800716e:	eb18 0005 	adds.w	r0, r8, r5
 8007172:	eb49 0106 	adc.w	r1, r9, r6
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	461d      	mov	r5, r3
 800717c:	f04f 0600 	mov.w	r6, #0
 8007180:	196b      	adds	r3, r5, r5
 8007182:	eb46 0406 	adc.w	r4, r6, r6
 8007186:	461a      	mov	r2, r3
 8007188:	4623      	mov	r3, r4
 800718a:	f7f9 f83b 	bl	8000204 <__aeabi_uldivmod>
 800718e:	4603      	mov	r3, r0
 8007190:	460c      	mov	r4, r1
 8007192:	461a      	mov	r2, r3
 8007194:	4ba5      	ldr	r3, [pc, #660]	; (800742c <UART_SetConfig+0x384>)
 8007196:	fba3 2302 	umull	r2, r3, r3, r2
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	461d      	mov	r5, r3
 80071a4:	f04f 0600 	mov.w	r6, #0
 80071a8:	46a9      	mov	r9, r5
 80071aa:	46b2      	mov	sl, r6
 80071ac:	eb19 0309 	adds.w	r3, r9, r9
 80071b0:	eb4a 040a 	adc.w	r4, sl, sl
 80071b4:	4699      	mov	r9, r3
 80071b6:	46a2      	mov	sl, r4
 80071b8:	eb19 0905 	adds.w	r9, r9, r5
 80071bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80071c0:	f04f 0100 	mov.w	r1, #0
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071d4:	4689      	mov	r9, r1
 80071d6:	4692      	mov	sl, r2
 80071d8:	eb19 0005 	adds.w	r0, r9, r5
 80071dc:	eb4a 0106 	adc.w	r1, sl, r6
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	461d      	mov	r5, r3
 80071e6:	f04f 0600 	mov.w	r6, #0
 80071ea:	196b      	adds	r3, r5, r5
 80071ec:	eb46 0406 	adc.w	r4, r6, r6
 80071f0:	461a      	mov	r2, r3
 80071f2:	4623      	mov	r3, r4
 80071f4:	f7f9 f806 	bl	8000204 <__aeabi_uldivmod>
 80071f8:	4603      	mov	r3, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	461a      	mov	r2, r3
 80071fe:	4b8b      	ldr	r3, [pc, #556]	; (800742c <UART_SetConfig+0x384>)
 8007200:	fba3 1302 	umull	r1, r3, r3, r2
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	2164      	movs	r1, #100	; 0x64
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	3332      	adds	r3, #50	; 0x32
 8007212:	4a86      	ldr	r2, [pc, #536]	; (800742c <UART_SetConfig+0x384>)
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007220:	4498      	add	r8, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	461d      	mov	r5, r3
 8007226:	f04f 0600 	mov.w	r6, #0
 800722a:	46a9      	mov	r9, r5
 800722c:	46b2      	mov	sl, r6
 800722e:	eb19 0309 	adds.w	r3, r9, r9
 8007232:	eb4a 040a 	adc.w	r4, sl, sl
 8007236:	4699      	mov	r9, r3
 8007238:	46a2      	mov	sl, r4
 800723a:	eb19 0905 	adds.w	r9, r9, r5
 800723e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007242:	f04f 0100 	mov.w	r1, #0
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800724e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007256:	4689      	mov	r9, r1
 8007258:	4692      	mov	sl, r2
 800725a:	eb19 0005 	adds.w	r0, r9, r5
 800725e:	eb4a 0106 	adc.w	r1, sl, r6
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	461d      	mov	r5, r3
 8007268:	f04f 0600 	mov.w	r6, #0
 800726c:	196b      	adds	r3, r5, r5
 800726e:	eb46 0406 	adc.w	r4, r6, r6
 8007272:	461a      	mov	r2, r3
 8007274:	4623      	mov	r3, r4
 8007276:	f7f8 ffc5 	bl	8000204 <__aeabi_uldivmod>
 800727a:	4603      	mov	r3, r0
 800727c:	460c      	mov	r4, r1
 800727e:	461a      	mov	r2, r3
 8007280:	4b6a      	ldr	r3, [pc, #424]	; (800742c <UART_SetConfig+0x384>)
 8007282:	fba3 1302 	umull	r1, r3, r3, r2
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	2164      	movs	r1, #100	; 0x64
 800728a:	fb01 f303 	mul.w	r3, r1, r3
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	3332      	adds	r3, #50	; 0x32
 8007294:	4a65      	ldr	r2, [pc, #404]	; (800742c <UART_SetConfig+0x384>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	f003 0207 	and.w	r2, r3, #7
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4442      	add	r2, r8
 80072a6:	609a      	str	r2, [r3, #8]
 80072a8:	e26f      	b.n	800778a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072aa:	f7fc ff57 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 80072ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	461d      	mov	r5, r3
 80072b4:	f04f 0600 	mov.w	r6, #0
 80072b8:	46a8      	mov	r8, r5
 80072ba:	46b1      	mov	r9, r6
 80072bc:	eb18 0308 	adds.w	r3, r8, r8
 80072c0:	eb49 0409 	adc.w	r4, r9, r9
 80072c4:	4698      	mov	r8, r3
 80072c6:	46a1      	mov	r9, r4
 80072c8:	eb18 0805 	adds.w	r8, r8, r5
 80072cc:	eb49 0906 	adc.w	r9, r9, r6
 80072d0:	f04f 0100 	mov.w	r1, #0
 80072d4:	f04f 0200 	mov.w	r2, #0
 80072d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072e4:	4688      	mov	r8, r1
 80072e6:	4691      	mov	r9, r2
 80072e8:	eb18 0005 	adds.w	r0, r8, r5
 80072ec:	eb49 0106 	adc.w	r1, r9, r6
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	461d      	mov	r5, r3
 80072f6:	f04f 0600 	mov.w	r6, #0
 80072fa:	196b      	adds	r3, r5, r5
 80072fc:	eb46 0406 	adc.w	r4, r6, r6
 8007300:	461a      	mov	r2, r3
 8007302:	4623      	mov	r3, r4
 8007304:	f7f8 ff7e 	bl	8000204 <__aeabi_uldivmod>
 8007308:	4603      	mov	r3, r0
 800730a:	460c      	mov	r4, r1
 800730c:	461a      	mov	r2, r3
 800730e:	4b47      	ldr	r3, [pc, #284]	; (800742c <UART_SetConfig+0x384>)
 8007310:	fba3 2302 	umull	r2, r3, r3, r2
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	461d      	mov	r5, r3
 800731e:	f04f 0600 	mov.w	r6, #0
 8007322:	46a9      	mov	r9, r5
 8007324:	46b2      	mov	sl, r6
 8007326:	eb19 0309 	adds.w	r3, r9, r9
 800732a:	eb4a 040a 	adc.w	r4, sl, sl
 800732e:	4699      	mov	r9, r3
 8007330:	46a2      	mov	sl, r4
 8007332:	eb19 0905 	adds.w	r9, r9, r5
 8007336:	eb4a 0a06 	adc.w	sl, sl, r6
 800733a:	f04f 0100 	mov.w	r1, #0
 800733e:	f04f 0200 	mov.w	r2, #0
 8007342:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007346:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800734a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800734e:	4689      	mov	r9, r1
 8007350:	4692      	mov	sl, r2
 8007352:	eb19 0005 	adds.w	r0, r9, r5
 8007356:	eb4a 0106 	adc.w	r1, sl, r6
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	461d      	mov	r5, r3
 8007360:	f04f 0600 	mov.w	r6, #0
 8007364:	196b      	adds	r3, r5, r5
 8007366:	eb46 0406 	adc.w	r4, r6, r6
 800736a:	461a      	mov	r2, r3
 800736c:	4623      	mov	r3, r4
 800736e:	f7f8 ff49 	bl	8000204 <__aeabi_uldivmod>
 8007372:	4603      	mov	r3, r0
 8007374:	460c      	mov	r4, r1
 8007376:	461a      	mov	r2, r3
 8007378:	4b2c      	ldr	r3, [pc, #176]	; (800742c <UART_SetConfig+0x384>)
 800737a:	fba3 1302 	umull	r1, r3, r3, r2
 800737e:	095b      	lsrs	r3, r3, #5
 8007380:	2164      	movs	r1, #100	; 0x64
 8007382:	fb01 f303 	mul.w	r3, r1, r3
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	3332      	adds	r3, #50	; 0x32
 800738c:	4a27      	ldr	r2, [pc, #156]	; (800742c <UART_SetConfig+0x384>)
 800738e:	fba2 2303 	umull	r2, r3, r2, r3
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800739a:	4498      	add	r8, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	461d      	mov	r5, r3
 80073a0:	f04f 0600 	mov.w	r6, #0
 80073a4:	46a9      	mov	r9, r5
 80073a6:	46b2      	mov	sl, r6
 80073a8:	eb19 0309 	adds.w	r3, r9, r9
 80073ac:	eb4a 040a 	adc.w	r4, sl, sl
 80073b0:	4699      	mov	r9, r3
 80073b2:	46a2      	mov	sl, r4
 80073b4:	eb19 0905 	adds.w	r9, r9, r5
 80073b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80073bc:	f04f 0100 	mov.w	r1, #0
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073d0:	4689      	mov	r9, r1
 80073d2:	4692      	mov	sl, r2
 80073d4:	eb19 0005 	adds.w	r0, r9, r5
 80073d8:	eb4a 0106 	adc.w	r1, sl, r6
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	461d      	mov	r5, r3
 80073e2:	f04f 0600 	mov.w	r6, #0
 80073e6:	196b      	adds	r3, r5, r5
 80073e8:	eb46 0406 	adc.w	r4, r6, r6
 80073ec:	461a      	mov	r2, r3
 80073ee:	4623      	mov	r3, r4
 80073f0:	f7f8 ff08 	bl	8000204 <__aeabi_uldivmod>
 80073f4:	4603      	mov	r3, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	461a      	mov	r2, r3
 80073fa:	4b0c      	ldr	r3, [pc, #48]	; (800742c <UART_SetConfig+0x384>)
 80073fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	2164      	movs	r1, #100	; 0x64
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	3332      	adds	r3, #50	; 0x32
 800740e:	4a07      	ldr	r2, [pc, #28]	; (800742c <UART_SetConfig+0x384>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	f003 0207 	and.w	r2, r3, #7
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4442      	add	r2, r8
 8007420:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007422:	e1b2      	b.n	800778a <UART_SetConfig+0x6e2>
 8007424:	40011000 	.word	0x40011000
 8007428:	40011400 	.word	0x40011400
 800742c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4ad7      	ldr	r2, [pc, #860]	; (8007794 <UART_SetConfig+0x6ec>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d005      	beq.n	8007446 <UART_SetConfig+0x39e>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4ad6      	ldr	r2, [pc, #856]	; (8007798 <UART_SetConfig+0x6f0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	f040 80d1 	bne.w	80075e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007446:	f7fc fe9d 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 800744a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	469a      	mov	sl, r3
 8007450:	f04f 0b00 	mov.w	fp, #0
 8007454:	46d0      	mov	r8, sl
 8007456:	46d9      	mov	r9, fp
 8007458:	eb18 0308 	adds.w	r3, r8, r8
 800745c:	eb49 0409 	adc.w	r4, r9, r9
 8007460:	4698      	mov	r8, r3
 8007462:	46a1      	mov	r9, r4
 8007464:	eb18 080a 	adds.w	r8, r8, sl
 8007468:	eb49 090b 	adc.w	r9, r9, fp
 800746c:	f04f 0100 	mov.w	r1, #0
 8007470:	f04f 0200 	mov.w	r2, #0
 8007474:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007478:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800747c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007480:	4688      	mov	r8, r1
 8007482:	4691      	mov	r9, r2
 8007484:	eb1a 0508 	adds.w	r5, sl, r8
 8007488:	eb4b 0609 	adc.w	r6, fp, r9
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4619      	mov	r1, r3
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	f04f 0400 	mov.w	r4, #0
 800749e:	0094      	lsls	r4, r2, #2
 80074a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074a4:	008b      	lsls	r3, r1, #2
 80074a6:	461a      	mov	r2, r3
 80074a8:	4623      	mov	r3, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	4631      	mov	r1, r6
 80074ae:	f7f8 fea9 	bl	8000204 <__aeabi_uldivmod>
 80074b2:	4603      	mov	r3, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	461a      	mov	r2, r3
 80074b8:	4bb8      	ldr	r3, [pc, #736]	; (800779c <UART_SetConfig+0x6f4>)
 80074ba:	fba3 2302 	umull	r2, r3, r3, r2
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	469b      	mov	fp, r3
 80074c8:	f04f 0c00 	mov.w	ip, #0
 80074cc:	46d9      	mov	r9, fp
 80074ce:	46e2      	mov	sl, ip
 80074d0:	eb19 0309 	adds.w	r3, r9, r9
 80074d4:	eb4a 040a 	adc.w	r4, sl, sl
 80074d8:	4699      	mov	r9, r3
 80074da:	46a2      	mov	sl, r4
 80074dc:	eb19 090b 	adds.w	r9, r9, fp
 80074e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074e4:	f04f 0100 	mov.w	r1, #0
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074f8:	4689      	mov	r9, r1
 80074fa:	4692      	mov	sl, r2
 80074fc:	eb1b 0509 	adds.w	r5, fp, r9
 8007500:	eb4c 060a 	adc.w	r6, ip, sl
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	4619      	mov	r1, r3
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	f04f 0400 	mov.w	r4, #0
 8007516:	0094      	lsls	r4, r2, #2
 8007518:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800751c:	008b      	lsls	r3, r1, #2
 800751e:	461a      	mov	r2, r3
 8007520:	4623      	mov	r3, r4
 8007522:	4628      	mov	r0, r5
 8007524:	4631      	mov	r1, r6
 8007526:	f7f8 fe6d 	bl	8000204 <__aeabi_uldivmod>
 800752a:	4603      	mov	r3, r0
 800752c:	460c      	mov	r4, r1
 800752e:	461a      	mov	r2, r3
 8007530:	4b9a      	ldr	r3, [pc, #616]	; (800779c <UART_SetConfig+0x6f4>)
 8007532:	fba3 1302 	umull	r1, r3, r3, r2
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	2164      	movs	r1, #100	; 0x64
 800753a:	fb01 f303 	mul.w	r3, r1, r3
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	3332      	adds	r3, #50	; 0x32
 8007544:	4a95      	ldr	r2, [pc, #596]	; (800779c <UART_SetConfig+0x6f4>)
 8007546:	fba2 2303 	umull	r2, r3, r2, r3
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007550:	4498      	add	r8, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	469b      	mov	fp, r3
 8007556:	f04f 0c00 	mov.w	ip, #0
 800755a:	46d9      	mov	r9, fp
 800755c:	46e2      	mov	sl, ip
 800755e:	eb19 0309 	adds.w	r3, r9, r9
 8007562:	eb4a 040a 	adc.w	r4, sl, sl
 8007566:	4699      	mov	r9, r3
 8007568:	46a2      	mov	sl, r4
 800756a:	eb19 090b 	adds.w	r9, r9, fp
 800756e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007572:	f04f 0100 	mov.w	r1, #0
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800757e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007582:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007586:	4689      	mov	r9, r1
 8007588:	4692      	mov	sl, r2
 800758a:	eb1b 0509 	adds.w	r5, fp, r9
 800758e:	eb4c 060a 	adc.w	r6, ip, sl
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	4619      	mov	r1, r3
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	f04f 0400 	mov.w	r4, #0
 80075a4:	0094      	lsls	r4, r2, #2
 80075a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075aa:	008b      	lsls	r3, r1, #2
 80075ac:	461a      	mov	r2, r3
 80075ae:	4623      	mov	r3, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	4631      	mov	r1, r6
 80075b4:	f7f8 fe26 	bl	8000204 <__aeabi_uldivmod>
 80075b8:	4603      	mov	r3, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	461a      	mov	r2, r3
 80075be:	4b77      	ldr	r3, [pc, #476]	; (800779c <UART_SetConfig+0x6f4>)
 80075c0:	fba3 1302 	umull	r1, r3, r3, r2
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	2164      	movs	r1, #100	; 0x64
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	3332      	adds	r3, #50	; 0x32
 80075d2:	4a72      	ldr	r2, [pc, #456]	; (800779c <UART_SetConfig+0x6f4>)
 80075d4:	fba2 2303 	umull	r2, r3, r2, r3
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	f003 020f 	and.w	r2, r3, #15
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4442      	add	r2, r8
 80075e4:	609a      	str	r2, [r3, #8]
 80075e6:	e0d0      	b.n	800778a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80075e8:	f7fc fdb8 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 80075ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	469a      	mov	sl, r3
 80075f2:	f04f 0b00 	mov.w	fp, #0
 80075f6:	46d0      	mov	r8, sl
 80075f8:	46d9      	mov	r9, fp
 80075fa:	eb18 0308 	adds.w	r3, r8, r8
 80075fe:	eb49 0409 	adc.w	r4, r9, r9
 8007602:	4698      	mov	r8, r3
 8007604:	46a1      	mov	r9, r4
 8007606:	eb18 080a 	adds.w	r8, r8, sl
 800760a:	eb49 090b 	adc.w	r9, r9, fp
 800760e:	f04f 0100 	mov.w	r1, #0
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800761a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800761e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007622:	4688      	mov	r8, r1
 8007624:	4691      	mov	r9, r2
 8007626:	eb1a 0508 	adds.w	r5, sl, r8
 800762a:	eb4b 0609 	adc.w	r6, fp, r9
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	4619      	mov	r1, r3
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	f04f 0400 	mov.w	r4, #0
 8007640:	0094      	lsls	r4, r2, #2
 8007642:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007646:	008b      	lsls	r3, r1, #2
 8007648:	461a      	mov	r2, r3
 800764a:	4623      	mov	r3, r4
 800764c:	4628      	mov	r0, r5
 800764e:	4631      	mov	r1, r6
 8007650:	f7f8 fdd8 	bl	8000204 <__aeabi_uldivmod>
 8007654:	4603      	mov	r3, r0
 8007656:	460c      	mov	r4, r1
 8007658:	461a      	mov	r2, r3
 800765a:	4b50      	ldr	r3, [pc, #320]	; (800779c <UART_SetConfig+0x6f4>)
 800765c:	fba3 2302 	umull	r2, r3, r3, r2
 8007660:	095b      	lsrs	r3, r3, #5
 8007662:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	469b      	mov	fp, r3
 800766a:	f04f 0c00 	mov.w	ip, #0
 800766e:	46d9      	mov	r9, fp
 8007670:	46e2      	mov	sl, ip
 8007672:	eb19 0309 	adds.w	r3, r9, r9
 8007676:	eb4a 040a 	adc.w	r4, sl, sl
 800767a:	4699      	mov	r9, r3
 800767c:	46a2      	mov	sl, r4
 800767e:	eb19 090b 	adds.w	r9, r9, fp
 8007682:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007686:	f04f 0100 	mov.w	r1, #0
 800768a:	f04f 0200 	mov.w	r2, #0
 800768e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007692:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007696:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800769a:	4689      	mov	r9, r1
 800769c:	4692      	mov	sl, r2
 800769e:	eb1b 0509 	adds.w	r5, fp, r9
 80076a2:	eb4c 060a 	adc.w	r6, ip, sl
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	4619      	mov	r1, r3
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	f04f 0400 	mov.w	r4, #0
 80076b8:	0094      	lsls	r4, r2, #2
 80076ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076be:	008b      	lsls	r3, r1, #2
 80076c0:	461a      	mov	r2, r3
 80076c2:	4623      	mov	r3, r4
 80076c4:	4628      	mov	r0, r5
 80076c6:	4631      	mov	r1, r6
 80076c8:	f7f8 fd9c 	bl	8000204 <__aeabi_uldivmod>
 80076cc:	4603      	mov	r3, r0
 80076ce:	460c      	mov	r4, r1
 80076d0:	461a      	mov	r2, r3
 80076d2:	4b32      	ldr	r3, [pc, #200]	; (800779c <UART_SetConfig+0x6f4>)
 80076d4:	fba3 1302 	umull	r1, r3, r3, r2
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	2164      	movs	r1, #100	; 0x64
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	3332      	adds	r3, #50	; 0x32
 80076e6:	4a2d      	ldr	r2, [pc, #180]	; (800779c <UART_SetConfig+0x6f4>)
 80076e8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f2:	4498      	add	r8, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	469b      	mov	fp, r3
 80076f8:	f04f 0c00 	mov.w	ip, #0
 80076fc:	46d9      	mov	r9, fp
 80076fe:	46e2      	mov	sl, ip
 8007700:	eb19 0309 	adds.w	r3, r9, r9
 8007704:	eb4a 040a 	adc.w	r4, sl, sl
 8007708:	4699      	mov	r9, r3
 800770a:	46a2      	mov	sl, r4
 800770c:	eb19 090b 	adds.w	r9, r9, fp
 8007710:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007714:	f04f 0100 	mov.w	r1, #0
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007720:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007724:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007728:	4689      	mov	r9, r1
 800772a:	4692      	mov	sl, r2
 800772c:	eb1b 0509 	adds.w	r5, fp, r9
 8007730:	eb4c 060a 	adc.w	r6, ip, sl
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4619      	mov	r1, r3
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	f04f 0400 	mov.w	r4, #0
 8007746:	0094      	lsls	r4, r2, #2
 8007748:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800774c:	008b      	lsls	r3, r1, #2
 800774e:	461a      	mov	r2, r3
 8007750:	4623      	mov	r3, r4
 8007752:	4628      	mov	r0, r5
 8007754:	4631      	mov	r1, r6
 8007756:	f7f8 fd55 	bl	8000204 <__aeabi_uldivmod>
 800775a:	4603      	mov	r3, r0
 800775c:	460c      	mov	r4, r1
 800775e:	461a      	mov	r2, r3
 8007760:	4b0e      	ldr	r3, [pc, #56]	; (800779c <UART_SetConfig+0x6f4>)
 8007762:	fba3 1302 	umull	r1, r3, r3, r2
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	2164      	movs	r1, #100	; 0x64
 800776a:	fb01 f303 	mul.w	r3, r1, r3
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	3332      	adds	r3, #50	; 0x32
 8007774:	4a09      	ldr	r2, [pc, #36]	; (800779c <UART_SetConfig+0x6f4>)
 8007776:	fba2 2303 	umull	r2, r3, r2, r3
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	f003 020f 	and.w	r2, r3, #15
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4442      	add	r2, r8
 8007786:	609a      	str	r2, [r3, #8]
}
 8007788:	e7ff      	b.n	800778a <UART_SetConfig+0x6e2>
 800778a:	bf00      	nop
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007794:	40011000 	.word	0x40011000
 8007798:	40011400 	.word	0x40011400
 800779c:	51eb851f 	.word	0x51eb851f

080077a0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80077a0:	b084      	sub	sp, #16
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	f107 001c 	add.w	r0, r7, #28
 80077ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80077b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80077b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80077ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80077be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80077c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80077c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80077ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80077da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	b004      	add	sp, #16
 80077f4:	4770      	bx	lr

080077f6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2203      	movs	r2, #3
 800783e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007840:	2002      	movs	r0, #2
 8007842:	f7fa fa11 	bl	8001c68 <HAL_Delay>
  
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0303 	and.w	r3, r3, #3
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800788a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007890:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007896:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80078a6:	f023 030f 	bic.w	r3, r3, #15
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	b2db      	uxtb	r3, r3
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3314      	adds	r3, #20
 80078e8:	461a      	mov	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	4413      	add	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
}  
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007926:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800792c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007932:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800794a:	2300      	movs	r3, #0

}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007966:	2310      	movs	r3, #16
 8007968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800796a:	2340      	movs	r3, #64	; 0x40
 800796c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007976:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007978:	f107 0308 	add.w	r3, r7, #8
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff ff74 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007984:	f241 3288 	movw	r2, #5000	; 0x1388
 8007988:	2110      	movs	r1, #16
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fa40 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007992:	69fb      	ldr	r3, [r7, #28]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80079aa:	2311      	movs	r3, #17
 80079ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079ae:	2340      	movs	r3, #64	; 0x40
 80079b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079bc:	f107 0308 	add.w	r3, r7, #8
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff ff52 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80079c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079cc:	2111      	movs	r1, #17
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa1e 	bl	8007e10 <SDMMC_GetCmdResp1>
 80079d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079d6:	69fb      	ldr	r3, [r7, #28]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3720      	adds	r7, #32
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80079ee:	2312      	movs	r3, #18
 80079f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079f2:	2340      	movs	r3, #64	; 0x40
 80079f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a00:	f107 0308 	add.w	r3, r7, #8
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff ff30 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a10:	2112      	movs	r1, #18
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9fc 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3720      	adds	r7, #32
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007a32:	2318      	movs	r3, #24
 8007a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a44:	f107 0308 	add.w	r3, r7, #8
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff ff0e 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a54:	2118      	movs	r1, #24
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f9da 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007a5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a5e:	69fb      	ldr	r3, [r7, #28]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3720      	adds	r7, #32
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007a76:	2319      	movs	r3, #25
 8007a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a7a:	2340      	movs	r3, #64	; 0x40
 8007a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a88:	f107 0308 	add.w	r3, r7, #8
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff feec 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	2119      	movs	r1, #25
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f9b8 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007aa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aa2:	69fb      	ldr	r3, [r7, #28]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007ab8:	230c      	movs	r3, #12
 8007aba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007abc:	2340      	movs	r3, #64	; 0x40
 8007abe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ac8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff fecb 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007ad6:	4a05      	ldr	r2, [pc, #20]	; (8007aec <SDMMC_CmdStopTransfer+0x40>)
 8007ad8:	210c      	movs	r1, #12
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f998 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ae2:	69fb      	ldr	r3, [r7, #28]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	05f5e100 	.word	0x05f5e100

08007af0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08a      	sub	sp, #40	; 0x28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007b00:	2307      	movs	r3, #7
 8007b02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b04:	2340      	movs	r3, #64	; 0x40
 8007b06:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b10:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b12:	f107 0310 	add.w	r3, r7, #16
 8007b16:	4619      	mov	r1, r3
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7ff fea7 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b22:	2107      	movs	r1, #7
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 f973 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007b2a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3728      	adds	r7, #40	; 0x28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b088      	sub	sp, #32
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007b46:	2300      	movs	r3, #0
 8007b48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b54:	f107 0308 	add.w	r3, r7, #8
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff fe86 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f92d 	bl	8007dc0 <SDMMC_GetCmdError>
 8007b66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b68:	69fb      	ldr	r3, [r7, #28]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3720      	adds	r7, #32
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b088      	sub	sp, #32
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007b7a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007b80:	2308      	movs	r3, #8
 8007b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b84:	2340      	movs	r3, #64	; 0x40
 8007b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b92:	f107 0308 	add.w	r3, r7, #8
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff fe67 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fb16 	bl	80081d0 <SDMMC_GetCmdResp7>
 8007ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3720      	adds	r7, #32
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007bbe:	2337      	movs	r3, #55	; 0x37
 8007bc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bc2:	2340      	movs	r3, #64	; 0x40
 8007bc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bd0:	f107 0308 	add.w	r3, r7, #8
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7ff fe48 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be0:	2137      	movs	r1, #55	; 0x37
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f914 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007be8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bea:	69fb      	ldr	r3, [r7, #28]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3720      	adds	r7, #32
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007c0a:	2329      	movs	r3, #41	; 0x29
 8007c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c0e:	2340      	movs	r3, #64	; 0x40
 8007c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c12:	2300      	movs	r3, #0
 8007c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c1c:	f107 0308 	add.w	r3, r7, #8
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff fe22 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa23 	bl	8008074 <SDMMC_GetCmdResp3>
 8007c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c30:	69fb      	ldr	r3, [r7, #28]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b088      	sub	sp, #32
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007c48:	2306      	movs	r3, #6
 8007c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c4c:	2340      	movs	r3, #64	; 0x40
 8007c4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c50:	2300      	movs	r3, #0
 8007c52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff fe03 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6a:	2106      	movs	r1, #6
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f8cf 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c74:	69fb      	ldr	r3, [r7, #28]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b088      	sub	sp, #32
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007c8a:	2333      	movs	r3, #51	; 0x33
 8007c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c8e:	2340      	movs	r3, #64	; 0x40
 8007c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c92:	2300      	movs	r3, #0
 8007c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c9c:	f107 0308 	add.w	r3, r7, #8
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff fde2 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cac:	2133      	movs	r1, #51	; 0x33
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f8ae 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3720      	adds	r7, #32
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ccc:	2302      	movs	r3, #2
 8007cce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007cd0:	23c0      	movs	r3, #192	; 0xc0
 8007cd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cde:	f107 0308 	add.w	r3, r7, #8
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff fdc1 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f97c 	bl	8007fe8 <SDMMC_GetCmdResp2>
 8007cf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3720      	adds	r7, #32
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007d0a:	2309      	movs	r3, #9
 8007d0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007d0e:	23c0      	movs	r3, #192	; 0xc0
 8007d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d1c:	f107 0308 	add.w	r3, r7, #8
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fda2 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f95d 	bl	8007fe8 <SDMMC_GetCmdResp2>
 8007d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d30:	69fb      	ldr	r3, [r7, #28]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b088      	sub	sp, #32
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d5a:	f107 0308 	add.w	r3, r7, #8
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff fd83 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	2103      	movs	r1, #3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f9bc 	bl	80080e8 <SDMMC_GetCmdResp6>
 8007d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d72:	69fb      	ldr	r3, [r7, #28]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3720      	adds	r7, #32
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007d8a:	230d      	movs	r3, #13
 8007d8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d8e:	2340      	movs	r3, #64	; 0x40
 8007d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d9c:	f107 0308 	add.w	r3, r7, #8
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff fd62 	bl	800786c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dac:	210d      	movs	r1, #13
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f82e 	bl	8007e10 <SDMMC_GetCmdResp1>
 8007db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007db6:	69fb      	ldr	r3, [r7, #28]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3720      	adds	r7, #32
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007dc0:	b490      	push	{r4, r7}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <SDMMC_GetCmdError+0x48>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a0f      	ldr	r2, [pc, #60]	; (8007e0c <SDMMC_GetCmdError+0x4c>)
 8007dce:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd2:	0a5b      	lsrs	r3, r3, #9
 8007dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ddc:	4623      	mov	r3, r4
 8007dde:	1e5c      	subs	r4, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d102      	bne.n	8007dea <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007de4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007de8:	e009      	b.n	8007dfe <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0f2      	beq.n	8007ddc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	22c5      	movs	r2, #197	; 0xc5
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc90      	pop	{r4, r7}
 8007e06:	4770      	bx	lr
 8007e08:	20000000 	.word	0x20000000
 8007e0c:	10624dd3 	.word	0x10624dd3

08007e10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007e1e:	4b6f      	ldr	r3, [pc, #444]	; (8007fdc <SDMMC_GetCmdResp1+0x1cc>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a6f      	ldr	r2, [pc, #444]	; (8007fe0 <SDMMC_GetCmdResp1+0x1d0>)
 8007e24:	fba2 2303 	umull	r2, r3, r2, r3
 8007e28:	0a5b      	lsrs	r3, r3, #9
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e30:	4623      	mov	r3, r4
 8007e32:	1e5c      	subs	r4, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d102      	bne.n	8007e3e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e3c:	e0c9      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <SDMMC_GetCmdResp1+0x20>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1eb      	bne.n	8007e30 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2204      	movs	r2, #4
 8007e68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e6a:	2304      	movs	r3, #4
 8007e6c:	e0b1      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d004      	beq.n	8007e84 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e0a6      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	22c5      	movs	r2, #197	; 0xc5
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7ff fd18 	bl	80078c0 <SDIO_GetCommandResponse>
 8007e90:	4603      	mov	r3, r0
 8007e92:	461a      	mov	r2, r3
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d001      	beq.n	8007e9e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e099      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7ff fd1a 	bl	80078da <SDIO_GetResponse>
 8007ea6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4b4e      	ldr	r3, [pc, #312]	; (8007fe4 <SDMMC_GetCmdResp1+0x1d4>)
 8007eac:	4013      	ands	r3, r2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e08d      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da02      	bge.n	8007ec2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ec0:	e087      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007ecc:	2340      	movs	r3, #64	; 0x40
 8007ece:	e080      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007eda:	2380      	movs	r3, #128	; 0x80
 8007edc:	e079      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eec:	e071      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007efc:	e069      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f0c:	e061      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f1c:	e059      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f2c:	e051      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f3c:	e049      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007f48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f4c:	e041      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f5c:	e039      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f6c:	e031      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007f78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007f7c:	e029      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007f88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f8c:	e021      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007f98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f9c:	e019      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007fac:	e011      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007fb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007fbc:	e009      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f003 0308 	and.w	r3, r3, #8
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007fc8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007fcc:	e001      	b.n	8007fd2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd90      	pop	{r4, r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000000 	.word	0x20000000
 8007fe0:	10624dd3 	.word	0x10624dd3
 8007fe4:	fdffe008 	.word	0xfdffe008

08007fe8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007fe8:	b490      	push	{r4, r7}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ff0:	4b1e      	ldr	r3, [pc, #120]	; (800806c <SDMMC_GetCmdResp2+0x84>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <SDMMC_GetCmdResp2+0x88>)
 8007ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffa:	0a5b      	lsrs	r3, r3, #9
 8007ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008000:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008004:	4623      	mov	r3, r4
 8008006:	1e5c      	subs	r4, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d102      	bne.n	8008012 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800800c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008010:	e026      	b.n	8008060 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008016:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0f0      	beq.n	8008004 <SDMMC_GetCmdResp2+0x1c>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1eb      	bne.n	8008004 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2204      	movs	r2, #4
 800803c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800803e:	2304      	movs	r3, #4
 8008040:	e00e      	b.n	8008060 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008054:	2301      	movs	r3, #1
 8008056:	e003      	b.n	8008060 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	22c5      	movs	r2, #197	; 0xc5
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bc90      	pop	{r4, r7}
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000000 	.word	0x20000000
 8008070:	10624dd3 	.word	0x10624dd3

08008074 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008074:	b490      	push	{r4, r7}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800807c:	4b18      	ldr	r3, [pc, #96]	; (80080e0 <SDMMC_GetCmdResp3+0x6c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a18      	ldr	r2, [pc, #96]	; (80080e4 <SDMMC_GetCmdResp3+0x70>)
 8008082:	fba2 2303 	umull	r2, r3, r2, r3
 8008086:	0a5b      	lsrs	r3, r3, #9
 8008088:	f241 3288 	movw	r2, #5000	; 0x1388
 800808c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008090:	4623      	mov	r3, r4
 8008092:	1e5c      	subs	r4, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008098:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800809c:	e01b      	b.n	80080d6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0f0      	beq.n	8008090 <SDMMC_GetCmdResp3+0x1c>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1eb      	bne.n	8008090 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2204      	movs	r2, #4
 80080c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080ca:	2304      	movs	r3, #4
 80080cc:	e003      	b.n	80080d6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	22c5      	movs	r2, #197	; 0xc5
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bc90      	pop	{r4, r7}
 80080de:	4770      	bx	lr
 80080e0:	20000000 	.word	0x20000000
 80080e4:	10624dd3 	.word	0x10624dd3

080080e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80080e8:	b590      	push	{r4, r7, lr}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	460b      	mov	r3, r1
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080f6:	4b34      	ldr	r3, [pc, #208]	; (80081c8 <SDMMC_GetCmdResp6+0xe0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a34      	ldr	r2, [pc, #208]	; (80081cc <SDMMC_GetCmdResp6+0xe4>)
 80080fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008100:	0a5b      	lsrs	r3, r3, #9
 8008102:	f241 3288 	movw	r2, #5000	; 0x1388
 8008106:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800810a:	4623      	mov	r3, r4
 800810c:	1e5c      	subs	r4, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008112:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008116:	e052      	b.n	80081be <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0f0      	beq.n	800810a <SDMMC_GetCmdResp6+0x22>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1eb      	bne.n	800810a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2204      	movs	r2, #4
 8008142:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008144:	2304      	movs	r3, #4
 8008146:	e03a      	b.n	80081be <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d004      	beq.n	800815e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800815a:	2301      	movs	r3, #1
 800815c:	e02f      	b.n	80081be <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff fbae 	bl	80078c0 <SDIO_GetCommandResponse>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	4293      	cmp	r3, r2
 800816c:	d001      	beq.n	8008172 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800816e:	2301      	movs	r3, #1
 8008170:	e025      	b.n	80081be <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	22c5      	movs	r2, #197	; 0xc5
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008178:	2100      	movs	r1, #0
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7ff fbad 	bl	80078da <SDIO_GetResponse>
 8008180:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d106      	bne.n	800819a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	0c1b      	lsrs	r3, r3, #16
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008196:	2300      	movs	r3, #0
 8008198:	e011      	b.n	80081be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80081a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081a8:	e009      	b.n	80081be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80081b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081b8:	e001      	b.n	80081be <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80081ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd90      	pop	{r4, r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000000 	.word	0x20000000
 80081cc:	10624dd3 	.word	0x10624dd3

080081d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80081d0:	b490      	push	{r4, r7}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081d8:	4b21      	ldr	r3, [pc, #132]	; (8008260 <SDMMC_GetCmdResp7+0x90>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a21      	ldr	r2, [pc, #132]	; (8008264 <SDMMC_GetCmdResp7+0x94>)
 80081de:	fba2 2303 	umull	r2, r3, r2, r3
 80081e2:	0a5b      	lsrs	r3, r3, #9
 80081e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80081ec:	4623      	mov	r3, r4
 80081ee:	1e5c      	subs	r4, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081f8:	e02c      	b.n	8008254 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f0      	beq.n	80081ec <SDMMC_GetCmdResp7+0x1c>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1eb      	bne.n	80081ec <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2204      	movs	r2, #4
 8008224:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008226:	2304      	movs	r3, #4
 8008228:	e014      	b.n	8008254 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800823c:	2301      	movs	r3, #1
 800823e:	e009      	b.n	8008254 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2240      	movs	r2, #64	; 0x40
 8008250:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008252:	2300      	movs	r3, #0
  
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bc90      	pop	{r4, r7}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000000 	.word	0x20000000
 8008264:	10624dd3 	.word	0x10624dd3

08008268 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008268:	b084      	sub	sp, #16
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	f107 001c 	add.w	r0, r7, #28
 8008276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	2b01      	cmp	r3, #1
 800827e:	d122      	bne.n	80082c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008284:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d105      	bne.n	80082ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fac0 	bl	8009840 <USB_CoreReset>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]
 80082c4:	e01a      	b.n	80082fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fab4 	bl	8009840 <USB_CoreReset>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38
 80082ee:	e005      	b.n	80082fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d10b      	bne.n	800831a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f043 0206 	orr.w	r2, r3, #6
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f043 0220 	orr.w	r2, r3, #32
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800831a:	7bfb      	ldrb	r3, [r7, #15]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008326:	b004      	add	sp, #16
 8008328:	4770      	bx	lr
	...

0800832c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4613      	mov	r3, r2
 8008338:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	2b02      	cmp	r3, #2
 800833e:	d165      	bne.n	800840c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4a41      	ldr	r2, [pc, #260]	; (8008448 <USB_SetTurnaroundTime+0x11c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d906      	bls.n	8008356 <USB_SetTurnaroundTime+0x2a>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4a40      	ldr	r2, [pc, #256]	; (800844c <USB_SetTurnaroundTime+0x120>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d802      	bhi.n	8008356 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008350:	230f      	movs	r3, #15
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e062      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4a3c      	ldr	r2, [pc, #240]	; (800844c <USB_SetTurnaroundTime+0x120>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d906      	bls.n	800836c <USB_SetTurnaroundTime+0x40>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	4a3b      	ldr	r2, [pc, #236]	; (8008450 <USB_SetTurnaroundTime+0x124>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d802      	bhi.n	800836c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008366:	230e      	movs	r3, #14
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	e057      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4a38      	ldr	r2, [pc, #224]	; (8008450 <USB_SetTurnaroundTime+0x124>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d906      	bls.n	8008382 <USB_SetTurnaroundTime+0x56>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4a37      	ldr	r2, [pc, #220]	; (8008454 <USB_SetTurnaroundTime+0x128>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d802      	bhi.n	8008382 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800837c:	230d      	movs	r3, #13
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e04c      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	4a33      	ldr	r2, [pc, #204]	; (8008454 <USB_SetTurnaroundTime+0x128>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d906      	bls.n	8008398 <USB_SetTurnaroundTime+0x6c>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	4a32      	ldr	r2, [pc, #200]	; (8008458 <USB_SetTurnaroundTime+0x12c>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d802      	bhi.n	8008398 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008392:	230c      	movs	r3, #12
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	e041      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4a2f      	ldr	r2, [pc, #188]	; (8008458 <USB_SetTurnaroundTime+0x12c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d906      	bls.n	80083ae <USB_SetTurnaroundTime+0x82>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	4a2e      	ldr	r2, [pc, #184]	; (800845c <USB_SetTurnaroundTime+0x130>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d802      	bhi.n	80083ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083a8:	230b      	movs	r3, #11
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e036      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4a2a      	ldr	r2, [pc, #168]	; (800845c <USB_SetTurnaroundTime+0x130>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d906      	bls.n	80083c4 <USB_SetTurnaroundTime+0x98>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	4a29      	ldr	r2, [pc, #164]	; (8008460 <USB_SetTurnaroundTime+0x134>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d802      	bhi.n	80083c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083be:	230a      	movs	r3, #10
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e02b      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4a26      	ldr	r2, [pc, #152]	; (8008460 <USB_SetTurnaroundTime+0x134>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d906      	bls.n	80083da <USB_SetTurnaroundTime+0xae>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4a25      	ldr	r2, [pc, #148]	; (8008464 <USB_SetTurnaroundTime+0x138>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d802      	bhi.n	80083da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083d4:	2309      	movs	r3, #9
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	e020      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	4a21      	ldr	r2, [pc, #132]	; (8008464 <USB_SetTurnaroundTime+0x138>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d906      	bls.n	80083f0 <USB_SetTurnaroundTime+0xc4>
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4a20      	ldr	r2, [pc, #128]	; (8008468 <USB_SetTurnaroundTime+0x13c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d802      	bhi.n	80083f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80083ea:	2308      	movs	r3, #8
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	e015      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4a1d      	ldr	r2, [pc, #116]	; (8008468 <USB_SetTurnaroundTime+0x13c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d906      	bls.n	8008406 <USB_SetTurnaroundTime+0xda>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4a1c      	ldr	r2, [pc, #112]	; (800846c <USB_SetTurnaroundTime+0x140>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d802      	bhi.n	8008406 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008400:	2307      	movs	r3, #7
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e00a      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008406:	2306      	movs	r3, #6
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	e007      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008412:	2309      	movs	r3, #9
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e001      	b.n	800841c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008418:	2309      	movs	r3, #9
 800841a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	029b      	lsls	r3, r3, #10
 8008430:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008434:	431a      	orrs	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	371c      	adds	r7, #28
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	00d8acbf 	.word	0x00d8acbf
 800844c:	00e4e1bf 	.word	0x00e4e1bf
 8008450:	00f423ff 	.word	0x00f423ff
 8008454:	0106737f 	.word	0x0106737f
 8008458:	011a499f 	.word	0x011a499f
 800845c:	01312cff 	.word	0x01312cff
 8008460:	014ca43f 	.word	0x014ca43f
 8008464:	016e35ff 	.word	0x016e35ff
 8008468:	01a6ab1f 	.word	0x01a6ab1f
 800846c:	01e847ff 	.word	0x01e847ff

08008470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f043 0201 	orr.w	r2, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f023 0201 	bic.w	r2, r3, #1
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d106      	bne.n	80084e0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	e00b      	b.n	80084f8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d106      	bne.n	80084f4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60da      	str	r2, [r3, #12]
 80084f2:	e001      	b.n	80084f8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e003      	b.n	8008500 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80084f8:	2032      	movs	r0, #50	; 0x32
 80084fa:	f7f9 fbb5 	bl	8001c68 <HAL_Delay>

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008508:	b084      	sub	sp, #16
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008522:	2300      	movs	r3, #0
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	e009      	b.n	800853c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	3340      	adds	r3, #64	; 0x40
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	2200      	movs	r2, #0
 8008534:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	3301      	adds	r3, #1
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2b0e      	cmp	r3, #14
 8008540:	d9f2      	bls.n	8008528 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11c      	bne.n	8008582 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008556:	f043 0302 	orr.w	r3, r3, #2
 800855a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	e005      	b.n	800858e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008594:	461a      	mov	r2, r3
 8008596:	2300      	movs	r3, #0
 8008598:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a0:	4619      	mov	r1, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a8:	461a      	mov	r2, r3
 80085aa:	680b      	ldr	r3, [r1, #0]
 80085ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d10c      	bne.n	80085ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d104      	bne.n	80085c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80085ba:	2100      	movs	r1, #0
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f949 	bl	8008854 <USB_SetDevSpeed>
 80085c2:	e008      	b.n	80085d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80085c4:	2101      	movs	r1, #1
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f944 	bl	8008854 <USB_SetDevSpeed>
 80085cc:	e003      	b.n	80085d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80085ce:	2103      	movs	r1, #3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f93f 	bl	8008854 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085d6:	2110      	movs	r1, #16
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f8f3 	bl	80087c4 <USB_FlushTxFifo>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f911 	bl	8008810 <USB_FlushRxFifo>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fe:	461a      	mov	r2, r3
 8008600:	2300      	movs	r3, #0
 8008602:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860a:	461a      	mov	r2, r3
 800860c:	2300      	movs	r3, #0
 800860e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008616:	461a      	mov	r2, r3
 8008618:	2300      	movs	r3, #0
 800861a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800861c:	2300      	movs	r3, #0
 800861e:	613b      	str	r3, [r7, #16]
 8008620:	e043      	b.n	80086aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008638:	d118      	bne.n	800866c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10a      	bne.n	8008656 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4413      	add	r3, r2
 8008648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864c:	461a      	mov	r2, r3
 800864e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	e013      	b.n	800867e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008662:	461a      	mov	r2, r3
 8008664:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e008      	b.n	800867e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008678:	461a      	mov	r2, r3
 800867a:	2300      	movs	r3, #0
 800867c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4413      	add	r3, r2
 8008686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800868a:	461a      	mov	r2, r3
 800868c:	2300      	movs	r3, #0
 800868e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869c:	461a      	mov	r2, r3
 800869e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	3301      	adds	r3, #1
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d3b7      	bcc.n	8008622 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086b2:	2300      	movs	r3, #0
 80086b4:	613b      	str	r3, [r7, #16]
 80086b6:	e043      	b.n	8008740 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086ce:	d118      	bne.n	8008702 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e2:	461a      	mov	r2, r3
 80086e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	e013      	b.n	8008714 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f8:	461a      	mov	r2, r3
 80086fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	e008      	b.n	8008714 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870e:	461a      	mov	r2, r3
 8008710:	2300      	movs	r3, #0
 8008712:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008720:	461a      	mov	r2, r3
 8008722:	2300      	movs	r3, #0
 8008724:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008732:	461a      	mov	r2, r3
 8008734:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008738:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	3301      	adds	r3, #1
 800873e:	613b      	str	r3, [r7, #16]
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	429a      	cmp	r2, r3
 8008746:	d3b7      	bcc.n	80086b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800875a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008768:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	2b00      	cmp	r3, #0
 800876e:	d105      	bne.n	800877c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	f043 0210 	orr.w	r2, r3, #16
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699a      	ldr	r2, [r3, #24]
 8008780:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <USB_DevInit+0x2b8>)
 8008782:	4313      	orrs	r3, r2
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	f043 0208 	orr.w	r2, r3, #8
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800879a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879c:	2b01      	cmp	r3, #1
 800879e:	d107      	bne.n	80087b0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087a8:	f043 0304 	orr.w	r3, r3, #4
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087bc:	b004      	add	sp, #16
 80087be:	4770      	bx	lr
 80087c0:	803c3800 	.word	0x803c3800

080087c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	019b      	lsls	r3, r3, #6
 80087d6:	f043 0220 	orr.w	r2, r3, #32
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3301      	adds	r3, #1
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4a09      	ldr	r2, [pc, #36]	; (800880c <USB_FlushTxFifo+0x48>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d901      	bls.n	80087f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e006      	b.n	80087fe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d0f0      	beq.n	80087de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	00030d40 	.word	0x00030d40

08008810 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2210      	movs	r2, #16
 8008820:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3301      	adds	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4a09      	ldr	r2, [pc, #36]	; (8008850 <USB_FlushRxFifo+0x40>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d901      	bls.n	8008834 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e006      	b.n	8008842 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	f003 0310 	and.w	r3, r3, #16
 800883c:	2b10      	cmp	r3, #16
 800883e:	d0f0      	beq.n	8008822 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	00030d40 	.word	0x00030d40

08008854 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008874:	4313      	orrs	r3, r2
 8008876:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008886:	b480      	push	{r7}
 8008888:	b087      	sub	sp, #28
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 0306 	and.w	r3, r3, #6
 800889e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d102      	bne.n	80088ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80088a6:	2300      	movs	r3, #0
 80088a8:	75fb      	strb	r3, [r7, #23]
 80088aa:	e00a      	b.n	80088c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d002      	beq.n	80088b8 <USB_GetDevSpeed+0x32>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b06      	cmp	r3, #6
 80088b6:	d102      	bne.n	80088be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80088b8:	2302      	movs	r3, #2
 80088ba:	75fb      	strb	r3, [r7, #23]
 80088bc:	e001      	b.n	80088c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80088be:	230f      	movs	r3, #15
 80088c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	785b      	ldrb	r3, [r3, #1]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d13a      	bne.n	8008962 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	f003 030f 	and.w	r3, r3, #15
 80088fc:	2101      	movs	r1, #1
 80088fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008902:	b29b      	uxth	r3, r3
 8008904:	68f9      	ldr	r1, [r7, #12]
 8008906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800890a:	4313      	orrs	r3, r2
 800890c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d155      	bne.n	80089d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	78db      	ldrb	r3, [r3, #3]
 800893e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008940:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	059b      	lsls	r3, r3, #22
 8008946:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008948:	4313      	orrs	r3, r2
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800895a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	e036      	b.n	80089d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008968:	69da      	ldr	r2, [r3, #28]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	f003 030f 	and.w	r3, r3, #15
 8008972:	2101      	movs	r1, #1
 8008974:	fa01 f303 	lsl.w	r3, r1, r3
 8008978:	041b      	lsls	r3, r3, #16
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008980:	4313      	orrs	r3, r2
 8008982:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d11a      	bne.n	80089d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	78db      	ldrb	r3, [r3, #3]
 80089b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80089b6:	430b      	orrs	r3, r1
 80089b8:	4313      	orrs	r3, r2
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d161      	bne.n	8008ac0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a12:	d11f      	bne.n	8008a54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	0151      	lsls	r1, r2, #5
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	440a      	add	r2, r1
 8008a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	0151      	lsls	r1, r2, #5
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	440a      	add	r2, r1
 8008a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 030f 	and.w	r3, r3, #15
 8008a64:	2101      	movs	r1, #1
 8008a66:	fa01 f303 	lsl.w	r3, r1, r3
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	43db      	mvns	r3, r3
 8008a6e:	68f9      	ldr	r1, [r7, #12]
 8008a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a74:	4013      	ands	r3, r2
 8008a76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7e:	69da      	ldr	r2, [r3, #28]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	f003 030f 	and.w	r3, r3, #15
 8008a88:	2101      	movs	r1, #1
 8008a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	43db      	mvns	r3, r3
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a98:	4013      	ands	r3, r2
 8008a9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	0159      	lsls	r1, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	440b      	add	r3, r1
 8008ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4b35      	ldr	r3, [pc, #212]	; (8008b90 <USB_DeactivateEndpoint+0x1b0>)
 8008aba:	4013      	ands	r3, r2
 8008abc:	600b      	str	r3, [r1, #0]
 8008abe:	e060      	b.n	8008b82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ad6:	d11f      	bne.n	8008b18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	0151      	lsls	r1, r2, #5
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	440a      	add	r2, r1
 8008aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008af2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008af6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	f003 030f 	and.w	r3, r3, #15
 8008b28:	2101      	movs	r1, #1
 8008b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	43db      	mvns	r3, r3
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b38:	4013      	ands	r3, r2
 8008b3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b42:	69da      	ldr	r2, [r3, #28]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b52:	041b      	lsls	r3, r3, #16
 8008b54:	43db      	mvns	r3, r3
 8008b56:	68f9      	ldr	r1, [r7, #12]
 8008b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	0159      	lsls	r1, r3, #5
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	440b      	add	r3, r1
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <USB_DeactivateEndpoint+0x1b4>)
 8008b7e:	4013      	ands	r3, r2
 8008b80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	ec337800 	.word	0xec337800
 8008b94:	eff37800 	.word	0xeff37800

08008b98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	; 0x28
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	785b      	ldrb	r3, [r3, #1]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	f040 815c 	bne.w	8008e72 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d132      	bne.n	8008c28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	0151      	lsls	r1, r2, #5
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008be0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	69fa      	ldr	r2, [r7, #28]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	0151      	lsls	r1, r2, #5
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	440a      	add	r2, r1
 8008c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c20:	0cdb      	lsrs	r3, r3, #19
 8008c22:	04db      	lsls	r3, r3, #19
 8008c24:	6113      	str	r3, [r2, #16]
 8008c26:	e074      	b.n	8008d12 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c42:	0cdb      	lsrs	r3, r3, #19
 8008c44:	04db      	lsls	r3, r3, #19
 8008c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c78:	691a      	ldr	r2, [r3, #16]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	6959      	ldr	r1, [r3, #20]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	440b      	add	r3, r1
 8008c84:	1e59      	subs	r1, r3, #1
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c8e:	04d9      	lsls	r1, r3, #19
 8008c90:	4b9d      	ldr	r3, [pc, #628]	; (8008f08 <USB_EPStartXfer+0x370>)
 8008c92:	400b      	ands	r3, r1
 8008c94:	69b9      	ldr	r1, [r7, #24]
 8008c96:	0148      	lsls	r0, r1, #5
 8008c98:	69f9      	ldr	r1, [r7, #28]
 8008c9a:	4401      	add	r1, r0
 8008c9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb0:	691a      	ldr	r2, [r3, #16]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cba:	69b9      	ldr	r1, [r7, #24]
 8008cbc:	0148      	lsls	r0, r1, #5
 8008cbe:	69f9      	ldr	r1, [r7, #28]
 8008cc0:	4401      	add	r1, r0
 8008cc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	78db      	ldrb	r3, [r3, #3]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d11f      	bne.n	8008d12 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	0151      	lsls	r1, r2, #5
 8008ce4:	69fa      	ldr	r2, [r7, #28]
 8008ce6:	440a      	add	r2, r1
 8008ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008cf0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	0151      	lsls	r1, r2, #5
 8008d04:	69fa      	ldr	r2, [r7, #28]
 8008d06:	440a      	add	r2, r1
 8008d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d14b      	bne.n	8008db0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	78db      	ldrb	r3, [r3, #3]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d128      	bne.n	8008d8e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d110      	bne.n	8008d6e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	0151      	lsls	r1, r2, #5
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	440a      	add	r2, r1
 8008d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	e00f      	b.n	8008d8e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	e12f      	b.n	8009010 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	0151      	lsls	r1, r2, #5
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	440a      	add	r2, r1
 8008dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008dce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	78db      	ldrb	r3, [r3, #3]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d015      	beq.n	8008e04 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 8117 	beq.w	8009010 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	f003 030f 	and.w	r3, r3, #15
 8008df2:	2101      	movs	r1, #1
 8008df4:	fa01 f303 	lsl.w	r3, r1, r3
 8008df8:	69f9      	ldr	r1, [r7, #28]
 8008dfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	634b      	str	r3, [r1, #52]	; 0x34
 8008e02:	e105      	b.n	8009010 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d110      	bne.n	8008e36 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	0151      	lsls	r1, r2, #5
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	440a      	add	r2, r1
 8008e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	e00f      	b.n	8008e56 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	0151      	lsls	r1, r2, #5
 8008e48:	69fa      	ldr	r2, [r7, #28]
 8008e4a:	440a      	add	r2, r1
 8008e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	68d9      	ldr	r1, [r3, #12]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	781a      	ldrb	r2, [r3, #0]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	b298      	uxth	r0, r3
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	4603      	mov	r3, r0
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 fa2b 	bl	80092c6 <USB_WritePacket>
 8008e70:	e0ce      	b.n	8009010 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	0151      	lsls	r1, r2, #5
 8008e84:	69fa      	ldr	r2, [r7, #28]
 8008e86:	440a      	add	r2, r1
 8008e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e8c:	0cdb      	lsrs	r3, r3, #19
 8008e8e:	04db      	lsls	r3, r3, #19
 8008e90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	0151      	lsls	r1, r2, #5
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	440a      	add	r2, r1
 8008ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008eb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008eb4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d126      	bne.n	8008f0c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ed4:	69b9      	ldr	r1, [r7, #24]
 8008ed6:	0148      	lsls	r0, r1, #5
 8008ed8:	69f9      	ldr	r1, [r7, #28]
 8008eda:	4401      	add	r1, r0
 8008edc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	0151      	lsls	r1, r2, #5
 8008ef6:	69fa      	ldr	r2, [r7, #28]
 8008ef8:	440a      	add	r2, r1
 8008efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f02:	6113      	str	r3, [r2, #16]
 8008f04:	e036      	b.n	8008f74 <USB_EPStartXfer+0x3dc>
 8008f06:	bf00      	nop
 8008f08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	695a      	ldr	r2, [r3, #20]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	4413      	add	r3, r2
 8008f16:	1e5a      	subs	r2, r3, #1
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f20:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2e:	691a      	ldr	r2, [r3, #16]
 8008f30:	8afb      	ldrh	r3, [r7, #22]
 8008f32:	04d9      	lsls	r1, r3, #19
 8008f34:	4b39      	ldr	r3, [pc, #228]	; (800901c <USB_EPStartXfer+0x484>)
 8008f36:	400b      	ands	r3, r1
 8008f38:	69b9      	ldr	r1, [r7, #24]
 8008f3a:	0148      	lsls	r0, r1, #5
 8008f3c:	69f9      	ldr	r1, [r7, #28]
 8008f3e:	4401      	add	r1, r0
 8008f40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f44:	4313      	orrs	r3, r2
 8008f46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f54:	691a      	ldr	r2, [r3, #16]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	8af9      	ldrh	r1, [r7, #22]
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f64:	69b9      	ldr	r1, [r7, #24]
 8008f66:	0148      	lsls	r0, r1, #5
 8008f68:	69f9      	ldr	r1, [r7, #28]
 8008f6a:	4401      	add	r1, r0
 8008f6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f70:	4313      	orrs	r3, r2
 8008f72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d10d      	bne.n	8008f96 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d009      	beq.n	8008f96 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	68d9      	ldr	r1, [r3, #12]
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f92:	460a      	mov	r2, r1
 8008f94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	78db      	ldrb	r3, [r3, #3]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d128      	bne.n	8008ff0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d110      	bne.n	8008fd0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	0151      	lsls	r1, r2, #5
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	440a      	add	r2, r1
 8008fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	e00f      	b.n	8008ff0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	0151      	lsls	r1, r2, #5
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	0151      	lsls	r1, r2, #5
 8009002:	69fa      	ldr	r2, [r7, #28]
 8009004:	440a      	add	r2, r1
 8009006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800900a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800900e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	1ff80000 	.word	0x1ff80000

08009020 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	2b01      	cmp	r3, #1
 800903e:	f040 80cd 	bne.w	80091dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d132      	bne.n	80090b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	440a      	add	r2, r1
 8009060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009064:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009068:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800906c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	0151      	lsls	r1, r2, #5
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	440a      	add	r2, r1
 8009084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800908c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	4413      	add	r3, r2
 8009096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	0151      	lsls	r1, r2, #5
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	440a      	add	r2, r1
 80090a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090a8:	0cdb      	lsrs	r3, r3, #19
 80090aa:	04db      	lsls	r3, r3, #19
 80090ac:	6113      	str	r3, [r2, #16]
 80090ae:	e04e      	b.n	800914e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	0151      	lsls	r1, r2, #5
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	440a      	add	r2, r1
 80090c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ca:	0cdb      	lsrs	r3, r3, #19
 80090cc:	04db      	lsls	r3, r3, #19
 80090ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	0151      	lsls	r1, r2, #5
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	440a      	add	r2, r1
 80090e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	695a      	ldr	r2, [r3, #20]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d903      	bls.n	8009108 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009122:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009134:	691a      	ldr	r2, [r3, #16]
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800913e:	6939      	ldr	r1, [r7, #16]
 8009140:	0148      	lsls	r0, r1, #5
 8009142:	6979      	ldr	r1, [r7, #20]
 8009144:	4401      	add	r1, r0
 8009146:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800914a:	4313      	orrs	r3, r2
 800914c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d11e      	bne.n	8009192 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d009      	beq.n	8009170 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009168:	461a      	mov	r2, r3
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	0151      	lsls	r1, r2, #5
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	440a      	add	r2, r1
 8009186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	e092      	b.n	80092b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	4413      	add	r3, r2
 800919a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	0151      	lsls	r1, r2, #5
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	440a      	add	r2, r1
 80091a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d07e      	beq.n	80092b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	f003 030f 	and.w	r3, r3, #15
 80091ca:	2101      	movs	r1, #1
 80091cc:	fa01 f303 	lsl.w	r3, r1, r3
 80091d0:	6979      	ldr	r1, [r7, #20]
 80091d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091d6:	4313      	orrs	r3, r2
 80091d8:	634b      	str	r3, [r1, #52]	; 0x34
 80091da:	e06d      	b.n	80092b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	0151      	lsls	r1, r2, #5
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	440a      	add	r2, r1
 80091f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091f6:	0cdb      	lsrs	r3, r3, #19
 80091f8:	04db      	lsls	r3, r3, #19
 80091fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	440a      	add	r2, r1
 8009212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009216:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800921a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800921e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	440a      	add	r2, r1
 8009246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800924a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800924e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925c:	691a      	ldr	r2, [r3, #16]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009266:	6939      	ldr	r1, [r7, #16]
 8009268:	0148      	lsls	r0, r1, #5
 800926a:	6979      	ldr	r1, [r7, #20]
 800926c:	4401      	add	r1, r0
 800926e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009272:	4313      	orrs	r3, r2
 8009274:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009276:	79fb      	ldrb	r3, [r7, #7]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d10d      	bne.n	8009298 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d009      	beq.n	8009298 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	68d9      	ldr	r1, [r3, #12]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009294:	460a      	mov	r2, r1
 8009296:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	371c      	adds	r7, #28
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b089      	sub	sp, #36	; 0x24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	4611      	mov	r1, r2
 80092d2:	461a      	mov	r2, r3
 80092d4:	460b      	mov	r3, r1
 80092d6:	71fb      	strb	r3, [r7, #7]
 80092d8:	4613      	mov	r3, r2
 80092da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80092e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d11a      	bne.n	8009322 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80092ec:	88bb      	ldrh	r3, [r7, #4]
 80092ee:	3303      	adds	r3, #3
 80092f0:	089b      	lsrs	r3, r3, #2
 80092f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80092f4:	2300      	movs	r3, #0
 80092f6:	61bb      	str	r3, [r7, #24]
 80092f8:	e00f      	b.n	800931a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	031a      	lsls	r2, r3, #12
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	4413      	add	r3, r2
 8009302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009306:	461a      	mov	r2, r3
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	3304      	adds	r3, #4
 8009312:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	3301      	adds	r3, #1
 8009318:	61bb      	str	r3, [r7, #24]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	429a      	cmp	r2, r3
 8009320:	d3eb      	bcc.n	80092fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3724      	adds	r7, #36	; 0x24
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009330:	b480      	push	{r7}
 8009332:	b089      	sub	sp, #36	; 0x24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	4613      	mov	r3, r2
 800933c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009346:	88fb      	ldrh	r3, [r7, #6]
 8009348:	3303      	adds	r3, #3
 800934a:	089b      	lsrs	r3, r3, #2
 800934c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800934e:	2300      	movs	r3, #0
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	e00b      	b.n	800936c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	3304      	adds	r3, #4
 8009364:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	3301      	adds	r3, #1
 800936a:	61bb      	str	r3, [r7, #24]
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	429a      	cmp	r2, r3
 8009372:	d3ef      	bcc.n	8009354 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009374:	69fb      	ldr	r3, [r7, #28]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3724      	adds	r7, #36	; 0x24
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009382:	b480      	push	{r7}
 8009384:	b085      	sub	sp, #20
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	785b      	ldrb	r3, [r3, #1]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d12c      	bne.n	80093f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	db12      	blt.n	80093d6 <USB_EPSetStall+0x54>
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00f      	beq.n	80093d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	0151      	lsls	r1, r2, #5
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	440a      	add	r2, r1
 80093cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	0151      	lsls	r1, r2, #5
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	440a      	add	r2, r1
 80093ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	e02b      	b.n	8009450 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	db12      	blt.n	8009430 <USB_EPSetStall+0xae>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00f      	beq.n	8009430 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	440a      	add	r2, r1
 8009426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800942a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800942e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	0151      	lsls	r1, r2, #5
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	440a      	add	r2, r1
 8009446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800944a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800944e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800945e:	b480      	push	{r7}
 8009460:	b085      	sub	sp, #20
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	785b      	ldrb	r3, [r3, #1]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d128      	bne.n	80094cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	440a      	add	r2, r1
 8009490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009494:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009498:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	78db      	ldrb	r3, [r3, #3]
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d003      	beq.n	80094aa <USB_EPClearStall+0x4c>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	78db      	ldrb	r3, [r3, #3]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d138      	bne.n	800951c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	0151      	lsls	r1, r2, #5
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	440a      	add	r2, r1
 80094c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	e027      	b.n	800951c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	0151      	lsls	r1, r2, #5
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	440a      	add	r2, r1
 80094e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	78db      	ldrb	r3, [r3, #3]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d003      	beq.n	80094fc <USB_EPClearStall+0x9e>
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	78db      	ldrb	r3, [r3, #3]
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d10f      	bne.n	800951c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	015a      	lsls	r2, r3, #5
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4413      	add	r3, r2
 8009504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	0151      	lsls	r1, r2, #5
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	440a      	add	r2, r1
 8009512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800951a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800952a:	b480      	push	{r7}
 800952c:	b085      	sub	sp, #20
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	460b      	mov	r3, r1
 8009534:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009548:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800954c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800955e:	68f9      	ldr	r1, [r7, #12]
 8009560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009564:	4313      	orrs	r3, r2
 8009566:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009576:	b480      	push	{r7}
 8009578:	b085      	sub	sp, #20
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009590:	f023 0303 	bic.w	r3, r3, #3
 8009594:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095a4:	f023 0302 	bic.w	r3, r3, #2
 80095a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095d2:	f023 0303 	bic.w	r3, r3, #3
 80095d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095e6:	f043 0302 	orr.w	r3, r3, #2
 80095ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b085      	sub	sp, #20
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4013      	ands	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009612:	68fb      	ldr	r3, [r7, #12]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	4013      	ands	r3, r2
 8009642:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	0c1b      	lsrs	r3, r3, #16
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	4013      	ands	r3, r2
 8009676:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	b29b      	uxth	r3, r3
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	4013      	ands	r3, r2
 80096b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096b6:	68bb      	ldr	r3, [r7, #8]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	f003 030f 	and.w	r3, r3, #15
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	fa22 f303 	lsr.w	r3, r2, r3
 80096f4:	01db      	lsls	r3, r3, #7
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	4013      	ands	r3, r2
 8009710:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009712:	68bb      	ldr	r3, [r7, #8]
}
 8009714:	4618      	mov	r0, r3
 8009716:	371c      	adds	r7, #28
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	f003 0301 	and.w	r3, r3, #1
}
 8009730:	4618      	mov	r0, r3
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009756:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800975a:	f023 0307 	bic.w	r3, r3, #7
 800975e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800976e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009772:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
	...

08009784 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	460b      	mov	r3, r1
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	333c      	adds	r3, #60	; 0x3c
 800979a:	3304      	adds	r3, #4
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	4a26      	ldr	r2, [pc, #152]	; (800983c <USB_EP0_OutStart+0xb8>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d90a      	bls.n	80097be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097b8:	d101      	bne.n	80097be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	e037      	b.n	800982e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c4:	461a      	mov	r2, r3
 80097c6:	2300      	movs	r3, #0
 80097c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ec:	f043 0318 	orr.w	r3, r3, #24
 80097f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009800:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009804:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d10f      	bne.n	800982c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009812:	461a      	mov	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009826:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800982a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	4f54300a 	.word	0x4f54300a

08009840 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <USB_CoreReset+0x64>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d901      	bls.n	800985e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e01b      	b.n	8009896 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	daf2      	bge.n	800984c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	f043 0201 	orr.w	r2, r3, #1
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3301      	adds	r3, #1
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4a09      	ldr	r2, [pc, #36]	; (80098a4 <USB_CoreReset+0x64>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d901      	bls.n	8009888 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e006      	b.n	8009896 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b01      	cmp	r3, #1
 8009892:	d0f0      	beq.n	8009876 <USB_CoreReset+0x36>

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	00030d40 	.word	0x00030d40

080098a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80098ac:	4904      	ldr	r1, [pc, #16]	; (80098c0 <MX_FATFS_Init+0x18>)
 80098ae:	4805      	ldr	r0, [pc, #20]	; (80098c4 <MX_FATFS_Init+0x1c>)
 80098b0:	f001 fdea 	bl	800b488 <FATFS_LinkDriver>
 80098b4:	4603      	mov	r3, r0
 80098b6:	461a      	mov	r2, r3
 80098b8:	4b03      	ldr	r3, [pc, #12]	; (80098c8 <MX_FATFS_Init+0x20>)
 80098ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80098bc:	bf00      	nop
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20000600 	.word	0x20000600
 80098c4:	0800c18c 	.word	0x0800c18c
 80098c8:	200005fc 	.word	0x200005fc

080098cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80098d6:	f000 f879 	bl	80099cc <BSP_SD_IsDetected>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d001      	beq.n	80098e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e012      	b.n	800990a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80098e4:	480b      	ldr	r0, [pc, #44]	; (8009914 <BSP_SD_Init+0x48>)
 80098e6:	f7fb fb85 	bl	8004ff4 <HAL_SD_Init>
 80098ea:	4603      	mov	r3, r0
 80098ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d109      	bne.n	8009908 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80098f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80098f8:	4806      	ldr	r0, [pc, #24]	; (8009914 <BSP_SD_Init+0x48>)
 80098fa:	f7fc f973 	bl	8005be4 <HAL_SD_ConfigWideBusOperation>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009908:	79fb      	ldrb	r3, [r7, #7]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20000474 	.word	0x20000474

08009918 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af02      	add	r7, sp, #8
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	68f9      	ldr	r1, [r7, #12]
 8009934:	4806      	ldr	r0, [pc, #24]	; (8009950 <BSP_SD_ReadBlocks+0x38>)
 8009936:	f7fb fbed 	bl	8005114 <HAL_SD_ReadBlocks>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009944:	7dfb      	ldrb	r3, [r7, #23]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20000474 	.word	0x20000474

08009954 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af02      	add	r7, sp, #8
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	68f9      	ldr	r1, [r7, #12]
 8009970:	4806      	ldr	r0, [pc, #24]	; (800998c <BSP_SD_WriteBlocks+0x38>)
 8009972:	f7fb fdc7 	bl	8005504 <HAL_SD_WriteBlocks>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009980:	7dfb      	ldrb	r3, [r7, #23]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000474 	.word	0x20000474

08009990 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009994:	4805      	ldr	r0, [pc, #20]	; (80099ac <BSP_SD_GetCardState+0x1c>)
 8009996:	f7fc f9a1 	bl	8005cdc <HAL_SD_GetCardState>
 800999a:	4603      	mov	r3, r0
 800999c:	2b04      	cmp	r3, #4
 800999e:	bf14      	ite	ne
 80099a0:	2301      	movne	r3, #1
 80099a2:	2300      	moveq	r3, #0
 80099a4:	b2db      	uxtb	r3, r3
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20000474 	.word	0x20000474

080099b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	4803      	ldr	r0, [pc, #12]	; (80099c8 <BSP_SD_GetCardInfo+0x18>)
 80099bc:	f7fc f8e6 	bl	8005b8c <HAL_SD_GetCardInfo>
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	20000474 	.word	0x20000474

080099cc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80099d2:	2301      	movs	r3, #1
 80099d4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80099d6:	f000 f80b 	bl	80099f0 <BSP_PlatformIsDetected>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80099e0:	2300      	movs	r3, #0
 80099e2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	b2db      	uxtb	r3, r3
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80099f6:	2301      	movs	r3, #1
 80099f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80099fa:	2180      	movs	r1, #128	; 0x80
 80099fc:	4806      	ldr	r0, [pc, #24]	; (8009a18 <BSP_PlatformIsDetected+0x28>)
 80099fe:	f7f8 ff67 	bl	80028d0 <HAL_GPIO_ReadPin>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	40021000 	.word	0x40021000

08009a1c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009a26:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <SD_CheckStatus+0x38>)
 8009a28:	2201      	movs	r2, #1
 8009a2a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009a2c:	f7ff ffb0 	bl	8009990 <BSP_SD_GetCardState>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d107      	bne.n	8009a46 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009a36:	4b07      	ldr	r3, [pc, #28]	; (8009a54 <SD_CheckStatus+0x38>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f023 0301 	bic.w	r3, r3, #1
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <SD_CheckStatus+0x38>)
 8009a44:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009a46:	4b03      	ldr	r3, [pc, #12]	; (8009a54 <SD_CheckStatus+0x38>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	b2db      	uxtb	r3, r3
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20000009 	.word	0x20000009

08009a58 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009a62:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <SD_initialize+0x38>)
 8009a64:	2201      	movs	r2, #1
 8009a66:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009a68:	f7ff ff30 	bl	80098cc <BSP_SD_Init>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d107      	bne.n	8009a82 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff ffd1 	bl	8009a1c <SD_CheckStatus>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <SD_initialize+0x38>)
 8009a80:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009a82:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <SD_initialize+0x38>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	b2db      	uxtb	r3, r3
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20000009 	.word	0x20000009

08009a94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7ff ffbb 	bl	8009a1c <SD_CheckStatus>
 8009aa6:	4603      	mov	r3, r0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	6879      	ldr	r1, [r7, #4]
 8009acc:	68b8      	ldr	r0, [r7, #8]
 8009ace:	f7ff ff23 	bl	8009918 <BSP_SD_ReadBlocks>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d107      	bne.n	8009ae8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009ad8:	bf00      	nop
 8009ada:	f7ff ff59 	bl	8009990 <BSP_SD_GetCardState>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1fa      	bne.n	8009ada <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b086      	sub	sp, #24
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
 8009afc:	603b      	str	r3, [r7, #0]
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	6879      	ldr	r1, [r7, #4]
 8009b0e:	68b8      	ldr	r0, [r7, #8]
 8009b10:	f7ff ff20 	bl	8009954 <BSP_SD_WriteBlocks>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d107      	bne.n	8009b2a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009b1a:	bf00      	nop
 8009b1c:	f7ff ff38 	bl	8009990 <BSP_SD_GetCardState>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1fa      	bne.n	8009b1c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b08c      	sub	sp, #48	; 0x30
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	603a      	str	r2, [r7, #0]
 8009b3e:	71fb      	strb	r3, [r7, #7]
 8009b40:	460b      	mov	r3, r1
 8009b42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009b4a:	4b25      	ldr	r3, [pc, #148]	; (8009be0 <SD_ioctl+0xac>)
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <SD_ioctl+0x28>
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e03c      	b.n	8009bd6 <SD_ioctl+0xa2>

  switch (cmd)
 8009b5c:	79bb      	ldrb	r3, [r7, #6]
 8009b5e:	2b03      	cmp	r3, #3
 8009b60:	d834      	bhi.n	8009bcc <SD_ioctl+0x98>
 8009b62:	a201      	add	r2, pc, #4	; (adr r2, 8009b68 <SD_ioctl+0x34>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009b79 	.word	0x08009b79
 8009b6c:	08009b81 	.word	0x08009b81
 8009b70:	08009b99 	.word	0x08009b99
 8009b74:	08009bb3 	.word	0x08009bb3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b7e:	e028      	b.n	8009bd2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b80:	f107 030c 	add.w	r3, r7, #12
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff ff13 	bl	80099b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b96:	e01c      	b.n	8009bd2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b98:	f107 030c 	add.w	r3, r7, #12
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff ff07 	bl	80099b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bb0:	e00f      	b.n	8009bd2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009bb2:	f107 030c 	add.w	r3, r7, #12
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff fefa 	bl	80099b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	0a5a      	lsrs	r2, r3, #9
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bca:	e002      	b.n	8009bd2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009bcc:	2304      	movs	r3, #4
 8009bce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3730      	adds	r7, #48	; 0x30
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000009 	.word	0x20000009

08009be4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bf0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bf4:	f002 f9bc 	bl	800bf70 <malloc>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e066      	b.n	8009cdc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	7c1b      	ldrb	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d119      	bne.n	8009c52 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c22:	2202      	movs	r2, #2
 8009c24:	2181      	movs	r1, #129	; 0x81
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f001 ffdb 	bl	800bbe2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c36:	2202      	movs	r2, #2
 8009c38:	2101      	movs	r1, #1
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 ffd1 	bl	800bbe2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2210      	movs	r2, #16
 8009c4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009c50:	e016      	b.n	8009c80 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c52:	2340      	movs	r3, #64	; 0x40
 8009c54:	2202      	movs	r2, #2
 8009c56:	2181      	movs	r1, #129	; 0x81
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 ffc2 	bl	800bbe2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	2202      	movs	r2, #2
 8009c68:	2101      	movs	r1, #1
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 ffb9 	bl	800bbe2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2210      	movs	r2, #16
 8009c7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c80:	2308      	movs	r3, #8
 8009c82:	2203      	movs	r2, #3
 8009c84:	2182      	movs	r1, #130	; 0x82
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 ffab 	bl	800bbe2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7c1b      	ldrb	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d109      	bne.n	8009cca <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f002 f87c 	bl	800bdc0 <USBD_LL_PrepareReceive>
 8009cc8:	e007      	b.n	8009cda <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cd0:	2340      	movs	r3, #64	; 0x40
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f002 f873 	bl	800bdc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009cf4:	2181      	movs	r1, #129	; 0x81
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f001 ff99 	bl	800bc2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009d02:	2101      	movs	r1, #1
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 ff92 	bl	800bc2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d12:	2182      	movs	r1, #130	; 0x82
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 ff8a 	bl	800bc2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00e      	beq.n	8009d52 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d44:	4618      	mov	r0, r3
 8009d46:	f002 f91b 	bl	800bf80 <free>
    pdev->pClassData = NULL;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d6c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d03a      	beq.n	8009dfc <USBD_CDC_Setup+0xa0>
 8009d86:	2b20      	cmp	r3, #32
 8009d88:	f040 8097 	bne.w	8009eba <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	88db      	ldrh	r3, [r3, #6]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d029      	beq.n	8009de8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	b25b      	sxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da11      	bge.n	8009dc2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8009daa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	88d2      	ldrh	r2, [r2, #6]
 8009db0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009db2:	6939      	ldr	r1, [r7, #16]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	88db      	ldrh	r3, [r3, #6]
 8009db8:	461a      	mov	r2, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f001 fa97 	bl	800b2ee <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8009dc0:	e082      	b.n	8009ec8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	785a      	ldrb	r2, [r3, #1]
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	88db      	ldrh	r3, [r3, #6]
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009dd8:	6939      	ldr	r1, [r7, #16]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	88db      	ldrh	r3, [r3, #6]
 8009dde:	461a      	mov	r2, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 fab0 	bl	800b346 <USBD_CtlPrepareRx>
    break;
 8009de6:	e06f      	b.n	8009ec8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	7850      	ldrb	r0, [r2, #1]
 8009df4:	2200      	movs	r2, #0
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	4798      	blx	r3
    break;
 8009dfa:	e065      	b.n	8009ec8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	785b      	ldrb	r3, [r3, #1]
 8009e00:	2b0b      	cmp	r3, #11
 8009e02:	d84f      	bhi.n	8009ea4 <USBD_CDC_Setup+0x148>
 8009e04:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <USBD_CDC_Setup+0xb0>)
 8009e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0a:	bf00      	nop
 8009e0c:	08009e3d 	.word	0x08009e3d
 8009e10:	08009eb3 	.word	0x08009eb3
 8009e14:	08009ea5 	.word	0x08009ea5
 8009e18:	08009ea5 	.word	0x08009ea5
 8009e1c:	08009ea5 	.word	0x08009ea5
 8009e20:	08009ea5 	.word	0x08009ea5
 8009e24:	08009ea5 	.word	0x08009ea5
 8009e28:	08009ea5 	.word	0x08009ea5
 8009e2c:	08009ea5 	.word	0x08009ea5
 8009e30:	08009ea5 	.word	0x08009ea5
 8009e34:	08009e65 	.word	0x08009e65
 8009e38:	08009e8d 	.word	0x08009e8d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d107      	bne.n	8009e56 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e46:	f107 030c 	add.w	r3, r7, #12
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f001 fa4d 	bl	800b2ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009e54:	e030      	b.n	8009eb8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 f9d7 	bl	800b20c <USBD_CtlError>
        ret = USBD_FAIL;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	75fb      	strb	r3, [r7, #23]
      break;
 8009e62:	e029      	b.n	8009eb8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d107      	bne.n	8009e7e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e6e:	f107 030f 	add.w	r3, r7, #15
 8009e72:	2201      	movs	r2, #1
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 fa39 	bl	800b2ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009e7c:	e01c      	b.n	8009eb8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 f9c3 	bl	800b20c <USBD_CtlError>
        ret = USBD_FAIL;
 8009e86:	2303      	movs	r3, #3
 8009e88:	75fb      	strb	r3, [r7, #23]
      break;
 8009e8a:	e015      	b.n	8009eb8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d00f      	beq.n	8009eb6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 f9b7 	bl	800b20c <USBD_CtlError>
        ret = USBD_FAIL;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009ea2:	e008      	b.n	8009eb6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 f9b0 	bl	800b20c <USBD_CtlError>
      ret = USBD_FAIL;
 8009eac:	2303      	movs	r3, #3
 8009eae:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb0:	e002      	b.n	8009eb8 <USBD_CDC_Setup+0x15c>
      break;
 8009eb2:	bf00      	nop
 8009eb4:	e008      	b.n	8009ec8 <USBD_CDC_Setup+0x16c>
      break;
 8009eb6:	bf00      	nop
    }
    break;
 8009eb8:	e006      	b.n	8009ec8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 f9a5 	bl	800b20c <USBD_CtlError>
    ret = USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	75fb      	strb	r3, [r7, #23]
    break;
 8009ec6:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop

08009ed4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ee6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e049      	b.n	8009f8a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009efc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009efe:	78fa      	ldrb	r2, [r7, #3]
 8009f00:	6879      	ldr	r1, [r7, #4]
 8009f02:	4613      	mov	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	440b      	add	r3, r1
 8009f0c:	3318      	adds	r3, #24
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d029      	beq.n	8009f68 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	440b      	add	r3, r1
 8009f22:	3318      	adds	r3, #24
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	78f9      	ldrb	r1, [r7, #3]
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	1a5b      	subs	r3, r3, r1
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4403      	add	r3, r0
 8009f34:	3344      	adds	r3, #68	; 0x44
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f3c:	fb03 f301 	mul.w	r3, r3, r1
 8009f40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d110      	bne.n	8009f68 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	6879      	ldr	r1, [r7, #4]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	440b      	add	r3, r1
 8009f54:	3318      	adds	r3, #24
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f5a:	78f9      	ldrb	r1, [r7, #3]
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2200      	movs	r2, #0
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 ff0c 	bl	800bd7e <USBD_LL_Transmit>
 8009f66:	e00f      	b.n	8009f88 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f84:	78fa      	ldrb	r2, [r7, #3]
 8009f86:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e015      	b.n	8009fe0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f001 ff22 	bl	800be02 <USBD_LL_GetRxDataSize>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ff6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d015      	beq.n	800a02e <USBD_CDC_EP0_RxReady+0x46>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a008:	2bff      	cmp	r3, #255	; 0xff
 800a00a:	d010      	beq.n	800a02e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a01a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a022:	b292      	uxth	r2, r2
 800a024:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	22ff      	movs	r2, #255	; 0xff
 800a02a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2243      	movs	r2, #67	; 0x43
 800a044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a046:	4b03      	ldr	r3, [pc, #12]	; (800a054 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a048:	4618      	mov	r0, r3
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	20000094 	.word	0x20000094

0800a058 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2243      	movs	r2, #67	; 0x43
 800a064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a066:	4b03      	ldr	r3, [pc, #12]	; (800a074 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	20000050 	.word	0x20000050

0800a078 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2243      	movs	r2, #67	; 0x43
 800a084:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a086:	4b03      	ldr	r3, [pc, #12]	; (800a094 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	200000d8 	.word	0x200000d8

0800a098 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	220a      	movs	r2, #10
 800a0a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a0a6:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	2000000c 	.word	0x2000000c

0800a0b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e004      	b.n	800a0d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b087      	sub	sp, #28
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	371c      	adds	r7, #28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a124:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a14a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a156:	2303      	movs	r3, #3
 800a158:	e016      	b.n	800a188 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	7c1b      	ldrb	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a16c:	2101      	movs	r1, #1
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 fe26 	bl	800bdc0 <USBD_LL_PrepareReceive>
 800a174:	e007      	b.n	800a186 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a17c:	2340      	movs	r3, #64	; 0x40
 800a17e:	2101      	movs	r1, #1
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f001 fe1d 	bl	800bdc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	4613      	mov	r3, r2
 800a19c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e025      	b.n	800a1f4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d003      	beq.n	800a1cc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	79fa      	ldrb	r2, [r7, #7]
 800a1e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f001 fc93 	bl	800bb14 <USBD_LL_Init>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a206:	2300      	movs	r3, #0
 800a208:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a210:	2303      	movs	r3, #3
 800a212:	e010      	b.n	800a236 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	f107 020e 	add.w	r2, r7, #14
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3
 800a22c:	4602      	mov	r2, r0
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f001 fcb0 	bl	800bbac <USBD_LL_Start>
 800a24c:	4603      	mov	r3, r0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a256:	b480      	push	{r7}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a278:	2303      	movs	r3, #3
 800a27a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a282:	2b00      	cmp	r3, #0
 800a284:	d009      	beq.n	800a29a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	4611      	mov	r1, r2
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	4798      	blx	r3
 800a296:	4603      	mov	r3, r0
 800a298:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d007      	beq.n	800a2ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	78fa      	ldrb	r2, [r7, #3]
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	4798      	blx	r3
  }

  return USBD_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 ff56 	bl	800b198 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a308:	f003 031f 	and.w	r3, r3, #31
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d00e      	beq.n	800a32e <USBD_LL_SetupStage+0x5a>
 800a310:	2b01      	cmp	r3, #1
 800a312:	d302      	bcc.n	800a31a <USBD_LL_SetupStage+0x46>
 800a314:	2b02      	cmp	r3, #2
 800a316:	d014      	beq.n	800a342 <USBD_LL_SetupStage+0x6e>
 800a318:	e01d      	b.n	800a356 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa18 	bl	800a758 <USBD_StdDevReq>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
      break;
 800a32c:	e020      	b.n	800a370 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a334:	4619      	mov	r1, r3
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa7c 	bl	800a834 <USBD_StdItfReq>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]
      break;
 800a340:	e016      	b.n	800a370 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fab8 	bl	800a8c0 <USBD_StdEPReq>
 800a350:	4603      	mov	r3, r0
 800a352:	73fb      	strb	r3, [r7, #15]
      break;
 800a354:	e00c      	b.n	800a370 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a35c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a360:	b2db      	uxtb	r3, r3
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f001 fc81 	bl	800bc6c <USBD_LL_StallEP>
 800a36a:	4603      	mov	r3, r0
 800a36c:	73fb      	strb	r3, [r7, #15]
      break;
 800a36e:	bf00      	nop
  }

  return ret;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b086      	sub	sp, #24
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	460b      	mov	r3, r1
 800a384:	607a      	str	r2, [r7, #4]
 800a386:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a388:	7afb      	ldrb	r3, [r7, #11]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d137      	bne.n	800a3fe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a394:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d14a      	bne.n	800a436 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d913      	bls.n	800a3d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	1ad2      	subs	r2, r2, r3
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	bf28      	it	cs
 800a3c6:	4613      	movcs	r3, r2
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 ffd7 	bl	800b380 <USBD_CtlContinueRx>
 800a3d2:	e030      	b.n	800a436 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00a      	beq.n	800a3f6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	d105      	bne.n	800a3f6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 ffd3 	bl	800b3a2 <USBD_CtlSendStatus>
 800a3fc:	e01b      	b.n	800a436 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d013      	beq.n	800a432 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a410:	2b03      	cmp	r3, #3
 800a412:	d10e      	bne.n	800a432 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	7afa      	ldrb	r2, [r7, #11]
 800a41e:	4611      	mov	r1, r2
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	4798      	blx	r3
 800a424:	4603      	mov	r3, r0
 800a426:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	e002      	b.n	800a438 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a432:	2303      	movs	r3, #3
 800a434:	e000      	b.n	800a438 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	460b      	mov	r3, r1
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a44e:	7afb      	ldrb	r3, [r7, #11]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d16a      	bne.n	800a52a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	3314      	adds	r3, #20
 800a458:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a460:	2b02      	cmp	r3, #2
 800a462:	d155      	bne.n	800a510 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d914      	bls.n	800a49a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	689a      	ldr	r2, [r3, #8]
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	1ad2      	subs	r2, r2, r3
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	461a      	mov	r2, r3
 800a484:	6879      	ldr	r1, [r7, #4]
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 ff4c 	bl	800b324 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a48c:	2300      	movs	r3, #0
 800a48e:	2200      	movs	r2, #0
 800a490:	2100      	movs	r1, #0
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f001 fc94 	bl	800bdc0 <USBD_LL_PrepareReceive>
 800a498:	e03a      	b.n	800a510 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	68da      	ldr	r2, [r3, #12]
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d11c      	bne.n	800a4e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d316      	bcc.n	800a4e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d20f      	bcs.n	800a4e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 ff2d 	bl	800b324 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f001 fc71 	bl	800bdc0 <USBD_LL_PrepareReceive>
 800a4de:	e017      	b.n	800a510 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d105      	bne.n	800a502 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a502:	2180      	movs	r1, #128	; 0x80
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f001 fbb1 	bl	800bc6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f000 ff5c 	bl	800b3c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a516:	2b01      	cmp	r3, #1
 800a518:	d123      	bne.n	800a562 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7ff fe9b 	bl	800a256 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a528:	e01b      	b.n	800a562 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d013      	beq.n	800a55e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d10e      	bne.n	800a55e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	7afa      	ldrb	r2, [r7, #11]
 800a54a:	4611      	mov	r1, r2
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	4798      	blx	r3
 800a550:	4603      	mov	r3, r0
 800a552:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	e002      	b.n	800a564 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a55e:	2303      	movs	r3, #3
 800a560:	e000      	b.n	800a564 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d009      	beq.n	800a5b0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	6852      	ldr	r2, [r2, #4]
 800a5a8:	b2d2      	uxtb	r2, r2
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5b0:	2340      	movs	r3, #64	; 0x40
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f001 fb13 	bl	800bbe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2240      	movs	r2, #64	; 0x40
 800a5c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5cc:	2340      	movs	r3, #64	; 0x40
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2180      	movs	r1, #128	; 0x80
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 fb05 	bl	800bbe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2240      	movs	r2, #64	; 0x40
 800a5e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b083      	sub	sp, #12
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	78fa      	ldrb	r2, [r7, #3]
 800a5fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2204      	movs	r2, #4
 800a626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a646:	2b04      	cmp	r3, #4
 800a648:	d105      	bne.n	800a656 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a672:	2b03      	cmp	r3, #3
 800a674:	d10b      	bne.n	800a68e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a67c:	69db      	ldr	r3, [r3, #28]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d005      	beq.n	800a68e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a688:	69db      	ldr	r3, [r3, #28]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d009      	beq.n	800a710 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	6852      	ldr	r2, [r2, #4]
 800a708:	b2d2      	uxtb	r2, r2
 800a70a:	4611      	mov	r1, r2
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	4798      	blx	r3
  }

  return USBD_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b087      	sub	sp, #28
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	3301      	adds	r3, #1
 800a730:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a738:	8a3b      	ldrh	r3, [r7, #16]
 800a73a:	021b      	lsls	r3, r3, #8
 800a73c:	b21a      	sxth	r2, r3
 800a73e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a742:	4313      	orrs	r3, r2
 800a744:	b21b      	sxth	r3, r3
 800a746:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a748:	89fb      	ldrh	r3, [r7, #14]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	371c      	adds	r7, #28
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
	...

0800a758 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a76e:	2b20      	cmp	r3, #32
 800a770:	d004      	beq.n	800a77c <USBD_StdDevReq+0x24>
 800a772:	2b40      	cmp	r3, #64	; 0x40
 800a774:	d002      	beq.n	800a77c <USBD_StdDevReq+0x24>
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <USBD_StdDevReq+0x38>
 800a77a:	e050      	b.n	800a81e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	4798      	blx	r3
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]
    break;
 800a78e:	e04b      	b.n	800a828 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	785b      	ldrb	r3, [r3, #1]
 800a794:	2b09      	cmp	r3, #9
 800a796:	d83c      	bhi.n	800a812 <USBD_StdDevReq+0xba>
 800a798:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <USBD_StdDevReq+0x48>)
 800a79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79e:	bf00      	nop
 800a7a0:	0800a7f5 	.word	0x0800a7f5
 800a7a4:	0800a809 	.word	0x0800a809
 800a7a8:	0800a813 	.word	0x0800a813
 800a7ac:	0800a7ff 	.word	0x0800a7ff
 800a7b0:	0800a813 	.word	0x0800a813
 800a7b4:	0800a7d3 	.word	0x0800a7d3
 800a7b8:	0800a7c9 	.word	0x0800a7c9
 800a7bc:	0800a813 	.word	0x0800a813
 800a7c0:	0800a7eb 	.word	0x0800a7eb
 800a7c4:	0800a7dd 	.word	0x0800a7dd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f9ce 	bl	800ab6c <USBD_GetDescriptor>
      break;
 800a7d0:	e024      	b.n	800a81c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fb5d 	bl	800ae94 <USBD_SetAddress>
      break;
 800a7da:	e01f      	b.n	800a81c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fb9a 	bl	800af18 <USBD_SetConfig>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e8:	e018      	b.n	800a81c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fc37 	bl	800b060 <USBD_GetConfig>
      break;
 800a7f2:	e013      	b.n	800a81c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fc66 	bl	800b0c8 <USBD_GetStatus>
      break;
 800a7fc:	e00e      	b.n	800a81c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fc94 	bl	800b12e <USBD_SetFeature>
      break;
 800a806:	e009      	b.n	800a81c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fca3 	bl	800b156 <USBD_ClrFeature>
      break;
 800a810:	e004      	b.n	800a81c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fcf9 	bl	800b20c <USBD_CtlError>
      break;
 800a81a:	bf00      	nop
    }
    break;
 800a81c:	e004      	b.n	800a828 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fcf3 	bl	800b20c <USBD_CtlError>
    break;
 800a826:	bf00      	nop
  }

  return ret;
 800a828:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop

0800a834 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a84a:	2b20      	cmp	r3, #32
 800a84c:	d003      	beq.n	800a856 <USBD_StdItfReq+0x22>
 800a84e:	2b40      	cmp	r3, #64	; 0x40
 800a850:	d001      	beq.n	800a856 <USBD_StdItfReq+0x22>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d12a      	bne.n	800a8ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85c:	3b01      	subs	r3, #1
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d81d      	bhi.n	800a89e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	889b      	ldrh	r3, [r3, #4]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d813      	bhi.n	800a894 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	4798      	blx	r3
 800a87a:	4603      	mov	r3, r0
 800a87c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	88db      	ldrh	r3, [r3, #6]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d110      	bne.n	800a8a8 <USBD_StdItfReq+0x74>
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10d      	bne.n	800a8a8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fd88 	bl	800b3a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a892:	e009      	b.n	800a8a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fcb8 	bl	800b20c <USBD_CtlError>
      break;
 800a89c:	e004      	b.n	800a8a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fcb3 	bl	800b20c <USBD_CtlError>
      break;
 800a8a6:	e000      	b.n	800a8aa <USBD_StdItfReq+0x76>
      break;
 800a8a8:	bf00      	nop
    }
    break;
 800a8aa:	e004      	b.n	800a8b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fcac 	bl	800b20c <USBD_CtlError>
    break;
 800a8b4:	bf00      	nop
  }

  return ret;
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	889b      	ldrh	r3, [r3, #4]
 800a8d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8dc:	2b20      	cmp	r3, #32
 800a8de:	d004      	beq.n	800a8ea <USBD_StdEPReq+0x2a>
 800a8e0:	2b40      	cmp	r3, #64	; 0x40
 800a8e2:	d002      	beq.n	800a8ea <USBD_StdEPReq+0x2a>
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00a      	beq.n	800a8fe <USBD_StdEPReq+0x3e>
 800a8e8:	e135      	b.n	800ab56 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	4798      	blx	r3
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a8fc:	e130      	b.n	800ab60 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	785b      	ldrb	r3, [r3, #1]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d03e      	beq.n	800a984 <USBD_StdEPReq+0xc4>
 800a906:	2b03      	cmp	r3, #3
 800a908:	d002      	beq.n	800a910 <USBD_StdEPReq+0x50>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d077      	beq.n	800a9fe <USBD_StdEPReq+0x13e>
 800a90e:	e11c      	b.n	800ab4a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a916:	2b02      	cmp	r3, #2
 800a918:	d002      	beq.n	800a920 <USBD_StdEPReq+0x60>
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d015      	beq.n	800a94a <USBD_StdEPReq+0x8a>
 800a91e:	e02b      	b.n	800a978 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a920:	7bbb      	ldrb	r3, [r7, #14]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00c      	beq.n	800a940 <USBD_StdEPReq+0x80>
 800a926:	7bbb      	ldrb	r3, [r7, #14]
 800a928:	2b80      	cmp	r3, #128	; 0x80
 800a92a:	d009      	beq.n	800a940 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f001 f99b 	bl	800bc6c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a936:	2180      	movs	r1, #128	; 0x80
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 f997 	bl	800bc6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a93e:	e020      	b.n	800a982 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fc62 	bl	800b20c <USBD_CtlError>
        break;
 800a948:	e01b      	b.n	800a982 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	885b      	ldrh	r3, [r3, #2]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10e      	bne.n	800a970 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a952:	7bbb      	ldrb	r3, [r7, #14]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00b      	beq.n	800a970 <USBD_StdEPReq+0xb0>
 800a958:	7bbb      	ldrb	r3, [r7, #14]
 800a95a:	2b80      	cmp	r3, #128	; 0x80
 800a95c:	d008      	beq.n	800a970 <USBD_StdEPReq+0xb0>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	88db      	ldrh	r3, [r3, #6]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d104      	bne.n	800a970 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 f97e 	bl	800bc6c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fd16 	bl	800b3a2 <USBD_CtlSendStatus>

        break;
 800a976:	e004      	b.n	800a982 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fc46 	bl	800b20c <USBD_CtlError>
        break;
 800a980:	bf00      	nop
      }
      break;
 800a982:	e0e7      	b.n	800ab54 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d002      	beq.n	800a994 <USBD_StdEPReq+0xd4>
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d015      	beq.n	800a9be <USBD_StdEPReq+0xfe>
 800a992:	e02d      	b.n	800a9f0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00c      	beq.n	800a9b4 <USBD_StdEPReq+0xf4>
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	2b80      	cmp	r3, #128	; 0x80
 800a99e:	d009      	beq.n	800a9b4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f001 f961 	bl	800bc6c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9aa:	2180      	movs	r1, #128	; 0x80
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f001 f95d 	bl	800bc6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a9b2:	e023      	b.n	800a9fc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fc28 	bl	800b20c <USBD_CtlError>
        break;
 800a9bc:	e01e      	b.n	800a9fc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	885b      	ldrh	r3, [r3, #2]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d119      	bne.n	800a9fa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d004      	beq.n	800a9da <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9d0:	7bbb      	ldrb	r3, [r7, #14]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f001 f968 	bl	800bcaa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fce1 	bl	800b3a2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	4798      	blx	r3
        }
        break;
 800a9ee:	e004      	b.n	800a9fa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fc0a 	bl	800b20c <USBD_CtlError>
        break;
 800a9f8:	e000      	b.n	800a9fc <USBD_StdEPReq+0x13c>
        break;
 800a9fa:	bf00      	nop
      }
      break;
 800a9fc:	e0aa      	b.n	800ab54 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d002      	beq.n	800aa0e <USBD_StdEPReq+0x14e>
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	d032      	beq.n	800aa72 <USBD_StdEPReq+0x1b2>
 800aa0c:	e097      	b.n	800ab3e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa0e:	7bbb      	ldrb	r3, [r7, #14]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d007      	beq.n	800aa24 <USBD_StdEPReq+0x164>
 800aa14:	7bbb      	ldrb	r3, [r7, #14]
 800aa16:	2b80      	cmp	r3, #128	; 0x80
 800aa18:	d004      	beq.n	800aa24 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fbf5 	bl	800b20c <USBD_CtlError>
          break;
 800aa22:	e091      	b.n	800ab48 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	da0b      	bge.n	800aa44 <USBD_StdEPReq+0x184>
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	3310      	adds	r3, #16
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	4413      	add	r3, r2
 800aa40:	3304      	adds	r3, #4
 800aa42:	e00b      	b.n	800aa5c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800aa44:	7bbb      	ldrb	r3, [r7, #14]
 800aa46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	4413      	add	r3, r2
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2202      	movs	r2, #2
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fc3f 	bl	800b2ee <USBD_CtlSendData>
        break;
 800aa70:	e06a      	b.n	800ab48 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800aa72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	da11      	bge.n	800aa9e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
 800aa7c:	f003 020f 	and.w	r2, r3, #15
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	4613      	mov	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	440b      	add	r3, r1
 800aa8c:	3324      	adds	r3, #36	; 0x24
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d117      	bne.n	800aac4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fbb8 	bl	800b20c <USBD_CtlError>
            break;
 800aa9c:	e054      	b.n	800ab48 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	f003 020f 	and.w	r2, r3, #15
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	440b      	add	r3, r1
 800aab0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d104      	bne.n	800aac4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800aaba:	6839      	ldr	r1, [r7, #0]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fba5 	bl	800b20c <USBD_CtlError>
            break;
 800aac2:	e041      	b.n	800ab48 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	da0b      	bge.n	800aae4 <USBD_StdEPReq+0x224>
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aad2:	4613      	mov	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	3310      	adds	r3, #16
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	4413      	add	r3, r2
 800aae0:	3304      	adds	r3, #4
 800aae2:	e00b      	b.n	800aafc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaea:	4613      	mov	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	4413      	add	r3, r2
 800aafa:	3304      	adds	r3, #4
 800aafc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <USBD_StdEPReq+0x24a>
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
 800ab06:	2b80      	cmp	r3, #128	; 0x80
 800ab08:	d103      	bne.n	800ab12 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	e00e      	b.n	800ab30 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f001 f8e6 	bl	800bce8 <USBD_LL_IsStallEP>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2201      	movs	r2, #1
 800ab26:	601a      	str	r2, [r3, #0]
 800ab28:	e002      	b.n	800ab30 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2202      	movs	r2, #2
 800ab34:	4619      	mov	r1, r3
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fbd9 	bl	800b2ee <USBD_CtlSendData>
          break;
 800ab3c:	e004      	b.n	800ab48 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fb63 	bl	800b20c <USBD_CtlError>
        break;
 800ab46:	bf00      	nop
      }
      break;
 800ab48:	e004      	b.n	800ab54 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fb5d 	bl	800b20c <USBD_CtlError>
      break;
 800ab52:	bf00      	nop
    }
    break;
 800ab54:	e004      	b.n	800ab60 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800ab56:	6839      	ldr	r1, [r7, #0]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fb57 	bl	800b20c <USBD_CtlError>
    break;
 800ab5e:	bf00      	nop
  }

  return ret;
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
	...

0800ab6c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	885b      	ldrh	r3, [r3, #2]
 800ab86:	0a1b      	lsrs	r3, r3, #8
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	2b0e      	cmp	r3, #14
 800ab8e:	f200 8152 	bhi.w	800ae36 <USBD_GetDescriptor+0x2ca>
 800ab92:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <USBD_GetDescriptor+0x2c>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800ac09 	.word	0x0800ac09
 800ab9c:	0800ac21 	.word	0x0800ac21
 800aba0:	0800ac61 	.word	0x0800ac61
 800aba4:	0800ae37 	.word	0x0800ae37
 800aba8:	0800ae37 	.word	0x0800ae37
 800abac:	0800add7 	.word	0x0800add7
 800abb0:	0800ae03 	.word	0x0800ae03
 800abb4:	0800ae37 	.word	0x0800ae37
 800abb8:	0800ae37 	.word	0x0800ae37
 800abbc:	0800ae37 	.word	0x0800ae37
 800abc0:	0800ae37 	.word	0x0800ae37
 800abc4:	0800ae37 	.word	0x0800ae37
 800abc8:	0800ae37 	.word	0x0800ae37
 800abcc:	0800ae37 	.word	0x0800ae37
 800abd0:	0800abd5 	.word	0x0800abd5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abda:	69db      	ldr	r3, [r3, #28]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00b      	beq.n	800abf8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	7c12      	ldrb	r2, [r2, #16]
 800abec:	f107 0108 	add.w	r1, r7, #8
 800abf0:	4610      	mov	r0, r2
 800abf2:	4798      	blx	r3
 800abf4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800abf6:	e126      	b.n	800ae46 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fb06 	bl	800b20c <USBD_CtlError>
      err++;
 800ac00:	7afb      	ldrb	r3, [r7, #11]
 800ac02:	3301      	adds	r3, #1
 800ac04:	72fb      	strb	r3, [r7, #11]
    break;
 800ac06:	e11e      	b.n	800ae46 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	7c12      	ldrb	r2, [r2, #16]
 800ac14:	f107 0108 	add.w	r1, r7, #8
 800ac18:	4610      	mov	r0, r2
 800ac1a:	4798      	blx	r3
 800ac1c:	60f8      	str	r0, [r7, #12]
    break;
 800ac1e:	e112      	b.n	800ae46 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	7c1b      	ldrb	r3, [r3, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10d      	bne.n	800ac44 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac30:	f107 0208 	add.w	r2, r7, #8
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3
 800ac38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	2202      	movs	r2, #2
 800ac40:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ac42:	e100      	b.n	800ae46 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	f107 0208 	add.w	r2, r7, #8
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	701a      	strb	r2, [r3, #0]
    break;
 800ac5e:	e0f2      	b.n	800ae46 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	885b      	ldrh	r3, [r3, #2]
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b05      	cmp	r3, #5
 800ac68:	f200 80ac 	bhi.w	800adc4 <USBD_GetDescriptor+0x258>
 800ac6c:	a201      	add	r2, pc, #4	; (adr r2, 800ac74 <USBD_GetDescriptor+0x108>)
 800ac6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac72:	bf00      	nop
 800ac74:	0800ac8d 	.word	0x0800ac8d
 800ac78:	0800acc1 	.word	0x0800acc1
 800ac7c:	0800acf5 	.word	0x0800acf5
 800ac80:	0800ad29 	.word	0x0800ad29
 800ac84:	0800ad5d 	.word	0x0800ad5d
 800ac88:	0800ad91 	.word	0x0800ad91
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00b      	beq.n	800acb0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	7c12      	ldrb	r2, [r2, #16]
 800aca4:	f107 0108 	add.w	r1, r7, #8
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acae:	e091      	b.n	800add4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 faaa 	bl	800b20c <USBD_CtlError>
        err++;
 800acb8:	7afb      	ldrb	r3, [r7, #11]
 800acba:	3301      	adds	r3, #1
 800acbc:	72fb      	strb	r3, [r7, #11]
      break;
 800acbe:	e089      	b.n	800add4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00b      	beq.n	800ace4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	7c12      	ldrb	r2, [r2, #16]
 800acd8:	f107 0108 	add.w	r1, r7, #8
 800acdc:	4610      	mov	r0, r2
 800acde:	4798      	blx	r3
 800ace0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ace2:	e077      	b.n	800add4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fa90 	bl	800b20c <USBD_CtlError>
        err++;
 800acec:	7afb      	ldrb	r3, [r7, #11]
 800acee:	3301      	adds	r3, #1
 800acf0:	72fb      	strb	r3, [r7, #11]
      break;
 800acf2:	e06f      	b.n	800add4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00b      	beq.n	800ad18 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	7c12      	ldrb	r2, [r2, #16]
 800ad0c:	f107 0108 	add.w	r1, r7, #8
 800ad10:	4610      	mov	r0, r2
 800ad12:	4798      	blx	r3
 800ad14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad16:	e05d      	b.n	800add4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fa76 	bl	800b20c <USBD_CtlError>
        err++;
 800ad20:	7afb      	ldrb	r3, [r7, #11]
 800ad22:	3301      	adds	r3, #1
 800ad24:	72fb      	strb	r3, [r7, #11]
      break;
 800ad26:	e055      	b.n	800add4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00b      	beq.n	800ad4c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	7c12      	ldrb	r2, [r2, #16]
 800ad40:	f107 0108 	add.w	r1, r7, #8
 800ad44:	4610      	mov	r0, r2
 800ad46:	4798      	blx	r3
 800ad48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad4a:	e043      	b.n	800add4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fa5c 	bl	800b20c <USBD_CtlError>
        err++;
 800ad54:	7afb      	ldrb	r3, [r7, #11]
 800ad56:	3301      	adds	r3, #1
 800ad58:	72fb      	strb	r3, [r7, #11]
      break;
 800ad5a:	e03b      	b.n	800add4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00b      	beq.n	800ad80 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	7c12      	ldrb	r2, [r2, #16]
 800ad74:	f107 0108 	add.w	r1, r7, #8
 800ad78:	4610      	mov	r0, r2
 800ad7a:	4798      	blx	r3
 800ad7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad7e:	e029      	b.n	800add4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fa42 	bl	800b20c <USBD_CtlError>
        err++;
 800ad88:	7afb      	ldrb	r3, [r7, #11]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	72fb      	strb	r3, [r7, #11]
      break;
 800ad8e:	e021      	b.n	800add4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00b      	beq.n	800adb4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	7c12      	ldrb	r2, [r2, #16]
 800ada8:	f107 0108 	add.w	r1, r7, #8
 800adac:	4610      	mov	r0, r2
 800adae:	4798      	blx	r3
 800adb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adb2:	e00f      	b.n	800add4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800adb4:	6839      	ldr	r1, [r7, #0]
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fa28 	bl	800b20c <USBD_CtlError>
        err++;
 800adbc:	7afb      	ldrb	r3, [r7, #11]
 800adbe:	3301      	adds	r3, #1
 800adc0:	72fb      	strb	r3, [r7, #11]
      break;
 800adc2:	e007      	b.n	800add4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fa20 	bl	800b20c <USBD_CtlError>
      err++;
 800adcc:	7afb      	ldrb	r3, [r7, #11]
 800adce:	3301      	adds	r3, #1
 800add0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800add2:	bf00      	nop
    }
    break;
 800add4:	e037      	b.n	800ae46 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	7c1b      	ldrb	r3, [r3, #16]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d109      	bne.n	800adf2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade6:	f107 0208 	add.w	r2, r7, #8
 800adea:	4610      	mov	r0, r2
 800adec:	4798      	blx	r3
 800adee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800adf0:	e029      	b.n	800ae46 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fa09 	bl	800b20c <USBD_CtlError>
      err++;
 800adfa:	7afb      	ldrb	r3, [r7, #11]
 800adfc:	3301      	adds	r3, #1
 800adfe:	72fb      	strb	r3, [r7, #11]
    break;
 800ae00:	e021      	b.n	800ae46 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	7c1b      	ldrb	r3, [r3, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10d      	bne.n	800ae26 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae12:	f107 0208 	add.w	r2, r7, #8
 800ae16:	4610      	mov	r0, r2
 800ae18:	4798      	blx	r3
 800ae1a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	2207      	movs	r2, #7
 800ae22:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ae24:	e00f      	b.n	800ae46 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f9ef 	bl	800b20c <USBD_CtlError>
      err++;
 800ae2e:	7afb      	ldrb	r3, [r7, #11]
 800ae30:	3301      	adds	r3, #1
 800ae32:	72fb      	strb	r3, [r7, #11]
    break;
 800ae34:	e007      	b.n	800ae46 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f9e7 	bl	800b20c <USBD_CtlError>
    err++;
 800ae3e:	7afb      	ldrb	r3, [r7, #11]
 800ae40:	3301      	adds	r3, #1
 800ae42:	72fb      	strb	r3, [r7, #11]
    break;
 800ae44:	bf00      	nop
  }

  if (err != 0U)
 800ae46:	7afb      	ldrb	r3, [r7, #11]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d11e      	bne.n	800ae8a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	88db      	ldrh	r3, [r3, #6]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d016      	beq.n	800ae82 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800ae54:	893b      	ldrh	r3, [r7, #8]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00e      	beq.n	800ae78 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	88da      	ldrh	r2, [r3, #6]
 800ae5e:	893b      	ldrh	r3, [r7, #8]
 800ae60:	4293      	cmp	r3, r2
 800ae62:	bf28      	it	cs
 800ae64:	4613      	movcs	r3, r2
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae6a:	893b      	ldrh	r3, [r7, #8]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	68f9      	ldr	r1, [r7, #12]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fa3c 	bl	800b2ee <USBD_CtlSendData>
 800ae76:	e009      	b.n	800ae8c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f9c6 	bl	800b20c <USBD_CtlError>
 800ae80:	e004      	b.n	800ae8c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fa8d 	bl	800b3a2 <USBD_CtlSendStatus>
 800ae88:	e000      	b.n	800ae8c <USBD_GetDescriptor+0x320>
    return;
 800ae8a:	bf00      	nop
    }
  }
}
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop

0800ae94 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	889b      	ldrh	r3, [r3, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d130      	bne.n	800af08 <USBD_SetAddress+0x74>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	88db      	ldrh	r3, [r3, #6]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d12c      	bne.n	800af08 <USBD_SetAddress+0x74>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	885b      	ldrh	r3, [r3, #2]
 800aeb2:	2b7f      	cmp	r3, #127	; 0x7f
 800aeb4:	d828      	bhi.n	800af08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	885b      	ldrh	r3, [r3, #2]
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d104      	bne.n	800aed6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f99c 	bl	800b20c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed4:	e01c      	b.n	800af10 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	7bfa      	ldrb	r2, [r7, #15]
 800aeda:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aede:	7bfb      	ldrb	r3, [r7, #15]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 ff2c 	bl	800bd40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fa5a 	bl	800b3a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d004      	beq.n	800aefe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aefc:	e008      	b.n	800af10 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af06:	e003      	b.n	800af10 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f97e 	bl	800b20c <USBD_CtlError>
  }
}
 800af10:	bf00      	nop
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	885b      	ldrh	r3, [r3, #2]
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	4b4b      	ldr	r3, [pc, #300]	; (800b05c <USBD_SetConfig+0x144>)
 800af2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af30:	4b4a      	ldr	r3, [pc, #296]	; (800b05c <USBD_SetConfig+0x144>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d905      	bls.n	800af44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f966 	bl	800b20c <USBD_CtlError>
    return USBD_FAIL;
 800af40:	2303      	movs	r3, #3
 800af42:	e087      	b.n	800b054 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d002      	beq.n	800af54 <USBD_SetConfig+0x3c>
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d025      	beq.n	800af9e <USBD_SetConfig+0x86>
 800af52:	e071      	b.n	800b038 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800af54:	4b41      	ldr	r3, [pc, #260]	; (800b05c <USBD_SetConfig+0x144>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d01c      	beq.n	800af96 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800af5c:	4b3f      	ldr	r3, [pc, #252]	; (800b05c <USBD_SetConfig+0x144>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	461a      	mov	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800af66:	4b3d      	ldr	r3, [pc, #244]	; (800b05c <USBD_SetConfig+0x144>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff f97d 	bl	800a26c <USBD_SetClassConfig>
 800af72:	4603      	mov	r3, r0
 800af74:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d004      	beq.n	800af86 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f944 	bl	800b20c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800af84:	e065      	b.n	800b052 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fa0b 	bl	800b3a2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2203      	movs	r2, #3
 800af90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800af94:	e05d      	b.n	800b052 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fa03 	bl	800b3a2 <USBD_CtlSendStatus>
    break;
 800af9c:	e059      	b.n	800b052 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800af9e:	4b2f      	ldr	r3, [pc, #188]	; (800b05c <USBD_SetConfig+0x144>)
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d112      	bne.n	800afcc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2202      	movs	r2, #2
 800afaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800afae:	4b2b      	ldr	r3, [pc, #172]	; (800b05c <USBD_SetConfig+0x144>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afb8:	4b28      	ldr	r3, [pc, #160]	; (800b05c <USBD_SetConfig+0x144>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff f970 	bl	800a2a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f9ec 	bl	800b3a2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800afca:	e042      	b.n	800b052 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800afcc:	4b23      	ldr	r3, [pc, #140]	; (800b05c <USBD_SetConfig+0x144>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d02a      	beq.n	800b030 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff f95e 	bl	800a2a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800afe8:	4b1c      	ldr	r3, [pc, #112]	; (800b05c <USBD_SetConfig+0x144>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	461a      	mov	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800aff2:	4b1a      	ldr	r3, [pc, #104]	; (800b05c <USBD_SetConfig+0x144>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff f937 	bl	800a26c <USBD_SetClassConfig>
 800affe:	4603      	mov	r3, r0
 800b000:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b002:	7bfb      	ldrb	r3, [r7, #15]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00f      	beq.n	800b028 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f8fe 	bl	800b20c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	b2db      	uxtb	r3, r3
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7ff f943 	bl	800a2a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2202      	movs	r2, #2
 800b022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b026:	e014      	b.n	800b052 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f9ba 	bl	800b3a2 <USBD_CtlSendStatus>
    break;
 800b02e:	e010      	b.n	800b052 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f9b6 	bl	800b3a2 <USBD_CtlSendStatus>
    break;
 800b036:	e00c      	b.n	800b052 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f8e6 	bl	800b20c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b040:	4b06      	ldr	r3, [pc, #24]	; (800b05c <USBD_SetConfig+0x144>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff f92c 	bl	800a2a4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b04c:	2303      	movs	r3, #3
 800b04e:	73fb      	strb	r3, [r7, #15]
    break;
 800b050:	bf00      	nop
  }

  return ret;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	20000218 	.word	0x20000218

0800b060 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	88db      	ldrh	r3, [r3, #6]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d004      	beq.n	800b07c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f8c9 	bl	800b20c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b07a:	e021      	b.n	800b0c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b082:	2b01      	cmp	r3, #1
 800b084:	db17      	blt.n	800b0b6 <USBD_GetConfig+0x56>
 800b086:	2b02      	cmp	r3, #2
 800b088:	dd02      	ble.n	800b090 <USBD_GetConfig+0x30>
 800b08a:	2b03      	cmp	r3, #3
 800b08c:	d00b      	beq.n	800b0a6 <USBD_GetConfig+0x46>
 800b08e:	e012      	b.n	800b0b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3308      	adds	r3, #8
 800b09a:	2201      	movs	r2, #1
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f925 	bl	800b2ee <USBD_CtlSendData>
      break;
 800b0a4:	e00c      	b.n	800b0c0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f91d 	bl	800b2ee <USBD_CtlSendData>
      break;
 800b0b4:	e004      	b.n	800b0c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b0b6:	6839      	ldr	r1, [r7, #0]
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f8a7 	bl	800b20c <USBD_CtlError>
      break;
 800b0be:	bf00      	nop
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d81e      	bhi.n	800b11c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	88db      	ldrh	r3, [r3, #6]
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d004      	beq.n	800b0f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f88f 	bl	800b20c <USBD_CtlError>
      break;
 800b0ee:	e01a      	b.n	800b126 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d005      	beq.n	800b10c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	f043 0202 	orr.w	r2, r3, #2
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	330c      	adds	r3, #12
 800b110:	2202      	movs	r2, #2
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f8ea 	bl	800b2ee <USBD_CtlSendData>
    break;
 800b11a:	e004      	b.n	800b126 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f874 	bl	800b20c <USBD_CtlError>
    break;
 800b124:	bf00      	nop
  }
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	885b      	ldrh	r3, [r3, #2]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d106      	bne.n	800b14e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f92a 	bl	800b3a2 <USBD_CtlSendStatus>
  }
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b166:	3b01      	subs	r3, #1
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d80b      	bhi.n	800b184 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	885b      	ldrh	r3, [r3, #2]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d10c      	bne.n	800b18e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f910 	bl	800b3a2 <USBD_CtlSendStatus>
      }
      break;
 800b182:	e004      	b.n	800b18e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f840 	bl	800b20c <USBD_CtlError>
      break;
 800b18c:	e000      	b.n	800b190 <USBD_ClrFeature+0x3a>
      break;
 800b18e:	bf00      	nop
  }
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	781a      	ldrb	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	781a      	ldrb	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff faa9 	bl	800a71a <SWAPBYTE>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7ff fa9c 	bl	800a71a <SWAPBYTE>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7ff fa8f 	bl	800a71a <SWAPBYTE>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461a      	mov	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	80da      	strh	r2, [r3, #6]
}
 800b204:	bf00      	nop
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b216:	2180      	movs	r1, #128	; 0x80
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fd27 	bl	800bc6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b21e:	2100      	movs	r1, #0
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fd23 	bl	800bc6c <USBD_LL_StallEP>
}
 800b226:	bf00      	nop
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b086      	sub	sp, #24
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d036      	beq.n	800b2b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b248:	6938      	ldr	r0, [r7, #16]
 800b24a:	f000 f836 	bl	800b2ba <USBD_GetLen>
 800b24e:	4603      	mov	r3, r0
 800b250:	3301      	adds	r3, #1
 800b252:	b29b      	uxth	r3, r3
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	b29a      	uxth	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	4413      	add	r3, r2
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	7812      	ldrb	r2, [r2, #0]
 800b266:	701a      	strb	r2, [r3, #0]
  idx++;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	3301      	adds	r3, #1
 800b26c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	4413      	add	r3, r2
 800b274:	2203      	movs	r2, #3
 800b276:	701a      	strb	r2, [r3, #0]
  idx++;
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	3301      	adds	r3, #1
 800b27c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b27e:	e013      	b.n	800b2a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	4413      	add	r3, r2
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	7812      	ldrb	r2, [r2, #0]
 800b28a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	3301      	adds	r3, #1
 800b290:	613b      	str	r3, [r7, #16]
    idx++;
 800b292:	7dfb      	ldrb	r3, [r7, #23]
 800b294:	3301      	adds	r3, #1
 800b296:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	4413      	add	r3, r2
 800b29e:	2200      	movs	r2, #0
 800b2a0:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1e7      	bne.n	800b280 <USBD_GetString+0x52>
 800b2b0:	e000      	b.n	800b2b4 <USBD_GetString+0x86>
    return;
 800b2b2:	bf00      	nop
  }
}
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2ca:	e005      	b.n	800b2d8 <USBD_GetLen+0x1e>
  {
    len++;
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1f5      	bne.n	800b2cc <USBD_GetLen+0x12>
  }

  return len;
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr

0800b2ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	60f8      	str	r0, [r7, #12]
 800b2f6:	60b9      	str	r1, [r7, #8]
 800b2f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	2100      	movs	r1, #0
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 fd32 	bl	800bd7e <USBD_LL_Transmit>

  return USBD_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	2100      	movs	r1, #0
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 fd21 	bl	800bd7e <USBD_LL_Transmit>

  return USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b084      	sub	sp, #16
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	60b9      	str	r1, [r7, #8]
 800b350:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2203      	movs	r2, #3
 800b356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	2100      	movs	r1, #0
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 fd25 	bl	800bdc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	2100      	movs	r1, #0
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f000 fd14 	bl	800bdc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b082      	sub	sp, #8
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2204      	movs	r2, #4
 800b3ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fce0 	bl	800bd7e <USBD_LL_Transmit>

  return USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2205      	movs	r2, #5
 800b3d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3d8:	2300      	movs	r3, #0
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2100      	movs	r1, #0
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fcee 	bl	800bdc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
	...

0800b3f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3fe:	2301      	movs	r3, #1
 800b400:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b402:	2300      	movs	r3, #0
 800b404:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b406:	4b1f      	ldr	r3, [pc, #124]	; (800b484 <FATFS_LinkDriverEx+0x94>)
 800b408:	7a5b      	ldrb	r3, [r3, #9]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d131      	bne.n	800b474 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b410:	4b1c      	ldr	r3, [pc, #112]	; (800b484 <FATFS_LinkDriverEx+0x94>)
 800b412:	7a5b      	ldrb	r3, [r3, #9]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	461a      	mov	r2, r3
 800b418:	4b1a      	ldr	r3, [pc, #104]	; (800b484 <FATFS_LinkDriverEx+0x94>)
 800b41a:	2100      	movs	r1, #0
 800b41c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b41e:	4b19      	ldr	r3, [pc, #100]	; (800b484 <FATFS_LinkDriverEx+0x94>)
 800b420:	7a5b      	ldrb	r3, [r3, #9]
 800b422:	b2db      	uxtb	r3, r3
 800b424:	4a17      	ldr	r2, [pc, #92]	; (800b484 <FATFS_LinkDriverEx+0x94>)
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b42e:	4b15      	ldr	r3, [pc, #84]	; (800b484 <FATFS_LinkDriverEx+0x94>)
 800b430:	7a5b      	ldrb	r3, [r3, #9]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	461a      	mov	r2, r3
 800b436:	4b13      	ldr	r3, [pc, #76]	; (800b484 <FATFS_LinkDriverEx+0x94>)
 800b438:	4413      	add	r3, r2
 800b43a:	79fa      	ldrb	r2, [r7, #7]
 800b43c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b43e:	4b11      	ldr	r3, [pc, #68]	; (800b484 <FATFS_LinkDriverEx+0x94>)
 800b440:	7a5b      	ldrb	r3, [r3, #9]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	1c5a      	adds	r2, r3, #1
 800b446:	b2d1      	uxtb	r1, r2
 800b448:	4a0e      	ldr	r2, [pc, #56]	; (800b484 <FATFS_LinkDriverEx+0x94>)
 800b44a:	7251      	strb	r1, [r2, #9]
 800b44c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b44e:	7dbb      	ldrb	r3, [r7, #22]
 800b450:	3330      	adds	r3, #48	; 0x30
 800b452:	b2da      	uxtb	r2, r3
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3301      	adds	r3, #1
 800b45c:	223a      	movs	r2, #58	; 0x3a
 800b45e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	3302      	adds	r3, #2
 800b464:	222f      	movs	r2, #47	; 0x2f
 800b466:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	3303      	adds	r3, #3
 800b46c:	2200      	movs	r2, #0
 800b46e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b474:	7dfb      	ldrb	r3, [r7, #23]
}
 800b476:	4618      	mov	r0, r3
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	2000021c 	.word	0x2000021c

0800b488 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b492:	2200      	movs	r2, #0
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff ffaa 	bl	800b3f0 <FATFS_LinkDriverEx>
 800b49c:	4603      	mov	r3, r0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	4912      	ldr	r1, [pc, #72]	; (800b4f8 <MX_USB_DEVICE_Init+0x50>)
 800b4b0:	4812      	ldr	r0, [pc, #72]	; (800b4fc <MX_USB_DEVICE_Init+0x54>)
 800b4b2:	f7fe fe6d 	bl	800a190 <USBD_Init>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b4bc:	f7f5 fe74 	bl	80011a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b4c0:	490f      	ldr	r1, [pc, #60]	; (800b500 <MX_USB_DEVICE_Init+0x58>)
 800b4c2:	480e      	ldr	r0, [pc, #56]	; (800b4fc <MX_USB_DEVICE_Init+0x54>)
 800b4c4:	f7fe fe9a 	bl	800a1fc <USBD_RegisterClass>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b4ce:	f7f5 fe6b 	bl	80011a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b4d2:	490c      	ldr	r1, [pc, #48]	; (800b504 <MX_USB_DEVICE_Init+0x5c>)
 800b4d4:	4809      	ldr	r0, [pc, #36]	; (800b4fc <MX_USB_DEVICE_Init+0x54>)
 800b4d6:	f7fe fdef 	bl	800a0b8 <USBD_CDC_RegisterInterface>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b4e0:	f7f5 fe62 	bl	80011a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b4e4:	4805      	ldr	r0, [pc, #20]	; (800b4fc <MX_USB_DEVICE_Init+0x54>)
 800b4e6:	f7fe feaa 	bl	800a23e <USBD_Start>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b4f0:	f7f5 fe5a 	bl	80011a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b4f4:	bf00      	nop
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20000130 	.word	0x20000130
 800b4fc:	20000a64 	.word	0x20000a64
 800b500:	20000018 	.word	0x20000018
 800b504:	2000011c 	.word	0x2000011c

0800b508 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b50c:	2200      	movs	r2, #0
 800b50e:	4905      	ldr	r1, [pc, #20]	; (800b524 <CDC_Init_FS+0x1c>)
 800b510:	4805      	ldr	r0, [pc, #20]	; (800b528 <CDC_Init_FS+0x20>)
 800b512:	f7fe fde6 	bl	800a0e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b516:	4905      	ldr	r1, [pc, #20]	; (800b52c <CDC_Init_FS+0x24>)
 800b518:	4803      	ldr	r0, [pc, #12]	; (800b528 <CDC_Init_FS+0x20>)
 800b51a:	f7fe fdfb 	bl	800a114 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b51e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b520:	4618      	mov	r0, r3
 800b522:	bd80      	pop	{r7, pc}
 800b524:	20001534 	.word	0x20001534
 800b528:	20000a64 	.word	0x20000a64
 800b52c:	20000d34 	.word	0x20000d34

0800b530 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b534:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b536:	4618      	mov	r0, r3
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	4603      	mov	r3, r0
 800b548:	6039      	str	r1, [r7, #0]
 800b54a:	71fb      	strb	r3, [r7, #7]
 800b54c:	4613      	mov	r3, r2
 800b54e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	2b23      	cmp	r3, #35	; 0x23
 800b554:	d84a      	bhi.n	800b5ec <CDC_Control_FS+0xac>
 800b556:	a201      	add	r2, pc, #4	; (adr r2, 800b55c <CDC_Control_FS+0x1c>)
 800b558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55c:	0800b5ed 	.word	0x0800b5ed
 800b560:	0800b5ed 	.word	0x0800b5ed
 800b564:	0800b5ed 	.word	0x0800b5ed
 800b568:	0800b5ed 	.word	0x0800b5ed
 800b56c:	0800b5ed 	.word	0x0800b5ed
 800b570:	0800b5ed 	.word	0x0800b5ed
 800b574:	0800b5ed 	.word	0x0800b5ed
 800b578:	0800b5ed 	.word	0x0800b5ed
 800b57c:	0800b5ed 	.word	0x0800b5ed
 800b580:	0800b5ed 	.word	0x0800b5ed
 800b584:	0800b5ed 	.word	0x0800b5ed
 800b588:	0800b5ed 	.word	0x0800b5ed
 800b58c:	0800b5ed 	.word	0x0800b5ed
 800b590:	0800b5ed 	.word	0x0800b5ed
 800b594:	0800b5ed 	.word	0x0800b5ed
 800b598:	0800b5ed 	.word	0x0800b5ed
 800b59c:	0800b5ed 	.word	0x0800b5ed
 800b5a0:	0800b5ed 	.word	0x0800b5ed
 800b5a4:	0800b5ed 	.word	0x0800b5ed
 800b5a8:	0800b5ed 	.word	0x0800b5ed
 800b5ac:	0800b5ed 	.word	0x0800b5ed
 800b5b0:	0800b5ed 	.word	0x0800b5ed
 800b5b4:	0800b5ed 	.word	0x0800b5ed
 800b5b8:	0800b5ed 	.word	0x0800b5ed
 800b5bc:	0800b5ed 	.word	0x0800b5ed
 800b5c0:	0800b5ed 	.word	0x0800b5ed
 800b5c4:	0800b5ed 	.word	0x0800b5ed
 800b5c8:	0800b5ed 	.word	0x0800b5ed
 800b5cc:	0800b5ed 	.word	0x0800b5ed
 800b5d0:	0800b5ed 	.word	0x0800b5ed
 800b5d4:	0800b5ed 	.word	0x0800b5ed
 800b5d8:	0800b5ed 	.word	0x0800b5ed
 800b5dc:	0800b5ed 	.word	0x0800b5ed
 800b5e0:	0800b5ed 	.word	0x0800b5ed
 800b5e4:	0800b5ed 	.word	0x0800b5ed
 800b5e8:	0800b5ed 	.word	0x0800b5ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5ec:	bf00      	nop
  }

  return (USBD_OK);
 800b5ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b606:	6879      	ldr	r1, [r7, #4]
 800b608:	4805      	ldr	r0, [pc, #20]	; (800b620 <CDC_Receive_FS+0x24>)
 800b60a:	f7fe fd83 	bl	800a114 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b60e:	4804      	ldr	r0, [pc, #16]	; (800b620 <CDC_Receive_FS+0x24>)
 800b610:	f7fe fd94 	bl	800a13c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b614:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b616:	4618      	mov	r0, r3
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20000a64 	.word	0x20000a64

0800b624 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b624:	b480      	push	{r7}
 800b626:	b087      	sub	sp, #28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	4613      	mov	r3, r2
 800b630:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b636:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	371c      	adds	r7, #28
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
	...

0800b648 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	6039      	str	r1, [r7, #0]
 800b652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2212      	movs	r2, #18
 800b658:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b65a:	4b03      	ldr	r3, [pc, #12]	; (800b668 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	20000150 	.word	0x20000150

0800b66c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2204      	movs	r2, #4
 800b67c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b67e:	4b03      	ldr	r3, [pc, #12]	; (800b68c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	20000170 	.word	0x20000170

0800b690 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b69c:	79fb      	ldrb	r3, [r7, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	4907      	ldr	r1, [pc, #28]	; (800b6c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6a6:	4808      	ldr	r0, [pc, #32]	; (800b6c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6a8:	f7ff fdc1 	bl	800b22e <USBD_GetString>
 800b6ac:	e004      	b.n	800b6b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4904      	ldr	r1, [pc, #16]	; (800b6c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6b2:	4805      	ldr	r0, [pc, #20]	; (800b6c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6b4:	f7ff fdbb 	bl	800b22e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20001d34 	.word	0x20001d34
 800b6c8:	0800c12c 	.word	0x0800c12c

0800b6cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	6039      	str	r1, [r7, #0]
 800b6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	4904      	ldr	r1, [pc, #16]	; (800b6ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b6dc:	4804      	ldr	r0, [pc, #16]	; (800b6f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b6de:	f7ff fda6 	bl	800b22e <USBD_GetString>
  return USBD_StrDesc;
 800b6e2:	4b02      	ldr	r3, [pc, #8]	; (800b6ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20001d34 	.word	0x20001d34
 800b6f0:	0800c144 	.word	0x0800c144

0800b6f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	6039      	str	r1, [r7, #0]
 800b6fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	221a      	movs	r2, #26
 800b704:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b706:	f000 f855 	bl	800b7b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b70a:	4b02      	ldr	r3, [pc, #8]	; (800b714 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	20000174 	.word	0x20000174

0800b718 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	6039      	str	r1, [r7, #0]
 800b722:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d105      	bne.n	800b736 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	4907      	ldr	r1, [pc, #28]	; (800b74c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b72e:	4808      	ldr	r0, [pc, #32]	; (800b750 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b730:	f7ff fd7d 	bl	800b22e <USBD_GetString>
 800b734:	e004      	b.n	800b740 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	4904      	ldr	r1, [pc, #16]	; (800b74c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b73a:	4805      	ldr	r0, [pc, #20]	; (800b750 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b73c:	f7ff fd77 	bl	800b22e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b740:	4b02      	ldr	r3, [pc, #8]	; (800b74c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	20001d34 	.word	0x20001d34
 800b750:	0800c158 	.word	0x0800c158

0800b754 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	6039      	str	r1, [r7, #0]
 800b75e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d105      	bne.n	800b772 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	4907      	ldr	r1, [pc, #28]	; (800b788 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b76a:	4808      	ldr	r0, [pc, #32]	; (800b78c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b76c:	f7ff fd5f 	bl	800b22e <USBD_GetString>
 800b770:	e004      	b.n	800b77c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	4904      	ldr	r1, [pc, #16]	; (800b788 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b776:	4805      	ldr	r0, [pc, #20]	; (800b78c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b778:	f7ff fd59 	bl	800b22e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b77c:	4b02      	ldr	r3, [pc, #8]	; (800b788 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	20001d34 	.word	0x20001d34
 800b78c:	0800c164 	.word	0x0800c164

0800b790 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	4603      	mov	r3, r0
 800b798:	6039      	str	r1, [r7, #0]
 800b79a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	220c      	movs	r2, #12
 800b7a0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b7a2:	4b03      	ldr	r3, [pc, #12]	; (800b7b0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	20000164 	.word	0x20000164

0800b7b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7ba:	4b0f      	ldr	r3, [pc, #60]	; (800b7f8 <Get_SerialNum+0x44>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7c0:	4b0e      	ldr	r3, [pc, #56]	; (800b7fc <Get_SerialNum+0x48>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7c6:	4b0e      	ldr	r3, [pc, #56]	; (800b800 <Get_SerialNum+0x4c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d009      	beq.n	800b7ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7da:	2208      	movs	r2, #8
 800b7dc:	4909      	ldr	r1, [pc, #36]	; (800b804 <Get_SerialNum+0x50>)
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 f814 	bl	800b80c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	4908      	ldr	r1, [pc, #32]	; (800b808 <Get_SerialNum+0x54>)
 800b7e8:	68b8      	ldr	r0, [r7, #8]
 800b7ea:	f000 f80f 	bl	800b80c <IntToUnicode>
  }
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	1fff7a10 	.word	0x1fff7a10
 800b7fc:	1fff7a14 	.word	0x1fff7a14
 800b800:	1fff7a18 	.word	0x1fff7a18
 800b804:	20000176 	.word	0x20000176
 800b808:	20000186 	.word	0x20000186

0800b80c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
 800b822:	e027      	b.n	800b874 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	0f1b      	lsrs	r3, r3, #28
 800b828:	2b09      	cmp	r3, #9
 800b82a:	d80b      	bhi.n	800b844 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	0f1b      	lsrs	r3, r3, #28
 800b830:	b2da      	uxtb	r2, r3
 800b832:	7dfb      	ldrb	r3, [r7, #23]
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	4619      	mov	r1, r3
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	440b      	add	r3, r1
 800b83c:	3230      	adds	r2, #48	; 0x30
 800b83e:	b2d2      	uxtb	r2, r2
 800b840:	701a      	strb	r2, [r3, #0]
 800b842:	e00a      	b.n	800b85a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	0f1b      	lsrs	r3, r3, #28
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	4619      	mov	r1, r3
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	440b      	add	r3, r1
 800b854:	3237      	adds	r2, #55	; 0x37
 800b856:	b2d2      	uxtb	r2, r2
 800b858:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	011b      	lsls	r3, r3, #4
 800b85e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b860:	7dfb      	ldrb	r3, [r7, #23]
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	3301      	adds	r3, #1
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	4413      	add	r3, r2
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	3301      	adds	r3, #1
 800b872:	75fb      	strb	r3, [r7, #23]
 800b874:	7dfa      	ldrb	r2, [r7, #23]
 800b876:	79fb      	ldrb	r3, [r7, #7]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d3d3      	bcc.n	800b824 <IntToUnicode+0x18>
  }
}
 800b87c:	bf00      	nop
 800b87e:	371c      	adds	r7, #28
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08a      	sub	sp, #40	; 0x28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b890:	f107 0314 	add.w	r3, r7, #20
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]
 800b898:	605a      	str	r2, [r3, #4]
 800b89a:	609a      	str	r2, [r3, #8]
 800b89c:	60da      	str	r2, [r3, #12]
 800b89e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8a8:	d13a      	bne.n	800b920 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	613b      	str	r3, [r7, #16]
 800b8ae:	4b1e      	ldr	r3, [pc, #120]	; (800b928 <HAL_PCD_MspInit+0xa0>)
 800b8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b2:	4a1d      	ldr	r2, [pc, #116]	; (800b928 <HAL_PCD_MspInit+0xa0>)
 800b8b4:	f043 0301 	orr.w	r3, r3, #1
 800b8b8:	6313      	str	r3, [r2, #48]	; 0x30
 800b8ba:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <HAL_PCD_MspInit+0xa0>)
 800b8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	613b      	str	r3, [r7, #16]
 800b8c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b8c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b8ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8d8:	230a      	movs	r3, #10
 800b8da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8dc:	f107 0314 	add.w	r3, r7, #20
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4812      	ldr	r0, [pc, #72]	; (800b92c <HAL_PCD_MspInit+0xa4>)
 800b8e4:	f7f6 fe62 	bl	80025ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8e8:	4b0f      	ldr	r3, [pc, #60]	; (800b928 <HAL_PCD_MspInit+0xa0>)
 800b8ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ec:	4a0e      	ldr	r2, [pc, #56]	; (800b928 <HAL_PCD_MspInit+0xa0>)
 800b8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f2:	6353      	str	r3, [r2, #52]	; 0x34
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	60fb      	str	r3, [r7, #12]
 800b8f8:	4b0b      	ldr	r3, [pc, #44]	; (800b928 <HAL_PCD_MspInit+0xa0>)
 800b8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fc:	4a0a      	ldr	r2, [pc, #40]	; (800b928 <HAL_PCD_MspInit+0xa0>)
 800b8fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b902:	6453      	str	r3, [r2, #68]	; 0x44
 800b904:	4b08      	ldr	r3, [pc, #32]	; (800b928 <HAL_PCD_MspInit+0xa0>)
 800b906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b910:	2200      	movs	r2, #0
 800b912:	2100      	movs	r1, #0
 800b914:	2043      	movs	r0, #67	; 0x43
 800b916:	f7f6 fe12 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b91a:	2043      	movs	r0, #67	; 0x43
 800b91c:	f7f6 fe2b 	bl	8002576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b920:	bf00      	nop
 800b922:	3728      	adds	r7, #40	; 0x28
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	40023800 	.word	0x40023800
 800b92c:	40020000 	.word	0x40020000

0800b930 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f7fe fcc4 	bl	800a2d4 <USBD_LL_SetupStage>
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b966:	78fa      	ldrb	r2, [r7, #3]
 800b968:	6879      	ldr	r1, [r7, #4]
 800b96a:	4613      	mov	r3, r2
 800b96c:	00db      	lsls	r3, r3, #3
 800b96e:	1a9b      	subs	r3, r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	440b      	add	r3, r1
 800b974:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	78fb      	ldrb	r3, [r7, #3]
 800b97c:	4619      	mov	r1, r3
 800b97e:	f7fe fcfc 	bl	800a37a <USBD_LL_DataOutStage>
}
 800b982:	bf00      	nop
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	460b      	mov	r3, r1
 800b994:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b99c:	78fa      	ldrb	r2, [r7, #3]
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	00db      	lsls	r3, r3, #3
 800b9a4:	1a9b      	subs	r3, r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	440b      	add	r3, r1
 800b9aa:	3348      	adds	r3, #72	; 0x48
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	78fb      	ldrb	r3, [r7, #3]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f7fe fd45 	bl	800a440 <USBD_LL_DataInStage>
}
 800b9b6:	bf00      	nop
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fe fe49 	bl	800a664 <USBD_LL_SOF>
}
 800b9d2:	bf00      	nop
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73fb      	strb	r3, [r7, #15]
 800b9f2:	e008      	b.n	800ba06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d102      	bne.n	800ba02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	73fb      	strb	r3, [r7, #15]
 800ba00:	e001      	b.n	800ba06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ba02:	f7f5 fbd1 	bl	80011a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba0c:	7bfa      	ldrb	r2, [r7, #15]
 800ba0e:	4611      	mov	r1, r2
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fdec 	bl	800a5ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fe fda5 	bl	800a56c <USBD_LL_Reset>
}
 800ba22:	bf00      	nop
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe fde7 	bl	800a60e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	6812      	ldr	r2, [r2, #0]
 800ba4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba52:	f043 0301 	orr.w	r3, r3, #1
 800ba56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a1b      	ldr	r3, [r3, #32]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d005      	beq.n	800ba6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba60:	4b04      	ldr	r3, [pc, #16]	; (800ba74 <HAL_PCD_SuspendCallback+0x48>)
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	4a03      	ldr	r2, [pc, #12]	; (800ba74 <HAL_PCD_SuspendCallback+0x48>)
 800ba66:	f043 0306 	orr.w	r3, r3, #6
 800ba6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba6c:	bf00      	nop
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	e000ed00 	.word	0xe000ed00

0800ba78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fe fdd6 	bl	800a638 <USBD_LL_Resume>
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800baa6:	78fa      	ldrb	r2, [r7, #3]
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fe fe01 	bl	800a6b2 <USBD_LL_IsoOUTIncomplete>
}
 800bab0:	bf00      	nop
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800baca:	78fa      	ldrb	r2, [r7, #3]
 800bacc:	4611      	mov	r1, r2
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe fde2 	bl	800a698 <USBD_LL_IsoINIncomplete>
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800baea:	4618      	mov	r0, r3
 800baec:	f7fe fdee 	bl	800a6cc <USBD_LL_DevConnected>
}
 800baf0:	bf00      	nop
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fe fdeb 	bl	800a6e2 <USBD_LL_DevDisconnected>
}
 800bb0c:	bf00      	nop
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d13c      	bne.n	800bb9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb24:	4a20      	ldr	r2, [pc, #128]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a1e      	ldr	r2, [pc, #120]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb34:	4b1c      	ldr	r3, [pc, #112]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bb3c:	4b1a      	ldr	r3, [pc, #104]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb3e:	2206      	movs	r2, #6
 800bb40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb42:	4b19      	ldr	r3, [pc, #100]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb44:	2202      	movs	r2, #2
 800bb46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb48:	4b17      	ldr	r3, [pc, #92]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb4e:	4b16      	ldr	r3, [pc, #88]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb50:	2202      	movs	r2, #2
 800bb52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb54:	4b14      	ldr	r3, [pc, #80]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb56:	2200      	movs	r2, #0
 800bb58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb5a:	4b13      	ldr	r3, [pc, #76]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb60:	4b11      	ldr	r3, [pc, #68]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bb66:	4b10      	ldr	r3, [pc, #64]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb6c:	4b0e      	ldr	r3, [pc, #56]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb72:	480d      	ldr	r0, [pc, #52]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb74:	f7f7 f830 	bl	8002bd8 <HAL_PCD_Init>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb7e:	f7f5 fb13 	bl	80011a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb82:	2180      	movs	r1, #128	; 0x80
 800bb84:	4808      	ldr	r0, [pc, #32]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb86:	f7f8 f9c2 	bl	8003f0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb8a:	2240      	movs	r2, #64	; 0x40
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4806      	ldr	r0, [pc, #24]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb90:	f7f8 f976 	bl	8003e80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb94:	2280      	movs	r2, #128	; 0x80
 800bb96:	2101      	movs	r1, #1
 800bb98:	4803      	ldr	r0, [pc, #12]	; (800bba8 <USBD_LL_Init+0x94>)
 800bb9a:	f7f8 f971 	bl	8003e80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	20001f34 	.word	0x20001f34

0800bbac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7f7 f92c 	bl	8002e20 <HAL_PCD_Start>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f978 	bl	800bec4 <USBD_Get_USB_Status>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	4608      	mov	r0, r1
 800bbec:	4611      	mov	r1, r2
 800bbee:	461a      	mov	r2, r3
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	70fb      	strb	r3, [r7, #3]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70bb      	strb	r3, [r7, #2]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc0a:	78bb      	ldrb	r3, [r7, #2]
 800bc0c:	883a      	ldrh	r2, [r7, #0]
 800bc0e:	78f9      	ldrb	r1, [r7, #3]
 800bc10:	f7f7 fd3d 	bl	800368e <HAL_PCD_EP_Open>
 800bc14:	4603      	mov	r3, r0
 800bc16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 f952 	bl	800bec4 <USBD_Get_USB_Status>
 800bc20:	4603      	mov	r3, r0
 800bc22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b084      	sub	sp, #16
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	460b      	mov	r3, r1
 800bc38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc48:	78fa      	ldrb	r2, [r7, #3]
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7f7 fd86 	bl	800375e <HAL_PCD_EP_Close>
 800bc52:	4603      	mov	r3, r0
 800bc54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f000 f933 	bl	800bec4 <USBD_Get_USB_Status>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc62:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc86:	78fa      	ldrb	r2, [r7, #3]
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7f7 fe5e 	bl	800394c <HAL_PCD_EP_SetStall>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 f914 	bl	800bec4 <USBD_Get_USB_Status>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcc4:	78fa      	ldrb	r2, [r7, #3]
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7f7 fea3 	bl	8003a14 <HAL_PCD_EP_ClrStall>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcd2:	7bfb      	ldrb	r3, [r7, #15]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 f8f5 	bl	800bec4 <USBD_Get_USB_Status>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcde:	7bbb      	ldrb	r3, [r7, #14]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bcfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	da0b      	bge.n	800bd1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd04:	78fb      	ldrb	r3, [r7, #3]
 800bd06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd0a:	68f9      	ldr	r1, [r7, #12]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	00db      	lsls	r3, r3, #3
 800bd10:	1a9b      	subs	r3, r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	440b      	add	r3, r1
 800bd16:	333e      	adds	r3, #62	; 0x3e
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	e00b      	b.n	800bd34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd1c:	78fb      	ldrb	r3, [r7, #3]
 800bd1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd22:	68f9      	ldr	r1, [r7, #12]
 800bd24:	4613      	mov	r3, r2
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	1a9b      	subs	r3, r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	440b      	add	r3, r1
 800bd2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3714      	adds	r7, #20
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd5a:	78fa      	ldrb	r2, [r7, #3]
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7f7 fc70 	bl	8003644 <HAL_PCD_SetAddress>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 f8aa 	bl	800bec4 <USBD_Get_USB_Status>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b086      	sub	sp, #24
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	60f8      	str	r0, [r7, #12]
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	603b      	str	r3, [r7, #0]
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd9c:	7af9      	ldrb	r1, [r7, #11]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	f7f7 fd89 	bl	80038b8 <HAL_PCD_EP_Transmit>
 800bda6:	4603      	mov	r3, r0
 800bda8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 f889 	bl	800bec4 <USBD_Get_USB_Status>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdb6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	607a      	str	r2, [r7, #4]
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bdde:	7af9      	ldrb	r1, [r7, #11]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	f7f7 fd05 	bl	80037f2 <HAL_PCD_EP_Receive>
 800bde8:	4603      	mov	r3, r0
 800bdea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdec:	7dfb      	ldrb	r3, [r7, #23]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 f868 	bl	800bec4 <USBD_Get_USB_Status>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3718      	adds	r7, #24
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b082      	sub	sp, #8
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	460b      	mov	r3, r1
 800be0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be14:	78fa      	ldrb	r2, [r7, #3]
 800be16:	4611      	mov	r1, r2
 800be18:	4618      	mov	r0, r3
 800be1a:	f7f7 fd35 	bl	8003888 <HAL_PCD_EP_GetRxCount>
 800be1e:	4603      	mov	r3, r0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <HAL_PCDEx_LPM_Callback+0x18>
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d01f      	beq.n	800be7e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800be3e:	e03b      	b.n	800beb8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d007      	beq.n	800be58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800be48:	f7f4 fb8e 	bl	8000568 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be4c:	4b1c      	ldr	r3, [pc, #112]	; (800bec0 <HAL_PCDEx_LPM_Callback+0x98>)
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	4a1b      	ldr	r2, [pc, #108]	; (800bec0 <HAL_PCDEx_LPM_Callback+0x98>)
 800be52:	f023 0306 	bic.w	r3, r3, #6
 800be56:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	6812      	ldr	r2, [r2, #0]
 800be66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be6a:	f023 0301 	bic.w	r3, r3, #1
 800be6e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe fbde 	bl	800a638 <USBD_LL_Resume>
    break;
 800be7c:	e01c      	b.n	800beb8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	6812      	ldr	r2, [r2, #0]
 800be8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be90:	f043 0301 	orr.w	r3, r3, #1
 800be94:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fe fbb6 	bl	800a60e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d005      	beq.n	800beb6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <HAL_PCDEx_LPM_Callback+0x98>)
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	4a04      	ldr	r2, [pc, #16]	; (800bec0 <HAL_PCDEx_LPM_Callback+0x98>)
 800beb0:	f043 0306 	orr.w	r3, r3, #6
 800beb4:	6113      	str	r3, [r2, #16]
    break;
 800beb6:	bf00      	nop
}
 800beb8:	bf00      	nop
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	e000ed00 	.word	0xe000ed00

0800bec4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	4603      	mov	r3, r0
 800becc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d817      	bhi.n	800bf08 <USBD_Get_USB_Status+0x44>
 800bed8:	a201      	add	r2, pc, #4	; (adr r2, 800bee0 <USBD_Get_USB_Status+0x1c>)
 800beda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bede:	bf00      	nop
 800bee0:	0800bef1 	.word	0x0800bef1
 800bee4:	0800bef7 	.word	0x0800bef7
 800bee8:	0800befd 	.word	0x0800befd
 800beec:	0800bf03 	.word	0x0800bf03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	73fb      	strb	r3, [r7, #15]
    break;
 800bef4:	e00b      	b.n	800bf0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bef6:	2303      	movs	r3, #3
 800bef8:	73fb      	strb	r3, [r7, #15]
    break;
 800befa:	e008      	b.n	800bf0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800befc:	2301      	movs	r3, #1
 800befe:	73fb      	strb	r3, [r7, #15]
    break;
 800bf00:	e005      	b.n	800bf0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf02:	2303      	movs	r3, #3
 800bf04:	73fb      	strb	r3, [r7, #15]
    break;
 800bf06:	e002      	b.n	800bf0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf0c:	bf00      	nop
  }
  return usb_status;
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <__errno>:
 800bf1c:	4b01      	ldr	r3, [pc, #4]	; (800bf24 <__errno+0x8>)
 800bf1e:	6818      	ldr	r0, [r3, #0]
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	20000190 	.word	0x20000190

0800bf28 <__libc_init_array>:
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	4e0d      	ldr	r6, [pc, #52]	; (800bf60 <__libc_init_array+0x38>)
 800bf2c:	4c0d      	ldr	r4, [pc, #52]	; (800bf64 <__libc_init_array+0x3c>)
 800bf2e:	1ba4      	subs	r4, r4, r6
 800bf30:	10a4      	asrs	r4, r4, #2
 800bf32:	2500      	movs	r5, #0
 800bf34:	42a5      	cmp	r5, r4
 800bf36:	d109      	bne.n	800bf4c <__libc_init_array+0x24>
 800bf38:	4e0b      	ldr	r6, [pc, #44]	; (800bf68 <__libc_init_array+0x40>)
 800bf3a:	4c0c      	ldr	r4, [pc, #48]	; (800bf6c <__libc_init_array+0x44>)
 800bf3c:	f000 f8ea 	bl	800c114 <_init>
 800bf40:	1ba4      	subs	r4, r4, r6
 800bf42:	10a4      	asrs	r4, r4, #2
 800bf44:	2500      	movs	r5, #0
 800bf46:	42a5      	cmp	r5, r4
 800bf48:	d105      	bne.n	800bf56 <__libc_init_array+0x2e>
 800bf4a:	bd70      	pop	{r4, r5, r6, pc}
 800bf4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf50:	4798      	blx	r3
 800bf52:	3501      	adds	r5, #1
 800bf54:	e7ee      	b.n	800bf34 <__libc_init_array+0xc>
 800bf56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf5a:	4798      	blx	r3
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	e7f2      	b.n	800bf46 <__libc_init_array+0x1e>
 800bf60:	0800c1a8 	.word	0x0800c1a8
 800bf64:	0800c1a8 	.word	0x0800c1a8
 800bf68:	0800c1a8 	.word	0x0800c1a8
 800bf6c:	0800c1ac 	.word	0x0800c1ac

0800bf70 <malloc>:
 800bf70:	4b02      	ldr	r3, [pc, #8]	; (800bf7c <malloc+0xc>)
 800bf72:	4601      	mov	r1, r0
 800bf74:	6818      	ldr	r0, [r3, #0]
 800bf76:	f000 b861 	b.w	800c03c <_malloc_r>
 800bf7a:	bf00      	nop
 800bf7c:	20000190 	.word	0x20000190

0800bf80 <free>:
 800bf80:	4b02      	ldr	r3, [pc, #8]	; (800bf8c <free+0xc>)
 800bf82:	4601      	mov	r1, r0
 800bf84:	6818      	ldr	r0, [r3, #0]
 800bf86:	f000 b80b 	b.w	800bfa0 <_free_r>
 800bf8a:	bf00      	nop
 800bf8c:	20000190 	.word	0x20000190

0800bf90 <memset>:
 800bf90:	4402      	add	r2, r0
 800bf92:	4603      	mov	r3, r0
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d100      	bne.n	800bf9a <memset+0xa>
 800bf98:	4770      	bx	lr
 800bf9a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf9e:	e7f9      	b.n	800bf94 <memset+0x4>

0800bfa0 <_free_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	2900      	cmp	r1, #0
 800bfa6:	d045      	beq.n	800c034 <_free_r+0x94>
 800bfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfac:	1f0c      	subs	r4, r1, #4
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	bfb8      	it	lt
 800bfb2:	18e4      	addlt	r4, r4, r3
 800bfb4:	f000 f8ac 	bl	800c110 <__malloc_lock>
 800bfb8:	4a1f      	ldr	r2, [pc, #124]	; (800c038 <_free_r+0x98>)
 800bfba:	6813      	ldr	r3, [r2, #0]
 800bfbc:	4610      	mov	r0, r2
 800bfbe:	b933      	cbnz	r3, 800bfce <_free_r+0x2e>
 800bfc0:	6063      	str	r3, [r4, #4]
 800bfc2:	6014      	str	r4, [r2, #0]
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfca:	f000 b8a2 	b.w	800c112 <__malloc_unlock>
 800bfce:	42a3      	cmp	r3, r4
 800bfd0:	d90c      	bls.n	800bfec <_free_r+0x4c>
 800bfd2:	6821      	ldr	r1, [r4, #0]
 800bfd4:	1862      	adds	r2, r4, r1
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	bf04      	itt	eq
 800bfda:	681a      	ldreq	r2, [r3, #0]
 800bfdc:	685b      	ldreq	r3, [r3, #4]
 800bfde:	6063      	str	r3, [r4, #4]
 800bfe0:	bf04      	itt	eq
 800bfe2:	1852      	addeq	r2, r2, r1
 800bfe4:	6022      	streq	r2, [r4, #0]
 800bfe6:	6004      	str	r4, [r0, #0]
 800bfe8:	e7ec      	b.n	800bfc4 <_free_r+0x24>
 800bfea:	4613      	mov	r3, r2
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	b10a      	cbz	r2, 800bff4 <_free_r+0x54>
 800bff0:	42a2      	cmp	r2, r4
 800bff2:	d9fa      	bls.n	800bfea <_free_r+0x4a>
 800bff4:	6819      	ldr	r1, [r3, #0]
 800bff6:	1858      	adds	r0, r3, r1
 800bff8:	42a0      	cmp	r0, r4
 800bffa:	d10b      	bne.n	800c014 <_free_r+0x74>
 800bffc:	6820      	ldr	r0, [r4, #0]
 800bffe:	4401      	add	r1, r0
 800c000:	1858      	adds	r0, r3, r1
 800c002:	4282      	cmp	r2, r0
 800c004:	6019      	str	r1, [r3, #0]
 800c006:	d1dd      	bne.n	800bfc4 <_free_r+0x24>
 800c008:	6810      	ldr	r0, [r2, #0]
 800c00a:	6852      	ldr	r2, [r2, #4]
 800c00c:	605a      	str	r2, [r3, #4]
 800c00e:	4401      	add	r1, r0
 800c010:	6019      	str	r1, [r3, #0]
 800c012:	e7d7      	b.n	800bfc4 <_free_r+0x24>
 800c014:	d902      	bls.n	800c01c <_free_r+0x7c>
 800c016:	230c      	movs	r3, #12
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	e7d3      	b.n	800bfc4 <_free_r+0x24>
 800c01c:	6820      	ldr	r0, [r4, #0]
 800c01e:	1821      	adds	r1, r4, r0
 800c020:	428a      	cmp	r2, r1
 800c022:	bf04      	itt	eq
 800c024:	6811      	ldreq	r1, [r2, #0]
 800c026:	6852      	ldreq	r2, [r2, #4]
 800c028:	6062      	str	r2, [r4, #4]
 800c02a:	bf04      	itt	eq
 800c02c:	1809      	addeq	r1, r1, r0
 800c02e:	6021      	streq	r1, [r4, #0]
 800c030:	605c      	str	r4, [r3, #4]
 800c032:	e7c7      	b.n	800bfc4 <_free_r+0x24>
 800c034:	bd38      	pop	{r3, r4, r5, pc}
 800c036:	bf00      	nop
 800c038:	20000228 	.word	0x20000228

0800c03c <_malloc_r>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	1ccd      	adds	r5, r1, #3
 800c040:	f025 0503 	bic.w	r5, r5, #3
 800c044:	3508      	adds	r5, #8
 800c046:	2d0c      	cmp	r5, #12
 800c048:	bf38      	it	cc
 800c04a:	250c      	movcc	r5, #12
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	4606      	mov	r6, r0
 800c050:	db01      	blt.n	800c056 <_malloc_r+0x1a>
 800c052:	42a9      	cmp	r1, r5
 800c054:	d903      	bls.n	800c05e <_malloc_r+0x22>
 800c056:	230c      	movs	r3, #12
 800c058:	6033      	str	r3, [r6, #0]
 800c05a:	2000      	movs	r0, #0
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
 800c05e:	f000 f857 	bl	800c110 <__malloc_lock>
 800c062:	4a21      	ldr	r2, [pc, #132]	; (800c0e8 <_malloc_r+0xac>)
 800c064:	6814      	ldr	r4, [r2, #0]
 800c066:	4621      	mov	r1, r4
 800c068:	b991      	cbnz	r1, 800c090 <_malloc_r+0x54>
 800c06a:	4c20      	ldr	r4, [pc, #128]	; (800c0ec <_malloc_r+0xb0>)
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	b91b      	cbnz	r3, 800c078 <_malloc_r+0x3c>
 800c070:	4630      	mov	r0, r6
 800c072:	f000 f83d 	bl	800c0f0 <_sbrk_r>
 800c076:	6020      	str	r0, [r4, #0]
 800c078:	4629      	mov	r1, r5
 800c07a:	4630      	mov	r0, r6
 800c07c:	f000 f838 	bl	800c0f0 <_sbrk_r>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	d124      	bne.n	800c0ce <_malloc_r+0x92>
 800c084:	230c      	movs	r3, #12
 800c086:	6033      	str	r3, [r6, #0]
 800c088:	4630      	mov	r0, r6
 800c08a:	f000 f842 	bl	800c112 <__malloc_unlock>
 800c08e:	e7e4      	b.n	800c05a <_malloc_r+0x1e>
 800c090:	680b      	ldr	r3, [r1, #0]
 800c092:	1b5b      	subs	r3, r3, r5
 800c094:	d418      	bmi.n	800c0c8 <_malloc_r+0x8c>
 800c096:	2b0b      	cmp	r3, #11
 800c098:	d90f      	bls.n	800c0ba <_malloc_r+0x7e>
 800c09a:	600b      	str	r3, [r1, #0]
 800c09c:	50cd      	str	r5, [r1, r3]
 800c09e:	18cc      	adds	r4, r1, r3
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f000 f836 	bl	800c112 <__malloc_unlock>
 800c0a6:	f104 000b 	add.w	r0, r4, #11
 800c0aa:	1d23      	adds	r3, r4, #4
 800c0ac:	f020 0007 	bic.w	r0, r0, #7
 800c0b0:	1ac3      	subs	r3, r0, r3
 800c0b2:	d0d3      	beq.n	800c05c <_malloc_r+0x20>
 800c0b4:	425a      	negs	r2, r3
 800c0b6:	50e2      	str	r2, [r4, r3]
 800c0b8:	e7d0      	b.n	800c05c <_malloc_r+0x20>
 800c0ba:	428c      	cmp	r4, r1
 800c0bc:	684b      	ldr	r3, [r1, #4]
 800c0be:	bf16      	itet	ne
 800c0c0:	6063      	strne	r3, [r4, #4]
 800c0c2:	6013      	streq	r3, [r2, #0]
 800c0c4:	460c      	movne	r4, r1
 800c0c6:	e7eb      	b.n	800c0a0 <_malloc_r+0x64>
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	6849      	ldr	r1, [r1, #4]
 800c0cc:	e7cc      	b.n	800c068 <_malloc_r+0x2c>
 800c0ce:	1cc4      	adds	r4, r0, #3
 800c0d0:	f024 0403 	bic.w	r4, r4, #3
 800c0d4:	42a0      	cmp	r0, r4
 800c0d6:	d005      	beq.n	800c0e4 <_malloc_r+0xa8>
 800c0d8:	1a21      	subs	r1, r4, r0
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f000 f808 	bl	800c0f0 <_sbrk_r>
 800c0e0:	3001      	adds	r0, #1
 800c0e2:	d0cf      	beq.n	800c084 <_malloc_r+0x48>
 800c0e4:	6025      	str	r5, [r4, #0]
 800c0e6:	e7db      	b.n	800c0a0 <_malloc_r+0x64>
 800c0e8:	20000228 	.word	0x20000228
 800c0ec:	2000022c 	.word	0x2000022c

0800c0f0 <_sbrk_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4c06      	ldr	r4, [pc, #24]	; (800c10c <_sbrk_r+0x1c>)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	6023      	str	r3, [r4, #0]
 800c0fc:	f7f5 fccc 	bl	8001a98 <_sbrk>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	d102      	bne.n	800c10a <_sbrk_r+0x1a>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	b103      	cbz	r3, 800c10a <_sbrk_r+0x1a>
 800c108:	602b      	str	r3, [r5, #0]
 800c10a:	bd38      	pop	{r3, r4, r5, pc}
 800c10c:	2000233c 	.word	0x2000233c

0800c110 <__malloc_lock>:
 800c110:	4770      	bx	lr

0800c112 <__malloc_unlock>:
 800c112:	4770      	bx	lr

0800c114 <_init>:
 800c114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c116:	bf00      	nop
 800c118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c11a:	bc08      	pop	{r3}
 800c11c:	469e      	mov	lr, r3
 800c11e:	4770      	bx	lr

0800c120 <_fini>:
 800c120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c122:	bf00      	nop
 800c124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c126:	bc08      	pop	{r3}
 800c128:	469e      	mov	lr, r3
 800c12a:	4770      	bx	lr
