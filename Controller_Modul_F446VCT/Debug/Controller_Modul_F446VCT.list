
Controller_Modul_F446VCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c434  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800c5f8  0800c5f8  0001c5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c694  0800c694  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c694  0800c694  0001c694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c69c  0800c69c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c69c  0800c69c  0001c69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6a0  0800c6a0  0001c6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a4  200001e8  0800c88c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000238c  0800c88c  0002238c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026ed0  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b35  00000000  00000000  000470e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e40  00000000  00000000  0004bc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c30  00000000  00000000  0004da60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002975e  00000000  00000000  0004f690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001adff  00000000  00000000  00078dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e567c  00000000  00000000  00093bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081fc  00000000  00000000  001792e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001e8 	.word	0x200001e8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800c5e0 	.word	0x0800c5e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001ec 	.word	0x200001ec
 8000200:	0800c5e0 	.word	0x0800c5e0

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000238:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800023c:	f000 b972 	b.w	8000524 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	4688      	mov	r8, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d14b      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000266:	428a      	cmp	r2, r1
 8000268:	4615      	mov	r5, r2
 800026a:	d967      	bls.n	800033c <__udivmoddi4+0xe4>
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0720 	rsb	r7, r2, #32
 8000276:	fa01 f302 	lsl.w	r3, r1, r2
 800027a:	fa20 f707 	lsr.w	r7, r0, r7
 800027e:	4095      	lsls	r5, r2
 8000280:	ea47 0803 	orr.w	r8, r7, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028a:	0c23      	lsrs	r3, r4, #16
 800028c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000290:	fa1f fc85 	uxth.w	ip, r5
 8000294:	fb0e 8817 	mls	r8, lr, r7, r8
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	fb07 f10c 	mul.w	r1, r7, ip
 80002a0:	4299      	cmp	r1, r3
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x60>
 80002a4:	18eb      	adds	r3, r5, r3
 80002a6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002aa:	f080 811b 	bcs.w	80004e4 <__udivmoddi4+0x28c>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 8118 	bls.w	80004e4 <__udivmoddi4+0x28c>
 80002b4:	3f02      	subs	r7, #2
 80002b6:	442b      	add	r3, r5
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002cc:	45a4      	cmp	ip, r4
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x8c>
 80002d0:	192c      	adds	r4, r5, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d6:	f080 8107 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002da:	45a4      	cmp	ip, r4
 80002dc:	f240 8104 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002e0:	3802      	subs	r0, #2
 80002e2:	442c      	add	r4, r5
 80002e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e8:	eba4 040c 	sub.w	r4, r4, ip
 80002ec:	2700      	movs	r7, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa0>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d909      	bls.n	8000316 <__udivmoddi4+0xbe>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80eb 	beq.w	80004de <__udivmoddi4+0x286>
 8000308:	2700      	movs	r7, #0
 800030a:	e9c6 0100 	strd	r0, r1, [r6]
 800030e:	4638      	mov	r0, r7
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f783 	clz	r7, r3
 800031a:	2f00      	cmp	r7, #0
 800031c:	d147      	bne.n	80003ae <__udivmoddi4+0x156>
 800031e:	428b      	cmp	r3, r1
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd0>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fa 	bhi.w	800051c <__udivmoddi4+0x2c4>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb61 0303 	sbc.w	r3, r1, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e0      	beq.n	80002f8 <__udivmoddi4+0xa0>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7dd      	b.n	80002f8 <__udivmoddi4+0xa0>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xe8>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 808f 	bne.w	8000468 <__udivmoddi4+0x210>
 800034a:	1b49      	subs	r1, r1, r5
 800034c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000350:	fa1f f885 	uxth.w	r8, r5
 8000354:	2701      	movs	r7, #1
 8000356:	fbb1 fcfe 	udiv	ip, r1, lr
 800035a:	0c23      	lsrs	r3, r4, #16
 800035c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb08 f10c 	mul.w	r1, r8, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x124>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4299      	cmp	r1, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2bc>
 800037a:	4684      	mov	ip, r0
 800037c:	1a59      	subs	r1, r3, r1
 800037e:	b2a3      	uxth	r3, r4
 8000380:	fbb1 f0fe 	udiv	r0, r1, lr
 8000384:	fb0e 1410 	mls	r4, lr, r0, r1
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	fb08 f800 	mul.w	r8, r8, r0
 8000390:	45a0      	cmp	r8, r4
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x14c>
 8000394:	192c      	adds	r4, r5, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14a>
 800039c:	45a0      	cmp	r8, r4
 800039e:	f200 80b6 	bhi.w	800050e <__udivmoddi4+0x2b6>
 80003a2:	4618      	mov	r0, r3
 80003a4:	eba4 0408 	sub.w	r4, r4, r8
 80003a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ac:	e79f      	b.n	80002ee <__udivmoddi4+0x96>
 80003ae:	f1c7 0c20 	rsb	ip, r7, #32
 80003b2:	40bb      	lsls	r3, r7
 80003b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003bc:	fa01 f407 	lsl.w	r4, r1, r7
 80003c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003cc:	4325      	orrs	r5, r4
 80003ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d2:	0c2c      	lsrs	r4, r5, #16
 80003d4:	fb08 3319 	mls	r3, r8, r9, r3
 80003d8:	fa1f fa8e 	uxth.w	sl, lr
 80003dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e0:	fb09 f40a 	mul.w	r4, r9, sl
 80003e4:	429c      	cmp	r4, r3
 80003e6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ea:	fa00 f107 	lsl.w	r1, r0, r7
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1e 0303 	adds.w	r3, lr, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f8:	f080 8087 	bcs.w	800050a <__udivmoddi4+0x2b2>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f240 8084 	bls.w	800050a <__udivmoddi4+0x2b2>
 8000402:	f1a9 0902 	sub.w	r9, r9, #2
 8000406:	4473      	add	r3, lr
 8000408:	1b1b      	subs	r3, r3, r4
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000410:	fb08 3310 	mls	r3, r8, r0, r3
 8000414:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000418:	fb00 fa0a 	mul.w	sl, r0, sl
 800041c:	45a2      	cmp	sl, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1e 0404 	adds.w	r4, lr, r4
 8000424:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000428:	d26b      	bcs.n	8000502 <__udivmoddi4+0x2aa>
 800042a:	45a2      	cmp	sl, r4
 800042c:	d969      	bls.n	8000502 <__udivmoddi4+0x2aa>
 800042e:	3802      	subs	r0, #2
 8000430:	4474      	add	r4, lr
 8000432:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	eba4 040a 	sub.w	r4, r4, sl
 800043e:	454c      	cmp	r4, r9
 8000440:	46c2      	mov	sl, r8
 8000442:	464b      	mov	r3, r9
 8000444:	d354      	bcc.n	80004f0 <__udivmoddi4+0x298>
 8000446:	d051      	beq.n	80004ec <__udivmoddi4+0x294>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2c8>
 800044c:	ebb1 050a 	subs.w	r5, r1, sl
 8000450:	eb64 0403 	sbc.w	r4, r4, r3
 8000454:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000458:	40fd      	lsrs	r5, r7
 800045a:	40fc      	lsrs	r4, r7
 800045c:	ea4c 0505 	orr.w	r5, ip, r5
 8000460:	e9c6 5400 	strd	r5, r4, [r6]
 8000464:	2700      	movs	r7, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa0>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f703 	lsr.w	r7, r0, r3
 8000470:	4095      	lsls	r5, r2
 8000472:	fa01 f002 	lsl.w	r0, r1, r2
 8000476:	fa21 f303 	lsr.w	r3, r1, r3
 800047a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800047e:	4338      	orrs	r0, r7
 8000480:	0c01      	lsrs	r1, r0, #16
 8000482:	fbb3 f7fe 	udiv	r7, r3, lr
 8000486:	fa1f f885 	uxth.w	r8, r5
 800048a:	fb0e 3317 	mls	r3, lr, r7, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb07 f308 	mul.w	r3, r7, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x256>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004a4:	d22f      	bcs.n	8000506 <__udivmoddi4+0x2ae>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d92d      	bls.n	8000506 <__udivmoddi4+0x2ae>
 80004aa:	3f02      	subs	r7, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1acb      	subs	r3, r1, r3
 80004b0:	b281      	uxth	r1, r0
 80004b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb00 f308 	mul.w	r3, r0, r8
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x27e>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004cc:	d217      	bcs.n	80004fe <__udivmoddi4+0x2a6>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d915      	bls.n	80004fe <__udivmoddi4+0x2a6>
 80004d2:	3802      	subs	r0, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1ac9      	subs	r1, r1, r3
 80004d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004dc:	e73b      	b.n	8000356 <__udivmoddi4+0xfe>
 80004de:	4637      	mov	r7, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e709      	b.n	80002f8 <__udivmoddi4+0xa0>
 80004e4:	4607      	mov	r7, r0
 80004e6:	e6e7      	b.n	80002b8 <__udivmoddi4+0x60>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e6fb      	b.n	80002e4 <__udivmoddi4+0x8c>
 80004ec:	4541      	cmp	r1, r8
 80004ee:	d2ab      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f4:	eb69 020e 	sbc.w	r2, r9, lr
 80004f8:	3801      	subs	r0, #1
 80004fa:	4613      	mov	r3, r2
 80004fc:	e7a4      	b.n	8000448 <__udivmoddi4+0x1f0>
 80004fe:	4660      	mov	r0, ip
 8000500:	e7e9      	b.n	80004d6 <__udivmoddi4+0x27e>
 8000502:	4618      	mov	r0, r3
 8000504:	e795      	b.n	8000432 <__udivmoddi4+0x1da>
 8000506:	4667      	mov	r7, ip
 8000508:	e7d1      	b.n	80004ae <__udivmoddi4+0x256>
 800050a:	4681      	mov	r9, r0
 800050c:	e77c      	b.n	8000408 <__udivmoddi4+0x1b0>
 800050e:	3802      	subs	r0, #2
 8000510:	442c      	add	r4, r5
 8000512:	e747      	b.n	80003a4 <__udivmoddi4+0x14c>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	442b      	add	r3, r5
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x124>
 800051c:	4638      	mov	r0, r7
 800051e:	e708      	b.n	8000332 <__udivmoddi4+0xda>
 8000520:	4637      	mov	r7, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa0>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f001 fc1b 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f907 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 fe3f 	bl	80011b8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800053a:	f000 f9e1 	bl	8000900 <MX_CAN1_Init>
  MX_I2C1_Init();
 800053e:	f000 fa13 	bl	8000968 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8000542:	f000 fa3f 	bl	80009c4 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000546:	f000 fa5d 	bl	8000a04 <MX_SPI1_Init>
  MX_TIM1_Init();
 800054a:	f000 fa93 	bl	8000a74 <MX_TIM1_Init>
  MX_TIM2_Init();
 800054e:	f000 fb31 	bl	8000bb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000552:	f000 fba5 	bl	8000ca0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000556:	f000 fc19 	bl	8000d8c <MX_TIM4_Init>
  MX_UART4_Init();
 800055a:	f000 fe03 	bl	8001164 <MX_UART4_Init>
  MX_FATFS_Init();
 800055e:	f009 fc13 	bl	8009d88 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000562:	f00b fa17 	bl	800b994 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000566:	f000 fca9 	bl	8000ebc <MX_TIM5_Init>
  MX_TIM8_Init();
 800056a:	f000 fd1d 	bl	8000fa8 <MX_TIM8_Init>
  MX_TIM9_Init();
 800056e:	f000 fd73 	bl	8001058 <MX_TIM9_Init>
  MX_ADC1_Init();
 8000572:	f000 f973 	bl	800085c <MX_ADC1_Init>
  MX_TIM14_Init();
 8000576:	f000 fdd1 	bl	800111c <MX_TIM14_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  memset(&com_buf,0,sizeof(com_buf));
 800057a:	2240      	movs	r2, #64	; 0x40
 800057c:	2100      	movs	r1, #0
 800057e:	4867      	ldr	r0, [pc, #412]	; (800071c <main+0x1f4>)
 8000580:	f00b ff6b 	bl	800c45a <memset>
  HAL_TIM_Base_Start_IT(&htim14);
 8000584:	4866      	ldr	r0, [pc, #408]	; (8000720 <main+0x1f8>)
 8000586:	f006 f83a 	bl	80065fe <HAL_TIM_Base_Start_IT>

  while (1)
  {
	  // test virtual com port
	  if(com_bytes_available){
 800058a:	4b66      	ldr	r3, [pc, #408]	; (8000724 <main+0x1fc>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d016      	beq.n	80005c0 <main+0x98>
		  com_bytes_available = 0;
 8000592:	4b64      	ldr	r3, [pc, #400]	; (8000724 <main+0x1fc>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
		  if(!strcmp(com_buf,"moin")){
 8000598:	4963      	ldr	r1, [pc, #396]	; (8000728 <main+0x200>)
 800059a:	4860      	ldr	r0, [pc, #384]	; (800071c <main+0x1f4>)
 800059c:	f7ff fe32 	bl	8000204 <strcmp>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d10c      	bne.n	80005c0 <main+0x98>
			  CDC_Transmit_FS((uint8_t*)data, strlen(data));
 80005a6:	4b61      	ldr	r3, [pc, #388]	; (800072c <main+0x204>)
 80005a8:	681c      	ldr	r4, [r3, #0]
 80005aa:	4b60      	ldr	r3, [pc, #384]	; (800072c <main+0x204>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe32 	bl	8000218 <strlen>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	4620      	mov	r0, r4
 80005bc:	f00b fac6 	bl	800bb4c <CDC_Transmit_FS>
		  }

	  }

	  HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f001 fc43 	bl	8001e4c <HAL_Delay>


	  // OUTPUTS test:outputs funktionieren
	  HAL_GPIO_WritePin(VENTIL1_GPIO_Port, VENTIL1_Pin, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	4858      	ldr	r0, [pc, #352]	; (8000730 <main+0x208>)
 80005ce:	f002 fa89 	bl	8002ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(VENTIL2_GPIO_Port, VENTIL2_Pin, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d8:	4855      	ldr	r0, [pc, #340]	; (8000730 <main+0x208>)
 80005da:	f002 fa83 	bl	8002ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(VACUUM_PUMP_GPIO_Port, VACUUM_PUMP_Pin, 1);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e4:	4852      	ldr	r0, [pc, #328]	; (8000730 <main+0x208>)
 80005e6:	f002 fa7d 	bl	8002ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES1_GPIO_Port, OUTPUT_RES1_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	484f      	ldr	r0, [pc, #316]	; (8000730 <main+0x208>)
 80005f2:	f002 fa77 	bl	8002ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES2_GPIO_Port, OUTPUT_RES2_Pin, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	484d      	ldr	r0, [pc, #308]	; (8000734 <main+0x20c>)
 80005fe:	f002 fa71 	bl	8002ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES3_GPIO_Port, OUTPUT_RES3_Pin, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000608:	484a      	ldr	r0, [pc, #296]	; (8000734 <main+0x20c>)
 800060a:	f002 fa6b 	bl	8002ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES4_GPIO_Port, OUTPUT_RES4_Pin, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	4848      	ldr	r0, [pc, #288]	; (8000738 <main+0x210>)
 8000616:	f002 fa65 	bl	8002ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES5_GPIO_Port, OUTPUT_RES5_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000620:	4845      	ldr	r0, [pc, #276]	; (8000738 <main+0x210>)
 8000622:	f002 fa5f 	bl	8002ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES6_GPIO_Port, OUTPUT_RES6_Pin, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	4842      	ldr	r0, [pc, #264]	; (8000738 <main+0x210>)
 800062e:	f002 fa59 	bl	8002ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES7_GPIO_Port, OUTPUT_RES7_Pin, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000638:	483e      	ldr	r0, [pc, #248]	; (8000734 <main+0x20c>)
 800063a:	f002 fa53 	bl	8002ae4 <HAL_GPIO_WritePin>

	  // TEST inputs: inputs funktionieren
	  int input = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_X1_GPIO_Port, ENDSTOP_X1_Pin))
 8000642:	2140      	movs	r1, #64	; 0x40
 8000644:	483d      	ldr	r0, [pc, #244]	; (800073c <main+0x214>)
 8000646:	f002 fa35 	bl	8002ab4 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0x12e>
		  input++;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_X2_GPIO_Port, ENDSTOP_X2_Pin))
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4839      	ldr	r0, [pc, #228]	; (8000740 <main+0x218>)
 800065c:	f002 fa2a 	bl	8002ab4 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d102      	bne.n	800066c <main+0x144>
		  input++;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_Y1_GPIO_Port, ENDSTOP_Y1_Pin))
 800066c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000670:	4833      	ldr	r0, [pc, #204]	; (8000740 <main+0x218>)
 8000672:	f002 fa1f 	bl	8002ab4 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <main+0x15a>
		  input++;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3301      	adds	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_Y2_GPIO_Port, ENDSTOP_Y2_Pin))
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	482e      	ldr	r0, [pc, #184]	; (8000740 <main+0x218>)
 8000688:	f002 fa14 	bl	8002ab4 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d102      	bne.n	8000698 <main+0x170>
		  input++;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3301      	adds	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_Z1_GPIO_Port, ENDSTOP_Z1_Pin))
 8000698:	2102      	movs	r1, #2
 800069a:	4828      	ldr	r0, [pc, #160]	; (800073c <main+0x214>)
 800069c:	f002 fa0a 	bl	8002ab4 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <main+0x184>
		  input++;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3301      	adds	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_Z2_GPIO_Port, ENDSTOP_Z2_Pin))
 80006ac:	2101      	movs	r1, #1
 80006ae:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0x214>)
 80006b0:	f002 fa00 	bl	8002ab4 <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <main+0x198>
		  input++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3301      	adds	r3, #1
 80006be:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_ROT1_GPIO_Port, ENDSTOP_ROT1_Pin))
 80006c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c4:	481b      	ldr	r0, [pc, #108]	; (8000734 <main+0x20c>)
 80006c6:	f002 f9f5 	bl	8002ab4 <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <main+0x1ae>
		  input++;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3301      	adds	r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_ROT2_GPIO_Port, ENDSTOP_ROT2_Pin))
 80006d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006da:	4816      	ldr	r0, [pc, #88]	; (8000734 <main+0x20c>)
 80006dc:	f002 f9ea 	bl	8002ab4 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d102      	bne.n	80006ec <main+0x1c4>
		  input++;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(INPUT_RES1_GPIO_Port, INPUT_RES1_Pin))
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <main+0x208>)
 80006f0:	f002 f9e0 	bl	8002ab4 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d102      	bne.n	8000700 <main+0x1d8>
		  input++;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(INPUT_RES2_GPIO_Port, INPUT_RES2_Pin))
 8000700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000704:	480e      	ldr	r0, [pc, #56]	; (8000740 <main+0x218>)
 8000706:	f002 f9d5 	bl	8002ab4 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	f47f af3c 	bne.w	800058a <main+0x62>
		  input++;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3301      	adds	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
  {
 8000718:	e737      	b.n	800058a <main+0x62>
 800071a:	bf00      	nop
 800071c:	200004c4 	.word	0x200004c4
 8000720:	20000604 	.word	0x20000604
 8000724:	20000204 	.word	0x20000204
 8000728:	0800c620 	.word	0x0800c620
 800072c:	20000000 	.word	0x20000000
 8000730:	40020c00 	.word	0x40020c00
 8000734:	40020400 	.word	0x40020400
 8000738:	40020000 	.word	0x40020000
 800073c:	40021000 	.word	0x40021000
 8000740:	40020800 	.word	0x40020800

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0ac      	sub	sp, #176	; 0xb0
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f00b fe81 	bl	800c45a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	225c      	movs	r2, #92	; 0x5c
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f00b fe72 	bl	800c45a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b36      	ldr	r3, [pc, #216]	; (8000854 <SystemClock_Config+0x110>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a35      	ldr	r2, [pc, #212]	; (8000854 <SystemClock_Config+0x110>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <SystemClock_Config+0x110>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <SystemClock_Config+0x114>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <SystemClock_Config+0x114>)
 800079c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <SystemClock_Config+0x114>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007ce:	23a8      	movs	r3, #168	; 0xa8
 80007d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 faa6 	bl	8004d3c <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007f6:	f000 fde9 	bl	80013cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000812:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000816:	2105      	movs	r1, #5
 8000818:	4618      	mov	r0, r3
 800081a:	f003 fcab 	bl	8004174 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000824:	f000 fdd2 	bl	80013cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800082c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800082e:	2300      	movs	r3, #0
 8000830:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000832:	2300      	movs	r3, #0
 8000834:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fdb4 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000846:	f000 fdc1 	bl	80013cc <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	37b0      	adds	r7, #176	; 0xb0
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_ADC1_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_ADC1_Init+0x98>)
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_ADC1_Init+0xa0>)
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008be:	f001 fae7 	bl	8001e90 <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 fd80 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008de:	f001 fb1b 	bl	8001f18 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fd70 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000378 	.word	0x20000378
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_CAN1_Init+0x60>)
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <MX_CAN1_Init+0x64>)
 8000908:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_CAN1_Init+0x60>)
 800090c:	2210      	movs	r2, #16
 800090e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_CAN1_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_CAN1_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_CAN1_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_CAN1_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_CAN1_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_CAN1_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_CAN1_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_CAN1_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_CAN1_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_CAN1_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_CAN1_Init+0x60>)
 800094e:	f001 fd11 	bl	8002374 <HAL_CAN_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 fd38 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200005dc 	.word	0x200005dc
 8000964:	40006400 	.word	0x40006400

08000968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_I2C1_Init+0x50>)
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_I2C1_Init+0x54>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_I2C1_Init+0x58>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_I2C1_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_I2C1_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_I2C1_Init+0x50>)
 80009a6:	f002 f8d1 	bl	8002b4c <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 fd0c 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200002a4 	.word	0x200002a4
 80009bc:	40005400 	.word	0x40005400
 80009c0:	000186a0 	.word	0x000186a0

080009c4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SDIO_SD_Init+0x38>)
 80009ca:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <MX_SDIO_SD_Init+0x3c>)
 80009cc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_SDIO_SD_Init+0x38>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SDIO_SD_Init+0x38>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_SDIO_SD_Init+0x38>)
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SDIO_SD_Init+0x38>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_SDIO_SD_Init+0x38>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <MX_SDIO_SD_Init+0x38>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20000440 	.word	0x20000440
 8000a00:	40012c00 	.word	0x40012c00

08000a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a0a:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <MX_SPI1_Init+0x6c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a1c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a52:	220a      	movs	r2, #10
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a58:	f005 fd42 	bl	80064e0 <HAL_SPI_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000a62:	f000 fcb3 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000544 	.word	0x20000544
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b096      	sub	sp, #88	; 0x58
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	615a      	str	r2, [r3, #20]
 8000aa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00b fcd4 	bl	800c45a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ab4:	4a3e      	ldr	r2, [pc, #248]	; (8000bb0 <MX_TIM1_Init+0x13c>)
 8000ab6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ab8:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <MX_TIM1_Init+0x138>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ac4:	4b39      	ldr	r3, [pc, #228]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b37      	ldr	r3, [pc, #220]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad2:	4b36      	ldr	r3, [pc, #216]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b34      	ldr	r3, [pc, #208]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ade:	4833      	ldr	r0, [pc, #204]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ae0:	f005 fd62 	bl	80065a8 <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000aea:	f000 fc6f 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000af8:	4619      	mov	r1, r3
 8000afa:	482c      	ldr	r0, [pc, #176]	; (8000bac <MX_TIM1_Init+0x138>)
 8000afc:	f006 f838 	bl	8006b70 <HAL_TIM_ConfigClockSource>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b06:	f000 fc61 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b0a:	4828      	ldr	r0, [pc, #160]	; (8000bac <MX_TIM1_Init+0x138>)
 8000b0c:	f005 fd9b 	bl	8006646 <HAL_TIM_PWM_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b16:	f000 fc59 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b26:	4619      	mov	r1, r3
 8000b28:	4820      	ldr	r0, [pc, #128]	; (8000bac <MX_TIM1_Init+0x138>)
 8000b2a:	f006 fbf5 	bl	8007318 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b34:	f000 fc4a 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b38:	2360      	movs	r3, #96	; 0x60
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <MX_TIM1_Init+0x138>)
 8000b5e:	f005 ff41 	bl	80069e4 <HAL_TIM_PWM_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b68:	f000 fc30 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4807      	ldr	r0, [pc, #28]	; (8000bac <MX_TIM1_Init+0x138>)
 8000b90:	f006 fc3e 	bl	8007410 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b9a:	f000 fc17 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ba0:	f000 fede 	bl	8001960 <HAL_TIM_MspPostInit>

}
 8000ba4:	bf00      	nop
 8000ba6:	3758      	adds	r7, #88	; 0x58
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200003c0 	.word	0x200003c0
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bec:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c0c:	4823      	ldr	r0, [pc, #140]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000c0e:	f005 fccb 	bl	80065a8 <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c18:	f000 fbd8 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c26:	4619      	mov	r1, r3
 8000c28:	481c      	ldr	r0, [pc, #112]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000c2a:	f005 ffa1 	bl	8006b70 <HAL_TIM_ConfigClockSource>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c34:	f000 fbca 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c38:	4818      	ldr	r0, [pc, #96]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000c3a:	f005 fd04 	bl	8006646 <HAL_TIM_PWM_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c44:	f000 fbc2 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c50:	f107 0320 	add.w	r3, r7, #32
 8000c54:	4619      	mov	r1, r3
 8000c56:	4811      	ldr	r0, [pc, #68]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000c58:	f006 fb5e 	bl	8007318 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c62:	f000 fbb3 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c66:	2360      	movs	r3, #96	; 0x60
 8000c68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000c7e:	f005 feb1 	bl	80069e4 <HAL_TIM_PWM_ConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c88:	f000 fba0 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <MX_TIM2_Init+0xe8>)
 8000c8e:	f000 fe67 	bl	8001960 <HAL_TIM_MspPostInit>

}
 8000c92:	bf00      	nop
 8000c94:	3738      	adds	r7, #56	; 0x38
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000059c 	.word	0x2000059c

08000ca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <MX_TIM3_Init+0xe8>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cf6:	4823      	ldr	r0, [pc, #140]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cf8:	f005 fc56 	bl	80065a8 <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d02:	f000 fb63 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d10:	4619      	mov	r1, r3
 8000d12:	481c      	ldr	r0, [pc, #112]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d14:	f005 ff2c 	bl	8006b70 <HAL_TIM_ConfigClockSource>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d1e:	f000 fb55 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d22:	4818      	ldr	r0, [pc, #96]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d24:	f005 fc8f 	bl	8006646 <HAL_TIM_PWM_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d2e:	f000 fb4d 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4810      	ldr	r0, [pc, #64]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d42:	f006 fae9 	bl	8007318 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d4c:	f000 fb3e 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d50:	2360      	movs	r3, #96	; 0x60
 8000d52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d68:	f005 fe3c 	bl	80069e4 <HAL_TIM_PWM_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d72:	f000 fb2b 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d78:	f000 fdf2 	bl	8001960 <HAL_TIM_MspPostInit>

}
 8000d7c:	bf00      	nop
 8000d7e:	3738      	adds	r7, #56	; 0x38
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000338 	.word	0x20000338
 8000d88:	40000400 	.word	0x40000400

08000d8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08e      	sub	sp, #56	; 0x38
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dbc:	4b3d      	ldr	r3, [pc, #244]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	; (8000eb8 <MX_TIM4_Init+0x12c>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dc2:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dce:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000de2:	4834      	ldr	r0, [pc, #208]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000de4:	f005 fbe0 	bl	80065a8 <HAL_TIM_Base_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000dee:	f000 faed 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	482d      	ldr	r0, [pc, #180]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000e00:	f005 feb6 	bl	8006b70 <HAL_TIM_ConfigClockSource>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e0a:	f000 fadf 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e0e:	4829      	ldr	r0, [pc, #164]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000e10:	f005 fc19 	bl	8006646 <HAL_TIM_PWM_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e1a:	f000 fad7 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4821      	ldr	r0, [pc, #132]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000e2e:	f006 fa73 	bl	8007318 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e38:	f000 fac8 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3c:	2360      	movs	r3, #96	; 0x60
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000e54:	f005 fdc6 	bl	80069e4 <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e5e:	f000 fab5 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2204      	movs	r2, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000e6a:	f005 fdbb 	bl	80069e4 <HAL_TIM_PWM_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000e74:	f000 faaa 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000e80:	f005 fdb0 	bl	80069e4 <HAL_TIM_PWM_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000e8a:	f000 fa9f 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	220c      	movs	r2, #12
 8000e92:	4619      	mov	r1, r3
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000e96:	f005 fda5 	bl	80069e4 <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000ea0:	f000 fa94 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <MX_TIM4_Init+0x128>)
 8000ea6:	f000 fd5b 	bl	8001960 <HAL_TIM_MspPostInit>

}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	; 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000264 	.word	0x20000264
 8000eb8:	40000800 	.word	0x40000800

08000ebc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
 8000ee8:	615a      	str	r2, [r3, #20]
 8000eea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000eee:	4a2d      	ldr	r2, [pc, #180]	; (8000fa4 <MX_TIM5_Init+0xe8>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000f14:	f005 fb48 	bl	80065a8 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000f1e:	f000 fa55 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000f30:	f005 fe1e 	bl	8006b70 <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000f3a:	f000 fa47 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000f40:	f005 fb81 	bl	8006646 <HAL_TIM_PWM_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000f4a:	f000 fa3f 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000f5e:	f006 f9db 	bl	8007318 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000f68:	f000 fa30 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6c:	2360      	movs	r3, #96	; 0x60
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000f84:	f005 fd2e 	bl	80069e4 <HAL_TIM_PWM_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000f8e:	f000 fa1d 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM5_Init+0xe4>)
 8000f94:	f000 fce4 	bl	8001960 <HAL_TIM_MspPostInit>

}
 8000f98:	bf00      	nop
 8000f9a:	3738      	adds	r7, #56	; 0x38
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200002f8 	.word	0x200002f8
 8000fa4:	40000c00 	.word	0x40000c00

08000fa8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2224      	movs	r2, #36	; 0x24
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f00b fa4f 	bl	800c45a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_TIM8_Init+0xa8>)
 8000fc6:	4a23      	ldr	r2, [pc, #140]	; (8001054 <MX_TIM8_Init+0xac>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_TIM8_Init+0xa8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_TIM8_Init+0xa8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_TIM8_Init+0xa8>)
 8000fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fdc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_TIM8_Init+0xa8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_TIM8_Init+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_TIM8_Init+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001008:	2301      	movs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_TIM8_Init+0xa8>)
 800101c:	f005 fb48 	bl	80066b0 <HAL_TIM_Encoder_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001026:	f000 f9d1 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <MX_TIM8_Init+0xa8>)
 8001038:	f006 f96e 	bl	8007318 <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001042:	f000 f9c3 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3730      	adds	r7, #48	; 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000224 	.word	0x20000224
 8001054:	40010400 	.word	0x40010400

08001058 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	; 0x30
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_TIM9_Init+0xbc>)
 8001080:	4a25      	ldr	r2, [pc, #148]	; (8001118 <MX_TIM9_Init+0xc0>)
 8001082:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_TIM9_Init+0xbc>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_TIM9_Init+0xbc>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_TIM9_Init+0xbc>)
 8001092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001096:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_TIM9_Init+0xbc>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_TIM9_Init+0xbc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80010a4:	481b      	ldr	r0, [pc, #108]	; (8001114 <MX_TIM9_Init+0xbc>)
 80010a6:	f005 fa7f 	bl	80065a8 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80010b0:	f000 f98c 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	4619      	mov	r1, r3
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <MX_TIM9_Init+0xbc>)
 80010c2:	f005 fd55 	bl	8006b70 <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80010cc:	f000 f97e 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80010d0:	4810      	ldr	r0, [pc, #64]	; (8001114 <MX_TIM9_Init+0xbc>)
 80010d2:	f005 fab8 	bl	8006646 <HAL_TIM_PWM_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80010dc:	f000 f976 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e0:	2360      	movs	r3, #96	; 0x60
 80010e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <MX_TIM9_Init+0xbc>)
 80010f8:	f005 fc74 	bl	80069e4 <HAL_TIM_PWM_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001102:	f000 f963 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <MX_TIM9_Init+0xbc>)
 8001108:	f000 fc2a 	bl	8001960 <HAL_TIM_MspPostInit>

}
 800110c:	bf00      	nop
 800110e:	3730      	adds	r7, #48	; 0x30
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000400 	.word	0x20000400
 8001118:	40014000 	.word	0x40014000

0800111c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_TIM14_Init+0x40>)
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <MX_TIM14_Init+0x44>)
 8001124:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <MX_TIM14_Init+0x40>)
 8001128:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800112c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_TIM14_Init+0x40>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_TIM14_Init+0x40>)
 8001136:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800113a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_TIM14_Init+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_TIM14_Init+0x40>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_TIM14_Init+0x40>)
 800114a:	f005 fa2d 	bl	80065a8 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001154:	f000 f93a 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000604 	.word	0x20000604
 8001160:	40002000 	.word	0x40002000

08001164 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_UART4_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_UART4_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_UART4_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_UART4_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_UART4_Init+0x4c>)
 800119c:	f006 f99e 	bl	80074dc <HAL_HalfDuplex_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f911 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000504 	.word	0x20000504
 80011b4:	40004c00 	.word	0x40004c00

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	4b78      	ldr	r3, [pc, #480]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a77      	ldr	r2, [pc, #476]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b75      	ldr	r3, [pc, #468]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	4b71      	ldr	r3, [pc, #452]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a70      	ldr	r2, [pc, #448]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b6e      	ldr	r3, [pc, #440]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a69      	ldr	r2, [pc, #420]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b67      	ldr	r3, [pc, #412]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a62      	ldr	r2, [pc, #392]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b60      	ldr	r3, [pc, #384]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a5b      	ldr	r2, [pc, #364]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b59      	ldr	r3, [pc, #356]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a54      	ldr	r2, [pc, #336]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b52      	ldr	r3, [pc, #328]	; (80013b4 <MX_GPIO_Init+0x1fc>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_Z_Pin|DIR_Z_Pin|GPIO_PIN_10|DIR_X_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f242 4124 	movw	r1, #9252	; 0x2424
 800127c:	484e      	ldr	r0, [pc, #312]	; (80013b8 <MX_GPIO_Init+0x200>)
 800127e:	f001 fc31 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_ROT_Pin|DIR_ROT_Pin|SPI_DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2139      	movs	r1, #57	; 0x39
 8001286:	484d      	ldr	r0, [pc, #308]	; (80013bc <MX_GPIO_Init+0x204>)
 8001288:	f001 fc2c 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_RESET_Pin|LED_Status_Pin|OUTPUT_RES6_Pin|OUTPUT_RES5_Pin
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8001292:	484b      	ldr	r0, [pc, #300]	; (80013c0 <MX_GPIO_Init+0x208>)
 8001294:	f001 fc26 	bl	8002ae4 <HAL_GPIO_WritePin>
                          |OUTPUT_RES4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_RES7_Pin|OUTPUT_RES3_Pin|OUTPUT_RES2_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800129e:	4849      	ldr	r0, [pc, #292]	; (80013c4 <MX_GPIO_Init+0x20c>)
 80012a0:	f001 fc20 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT_RES1_Pin|VACUUM_PUMP_Pin|VENTIL2_Pin|VENTIL1_Pin
 80012a4:	2200      	movs	r2, #0
 80012a6:	f640 7148 	movw	r1, #3912	; 0xf48
 80012aa:	4847      	ldr	r0, [pc, #284]	; (80013c8 <MX_GPIO_Init+0x210>)
 80012ac:	f001 fc1a 	bl	8002ae4 <HAL_GPIO_WritePin>
                          |EN_Y_Pin|DIR_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_Z_Pin DIR_Z_Pin PE10 DIR_X_Pin */
  GPIO_InitStruct.Pin = EN_Z_Pin|DIR_Z_Pin|GPIO_PIN_10|DIR_X_Pin;
 80012b0:	f242 4324 	movw	r3, #9252	; 0x2424
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	483b      	ldr	r0, [pc, #236]	; (80013b8 <MX_GPIO_Init+0x200>)
 80012ca:	f001 fa61 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIAG_Z_Pin INDEX_Z_Pin ENDSTOP_X1_Pin SDIO_CD_Pin
                           DIAG_X_Pin INDEX_X_Pin ENDSTOP_Z2_Pin ENDSTOP_Z1_Pin */
  GPIO_InitStruct.Pin = DIAG_Z_Pin|INDEX_Z_Pin|ENDSTOP_X1_Pin|SDIO_CD_Pin
 80012ce:	f641 03db 	movw	r3, #6363	; 0x18db
 80012d2:	61fb      	str	r3, [r7, #28]
                          |DIAG_X_Pin|INDEX_X_Pin|ENDSTOP_Z2_Pin|ENDSTOP_Z1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	4835      	ldr	r0, [pc, #212]	; (80013b8 <MX_GPIO_Init+0x200>)
 80012e4:	f001 fa54 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENDSTOP_X2_Pin ENDSTOP_Y1_Pin ENDSTOP_Y2_Pin DIAG_ROT_Pin
                           INDEX_ROT_Pin ENC_BTN_Pin INPUT_RES2_Pin */
  GPIO_InitStruct.Pin = ENDSTOP_X2_Pin|ENDSTOP_Y1_Pin|ENDSTOP_Y2_Pin|DIAG_ROT_Pin
 80012e8:	f24f 2306 	movw	r3, #61958	; 0xf206
 80012ec:	61fb      	str	r3, [r7, #28]
                          |INDEX_ROT_Pin|ENC_BTN_Pin|INPUT_RES2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	482f      	ldr	r0, [pc, #188]	; (80013bc <MX_GPIO_Init+0x204>)
 80012fe:	f001 fa47 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_ROT_Pin DIR_ROT_Pin SPI_DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = EN_ROT_Pin|DIR_ROT_Pin|SPI_DC_Pin|SPI_CS_Pin;
 8001302:	2339      	movs	r3, #57	; 0x39
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4828      	ldr	r0, [pc, #160]	; (80013bc <MX_GPIO_Init+0x204>)
 800131a:	f001 fa39 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RESET_Pin LED_Status_Pin OUTPUT_RES6_Pin OUTPUT_RES5_Pin
                           OUTPUT_RES4_Pin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin|LED_Status_Pin|OUTPUT_RES6_Pin|OUTPUT_RES5_Pin
 800131e:	f44f 63f2 	mov.w	r3, #1936	; 0x790
 8001322:	61fb      	str	r3, [r7, #28]
                          |OUTPUT_RES4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4822      	ldr	r0, [pc, #136]	; (80013c0 <MX_GPIO_Init+0x208>)
 8001338:	f001 fa2a 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_RES7_Pin OUTPUT_RES3_Pin OUTPUT_RES2_Pin */
  GPIO_InitStruct.Pin = OUTPUT_RES7_Pin|OUTPUT_RES3_Pin|OUTPUT_RES2_Pin;
 800133c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	481b      	ldr	r0, [pc, #108]	; (80013c4 <MX_GPIO_Init+0x20c>)
 8001356:	f001 fa1b 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_RES1_Pin VACUUM_PUMP_Pin VENTIL2_Pin VENTIL1_Pin
                           EN_Y_Pin DIR_Y_Pin */
  GPIO_InitStruct.Pin = OUTPUT_RES1_Pin|VACUUM_PUMP_Pin|VENTIL2_Pin|VENTIL1_Pin
 800135a:	f640 7348 	movw	r3, #3912	; 0xf48
 800135e:	61fb      	str	r3, [r7, #28]
                          |EN_Y_Pin|DIR_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4815      	ldr	r0, [pc, #84]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001374:	f001 fa0c 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 INDEX_Y_Pin INPUT_RES1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|INDEX_Y_Pin|INPUT_RES1_Pin;
 8001378:	23b0      	movs	r3, #176	; 0xb0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	480f      	ldr	r0, [pc, #60]	; (80013c8 <MX_GPIO_Init+0x210>)
 800138c:	f001 fa00 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENDSTOP_ROT2_Pin ENDSTOP_ROT1_Pin */
  GPIO_InitStruct.Pin = ENDSTOP_ROT2_Pin|ENDSTOP_ROT1_Pin;
 8001390:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_GPIO_Init+0x20c>)
 80013a6:	f001 f9f3 	bl	8002790 <HAL_GPIO_Init>

}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020c00 	.word	0x40020c00

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <Error_Handler+0x6>

080013d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_ADC_MspInit+0x7c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d127      	bne.n	8001496 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800147e:	236a      	movs	r3, #106	; 0x6a
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_ADC_MspInit+0x84>)
 8001492:	f001 f97d 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40012000 	.word	0x40012000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_CAN_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12b      	bne.n	8001526 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_CAN_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_CAN_MspInit+0x88>)
 80014d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_CAN_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_CAN_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_CAN_MspInit+0x88>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_CAN_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001506:	2303      	movs	r3, #3
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001516:	2309      	movs	r3, #9
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_CAN_MspInit+0x8c>)
 8001522:	f001 f935 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40006400 	.word	0x40006400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020c00 	.word	0x40020c00

0800153c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_I2C_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157e:	2312      	movs	r3, #18
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001582:	2301      	movs	r3, #1
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158a:	2304      	movs	r3, #4
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <HAL_I2C_MspInit+0x8c>)
 8001596:	f001 f8fb 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40005400 	.word	0x40005400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020400 	.word	0x40020400

080015cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <HAL_SD_MspInit+0xfc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d168      	bne.n	80016c0 <HAL_SD_MspInit+0xf4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_SD_MspInit+0x100>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	4a35      	ldr	r2, [pc, #212]	; (80016cc <HAL_SD_MspInit+0x100>)
 80015f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	4b33      	ldr	r3, [pc, #204]	; (80016cc <HAL_SD_MspInit+0x100>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <HAL_SD_MspInit+0x100>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a2e      	ldr	r2, [pc, #184]	; (80016cc <HAL_SD_MspInit+0x100>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <HAL_SD_MspInit+0x100>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_SD_MspInit+0x100>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_SD_MspInit+0x100>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_SD_MspInit+0x100>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_SD_MspInit+0x100>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a20      	ldr	r2, [pc, #128]	; (80016cc <HAL_SD_MspInit+0x100>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_SD_MspInit+0x100>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800165e:	2307      	movs	r3, #7
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800166e:	230c      	movs	r3, #12
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4815      	ldr	r0, [pc, #84]	; (80016d0 <HAL_SD_MspInit+0x104>)
 800167a:	f001 f889 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800167e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001690:	230c      	movs	r3, #12
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <HAL_SD_MspInit+0x108>)
 800169c:	f001 f878 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a0:	2304      	movs	r3, #4
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016b0:	230c      	movs	r3, #12
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4807      	ldr	r0, [pc, #28]	; (80016d8 <HAL_SD_MspInit+0x10c>)
 80016bc:	f001 f868 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3730      	adds	r7, #48	; 0x30
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40012c00 	.word	0x40012c00
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00

080016dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <HAL_SPI_MspInit+0x84>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12b      	bne.n	8001756 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_SPI_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001736:	2328      	movs	r3, #40	; 0x28
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001746:	2305      	movs	r3, #5
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <HAL_SPI_MspInit+0x8c>)
 8001752:	f001 f81d 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40013000 	.word	0x40013000
 8001764:	40023800 	.word	0x40023800
 8001768:	40020400 	.word	0x40020400

0800176c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a4a      	ldr	r2, [pc, #296]	; (80018a4 <HAL_TIM_Base_MspInit+0x138>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10e      	bne.n	800179c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
 8001782:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a48      	ldr	r2, [pc, #288]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800179a:	e07e      	b.n	800189a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a4:	d10e      	bne.n	80017c4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
 80017aa:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a3e      	ldr	r2, [pc, #248]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	6a3b      	ldr	r3, [r7, #32]
}
 80017c2:	e06a      	b.n	800189a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a38      	ldr	r2, [pc, #224]	; (80018ac <HAL_TIM_Base_MspInit+0x140>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10e      	bne.n	80017ec <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a34      	ldr	r2, [pc, #208]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
}
 80017ea:	e056      	b.n	800189a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM4)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <HAL_TIM_Base_MspInit+0x144>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10e      	bne.n	8001814 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
}
 8001812:	e042      	b.n	800189a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM5)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <HAL_TIM_Base_MspInit+0x148>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10e      	bne.n	800183c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697b      	ldr	r3, [r7, #20]
}
 800183a:	e02e      	b.n	800189a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_TIM_Base_MspInit+0x14c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10e      	bne.n	8001864 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
}
 8001862:	e01a      	b.n	800189a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <HAL_TIM_Base_MspInit+0x150>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d115      	bne.n	800189a <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_TIM_Base_MspInit+0x13c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	202d      	movs	r0, #45	; 0x2d
 8001890:	f000 ff47 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001894:	202d      	movs	r0, #45	; 0x2d
 8001896:	f000 ff60 	bl	800275a <HAL_NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40010000 	.word	0x40010000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40000800 	.word	0x40000800
 80018b4:	40000c00 	.word	0x40000c00
 80018b8:	40014000 	.word	0x40014000
 80018bc:	40002000 	.word	0x40002000

080018c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_TIM_Encoder_MspInit+0x94>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d133      	bne.n	800194a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_TIM_Encoder_MspInit+0x98>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_TIM_Encoder_MspInit+0x98>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_TIM_Encoder_MspInit+0x98>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_TIM_Encoder_MspInit+0x98>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_TIM_Encoder_MspInit+0x98>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_TIM_Encoder_MspInit+0x98>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800191a:	23c0      	movs	r3, #192	; 0xc0
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800192a:	2303      	movs	r3, #3
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4809      	ldr	r0, [pc, #36]	; (800195c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001936:	f000 ff2b 	bl	8002790 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	202d      	movs	r0, #45	; 0x2d
 8001940:	f000 feef 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001944:	202d      	movs	r0, #45	; 0x2d
 8001946:	f000 ff08 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40010400 	.word	0x40010400
 8001958:	40023800 	.word	0x40023800
 800195c:	40020800 	.word	0x40020800

08001960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	; 0x38
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a6d      	ldr	r2, [pc, #436]	; (8001b34 <HAL_TIM_MspPostInit+0x1d4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d11f      	bne.n	80019c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
 8001986:	4b6c      	ldr	r3, [pc, #432]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a6b      	ldr	r2, [pc, #428]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 800198c:	f043 0310 	orr.w	r3, r3, #16
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Z_Pin;
 800199e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM1_CH1_Z_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	4619      	mov	r1, r3
 80019ba:	4860      	ldr	r0, [pc, #384]	; (8001b3c <HAL_TIM_MspPostInit+0x1dc>)
 80019bc:	f000 fee8 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80019c0:	e0b4      	b.n	8001b2c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ca:	d11f      	bne.n	8001a0c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6313      	str	r3, [r2, #48]	; 0x30
 80019dc:	4b56      	ldr	r3, [pc, #344]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM2_CH1_X_Pin;
 80019e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019fa:	2301      	movs	r3, #1
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH1_X_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	484e      	ldr	r0, [pc, #312]	; (8001b40 <HAL_TIM_MspPostInit+0x1e0>)
 8001a06:	f000 fec3 	bl	8002790 <HAL_GPIO_Init>
}
 8001a0a:	e08f      	b.n	8001b2c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_TIM_MspPostInit+0x1e4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d11e      	bne.n	8001a54 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a46      	ldr	r2, [pc, #280]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM3_CH1_ROT_Pin;
 8001a32:	2310      	movs	r3, #16
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a42:	2302      	movs	r3, #2
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM3_CH1_ROT_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	483e      	ldr	r0, [pc, #248]	; (8001b48 <HAL_TIM_MspPostInit+0x1e8>)
 8001a4e:	f000 fe9f 	bl	8002790 <HAL_GPIO_Init>
}
 8001a52:	e06b      	b.n	8001b2c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM4)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a3c      	ldr	r2, [pc, #240]	; (8001b4c <HAL_TIM_MspPostInit+0x1ec>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d11f      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a34      	ldr	r2, [pc, #208]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a7a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	4619      	mov	r1, r3
 8001a96:	482e      	ldr	r0, [pc, #184]	; (8001b50 <HAL_TIM_MspPostInit+0x1f0>)
 8001a98:	f000 fe7a 	bl	8002790 <HAL_GPIO_Init>
}
 8001a9c:	e046      	b.n	8001b2c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM5)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <HAL_TIM_MspPostInit+0x1f4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d11e      	bne.n	8001ae6 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_Y_Pin;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM5_CH1_Y_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001adc:	4619      	mov	r1, r3
 8001ade:	4818      	ldr	r0, [pc, #96]	; (8001b40 <HAL_TIM_MspPostInit+0x1e0>)
 8001ae0:	f000 fe56 	bl	8002790 <HAL_GPIO_Init>
}
 8001ae4:	e022      	b.n	8001b2c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM9)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <HAL_TIM_MspPostInit+0x1f8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d11d      	bne.n	8001b2c <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6313      	str	r3, [r2, #48]	; 0x30
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_TIM_MspPostInit+0x1d8>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <HAL_TIM_MspPostInit+0x1e0>)
 8001b28:	f000 fe32 	bl	8002790 <HAL_GPIO_Init>
}
 8001b2c:	bf00      	nop
 8001b2e:	3738      	adds	r7, #56	; 0x38
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40000c00 	.word	0x40000c00
 8001b58:	40014000 	.word	0x40014000

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_UART_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12c      	bne.n	8001bd8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbc:	2312      	movs	r3, #18
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bc8:	2308      	movs	r3, #8
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <HAL_UART_MspInit+0x8c>)
 8001bd4:	f000 fddc 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40004c00 	.word	0x40004c00
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020800 	.word	0x40020800

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f000 f8e8 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <TIM8_TRG_COM_TIM14_IRQHandler+0x1c>)
 8001c46:	f004 fdc5 	bl	80067d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <TIM8_TRG_COM_TIM14_IRQHandler+0x20>)
 8001c4c:	f004 fdc2 	bl	80067d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
  HAL_GPIO_TogglePin(LED_Status_GPIO_Port, LED_Status_Pin);
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	4804      	ldr	r0, [pc, #16]	; (8001c64 <TIM8_TRG_COM_TIM14_IRQHandler+0x24>)
 8001c54:	f000 ff5f 	bl	8002b16 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000224 	.word	0x20000224
 8001c60:	20000604 	.word	0x20000604
 8001c64:	40020000 	.word	0x40020000

08001c68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <OTG_FS_IRQHandler+0x10>)
 8001c6e:	f001 f9fc 	bl	800306a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20001f80 	.word	0x20001f80

08001c7c <_sbrk>:
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <_sbrk+0x5c>)
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <_sbrk+0x60>)
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <_sbrk+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <_sbrk+0x22>
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <_sbrk+0x64>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <_sbrk+0x68>)
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d207      	bcs.n	8001cbc <_sbrk+0x40>
 8001cac:	f00a fb90 	bl	800c3d0 <__errno>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cba:	e009      	b.n	8001cd0 <_sbrk+0x54>
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <_sbrk+0x64>)
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20020000 	.word	0x20020000
 8001cdc:	00000400 	.word	0x00000400
 8001ce0:	20000208 	.word	0x20000208
 8001ce4:	20002390 	.word	0x20002390

08001ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <SystemInit+0x28>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <SystemInit+0x28>)
 8001cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SystemInit+0x28>)
 8001cfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d02:	609a      	str	r2, [r3, #8]
#endif
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <Reset_Handler>:
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d4c <LoopFillZerobss+0x14>
 8001d18:	2100      	movs	r1, #0
 8001d1a:	e003      	b.n	8001d24 <LoopCopyDataInit>

08001d1c <CopyDataInit>:
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <LoopFillZerobss+0x18>)
 8001d1e:	585b      	ldr	r3, [r3, r1]
 8001d20:	5043      	str	r3, [r0, r1]
 8001d22:	3104      	adds	r1, #4

08001d24 <LoopCopyDataInit>:
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <LoopFillZerobss+0x1c>)
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <LoopFillZerobss+0x20>)
 8001d28:	1842      	adds	r2, r0, r1
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3f6      	bcc.n	8001d1c <CopyDataInit>
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <LoopFillZerobss+0x24>)
 8001d30:	e002      	b.n	8001d38 <LoopFillZerobss>

08001d32 <FillZerobss>:
 8001d32:	2300      	movs	r3, #0
 8001d34:	f842 3b04 	str.w	r3, [r2], #4

08001d38 <LoopFillZerobss>:
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <LoopFillZerobss+0x28>)
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3f9      	bcc.n	8001d32 <FillZerobss>
 8001d3e:	f7ff ffd3 	bl	8001ce8 <SystemInit>
 8001d42:	f00a fb4b 	bl	800c3dc <__libc_init_array>
 8001d46:	f7fe fbef 	bl	8000528 <main>
 8001d4a:	4770      	bx	lr
 8001d4c:	20020000 	.word	0x20020000
 8001d50:	0800c6a4 	.word	0x0800c6a4
 8001d54:	20000000 	.word	0x20000000
 8001d58:	200001e8 	.word	0x200001e8
 8001d5c:	200001e8 	.word	0x200001e8
 8001d60:	2000238c 	.word	0x2000238c

08001d64 <ADC_IRQHandler>:
 8001d64:	e7fe      	b.n	8001d64 <ADC_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_Init+0x40>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_Init+0x40>)
 8001d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_Init+0x40>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 fcbb 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f808 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff fb1a 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x54>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x58>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fcd3 	bl	8002776 <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00e      	b.n	8001df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d80a      	bhi.n	8001df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de8:	f000 fc9b 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <HAL_InitTick+0x5c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000004 	.word	0x20000004
 8001e04:	2000000c 	.word	0x2000000c
 8001e08:	20000008 	.word	0x20000008

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	2000000c 	.word	0x2000000c
 8001e30:	20000644 	.word	0x20000644

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000644 	.word	0x20000644

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff ffee 	bl	8001e34 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_Delay+0x40>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000000c 	.word	0x2000000c

08001e90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e033      	b.n	8001f0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fab8 	bl	8001424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ed6:	f023 0302 	bic.w	r3, r3, #2
 8001eda:	f043 0202 	orr.w	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f94a 	bl	800217c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
 8001efe:	e001      	b.n	8001f04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1c>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e113      	b.n	800215c <HAL_ADC_ConfigChannel+0x244>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d925      	bls.n	8001f90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68d9      	ldr	r1, [r3, #12]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	3b1e      	subs	r3, #30
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43da      	mvns	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	400a      	ands	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68d9      	ldr	r1, [r3, #12]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4403      	add	r3, r0
 8001f82:	3b1e      	subs	r3, #30
 8001f84:	409a      	lsls	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	e022      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6919      	ldr	r1, [r3, #16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6919      	ldr	r1, [r3, #16]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4403      	add	r3, r0
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d824      	bhi.n	8002028 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b05      	subs	r3, #5
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b05      	subs	r3, #5
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
 8002026:	e04c      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d824      	bhi.n	800207a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b23      	subs	r3, #35	; 0x23
 8002042:	221f      	movs	r2, #31
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43da      	mvns	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	400a      	ands	r2, r1
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3b23      	subs	r3, #35	; 0x23
 800206c:	fa00 f203 	lsl.w	r2, r0, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
 8002078:	e023      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	3b41      	subs	r3, #65	; 0x41
 800208c:	221f      	movs	r2, #31
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	400a      	ands	r2, r1
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	4618      	mov	r0, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b41      	subs	r3, #65	; 0x41
 80020b6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_ADC_ConfigChannel+0x250>)
 80020c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_ADC_ConfigChannel+0x254>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d10f      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1d8>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b12      	cmp	r3, #18
 80020d6:	d10b      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_ADC_ConfigChannel+0x254>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d12b      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x23a>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <HAL_ADC_ConfigChannel+0x258>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d003      	beq.n	800210c <HAL_ADC_ConfigChannel+0x1f4>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b11      	cmp	r3, #17
 800210a:	d122      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a11      	ldr	r2, [pc, #68]	; (8002170 <HAL_ADC_ConfigChannel+0x258>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d111      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_ADC_ConfigChannel+0x25c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_ADC_ConfigChannel+0x260>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	0c9a      	lsrs	r2, r3, #18
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002144:	e002      	b.n	800214c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3b01      	subs	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40012300 	.word	0x40012300
 800216c:	40012000 	.word	0x40012000
 8002170:	10000012 	.word	0x10000012
 8002174:	20000004 	.word	0x20000004
 8002178:	431bde83 	.word	0x431bde83

0800217c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002184:	4b79      	ldr	r3, [pc, #484]	; (800236c <ADC_Init+0x1f0>)
 8002186:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	431a      	orrs	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	021a      	lsls	r2, r3, #8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	4a58      	ldr	r2, [pc, #352]	; (8002370 <ADC_Init+0x1f4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d022      	beq.n	800225a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002222:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	e00f      	b.n	800227a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002278:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0202 	bic.w	r2, r2, #2
 8002288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7e1b      	ldrb	r3, [r3, #24]
 8002294:	005a      	lsls	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01b      	beq.n	80022e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	3b01      	subs	r3, #1
 80022d4:	035a      	lsls	r2, r3, #13
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	e007      	b.n	80022f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	3b01      	subs	r3, #1
 800230c:	051a      	lsls	r2, r3, #20
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6899      	ldr	r1, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002332:	025a      	lsls	r2, r3, #9
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6899      	ldr	r1, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	029a      	lsls	r2, r3, #10
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40012300 	.word	0x40012300
 8002370:	0f000001 	.word	0x0f000001

08002374 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0ed      	b.n	8002562 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff f88a 	bl	80014ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0202 	bic.w	r2, r2, #2
 80023a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a8:	f7ff fd44 	bl	8001e34 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ae:	e012      	b.n	80023d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023b0:	f7ff fd40 	bl	8001e34 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b0a      	cmp	r3, #10
 80023bc:	d90b      	bls.n	80023d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2205      	movs	r2, #5
 80023ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0c5      	b.n	8002562 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e5      	bne.n	80023b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f4:	f7ff fd1e 	bl	8001e34 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023fa:	e012      	b.n	8002422 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023fc:	f7ff fd1a 	bl	8001e34 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b0a      	cmp	r3, #10
 8002408:	d90b      	bls.n	8002422 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2205      	movs	r2, #5
 800241a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e09f      	b.n	8002562 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0e5      	beq.n	80023fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7e1b      	ldrb	r3, [r3, #24]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d108      	bne.n	800244a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e007      	b.n	800245a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7e5b      	ldrb	r3, [r3, #25]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e007      	b.n	8002484 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e9b      	ldrb	r3, [r3, #26]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d108      	bne.n	800249e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0220 	orr.w	r2, r2, #32
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e007      	b.n	80024ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0220 	bic.w	r2, r2, #32
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7edb      	ldrb	r3, [r3, #27]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0210 	bic.w	r2, r2, #16
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e007      	b.n	80024d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0210 	orr.w	r2, r2, #16
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7f1b      	ldrb	r3, [r3, #28]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d108      	bne.n	80024f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0208 	orr.w	r2, r2, #8
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e007      	b.n	8002502 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0208 	bic.w	r2, r2, #8
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7f5b      	ldrb	r3, [r3, #29]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0204 	orr.w	r2, r2, #4
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e007      	b.n	800252c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0204 	bic.w	r2, r2, #4
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	ea42 0103 	orr.w	r1, r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259e:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60d3      	str	r3, [r2, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <__NVIC_GetPriorityGrouping+0x18>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0307 	and.w	r3, r3, #7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db0b      	blt.n	80025fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4907      	ldr	r1, [pc, #28]	; (8002608 <__NVIC_EnableIRQ+0x38>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	; (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff29 	bl	800256c <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff3e 	bl	80025b4 <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff8e 	bl	8002660 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5d 	bl	800260c <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff31 	bl	80025d0 <__NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffa2 	bl	80026c8 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e165      	b.n	8002a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8154 	bne.w	8002a72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d00b      	beq.n	80027ea <HAL_GPIO_Init+0x5a>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027de:	2b11      	cmp	r3, #17
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b12      	cmp	r3, #18
 80027e8:	d130      	bne.n	800284c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0201 	and.w	r2, r3, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0xfc>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b12      	cmp	r3, #18
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80ae 	beq.w	8002a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_GPIO_Init+0x2fc>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_GPIO_Init+0x2fc>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_GPIO_Init+0x2fc>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a57      	ldr	r2, [pc, #348]	; (8002a90 <HAL_GPIO_Init+0x300>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4e      	ldr	r2, [pc, #312]	; (8002a94 <HAL_GPIO_Init+0x304>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d025      	beq.n	80029aa <HAL_GPIO_Init+0x21a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4d      	ldr	r2, [pc, #308]	; (8002a98 <HAL_GPIO_Init+0x308>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01f      	beq.n	80029a6 <HAL_GPIO_Init+0x216>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4c      	ldr	r2, [pc, #304]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0x212>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4b      	ldr	r2, [pc, #300]	; (8002aa0 <HAL_GPIO_Init+0x310>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x20e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4a      	ldr	r2, [pc, #296]	; (8002aa4 <HAL_GPIO_Init+0x314>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x20a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a49      	ldr	r2, [pc, #292]	; (8002aa8 <HAL_GPIO_Init+0x318>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x206>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a48      	ldr	r2, [pc, #288]	; (8002aac <HAL_GPIO_Init+0x31c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x202>
 800298e:	2306      	movs	r3, #6
 8002990:	e00c      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 8002992:	2307      	movs	r3, #7
 8002994:	e00a      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 8002996:	2305      	movs	r3, #5
 8002998:	e008      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 800299a:	2304      	movs	r3, #4
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 800299e:	2303      	movs	r3, #3
 80029a0:	e004      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 80029aa:	2300      	movs	r3, #0
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4093      	lsls	r3, r2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029bc:	4934      	ldr	r1, [pc, #208]	; (8002a90 <HAL_GPIO_Init+0x300>)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ee:	4a30      	ldr	r2, [pc, #192]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a18:	4a25      	ldr	r2, [pc, #148]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	f67f ae96 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	3724      	adds	r7, #36	; 0x24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40013800 	.word	0x40013800
 8002a94:	40020000 	.word	0x40020000
 8002a98:	40020400 	.word	0x40020400
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40021400 	.word	0x40021400
 8002aac:	40021800 	.word	0x40021800
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e001      	b.n	8002ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
 8002af0:	4613      	mov	r3, r2
 8002af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af4:	787b      	ldrb	r3, [r7, #1]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b00:	e003      	b.n	8002b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	041a      	lsls	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	619a      	str	r2, [r3, #24]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	401a      	ands	r2, r3
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d104      	bne.n	8002b3a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	041a      	lsls	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e11f      	b.n	8002d9e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe fce2 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	; 0x24
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bb0:	f001 fbd2 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 8002bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4a7b      	ldr	r2, [pc, #492]	; (8002da8 <HAL_I2C_Init+0x25c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d807      	bhi.n	8002bd0 <HAL_I2C_Init+0x84>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a7a      	ldr	r2, [pc, #488]	; (8002dac <HAL_I2C_Init+0x260>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	bf94      	ite	ls
 8002bc8:	2301      	movls	r3, #1
 8002bca:	2300      	movhi	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e006      	b.n	8002bde <HAL_I2C_Init+0x92>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a77      	ldr	r2, [pc, #476]	; (8002db0 <HAL_I2C_Init+0x264>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	bf94      	ite	ls
 8002bd8:	2301      	movls	r3, #1
 8002bda:	2300      	movhi	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0db      	b.n	8002d9e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a72      	ldr	r2, [pc, #456]	; (8002db4 <HAL_I2C_Init+0x268>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	0c9b      	lsrs	r3, r3, #18
 8002bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a64      	ldr	r2, [pc, #400]	; (8002da8 <HAL_I2C_Init+0x25c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d802      	bhi.n	8002c20 <HAL_I2C_Init+0xd4>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	e009      	b.n	8002c34 <HAL_I2C_Init+0xe8>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	4a63      	ldr	r2, [pc, #396]	; (8002db8 <HAL_I2C_Init+0x26c>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	3301      	adds	r3, #1
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4956      	ldr	r1, [pc, #344]	; (8002da8 <HAL_I2C_Init+0x25c>)
 8002c50:	428b      	cmp	r3, r1
 8002c52:	d80d      	bhi.n	8002c70 <HAL_I2C_Init+0x124>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1e59      	subs	r1, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	bf38      	it	cc
 8002c6c:	2304      	movcc	r3, #4
 8002c6e:	e04f      	b.n	8002d10 <HAL_I2C_Init+0x1c4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d111      	bne.n	8002c9c <HAL_I2C_Init+0x150>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e58      	subs	r0, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	440b      	add	r3, r1
 8002c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e012      	b.n	8002cc2 <HAL_I2C_Init+0x176>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e58      	subs	r0, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	0099      	lsls	r1, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x17e>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e022      	b.n	8002d10 <HAL_I2C_Init+0x1c4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_I2C_Init+0x1a4>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e58      	subs	r0, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	440b      	add	r3, r1
 8002ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cee:	e00f      	b.n	8002d10 <HAL_I2C_Init+0x1c4>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	0099      	lsls	r1, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	6809      	ldr	r1, [r1, #0]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6911      	ldr	r1, [r2, #16]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	000186a0 	.word	0x000186a0
 8002dac:	001e847f 	.word	0x001e847f
 8002db0:	003d08ff 	.word	0x003d08ff
 8002db4:	431bde83 	.word	0x431bde83
 8002db8:	10624dd3 	.word	0x10624dd3

08002dbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dbe:	b08f      	sub	sp, #60	; 0x3c
 8002dc0:	af0a      	add	r7, sp, #40	; 0x28
 8002dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e116      	b.n	8002ffc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f008 fff5 	bl	800bdd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2203      	movs	r2, #3
 8002df2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f005 fdb0 	bl	8008972 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	687e      	ldr	r6, [r7, #4]
 8002e1a:	466d      	mov	r5, sp
 8002e1c:	f106 0410 	add.w	r4, r6, #16
 8002e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e30:	1d33      	adds	r3, r6, #4
 8002e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e34:	6838      	ldr	r0, [r7, #0]
 8002e36:	f005 fc87 	bl	8008748 <USB_CoreInit>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0d7      	b.n	8002ffc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 fd9e 	bl	8008994 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e04a      	b.n	8002ef4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	333d      	adds	r3, #61	; 0x3d
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	333c      	adds	r3, #60	; 0x3c
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	b298      	uxth	r0, r3
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3342      	adds	r3, #66	; 0x42
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	333f      	adds	r3, #63	; 0x3f
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3344      	adds	r3, #68	; 0x44
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3348      	adds	r3, #72	; 0x48
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eda:	7bfa      	ldrb	r2, [r7, #15]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3350      	adds	r3, #80	; 0x50
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d3af      	bcc.n	8002e5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e044      	b.n	8002f8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d3b5      	bcc.n	8002f04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	687e      	ldr	r6, [r7, #4]
 8002fa0:	466d      	mov	r5, sp
 8002fa2:	f106 0410 	add.w	r4, r6, #16
 8002fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fb6:	1d33      	adds	r3, r6, #4
 8002fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fba:	6838      	ldr	r0, [r7, #0]
 8002fbc:	f005 fd14 	bl	80089e8 <USB_DevInit>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e014      	b.n	8002ffc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d102      	bne.n	8002ff0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f001 f892 	bl	8004114 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f006 fd4f 	bl	8009a98 <USB_DevDisconnect>

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003004 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_PCD_Start+0x1c>
 800301c:	2302      	movs	r3, #2
 800301e:	e020      	b.n	8003062 <HAL_PCD_Start+0x5e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	2b01      	cmp	r3, #1
 800302e:	d109      	bne.n	8003044 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003034:	2b01      	cmp	r3, #1
 8003036:	d005      	beq.n	8003044 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f005 fc81 	bl	8008950 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f006 fcff 	bl	8009a56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800306a:	b590      	push	{r4, r7, lr}
 800306c:	b08d      	sub	sp, #52	; 0x34
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f006 fdbd 	bl	8009c00 <USB_GetMode>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 83ca 	bne.w	8003822 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f006 fd21 	bl	8009ada <USB_ReadInterrupts>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 83c0 	beq.w	8003820 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f006 fd18 	bl	8009ada <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d107      	bne.n	80030c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f002 0202 	and.w	r2, r2, #2
 80030c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f006 fd06 	bl	8009ada <USB_ReadInterrupts>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d161      	bne.n	800319c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0210 	bic.w	r2, r2, #16
 80030e6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	0c5b      	lsrs	r3, r3, #17
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	2b02      	cmp	r3, #2
 8003112:	d124      	bne.n	800315e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d035      	beq.n	800318c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800312a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312e:	b29b      	uxth	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6a38      	ldr	r0, [r7, #32]
 8003134:	f006 fb6c 	bl	8009810 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003144:	441a      	add	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003156:	441a      	add	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	619a      	str	r2, [r3, #24]
 800315c:	e016      	b.n	800318c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	0c5b      	lsrs	r3, r3, #17
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	2b06      	cmp	r3, #6
 8003168:	d110      	bne.n	800318c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003170:	2208      	movs	r2, #8
 8003172:	4619      	mov	r1, r3
 8003174:	6a38      	ldr	r0, [r7, #32]
 8003176:	f006 fb4b 	bl	8009810 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003186:	441a      	add	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0210 	orr.w	r2, r2, #16
 800319a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f006 fc9a 	bl	8009ada <USB_ReadInterrupts>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031b0:	d16e      	bne.n	8003290 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f006 fca0 	bl	8009b00 <USB_ReadDevAllOutEpInterrupt>
 80031c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031c2:	e062      	b.n	800328a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d057      	beq.n	800327e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f006 fcc5 	bl	8009b68 <USB_ReadDevOutEPInterrupt>
 80031de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	2301      	movs	r3, #1
 80031fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fdde 	bl	8003dc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321a:	461a      	mov	r2, r3
 800321c:	2308      	movs	r3, #8
 800321e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fed8 	bl	8003fd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	2310      	movs	r3, #16
 8003242:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	461a      	mov	r2, r3
 800325c:	2320      	movs	r3, #32
 800325e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003276:	461a      	mov	r2, r3
 8003278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800327c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	3301      	adds	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	d199      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f006 fc20 	bl	8009ada <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032a4:	f040 80c0 	bne.w	8003428 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f006 fc41 	bl	8009b34 <USB_ReadDevAllInEpInterrupt>
 80032b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032b8:	e0b2      	b.n	8003420 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a7 	beq.w	8003414 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f006 fc67 	bl	8009ba4 <USB_ReadDevInEPInterrupt>
 80032d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d057      	beq.n	8003392 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	2201      	movs	r2, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69f9      	ldr	r1, [r7, #28]
 80032fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003302:	4013      	ands	r3, r2
 8003304:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003312:	461a      	mov	r2, r3
 8003314:	2301      	movs	r3, #1
 8003316:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d132      	bne.n	8003386 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3348      	adds	r3, #72	; 0x48
 8003330:	6819      	ldr	r1, [r3, #0]
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4403      	add	r3, r0
 8003340:	3344      	adds	r3, #68	; 0x44
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4419      	add	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4403      	add	r3, r0
 8003354:	3348      	adds	r3, #72	; 0x48
 8003356:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d113      	bne.n	8003386 <HAL_PCD_IRQHandler+0x31c>
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3350      	adds	r3, #80	; 0x50
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d108      	bne.n	8003386 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800337e:	461a      	mov	r2, r3
 8003380:	2101      	movs	r1, #1
 8003382:	f006 fc6f 	bl	8009c64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	b2db      	uxtb	r3, r3
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f008 fda4 	bl	800beda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a8:	461a      	mov	r2, r3
 80033aa:	2308      	movs	r3, #8
 80033ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c4:	461a      	mov	r2, r3
 80033c6:	2310      	movs	r3, #16
 80033c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e0:	461a      	mov	r2, r3
 80033e2:	2340      	movs	r3, #64	; 0x40
 80033e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fc:	461a      	mov	r2, r3
 80033fe:	2302      	movs	r3, #2
 8003400:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800340c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fc48 	bl	8003ca4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	3301      	adds	r3, #1
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	2b00      	cmp	r3, #0
 8003424:	f47f af49 	bne.w	80032ba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f006 fb54 	bl	8009ada <USB_ReadInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800343c:	d122      	bne.n	8003484 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003464:	2100      	movs	r1, #0
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fe78 	bl	800415c <HAL_PCDEx_LPM_Callback>
 800346c:	e002      	b.n	8003474 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f008 fdaa 	bl	800bfc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f006 fb26 	bl	8009ada <USB_ReadInterrupts>
 800348e:	4603      	mov	r3, r0
 8003490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003498:	d112      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f008 fd66 	bl	800bf7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034be:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f006 fb08 	bl	8009ada <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d4:	d121      	bne.n	800351a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80034e4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d111      	bne.n	8003514 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800350a:	2101      	movs	r1, #1
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fe25 	bl	800415c <HAL_PCDEx_LPM_Callback>
 8003512:	e002      	b.n	800351a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f008 fd31 	bl	800bf7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f006 fadb 	bl	8009ada <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800352a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352e:	f040 80c7 	bne.w	80036c0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2110      	movs	r1, #16
 800354c:	4618      	mov	r0, r3
 800354e:	f005 fba9 	bl	8008ca4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003552:	2300      	movs	r3, #0
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003556:	e056      	b.n	8003606 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003564:	461a      	mov	r2, r3
 8003566:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800356a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357c:	0151      	lsls	r1, r2, #5
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	440a      	add	r2, r1
 8003582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800358a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359c:	0151      	lsls	r1, r2, #5
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	440a      	add	r2, r1
 80035a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b8:	461a      	mov	r2, r3
 80035ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d0:	0151      	lsls	r1, r2, #5
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	440a      	add	r2, r1
 80035d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	3301      	adds	r3, #1
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360c:	429a      	cmp	r2, r3
 800360e:	d3a3      	bcc.n	8003558 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800361e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003622:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d016      	beq.n	800365a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800363c:	f043 030b 	orr.w	r3, r3, #11
 8003640:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003652:	f043 030b 	orr.w	r3, r3, #11
 8003656:	6453      	str	r3, [r2, #68]	; 0x44
 8003658:	e015      	b.n	8003686 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800366c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003670:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003680:	f043 030b 	orr.w	r3, r3, #11
 8003684:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003694:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003698:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036aa:	461a      	mov	r2, r3
 80036ac:	f006 fada 	bl	8009c64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f006 fa08 	bl	8009ada <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d4:	d124      	bne.n	8003720 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f006 fa9e 	bl	8009c1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f005 fb3e 	bl	8008d66 <USB_GetDevSpeed>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681c      	ldr	r4, [r3, #0]
 80036f6:	f000 fe23 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 80036fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	4620      	mov	r0, r4
 8003706:	f005 f881 	bl	800880c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f008 fc0d 	bl	800bf2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f006 f9d8 	bl	8009ada <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d10a      	bne.n	800374a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f008 fbea 	bl	800bf0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f002 0208 	and.w	r2, r2, #8
 8003748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f006 f9c3 	bl	8009ada <USB_ReadInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800375a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375e:	d10f      	bne.n	8003780 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f008 fc4c 	bl	800c008 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800377e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f006 f9a8 	bl	8009ada <USB_ReadInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003794:	d10f      	bne.n	80037b6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	b2db      	uxtb	r3, r3
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f008 fc1f 	bl	800bfe4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f006 f98d 	bl	8009ada <USB_ReadInterrupts>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ca:	d10a      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f008 fc2d 	bl	800c02c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f006 f977 	bl	8009ada <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d115      	bne.n	8003822 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f008 fc1d 	bl	800c048 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	e000      	b.n	8003822 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003820:	bf00      	nop
    }
  }
}
 8003822:	3734      	adds	r7, #52	; 0x34
 8003824:	46bd      	mov	sp, r7
 8003826:	bd90      	pop	{r4, r7, pc}

08003828 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_PCD_SetAddress+0x1a>
 800383e:	2302      	movs	r3, #2
 8003840:	e013      	b.n	800386a <HAL_PCD_SetAddress+0x42>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f006 f8d5 	bl	8009a0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	4608      	mov	r0, r1
 800387c:	4611      	mov	r1, r2
 800387e:	461a      	mov	r2, r3
 8003880:	4603      	mov	r3, r0
 8003882:	70fb      	strb	r3, [r7, #3]
 8003884:	460b      	mov	r3, r1
 8003886:	803b      	strh	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da0f      	bge.n	80038b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 020f 	and.w	r2, r3, #15
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	3338      	adds	r3, #56	; 0x38
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	705a      	strb	r2, [r3, #1]
 80038b6:	e00f      	b.n	80038d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038e4:	883a      	ldrh	r2, [r7, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	78ba      	ldrb	r2, [r7, #2]
 80038ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003902:	78bb      	ldrb	r3, [r7, #2]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d102      	bne.n	800390e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_PCD_EP_Open+0xaa>
 8003918:	2302      	movs	r3, #2
 800391a:	e00e      	b.n	800393a <HAL_PCD_EP_Open+0xc8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68f9      	ldr	r1, [r7, #12]
 800392a:	4618      	mov	r0, r3
 800392c:	f005 fa40 	bl	8008db0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003938:	7afb      	ldrb	r3, [r7, #11]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800394e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003952:	2b00      	cmp	r3, #0
 8003954:	da0f      	bge.n	8003976 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 020f 	and.w	r2, r3, #15
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	3338      	adds	r3, #56	; 0x38
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	3304      	adds	r3, #4
 800396c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	705a      	strb	r2, [r3, #1]
 8003974:	e00f      	b.n	8003996 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	f003 020f 	and.w	r2, r3, #15
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	3304      	adds	r3, #4
 800398e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	b2da      	uxtb	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_PCD_EP_Close+0x6e>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e00e      	b.n	80039ce <HAL_PCD_EP_Close+0x8c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68f9      	ldr	r1, [r7, #12]
 80039be:	4618      	mov	r0, r3
 80039c0:	f005 fa7e 	bl	8008ec0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	460b      	mov	r3, r1
 80039e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	3304      	adds	r3, #4
 80039fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a32:	7afb      	ldrb	r3, [r7, #11]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	f005 fd59 	bl	8009500 <USB_EP0StartXfer>
 8003a4e:	e008      	b.n	8003a62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6979      	ldr	r1, [r7, #20]
 8003a5e:	f005 fb0b 	bl	8009078 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	f003 020f 	and.w	r2, r3, #15
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aac:	7afb      	ldrb	r3, [r7, #11]
 8003aae:	f003 020f 	and.w	r2, r3, #15
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	3338      	adds	r3, #56	; 0x38
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003adc:	7afb      	ldrb	r3, [r7, #11]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d102      	bne.n	8003af6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6979      	ldr	r1, [r7, #20]
 8003b0e:	f005 fcf7 	bl	8009500 <USB_EP0StartXfer>
 8003b12:	e008      	b.n	8003b26 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6979      	ldr	r1, [r7, #20]
 8003b22:	f005 faa9 	bl	8009078 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	f003 020f 	and.w	r2, r3, #15
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d901      	bls.n	8003b4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e050      	b.n	8003bf0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	da0f      	bge.n	8003b76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	3338      	adds	r3, #56	; 0x38
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	705a      	strb	r2, [r3, #1]
 8003b74:	e00d      	b.n	8003b92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	3304      	adds	r3, #4
 8003b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_PCD_EP_SetStall+0x82>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e01e      	b.n	8003bf0 <HAL_PCD_EP_SetStall+0xc0>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68f9      	ldr	r1, [r7, #12]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f005 fe4e 	bl	8009862 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	b2d9      	uxtb	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003be0:	461a      	mov	r2, r3
 8003be2:	f006 f83f 	bl	8009c64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 020f 	and.w	r2, r3, #15
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d901      	bls.n	8003c16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e042      	b.n	8003c9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	da0f      	bge.n	8003c3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	f003 020f 	and.w	r2, r3, #15
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	3338      	adds	r3, #56	; 0x38
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	3304      	adds	r3, #4
 8003c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	705a      	strb	r2, [r3, #1]
 8003c3c:	e00f      	b.n	8003c5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	f003 020f 	and.w	r2, r3, #15
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	3304      	adds	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_PCD_EP_ClrStall+0x86>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e00e      	b.n	8003c9c <HAL_PCD_EP_ClrStall+0xa4>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f005 fe56 	bl	800993e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	; 0x28
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	3338      	adds	r3, #56	; 0x38
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3304      	adds	r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d901      	bls.n	8003cdc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e06c      	b.n	8003db6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d902      	bls.n	8003cf8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3303      	adds	r3, #3
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d00:	e02b      	b.n	8003d5a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d902      	bls.n	8003d1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3303      	adds	r3, #3
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68d9      	ldr	r1, [r3, #12]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6978      	ldr	r0, [r7, #20]
 8003d3e:	f005 fd32 	bl	80097a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	441a      	add	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	441a      	add	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d809      	bhi.n	8003d84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d203      	bcs.n	8003d84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1be      	bne.n	8003d02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d811      	bhi.n	8003db4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	2201      	movs	r2, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	6939      	ldr	r1, [r7, #16]
 8003dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003db0:	4013      	ands	r3, r2
 8003db2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	333c      	adds	r3, #60	; 0x3c
 8003dd8:	3304      	adds	r3, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f040 80a0 	bne.w	8003f38 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d015      	beq.n	8003e2e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a72      	ldr	r2, [pc, #456]	; (8003fd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f240 80dd 	bls.w	8003fc6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80d7 	beq.w	8003fc6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	461a      	mov	r2, r3
 8003e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2a:	6093      	str	r3, [r2, #8]
 8003e2c:	e0cb      	b.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e44:	461a      	mov	r2, r3
 8003e46:	2320      	movs	r3, #32
 8003e48:	6093      	str	r3, [r2, #8]
 8003e4a:	e0bc      	b.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 80b7 	bne.w	8003fc6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a5d      	ldr	r2, [pc, #372]	; (8003fd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d90f      	bls.n	8003e80 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e76:	461a      	mov	r2, r3
 8003e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7c:	6093      	str	r3, [r2, #8]
 8003e7e:	e0a2      	b.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e92:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	0159      	lsls	r1, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003ea6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4403      	add	r3, r0
 8003eb6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003eba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4403      	add	r3, r0
 8003ede:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4419      	add	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4403      	add	r3, r0
 8003ef4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ef8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d114      	bne.n	8003f2a <PCD_EP_OutXfrComplete_int+0x16a>
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d108      	bne.n	8003f2a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f22:	461a      	mov	r2, r3
 8003f24:	2101      	movs	r1, #1
 8003f26:	f005 fe9d 	bl	8009c64 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f007 ffb7 	bl	800bea4 <HAL_PCD_DataOutStageCallback>
 8003f36:	e046      	b.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4a26      	ldr	r2, [pc, #152]	; (8003fd4 <PCD_EP_OutXfrComplete_int+0x214>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d124      	bne.n	8003f8a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f56:	461a      	mov	r2, r3
 8003f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5c:	6093      	str	r3, [r2, #8]
 8003f5e:	e032      	b.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	461a      	mov	r2, r3
 8003f78:	2320      	movs	r3, #32
 8003f7a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f007 ff8e 	bl	800bea4 <HAL_PCD_DataOutStageCallback>
 8003f88:	e01d      	b.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d114      	bne.n	8003fba <PCD_EP_OutXfrComplete_int+0x1fa>
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d108      	bne.n	8003fba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	f005 fe55 	bl	8009c64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f007 ff6f 	bl	800bea4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	4f54300a 	.word	0x4f54300a
 8003fd4:	4f54310a 	.word	0x4f54310a

08003fd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	333c      	adds	r3, #60	; 0x3c
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a15      	ldr	r2, [pc, #84]	; (8004060 <PCD_EP_OutSetupPacket_int+0x88>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d90e      	bls.n	800402c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	461a      	mov	r2, r3
 8004026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f007 ff27 	bl	800be80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <PCD_EP_OutSetupPacket_int+0x88>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d90c      	bls.n	8004054 <PCD_EP_OutSetupPacket_int+0x7c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d108      	bne.n	8004054 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800404c:	461a      	mov	r2, r3
 800404e:	2101      	movs	r1, #1
 8004050:	f005 fe08 	bl	8009c64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	4f54300a 	.word	0x4f54300a

08004064 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
 8004070:	4613      	mov	r3, r2
 8004072:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d107      	bne.n	8004092 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004082:	883b      	ldrh	r3, [r7, #0]
 8004084:	0419      	lsls	r1, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	430a      	orrs	r2, r1
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
 8004090:	e028      	b.n	80040e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4413      	add	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	e00d      	b.n	80040c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	3340      	adds	r3, #64	; 0x40
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	4413      	add	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	3301      	adds	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d3ec      	bcc.n	80040a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040cc:	883b      	ldrh	r3, [r7, #0]
 80040ce:	0418      	lsls	r0, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	4302      	orrs	r2, r0
 80040dc:	3340      	adds	r3, #64	; 0x40
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	887a      	ldrh	r2, [r7, #2]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004146:	f043 0303 	orr.w	r3, r3, #3
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0cc      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004188:	4b68      	ldr	r3, [pc, #416]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d90c      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b65      	ldr	r3, [pc, #404]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b63      	ldr	r3, [pc, #396]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0b8      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c8:	4b59      	ldr	r3, [pc, #356]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a58      	ldr	r2, [pc, #352]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e0:	4b53      	ldr	r3, [pc, #332]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a52      	ldr	r2, [pc, #328]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b50      	ldr	r3, [pc, #320]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	494d      	ldr	r1, [pc, #308]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d044      	beq.n	8004294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d107      	bne.n	8004222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d119      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e07f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d003      	beq.n	8004232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422e:	2b03      	cmp	r3, #3
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	4b3f      	ldr	r3, [pc, #252]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e067      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004252:	4b37      	ldr	r3, [pc, #220]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 0203 	bic.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4934      	ldr	r1, [pc, #208]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004264:	f7fd fde6 	bl	8001e34 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426a:	e00a      	b.n	8004282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426c:	f7fd fde2 	bl	8001e34 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e04f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 020c 	and.w	r2, r3, #12
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	429a      	cmp	r2, r3
 8004292:	d1eb      	bne.n	800426c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004294:	4b25      	ldr	r3, [pc, #148]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d20c      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e032      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4916      	ldr	r1, [pc, #88]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	490e      	ldr	r1, [pc, #56]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042fa:	f000 fb7f 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80042fe:	4601      	mov	r1, r0
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	fa21 f303 	lsr.w	r3, r1, r3
 8004312:	4a09      	ldr	r2, [pc, #36]	; (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd fd46 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023c00 	.word	0x40023c00
 8004330:	40023800 	.word	0x40023800
 8004334:	0800c668 	.word	0x0800c668
 8004338:	20000004 	.word	0x20000004
 800433c:	20000008 	.word	0x20000008

08004340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <HAL_RCC_GetHCLKFreq+0x14>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000004 	.word	0x20000004

08004358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800435c:	f7ff fff0 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8004360:	4601      	mov	r1, r0
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0a9b      	lsrs	r3, r3, #10
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4a03      	ldr	r2, [pc, #12]	; (800437c <HAL_RCC_GetPCLK1Freq+0x24>)
 800436e:	5cd3      	ldrb	r3, [r2, r3]
 8004370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	0800c678 	.word	0x0800c678

08004380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004384:	f7ff ffdc 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8004388:	4601      	mov	r1, r0
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0b5b      	lsrs	r3, r3, #13
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4a03      	ldr	r2, [pc, #12]	; (80043a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004396:	5cd3      	ldrb	r3, [r2, r3]
 8004398:	fa21 f303 	lsr.w	r3, r1, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40023800 	.word	0x40023800
 80043a4:	0800c678 	.word	0x0800c678

080043a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	; 0x30
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d010      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80043e0:	4b6f      	ldr	r3, [pc, #444]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	496c      	ldr	r1, [pc, #432]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80043fe:	2301      	movs	r3, #1
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d010      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800440e:	4b64      	ldr	r3, [pc, #400]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004414:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	4960      	ldr	r1, [pc, #384]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800442c:	2301      	movs	r3, #1
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d017      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800443c:	4b58      	ldr	r3, [pc, #352]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800443e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004442:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	4955      	ldr	r1, [pc, #340]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d101      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800445c:	2301      	movs	r3, #1
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004468:	2301      	movs	r3, #1
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d017      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004478:	4b49      	ldr	r3, [pc, #292]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800447a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004486:	4946      	ldr	r1, [pc, #280]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004496:	d101      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004498:	2301      	movs	r3, #1
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80044a4:	2301      	movs	r3, #1
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 808a 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	4b39      	ldr	r3, [pc, #228]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	4a38      	ldr	r2, [pc, #224]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40
 80044c6:	4b36      	ldr	r3, [pc, #216]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	60bb      	str	r3, [r7, #8]
 80044d0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044d2:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a33      	ldr	r2, [pc, #204]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044de:	f7fd fca9 	bl	8001e34 <HAL_GetTick>
 80044e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044e6:	f7fd fca5 	bl	8001e34 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e278      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044f8:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004504:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d02f      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451c:	6a3a      	ldr	r2, [r7, #32]
 800451e:	429a      	cmp	r2, r3
 8004520:	d028      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004522:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452c:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800453e:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d114      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800454a:	f7fd fc73 	bl	8001e34 <HAL_GetTick>
 800454e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fd fc6f 	bl	8001e34 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e240      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ee      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004580:	d114      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004596:	4902      	ldr	r1, [pc, #8]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]
 800459c:	e00c      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40007000 	.word	0x40007000
 80045a8:	42470e40 	.word	0x42470e40
 80045ac:	4b4a      	ldr	r3, [pc, #296]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a49      	ldr	r2, [pc, #292]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045b6:	6093      	str	r3, [r2, #8]
 80045b8:	4b47      	ldr	r3, [pc, #284]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c4:	4944      	ldr	r1, [pc, #272]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80045de:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80045ec:	4b3a      	ldr	r3, [pc, #232]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	4937      	ldr	r1, [pc, #220]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800460e:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004614:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	492e      	ldr	r1, [pc, #184]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d011      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004630:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004636:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	4926      	ldr	r1, [pc, #152]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800464e:	d101      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004650:	2301      	movs	r3, #1
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004666:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	491a      	ldr	r1, [pc, #104]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467e:	2b00      	cmp	r3, #0
 8004680:	d011      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004688:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	4911      	ldr	r1, [pc, #68]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a0:	d101      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80046a2:	2301      	movs	r3, #1
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d005      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b4:	f040 80ff 	bne.w	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046be:	f7fd fbb9 	bl	8001e34 <HAL_GetTick>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c4:	e00e      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046c6:	f7fd fbb5 	bl	8001e34 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d907      	bls.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e188      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80046d8:	40023800 	.word	0x40023800
 80046dc:	424711e0 	.word	0x424711e0
 80046e0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046e4:	4b7e      	ldr	r3, [pc, #504]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ea      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800470c:	2b00      	cmp	r3, #0
 800470e:	d028      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d124      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004718:	4b71      	ldr	r3, [pc, #452]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800471a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	3301      	adds	r3, #1
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800472a:	4b6d      	ldr	r3, [pc, #436]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800472c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004730:	0e1b      	lsrs	r3, r3, #24
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	019b      	lsls	r3, r3, #6
 8004742:	431a      	orrs	r2, r3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	061b      	lsls	r3, r3, #24
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	071b      	lsls	r3, r3, #28
 800475a:	4961      	ldr	r1, [pc, #388]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004780:	2b00      	cmp	r3, #0
 8004782:	d035      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478c:	d130      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800478e:	4b54      	ldr	r3, [pc, #336]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	3301      	adds	r3, #1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047a0:	4b4f      	ldr	r3, [pc, #316]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a6:	0f1b      	lsrs	r3, r3, #28
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	019b      	lsls	r3, r3, #6
 80047b8:	431a      	orrs	r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	3b01      	subs	r3, #1
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	431a      	orrs	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	071b      	lsls	r3, r3, #28
 80047d0:	4943      	ldr	r1, [pc, #268]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047d8:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047de:	f023 021f 	bic.w	r2, r3, #31
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	3b01      	subs	r3, #1
 80047e8:	493d      	ldr	r1, [pc, #244]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d029      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004804:	d124      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004806:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004818:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800481a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481e:	0f1b      	lsrs	r3, r3, #28
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	019b      	lsls	r3, r3, #6
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	3b01      	subs	r3, #1
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	431a      	orrs	r2, r3
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	061b      	lsls	r3, r3, #24
 8004842:	431a      	orrs	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	071b      	lsls	r3, r3, #28
 8004848:	4925      	ldr	r1, [pc, #148]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004858:	2b00      	cmp	r3, #0
 800485a:	d016      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	019b      	lsls	r3, r3, #6
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	3b01      	subs	r3, #1
 8004870:	041b      	lsls	r3, r3, #16
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	061b      	lsls	r3, r3, #24
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	071b      	lsls	r3, r3, #28
 8004882:	4917      	ldr	r1, [pc, #92]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800488a:	4b16      	ldr	r3, [pc, #88]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004890:	f7fd fad0 	bl	8001e34 <HAL_GetTick>
 8004894:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004898:	f7fd facc 	bl	8001e34 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e09f      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	f040 8095 	bne.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048c4:	f7fd fab6 	bl	8001e34 <HAL_GetTick>
 80048c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048ca:	e00f      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80048cc:	f7fd fab2 	bl	8001e34 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d908      	bls.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e085      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800
 80048e4:	42470068 	.word	0x42470068
 80048e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048ec:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f8:	d0e8      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004916:	2b00      	cmp	r3, #0
 8004918:	d02b      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	2b00      	cmp	r3, #0
 8004920:	d127      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004922:	4b34      	ldr	r3, [pc, #208]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	3301      	adds	r3, #1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	431a      	orrs	r2, r3
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	3b01      	subs	r3, #1
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	061b      	lsls	r3, r3, #24
 8004950:	4928      	ldr	r1, [pc, #160]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004958:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800495a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	3b01      	subs	r3, #1
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	4922      	ldr	r1, [pc, #136]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01d      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x612>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004986:	d118      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004988:	4b1a      	ldr	r3, [pc, #104]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	0e1b      	lsrs	r3, r3, #24
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	019b      	lsls	r3, r3, #6
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	3b01      	subs	r3, #1
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	4910      	ldr	r1, [pc, #64]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049ba:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049c0:	f7fd fa38 	bl	8001e34 <HAL_GetTick>
 80049c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049c8:	f7fd fa34 	bl	8001e34 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e007      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e6:	d1ef      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3730      	adds	r7, #48	; 0x30
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023800 	.word	0x40023800
 80049f8:	42470070 	.word	0x42470070

080049fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a16:	4bc6      	ldr	r3, [pc, #792]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	f200 817e 	bhi.w	8004d20 <HAL_RCC_GetSysClockFreq+0x324>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <HAL_RCC_GetSysClockFreq+0x30>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a61 	.word	0x08004a61
 8004a30:	08004d21 	.word	0x08004d21
 8004a34:	08004d21 	.word	0x08004d21
 8004a38:	08004d21 	.word	0x08004d21
 8004a3c:	08004a67 	.word	0x08004a67
 8004a40:	08004d21 	.word	0x08004d21
 8004a44:	08004d21 	.word	0x08004d21
 8004a48:	08004d21 	.word	0x08004d21
 8004a4c:	08004a6d 	.word	0x08004a6d
 8004a50:	08004d21 	.word	0x08004d21
 8004a54:	08004d21 	.word	0x08004d21
 8004a58:	08004d21 	.word	0x08004d21
 8004a5c:	08004bc9 	.word	0x08004bc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4bb4      	ldr	r3, [pc, #720]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x338>)
 8004a62:	613b      	str	r3, [r7, #16]
       break;
 8004a64:	e15f      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a66:	4bb4      	ldr	r3, [pc, #720]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004a68:	613b      	str	r3, [r7, #16]
      break;
 8004a6a:	e15c      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a6c:	4bb0      	ldr	r3, [pc, #704]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a76:	4bae      	ldr	r3, [pc, #696]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04a      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4bab      	ldr	r3, [pc, #684]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	f04f 0400 	mov.w	r4, #0
 8004a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	ea03 0501 	and.w	r5, r3, r1
 8004a98:	ea04 0602 	and.w	r6, r4, r2
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4632      	mov	r2, r6
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	f04f 0400 	mov.w	r4, #0
 8004aa8:	0154      	lsls	r4, r2, #5
 8004aaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aae:	014b      	lsls	r3, r1, #5
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	1b49      	subs	r1, r1, r5
 8004ab6:	eb62 0206 	sbc.w	r2, r2, r6
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	f04f 0400 	mov.w	r4, #0
 8004ac2:	0194      	lsls	r4, r2, #6
 8004ac4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ac8:	018b      	lsls	r3, r1, #6
 8004aca:	1a5b      	subs	r3, r3, r1
 8004acc:	eb64 0402 	sbc.w	r4, r4, r2
 8004ad0:	f04f 0100 	mov.w	r1, #0
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	00e2      	lsls	r2, r4, #3
 8004ada:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ade:	00d9      	lsls	r1, r3, #3
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4614      	mov	r4, r2
 8004ae4:	195b      	adds	r3, r3, r5
 8004ae6:	eb44 0406 	adc.w	r4, r4, r6
 8004aea:	f04f 0100 	mov.w	r1, #0
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	0262      	lsls	r2, r4, #9
 8004af4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004af8:	0259      	lsls	r1, r3, #9
 8004afa:	460b      	mov	r3, r1
 8004afc:	4614      	mov	r4, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	4621      	mov	r1, r4
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f04f 0400 	mov.w	r4, #0
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4623      	mov	r3, r4
 8004b0c:	f7fb fb8c 	bl	8000228 <__aeabi_uldivmod>
 8004b10:	4603      	mov	r3, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e049      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b18:	4b85      	ldr	r3, [pc, #532]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	099b      	lsrs	r3, r3, #6
 8004b1e:	f04f 0400 	mov.w	r4, #0
 8004b22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	ea03 0501 	and.w	r5, r3, r1
 8004b2e:	ea04 0602 	and.w	r6, r4, r2
 8004b32:	4629      	mov	r1, r5
 8004b34:	4632      	mov	r2, r6
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	f04f 0400 	mov.w	r4, #0
 8004b3e:	0154      	lsls	r4, r2, #5
 8004b40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b44:	014b      	lsls	r3, r1, #5
 8004b46:	4619      	mov	r1, r3
 8004b48:	4622      	mov	r2, r4
 8004b4a:	1b49      	subs	r1, r1, r5
 8004b4c:	eb62 0206 	sbc.w	r2, r2, r6
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	f04f 0400 	mov.w	r4, #0
 8004b58:	0194      	lsls	r4, r2, #6
 8004b5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b5e:	018b      	lsls	r3, r1, #6
 8004b60:	1a5b      	subs	r3, r3, r1
 8004b62:	eb64 0402 	sbc.w	r4, r4, r2
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	00e2      	lsls	r2, r4, #3
 8004b70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b74:	00d9      	lsls	r1, r3, #3
 8004b76:	460b      	mov	r3, r1
 8004b78:	4614      	mov	r4, r2
 8004b7a:	195b      	adds	r3, r3, r5
 8004b7c:	eb44 0406 	adc.w	r4, r4, r6
 8004b80:	f04f 0100 	mov.w	r1, #0
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	02a2      	lsls	r2, r4, #10
 8004b8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b8e:	0299      	lsls	r1, r3, #10
 8004b90:	460b      	mov	r3, r1
 8004b92:	4614      	mov	r4, r2
 8004b94:	4618      	mov	r0, r3
 8004b96:	4621      	mov	r1, r4
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f04f 0400 	mov.w	r4, #0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4623      	mov	r3, r4
 8004ba2:	f7fb fb41 	bl	8000228 <__aeabi_uldivmod>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bac:	4b60      	ldr	r3, [pc, #384]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	613b      	str	r3, [r7, #16]
      break;
 8004bc6:	e0ae      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc8:	4b59      	ldr	r3, [pc, #356]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bd2:	4b57      	ldr	r3, [pc, #348]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04a      	beq.n	8004c74 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bde:	4b54      	ldr	r3, [pc, #336]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	099b      	lsrs	r3, r3, #6
 8004be4:	f04f 0400 	mov.w	r4, #0
 8004be8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	ea03 0501 	and.w	r5, r3, r1
 8004bf4:	ea04 0602 	and.w	r6, r4, r2
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4632      	mov	r2, r6
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	0154      	lsls	r4, r2, #5
 8004c06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c0a:	014b      	lsls	r3, r1, #5
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4622      	mov	r2, r4
 8004c10:	1b49      	subs	r1, r1, r5
 8004c12:	eb62 0206 	sbc.w	r2, r2, r6
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	f04f 0400 	mov.w	r4, #0
 8004c1e:	0194      	lsls	r4, r2, #6
 8004c20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c24:	018b      	lsls	r3, r1, #6
 8004c26:	1a5b      	subs	r3, r3, r1
 8004c28:	eb64 0402 	sbc.w	r4, r4, r2
 8004c2c:	f04f 0100 	mov.w	r1, #0
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	00e2      	lsls	r2, r4, #3
 8004c36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c3a:	00d9      	lsls	r1, r3, #3
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4614      	mov	r4, r2
 8004c40:	195b      	adds	r3, r3, r5
 8004c42:	eb44 0406 	adc.w	r4, r4, r6
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	0262      	lsls	r2, r4, #9
 8004c50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c54:	0259      	lsls	r1, r3, #9
 8004c56:	460b      	mov	r3, r1
 8004c58:	4614      	mov	r4, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f04f 0400 	mov.w	r4, #0
 8004c64:	461a      	mov	r2, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	f7fb fade 	bl	8000228 <__aeabi_uldivmod>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e049      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c74:	4b2e      	ldr	r3, [pc, #184]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	099b      	lsrs	r3, r3, #6
 8004c7a:	f04f 0400 	mov.w	r4, #0
 8004c7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	ea03 0501 	and.w	r5, r3, r1
 8004c8a:	ea04 0602 	and.w	r6, r4, r2
 8004c8e:	4629      	mov	r1, r5
 8004c90:	4632      	mov	r2, r6
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	f04f 0400 	mov.w	r4, #0
 8004c9a:	0154      	lsls	r4, r2, #5
 8004c9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ca0:	014b      	lsls	r3, r1, #5
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	1b49      	subs	r1, r1, r5
 8004ca8:	eb62 0206 	sbc.w	r2, r2, r6
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	f04f 0400 	mov.w	r4, #0
 8004cb4:	0194      	lsls	r4, r2, #6
 8004cb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cba:	018b      	lsls	r3, r1, #6
 8004cbc:	1a5b      	subs	r3, r3, r1
 8004cbe:	eb64 0402 	sbc.w	r4, r4, r2
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	00e2      	lsls	r2, r4, #3
 8004ccc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cd0:	00d9      	lsls	r1, r3, #3
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	195b      	adds	r3, r3, r5
 8004cd8:	eb44 0406 	adc.w	r4, r4, r6
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	02a2      	lsls	r2, r4, #10
 8004ce6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cea:	0299      	lsls	r1, r3, #10
 8004cec:	460b      	mov	r3, r1
 8004cee:	4614      	mov	r4, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f04f 0400 	mov.w	r4, #0
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4623      	mov	r3, r4
 8004cfe:	f7fb fa93 	bl	8000228 <__aeabi_uldivmod>
 8004d02:	4603      	mov	r3, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	0f1b      	lsrs	r3, r3, #28
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	613b      	str	r3, [r7, #16]
      break;
 8004d1e:	e002      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x338>)
 8004d22:	613b      	str	r3, [r7, #16]
      break;
 8004d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d26:	693b      	ldr	r3, [r7, #16]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d30:	40023800 	.word	0x40023800
 8004d34:	00f42400 	.word	0x00f42400
 8004d38:	007a1200 	.word	0x007a1200

08004d3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8083 	beq.w	8004e5c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d56:	4b95      	ldr	r3, [pc, #596]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d019      	beq.n	8004d96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d62:	4b92      	ldr	r3, [pc, #584]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d6e:	4b8f      	ldr	r3, [pc, #572]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7a:	d00c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d7c:	4b8b      	ldr	r3, [pc, #556]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d112      	bne.n	8004dae <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d88:	4b88      	ldr	r3, [pc, #544]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d94:	d10b      	bne.n	8004dae <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d96:	4b85      	ldr	r3, [pc, #532]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d05b      	beq.n	8004e5a <HAL_RCC_OscConfig+0x11e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d157      	bne.n	8004e5a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e216      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x8a>
 8004db8:	4b7c      	ldr	r3, [pc, #496]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a7b      	ldr	r2, [pc, #492]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e01d      	b.n	8004e02 <HAL_RCC_OscConfig+0xc6>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dce:	d10c      	bne.n	8004dea <HAL_RCC_OscConfig+0xae>
 8004dd0:	4b76      	ldr	r3, [pc, #472]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a75      	ldr	r2, [pc, #468]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	4b73      	ldr	r3, [pc, #460]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a72      	ldr	r2, [pc, #456]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	e00b      	b.n	8004e02 <HAL_RCC_OscConfig+0xc6>
 8004dea:	4b70      	ldr	r3, [pc, #448]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6f      	ldr	r2, [pc, #444]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4b6d      	ldr	r3, [pc, #436]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6c      	ldr	r2, [pc, #432]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d013      	beq.n	8004e32 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fd f813 	bl	8001e34 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e12:	f7fd f80f 	bl	8001e34 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	; 0x64
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e1db      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e24:	4b61      	ldr	r3, [pc, #388]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0xd6>
 8004e30:	e014      	b.n	8004e5c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e32:	f7fc ffff 	bl	8001e34 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e3a:	f7fc fffb 	bl	8001e34 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b64      	cmp	r3, #100	; 0x64
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e1c7      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4c:	4b57      	ldr	r3, [pc, #348]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f0      	bne.n	8004e3a <HAL_RCC_OscConfig+0xfe>
 8004e58:	e000      	b.n	8004e5c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d06f      	beq.n	8004f48 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e68:	4b50      	ldr	r3, [pc, #320]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d017      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e74:	4b4d      	ldr	r3, [pc, #308]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e80:	4b4a      	ldr	r3, [pc, #296]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8c:	4b47      	ldr	r3, [pc, #284]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	d11c      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e98:	4b44      	ldr	r3, [pc, #272]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d116      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea4:	4b41      	ldr	r3, [pc, #260]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_RCC_OscConfig+0x180>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e18f      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebc:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4938      	ldr	r1, [pc, #224]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed0:	e03a      	b.n	8004f48 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d020      	beq.n	8004f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eda:	4b35      	ldr	r3, [pc, #212]	; (8004fb0 <HAL_RCC_OscConfig+0x274>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fc ffa8 	bl	8001e34 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ee8:	f7fc ffa4 	bl	8001e34 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e170      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efa:	4b2c      	ldr	r3, [pc, #176]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4925      	ldr	r1, [pc, #148]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
 8004f1a:	e015      	b.n	8004f48 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1c:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <HAL_RCC_OscConfig+0x274>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fc ff87 	bl	8001e34 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f2a:	f7fc ff83 	bl	8001e34 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e14f      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f0      	bne.n	8004f2a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d037      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d016      	beq.n	8004f8a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f5c:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <HAL_RCC_OscConfig+0x278>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f62:	f7fc ff67 	bl	8001e34 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f6a:	f7fc ff63 	bl	8001e34 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e12f      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <HAL_RCC_OscConfig+0x270>)
 8004f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCC_OscConfig+0x22e>
 8004f88:	e01c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <HAL_RCC_OscConfig+0x278>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fc ff50 	bl	8001e34 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f96:	e00f      	b.n	8004fb8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f98:	f7fc ff4c 	bl	8001e34 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d908      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e118      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	42470000 	.word	0x42470000
 8004fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb8:	4b8a      	ldr	r3, [pc, #552]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8004fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e9      	bne.n	8004f98 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8097 	beq.w	8005100 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fd6:	4b83      	ldr	r3, [pc, #524]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10f      	bne.n	8005002 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	4b7f      	ldr	r3, [pc, #508]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	4a7e      	ldr	r2, [pc, #504]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff2:	4b7c      	ldr	r3, [pc, #496]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ffe:	2301      	movs	r3, #1
 8005000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005002:	4b79      	ldr	r3, [pc, #484]	; (80051e8 <HAL_RCC_OscConfig+0x4ac>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d118      	bne.n	8005040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800500e:	4b76      	ldr	r3, [pc, #472]	; (80051e8 <HAL_RCC_OscConfig+0x4ac>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a75      	ldr	r2, [pc, #468]	; (80051e8 <HAL_RCC_OscConfig+0x4ac>)
 8005014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501a:	f7fc ff0b 	bl	8001e34 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005022:	f7fc ff07 	bl	8001e34 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e0d3      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	4b6c      	ldr	r3, [pc, #432]	; (80051e8 <HAL_RCC_OscConfig+0x4ac>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d106      	bne.n	8005056 <HAL_RCC_OscConfig+0x31a>
 8005048:	4b66      	ldr	r3, [pc, #408]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	4a65      	ldr	r2, [pc, #404]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6713      	str	r3, [r2, #112]	; 0x70
 8005054:	e01c      	b.n	8005090 <HAL_RCC_OscConfig+0x354>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b05      	cmp	r3, #5
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x33c>
 800505e:	4b61      	ldr	r3, [pc, #388]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	4a60      	ldr	r2, [pc, #384]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8005064:	f043 0304 	orr.w	r3, r3, #4
 8005068:	6713      	str	r3, [r2, #112]	; 0x70
 800506a:	4b5e      	ldr	r3, [pc, #376]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	4a5d      	ldr	r2, [pc, #372]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6713      	str	r3, [r2, #112]	; 0x70
 8005076:	e00b      	b.n	8005090 <HAL_RCC_OscConfig+0x354>
 8005078:	4b5a      	ldr	r3, [pc, #360]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	4a59      	ldr	r2, [pc, #356]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6713      	str	r3, [r2, #112]	; 0x70
 8005084:	4b57      	ldr	r3, [pc, #348]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	4a56      	ldr	r2, [pc, #344]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800508a:	f023 0304 	bic.w	r3, r3, #4
 800508e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d015      	beq.n	80050c4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005098:	f7fc fecc 	bl	8001e34 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a0:	f7fc fec8 	bl	8001e34 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e092      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b6:	4b4b      	ldr	r3, [pc, #300]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ee      	beq.n	80050a0 <HAL_RCC_OscConfig+0x364>
 80050c2:	e014      	b.n	80050ee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fc feb6 	bl	8001e34 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fc feb2 	bl	8001e34 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e07c      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e2:	4b40      	ldr	r3, [pc, #256]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ee      	bne.n	80050cc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f4:	4b3b      	ldr	r3, [pc, #236]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	4a3a      	ldr	r2, [pc, #232]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d068      	beq.n	80051da <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005108:	4b36      	ldr	r3, [pc, #216]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 030c 	and.w	r3, r3, #12
 8005110:	2b08      	cmp	r3, #8
 8005112:	d060      	beq.n	80051d6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d145      	bne.n	80051a8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511c:	4b33      	ldr	r3, [pc, #204]	; (80051ec <HAL_RCC_OscConfig+0x4b0>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005122:	f7fc fe87 	bl	8001e34 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800512a:	f7fc fe83 	bl	8001e34 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e04f      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513c:	4b29      	ldr	r3, [pc, #164]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f0      	bne.n	800512a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	019b      	lsls	r3, r3, #6
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	3b01      	subs	r3, #1
 8005162:	041b      	lsls	r3, r3, #16
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	061b      	lsls	r3, r3, #24
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	071b      	lsls	r3, r3, #28
 8005174:	491b      	ldr	r1, [pc, #108]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8005176:	4313      	orrs	r3, r2
 8005178:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800517a:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <HAL_RCC_OscConfig+0x4b0>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fc fe58 	bl	8001e34 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005188:	f7fc fe54 	bl	8001e34 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e020      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x44c>
 80051a6:	e018      	b.n	80051da <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <HAL_RCC_OscConfig+0x4b0>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fc fe41 	bl	8001e34 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b6:	f7fc fe3d 	bl	8001e34 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e009      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f0      	bne.n	80051b6 <HAL_RCC_OscConfig+0x47a>
 80051d4:	e001      	b.n	80051da <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40023800 	.word	0x40023800
 80051e8:	40007000 	.word	0x40007000
 80051ec:	42470060 	.word	0x42470060

080051f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e022      	b.n	8005248 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d105      	bne.n	800521a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fc f9d9 	bl	80015cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2203      	movs	r2, #3
 800521e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f814 	bl	8005250 <HAL_SD_InitCard>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e00a      	b.n	8005248 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005250:	b5b0      	push	{r4, r5, r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af04      	add	r7, sp, #16
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005258:	2300      	movs	r3, #0
 800525a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800526c:	2376      	movs	r3, #118	; 0x76
 800526e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681d      	ldr	r5, [r3, #0]
 8005274:	466c      	mov	r4, sp
 8005276:	f107 0314 	add.w	r3, r7, #20
 800527a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800527e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005282:	f107 0308 	add.w	r3, r7, #8
 8005286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005288:	4628      	mov	r0, r5
 800528a:	f002 fcf9 	bl	8007c80 <SDIO_Init>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e031      	b.n	8005304 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80052a0:	4b1a      	ldr	r3, [pc, #104]	; (800530c <HAL_SD_InitCard+0xbc>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f002 fd31 	bl	8007d12 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80052b0:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_SD_InitCard+0xbc>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fefc 	bl	80060b4 <SD_PowerON>
 80052bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e013      	b.n	8005304 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fe1b 	bl	8005f18 <SD_InitCard>
 80052e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00b      	beq.n	8005302 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3728      	adds	r7, #40	; 0x28
 8005308:	46bd      	mov	sp, r7
 800530a:	bdb0      	pop	{r4, r5, r7, pc}
 800530c:	422580a0 	.word	0x422580a0

08005310 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b092      	sub	sp, #72	; 0x48
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800531e:	f7fc fd89 	bl	8001e34 <HAL_GetTick>
 8005322:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d107      	bne.n	8005342 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e1d7      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	f040 81ca 	bne.w	80056e4 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	441a      	add	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	429a      	cmp	r2, r3
 8005362:	d907      	bls.n	8005374 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e1be      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2203      	movs	r2, #3
 8005378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2200      	movs	r2, #0
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	2b01      	cmp	r3, #1
 800538a:	d002      	beq.n	8005392 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	025b      	lsls	r3, r3, #9
 8005390:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800539a:	4618      	mov	r0, r3
 800539c:	f002 fd4c 	bl	8007e38 <SDMMC_CmdBlockLength>
 80053a0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80053a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00f      	beq.n	80053c8 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a9a      	ldr	r2, [pc, #616]	; (8005618 <HAL_SD_ReadBlocks+0x308>)
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b6:	431a      	orrs	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e194      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053cc:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	025b      	lsls	r3, r3, #9
 80053d2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80053d4:	2390      	movs	r3, #144	; 0x90
 80053d6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80053d8:	2302      	movs	r3, #2
 80053da:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80053dc:	2300      	movs	r3, #0
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f107 0214 	add.w	r2, r7, #20
 80053ec:	4611      	mov	r1, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f002 fcf6 	bl	8007de0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d90a      	bls.n	8005410 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2202      	movs	r2, #2
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005406:	4618      	mov	r0, r3
 8005408:	f002 fd5a 	bl	8007ec0 <SDMMC_CmdReadMultiBlock>
 800540c:	6478      	str	r0, [r7, #68]	; 0x44
 800540e:	e009      	b.n	8005424 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800541c:	4618      	mov	r0, r3
 800541e:	f002 fd2d 	bl	8007e7c <SDMMC_CmdReadSingleBlock>
 8005422:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005426:	2b00      	cmp	r3, #0
 8005428:	d012      	beq.n	8005450 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a7a      	ldr	r2, [pc, #488]	; (8005618 <HAL_SD_ReadBlocks+0x308>)
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005438:	431a      	orrs	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e150      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005454:	e061      	b.n	800551a <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d03c      	beq.n	80054de <HAL_SD_ReadBlocks+0x1ce>
 8005464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d039      	beq.n	80054de <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800546a:	2300      	movs	r3, #0
 800546c:	643b      	str	r3, [r7, #64]	; 0x40
 800546e:	e033      	b.n	80054d8 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f002 fc2e 	bl	8007cd6 <SDIO_ReadFIFO>
 800547a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	b2da      	uxtb	r2, r3
 8005480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005482:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005486:	3301      	adds	r3, #1
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548c:	3b01      	subs	r3, #1
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	b2da      	uxtb	r2, r3
 8005496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005498:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	3301      	adds	r3, #1
 800549e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a2:	3b01      	subs	r3, #1
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b2:	3301      	adds	r3, #1
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b8:	3b01      	subs	r3, #1
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	0e1b      	lsrs	r3, r3, #24
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	3301      	adds	r3, #1
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80054cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ce:	3b01      	subs	r3, #1
 80054d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80054d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d4:	3301      	adds	r3, #1
 80054d6:	643b      	str	r3, [r7, #64]	; 0x40
 80054d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054da:	2b07      	cmp	r3, #7
 80054dc:	d9c8      	bls.n	8005470 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80054de:	f7fc fca9 	bl	8001e34 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d902      	bls.n	80054f4 <HAL_SD_ReadBlocks+0x1e4>
 80054ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d112      	bne.n	800551a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a47      	ldr	r2, [pc, #284]	; (8005618 <HAL_SD_ReadBlocks+0x308>)
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e0eb      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005524:	2b00      	cmp	r3, #0
 8005526:	d096      	beq.n	8005456 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d022      	beq.n	800557c <HAL_SD_ReadBlocks+0x26c>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d91f      	bls.n	800557c <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	2b03      	cmp	r3, #3
 8005542:	d01b      	beq.n	800557c <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f002 fd1f 	bl	8007f8c <SDMMC_CmdStopTransfer>
 800554e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005552:	2b00      	cmp	r3, #0
 8005554:	d012      	beq.n	800557c <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2f      	ldr	r2, [pc, #188]	; (8005618 <HAL_SD_ReadBlocks+0x308>)
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005564:	431a      	orrs	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0ba      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d012      	beq.n	80055b0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a22      	ldr	r2, [pc, #136]	; (8005618 <HAL_SD_ReadBlocks+0x308>)
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	f043 0208 	orr.w	r2, r3, #8
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0a0      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d012      	beq.n	80055e4 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a15      	ldr	r2, [pc, #84]	; (8005618 <HAL_SD_ReadBlocks+0x308>)
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	f043 0202 	orr.w	r2, r3, #2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e086      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d063      	beq.n	80056ba <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a08      	ldr	r2, [pc, #32]	; (8005618 <HAL_SD_ReadBlocks+0x308>)
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e06c      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
 8005618:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f002 fb58 	bl	8007cd6 <SDIO_ReadFIFO>
 8005626:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	b2da      	uxtb	r2, r3
 800562c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	3301      	adds	r3, #1
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005638:	3b01      	subs	r3, #1
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	3301      	adds	r3, #1
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800564c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564e:	3b01      	subs	r3, #1
 8005650:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	b2da      	uxtb	r2, r3
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	3301      	adds	r3, #1
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005664:	3b01      	subs	r3, #1
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	0e1b      	lsrs	r3, r3, #24
 800566c:	b2da      	uxtb	r2, r3
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	3301      	adds	r3, #1
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567a:	3b01      	subs	r3, #1
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800567e:	f7fc fbd9 	bl	8001e34 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800568a:	429a      	cmp	r2, r3
 800568c:	d902      	bls.n	8005694 <HAL_SD_ReadBlocks+0x384>
 800568e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005690:	2b00      	cmp	r3, #0
 8005692:	d112      	bne.n	80056ba <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a18      	ldr	r2, [pc, #96]	; (80056fc <HAL_SD_ReadBlocks+0x3ec>)
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e01b      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_SD_ReadBlocks+0x3be>
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1a6      	bne.n	800561c <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e006      	b.n	80056f2 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3748      	adds	r7, #72	; 0x48
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	004005ff 	.word	0x004005ff

08005700 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b092      	sub	sp, #72	; 0x48
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800570e:	f7fc fb91 	bl	8001e34 <HAL_GetTick>
 8005712:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d107      	bne.n	8005732 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e182      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b01      	cmp	r3, #1
 800573c:	f040 8175 	bne.w	8005a2a <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	441a      	add	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005750:	429a      	cmp	r2, r3
 8005752:	d907      	bls.n	8005764 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e169      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2203      	movs	r2, #3
 8005768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2200      	movs	r2, #0
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005778:	2b01      	cmp	r3, #1
 800577a:	d002      	beq.n	8005782 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	025b      	lsls	r3, r3, #9
 8005780:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800578a:	4618      	mov	r0, r3
 800578c:	f002 fb54 	bl	8007e38 <SDMMC_CmdBlockLength>
 8005790:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00f      	beq.n	80057b8 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a9c      	ldr	r2, [pc, #624]	; (8005a10 <HAL_SD_WriteBlocks+0x310>)
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e13f      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057bc:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	025b      	lsls	r3, r3, #9
 80057c2:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80057c4:	2390      	movs	r3, #144	; 0x90
 80057c6:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80057c8:	2300      	movs	r3, #0
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80057d0:	2301      	movs	r3, #1
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f107 0218 	add.w	r2, r7, #24
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f002 fafe 	bl	8007de0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d90a      	bls.n	8005800 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057f6:	4618      	mov	r0, r3
 80057f8:	f002 fba6 	bl	8007f48 <SDMMC_CmdWriteMultiBlock>
 80057fc:	6478      	str	r0, [r7, #68]	; 0x44
 80057fe:	e009      	b.n	8005814 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2210      	movs	r2, #16
 8005804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800580c:	4618      	mov	r0, r3
 800580e:	f002 fb79 	bl	8007f04 <SDMMC_CmdWriteSingleBlock>
 8005812:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005816:	2b00      	cmp	r3, #0
 8005818:	d012      	beq.n	8005840 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a7c      	ldr	r2, [pc, #496]	; (8005a10 <HAL_SD_WriteBlocks+0x310>)
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005828:	431a      	orrs	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0fb      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005844:	e065      	b.n	8005912 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d040      	beq.n	80058d6 <HAL_SD_WriteBlocks+0x1d6>
 8005854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d03d      	beq.n	80058d6 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800585a:	2300      	movs	r3, #0
 800585c:	643b      	str	r3, [r7, #64]	; 0x40
 800585e:	e037      	b.n	80058d0 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	3301      	adds	r3, #1
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800586c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586e:	3b01      	subs	r3, #1
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800587e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005880:	3301      	adds	r3, #1
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005886:	3b01      	subs	r3, #1
 8005888:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	041a      	lsls	r2, r3, #16
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	3301      	adds	r3, #1
 800589a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800589c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589e:	3b01      	subs	r3, #1
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	061a      	lsls	r2, r3, #24
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	3301      	adds	r3, #1
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b6:	3b01      	subs	r3, #1
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f107 0214 	add.w	r2, r7, #20
 80058c2:	4611      	mov	r1, r2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f002 fa13 	bl	8007cf0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80058ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058cc:	3301      	adds	r3, #1
 80058ce:	643b      	str	r3, [r7, #64]	; 0x40
 80058d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d2:	2b07      	cmp	r3, #7
 80058d4:	d9c4      	bls.n	8005860 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80058d6:	f7fc faad 	bl	8001e34 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d902      	bls.n	80058ec <HAL_SD_WriteBlocks+0x1ec>
 80058e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d112      	bne.n	8005912 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a47      	ldr	r2, [pc, #284]	; (8005a10 <HAL_SD_WriteBlocks+0x310>)
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058fa:	431a      	orrs	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e092      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800591c:	2b00      	cmp	r3, #0
 800591e:	d092      	beq.n	8005846 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d022      	beq.n	8005974 <HAL_SD_WriteBlocks+0x274>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d91f      	bls.n	8005974 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005938:	2b03      	cmp	r3, #3
 800593a:	d01b      	beq.n	8005974 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f002 fb23 	bl	8007f8c <SDMMC_CmdStopTransfer>
 8005946:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800594a:	2b00      	cmp	r3, #0
 800594c:	d012      	beq.n	8005974 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2f      	ldr	r2, [pc, #188]	; (8005a10 <HAL_SD_WriteBlocks+0x310>)
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595c:	431a      	orrs	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e061      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d012      	beq.n	80059a8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a22      	ldr	r2, [pc, #136]	; (8005a10 <HAL_SD_WriteBlocks+0x310>)
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	f043 0208 	orr.w	r2, r3, #8
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e047      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d012      	beq.n	80059dc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <HAL_SD_WriteBlocks+0x310>)
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	f043 0202 	orr.w	r2, r3, #2
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e02d      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d014      	beq.n	8005a14 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <HAL_SD_WriteBlocks+0x310>)
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	f043 0210 	orr.w	r2, r3, #16
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e013      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
 8005a10:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e006      	b.n	8005a38 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
  }
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3748      	adds	r7, #72	; 0x48
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4e:	0f9b      	lsrs	r3, r3, #30
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5a:	0e9b      	lsrs	r3, r3, #26
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6c:	0e1b      	lsrs	r3, r3, #24
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7e:	0c1b      	lsrs	r3, r3, #16
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa0:	0d1b      	lsrs	r3, r3, #20
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005abe:	0bdb      	lsrs	r3, r3, #15
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad0:	0b9b      	lsrs	r3, r3, #14
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae2:	0b5b      	lsrs	r3, r3, #13
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af4:	0b1b      	lsrs	r3, r3, #12
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2200      	movs	r2, #0
 8005b06:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d163      	bne.n	8005bd8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b14:	009a      	lsls	r2, r3, #2
 8005b16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b20:	0f92      	lsrs	r2, r2, #30
 8005b22:	431a      	orrs	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2c:	0edb      	lsrs	r3, r3, #27
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3e:	0e1b      	lsrs	r3, r3, #24
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b50:	0d5b      	lsrs	r3, r3, #21
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b62:	0c9b      	lsrs	r3, r3, #18
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b74:	0bdb      	lsrs	r3, r3, #15
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	7e1b      	ldrb	r3, [r3, #24]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	3302      	adds	r3, #2
 8005b98:	2201      	movs	r2, #1
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005ba2:	fb02 f203 	mul.w	r2, r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	7a1b      	ldrb	r3, [r3, #8]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005bc4:	0a52      	lsrs	r2, r2, #9
 8005bc6:	fb02 f203 	mul.w	r2, r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd4:	661a      	str	r2, [r3, #96]	; 0x60
 8005bd6:	e031      	b.n	8005c3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d11d      	bne.n	8005c1c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be4:	041b      	lsls	r3, r3, #16
 8005be6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bee:	0c1b      	lsrs	r3, r3, #16
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	029a      	lsls	r2, r3, #10
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	661a      	str	r2, [r3, #96]	; 0x60
 8005c1a:	e00f      	b.n	8005c3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a58      	ldr	r2, [pc, #352]	; (8005d84 <HAL_SD_GetCardCSD+0x344>)
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e09d      	b.n	8005d78 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c40:	0b9b      	lsrs	r3, r3, #14
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c52:	09db      	lsrs	r3, r3, #7
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c74:	0fdb      	lsrs	r3, r3, #31
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c80:	0f5b      	lsrs	r3, r3, #29
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	0e9b      	lsrs	r3, r3, #26
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	0d9b      	lsrs	r3, r3, #22
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	0d5b      	lsrs	r3, r3, #21
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	0c1b      	lsrs	r3, r3, #16
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	0bdb      	lsrs	r3, r3, #15
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	0b9b      	lsrs	r3, r3, #14
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	0b5b      	lsrs	r3, r3, #13
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	0b1b      	lsrs	r3, r3, #12
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	0a9b      	lsrs	r3, r3, #10
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	004005ff 	.word	0x004005ff

08005d88 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005de0:	b5b0      	push	{r4, r5, r7, lr}
 8005de2:	b08e      	sub	sp, #56	; 0x38
 8005de4:	af04      	add	r7, sp, #16
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2203      	movs	r2, #3
 8005dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d02e      	beq.n	8005e58 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e00:	d106      	bne.n	8005e10 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e0e:	e029      	b.n	8005e64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e16:	d10a      	bne.n	8005e2e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fa01 	bl	8006220 <SD_WideBus_Enable>
 8005e1e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e2c:	e01a      	b.n	8005e64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa3e 	bl	80062b6 <SD_WideBus_Disable>
 8005e3a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38
 8005e48:	e00c      	b.n	8005e64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
 8005e56:	e005      	b.n	8005e64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a18      	ldr	r2, [pc, #96]	; (8005ed4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e024      	b.n	8005eca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681d      	ldr	r5, [r3, #0]
 8005ea6:	466c      	mov	r4, sp
 8005ea8:	f107 0318 	add.w	r3, r7, #24
 8005eac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005eb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f001 fee0 	bl	8007c80 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3728      	adds	r7, #40	; 0x28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	004005ff 	.word	0x004005ff

08005ed8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ee4:	f107 030c 	add.w	r3, r7, #12
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f970 	bl	80061d0 <SD_SendStatus>
 8005ef0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	0a5b      	lsrs	r3, r3, #9
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005f0e:	693b      	ldr	r3, [r7, #16]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f18:	b5b0      	push	{r4, r5, r7, lr}
 8005f1a:	b094      	sub	sp, #80	; 0x50
 8005f1c:	af04      	add	r7, sp, #16
 8005f1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005f20:	2301      	movs	r3, #1
 8005f22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 ff01 	bl	8007d30 <SDIO_GetPowerState>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f38:	e0b7      	b.n	80060aa <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d02f      	beq.n	8005fa2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f002 f92a 	bl	80081a0 <SDMMC_CmdSendCID>
 8005f4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <SD_InitCard+0x40>
    {
      return errorstate;
 8005f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f56:	e0a8      	b.n	80060aa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 ff2b 	bl	8007dba <SDIO_GetResponse>
 8005f64:	4602      	mov	r2, r0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2104      	movs	r1, #4
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 ff22 	bl	8007dba <SDIO_GetResponse>
 8005f76:	4602      	mov	r2, r0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2108      	movs	r1, #8
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 ff19 	bl	8007dba <SDIO_GetResponse>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	210c      	movs	r1, #12
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 ff10 	bl	8007dba <SDIO_GetResponse>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d00d      	beq.n	8005fc6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f107 020e 	add.w	r2, r7, #14
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f002 f930 	bl	800821a <SDMMC_CmdSetRelAdd>
 8005fba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <SD_InitCard+0xae>
    {
      return errorstate;
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc4:	e071      	b.n	80060aa <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d036      	beq.n	800603c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005fce:	89fb      	ldrh	r3, [r7, #14]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f002 f8fa 	bl	80081dc <SDMMC_CmdSendCSD>
 8005fe8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff2:	e05a      	b.n	80060aa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f001 fedd 	bl	8007dba <SDIO_GetResponse>
 8006000:	4602      	mov	r2, r0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2104      	movs	r1, #4
 800600c:	4618      	mov	r0, r3
 800600e:	f001 fed4 	bl	8007dba <SDIO_GetResponse>
 8006012:	4602      	mov	r2, r0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2108      	movs	r1, #8
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fecb 	bl	8007dba <SDIO_GetResponse>
 8006024:	4602      	mov	r2, r0
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	210c      	movs	r1, #12
 8006030:	4618      	mov	r0, r3
 8006032:	f001 fec2 	bl	8007dba <SDIO_GetResponse>
 8006036:	4602      	mov	r2, r0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2104      	movs	r1, #4
 8006042:	4618      	mov	r0, r3
 8006044:	f001 feb9 	bl	8007dba <SDIO_GetResponse>
 8006048:	4603      	mov	r3, r0
 800604a:	0d1a      	lsrs	r2, r3, #20
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006050:	f107 0310 	add.w	r3, r7, #16
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fcf2 	bl	8005a40 <HAL_SD_GetCardCSD>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006062:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006066:	e020      	b.n	80060aa <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6819      	ldr	r1, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	f04f 0400 	mov.w	r4, #0
 8006076:	461a      	mov	r2, r3
 8006078:	4623      	mov	r3, r4
 800607a:	4608      	mov	r0, r1
 800607c:	f001 ffa8 	bl	8007fd0 <SDMMC_CmdSelDesel>
 8006080:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <SD_InitCard+0x174>
  {
    return errorstate;
 8006088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608a:	e00e      	b.n	80060aa <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681d      	ldr	r5, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	466c      	mov	r4, sp
 8006094:	f103 0210 	add.w	r2, r3, #16
 8006098:	ca07      	ldmia	r2, {r0, r1, r2}
 800609a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800609e:	3304      	adds	r3, #4
 80060a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060a2:	4628      	mov	r0, r5
 80060a4:	f001 fdec 	bl	8007c80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3740      	adds	r7, #64	; 0x40
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080060b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	2300      	movs	r3, #0
 80060c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 ffa2 	bl	8008016 <SDMMC_CmdGoIdleState>
 80060d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <SD_PowerON+0x2a>
  {
    return errorstate;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	e072      	b.n	80061c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 ffb5 	bl	8008052 <SDMMC_CmdOperCond>
 80060e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 ff8b 	bl	8008016 <SDMMC_CmdGoIdleState>
 8006100:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	e05b      	b.n	80061c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006116:	2b01      	cmp	r3, #1
 8006118:	d137      	bne.n	800618a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f001 ffb5 	bl	8008090 <SDMMC_CmdAppCommand>
 8006126:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d02d      	beq.n	800618a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800612e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006132:	e047      	b.n	80061c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f001 ffa8 	bl	8008090 <SDMMC_CmdAppCommand>
 8006140:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <SD_PowerON+0x98>
    {
      return errorstate;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	e03b      	b.n	80061c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	491e      	ldr	r1, [pc, #120]	; (80061cc <SD_PowerON+0x118>)
 8006152:	4618      	mov	r0, r3
 8006154:	f001 ffbe 	bl	80080d4 <SDMMC_CmdAppOperCommand>
 8006158:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006160:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006164:	e02e      	b.n	80061c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f001 fe24 	bl	8007dba <SDIO_GetResponse>
 8006172:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	0fdb      	lsrs	r3, r3, #31
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <SD_PowerON+0xcc>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <SD_PowerON+0xce>
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]

    count++;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	3301      	adds	r3, #1
 8006188:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006190:	4293      	cmp	r3, r2
 8006192:	d802      	bhi.n	800619a <SD_PowerON+0xe6>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0cc      	beq.n	8006134 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d902      	bls.n	80061aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80061a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061a8:	e00c      	b.n	80061c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	645a      	str	r2, [r3, #68]	; 0x44
 80061ba:	e002      	b.n	80061c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	c1100000 	.word	0xc1100000

080061d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d102      	bne.n	80061e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80061e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061e4:	e018      	b.n	8006218 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f002 f832 	bl	800825c <SDMMC_CmdSendStatus>
 80061f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	e009      	b.n	8006218 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f001 fdd5 	bl	8007dba <SDIO_GetResponse>
 8006210:	4602      	mov	r2, r0
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fdbf 	bl	8007dba <SDIO_GetResponse>
 800623c:	4603      	mov	r3, r0
 800623e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006246:	d102      	bne.n	800624e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800624c:	e02f      	b.n	80062ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800624e:	f107 030c 	add.w	r3, r7, #12
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f879 	bl	800634c <SD_FindSCR>
 800625a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	e023      	b.n	80062ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01c      	beq.n	80062aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	041b      	lsls	r3, r3, #16
 800627a:	4619      	mov	r1, r3
 800627c:	4610      	mov	r0, r2
 800627e:	f001 ff07 	bl	8008090 <SDMMC_CmdAppCommand>
 8006282:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	e00f      	b.n	80062ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2102      	movs	r1, #2
 8006294:	4618      	mov	r0, r3
 8006296:	f001 ff40 	bl	800811a <SDMMC_CmdBusWidth>
 800629a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	e003      	b.n	80062ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	e001      	b.n	80062ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b086      	sub	sp, #24
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 fd74 	bl	8007dba <SDIO_GetResponse>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062dc:	d102      	bne.n	80062e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80062de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062e2:	e02f      	b.n	8006344 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f82e 	bl	800634c <SD_FindSCR>
 80062f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	e023      	b.n	8006344 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01c      	beq.n	8006340 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f001 febc 	bl	8008090 <SDMMC_CmdAppCommand>
 8006318:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	e00f      	b.n	8006344 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fef5 	bl	800811a <SDMMC_CmdBusWidth>
 8006330:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	e003      	b.n	8006344 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800633c:	2300      	movs	r3, #0
 800633e:	e001      	b.n	8006344 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006340:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b08f      	sub	sp, #60	; 0x3c
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006356:	f7fb fd6d 	bl	8001e34 <HAL_GetTick>
 800635a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006360:	2300      	movs	r3, #0
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2108      	movs	r1, #8
 8006372:	4618      	mov	r0, r3
 8006374:	f001 fd60 	bl	8007e38 <SDMMC_CmdBlockLength>
 8006378:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	e0a9      	b.n	80064d8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	4619      	mov	r1, r3
 8006390:	4610      	mov	r0, r2
 8006392:	f001 fe7d 	bl	8008090 <SDMMC_CmdAppCommand>
 8006396:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	e09a      	b.n	80064d8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80063a8:	2308      	movs	r3, #8
 80063aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80063ac:	2330      	movs	r3, #48	; 0x30
 80063ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80063b0:	2302      	movs	r3, #2
 80063b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80063b8:	2301      	movs	r3, #1
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f107 0210 	add.w	r2, r7, #16
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 fd0a 	bl	8007de0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 fec4 	bl	800815e <SDMMC_CmdSendSCR>
 80063d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d022      	beq.n	8006424 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	e07a      	b.n	80064d8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	f107 0208 	add.w	r2, r7, #8
 80063fc:	18d4      	adds	r4, r2, r3
 80063fe:	4608      	mov	r0, r1
 8006400:	f001 fc69 	bl	8007cd6 <SDIO_ReadFIFO>
 8006404:	4603      	mov	r3, r0
 8006406:	6023      	str	r3, [r4, #0]
      index++;
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	3301      	adds	r3, #1
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800640e:	f7fb fd11 	bl	8001e34 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800641c:	d102      	bne.n	8006424 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800641e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006422:	e059      	b.n	80064d8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800642a:	f240 432a 	movw	r3, #1066	; 0x42a
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0d6      	beq.n	80063e2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2208      	movs	r2, #8
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800644a:	2308      	movs	r3, #8
 800644c:	e044      	b.n	80064d8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2202      	movs	r2, #2
 8006462:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006464:	2302      	movs	r3, #2
 8006466:	e037      	b.n	80064d8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2220      	movs	r2, #32
 800647c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800647e:	2320      	movs	r3, #32
 8006480:	e02a      	b.n	80064d8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f240 523a 	movw	r2, #1338	; 0x53a
 800648a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	061a      	lsls	r2, r3, #24
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006498:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80064a2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	0e1b      	lsrs	r3, r3, #24
 80064a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	601a      	str	r2, [r3, #0]
    scr++;
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	3304      	adds	r3, #4
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	061a      	lsls	r2, r3, #24
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80064ca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	0e1b      	lsrs	r3, r3, #24
 80064d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	373c      	adds	r7, #60	; 0x3c
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}

080064e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e056      	b.n	80065a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fb f8e5 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2202      	movs	r2, #2
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006528:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	ea42 0103 	orr.w	r1, r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	0c1b      	lsrs	r3, r3, #16
 8006570:	f003 0104 	and.w	r1, r3, #4
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	69da      	ldr	r2, [r3, #28]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800658e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e01d      	b.n	80065f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fb f8cc 	bl	800176c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f000 fbac 	bl	8006d44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b06      	cmp	r3, #6
 8006626:	d007      	beq.n	8006638 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e01d      	b.n	8006694 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f815 	bl	800669c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2202      	movs	r2, #2
 8006676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f000 fb5d 	bl	8006d44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e083      	b.n	80067cc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fb f8f1 	bl	80018c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f4:	f023 0307 	bic.w	r3, r3, #7
 80066f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f000 fb1d 	bl	8006d44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	4313      	orrs	r3, r2
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006750:	f023 030c 	bic.w	r3, r3, #12
 8006754:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800675c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	4313      	orrs	r3, r2
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	011a      	lsls	r2, r3, #4
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	031b      	lsls	r3, r3, #12
 8006780:	4313      	orrs	r3, r2
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800678e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	4313      	orrs	r3, r2
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d122      	bne.n	8006830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d11b      	bne.n	8006830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0202 	mvn.w	r2, #2
 8006800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fa75 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 800681c:	e005      	b.n	800682a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa67 	bl	8006cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fa78 	bl	8006d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b04      	cmp	r3, #4
 800683c:	d122      	bne.n	8006884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b04      	cmp	r3, #4
 800684a:	d11b      	bne.n	8006884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0204 	mvn.w	r2, #4
 8006854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa4b 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 8006870:	e005      	b.n	800687e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa3d 	bl	8006cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fa4e 	bl	8006d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b08      	cmp	r3, #8
 8006890:	d122      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b08      	cmp	r3, #8
 800689e:	d11b      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0208 	mvn.w	r2, #8
 80068a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2204      	movs	r2, #4
 80068ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa21 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 80068c4:	e005      	b.n	80068d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fa13 	bl	8006cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fa24 	bl	8006d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d122      	bne.n	800692c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	d11b      	bne.n	800692c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0210 	mvn.w	r2, #16
 80068fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2208      	movs	r2, #8
 8006902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9f7 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f9e9 	bl	8006cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f9fa 	bl	8006d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b01      	cmp	r3, #1
 8006938:	d10e      	bne.n	8006958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b01      	cmp	r3, #1
 8006946:	d107      	bne.n	8006958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0201 	mvn.w	r2, #1
 8006950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f9c3 	bl	8006cde <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006962:	2b80      	cmp	r3, #128	; 0x80
 8006964:	d10e      	bne.n	8006984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006970:	2b80      	cmp	r3, #128	; 0x80
 8006972:	d107      	bne.n	8006984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800697c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fda2 	bl	80074c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	d10e      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d107      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f9bf 	bl	8006d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d10e      	bne.n	80069dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d107      	bne.n	80069dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0220 	mvn.w	r2, #32
 80069d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fd6c 	bl	80074b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80069fa:	2302      	movs	r3, #2
 80069fc:	e0b4      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x184>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b0c      	cmp	r3, #12
 8006a12:	f200 809f 	bhi.w	8006b54 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a51 	.word	0x08006a51
 8006a20:	08006b55 	.word	0x08006b55
 8006a24:	08006b55 	.word	0x08006b55
 8006a28:	08006b55 	.word	0x08006b55
 8006a2c:	08006a91 	.word	0x08006a91
 8006a30:	08006b55 	.word	0x08006b55
 8006a34:	08006b55 	.word	0x08006b55
 8006a38:	08006b55 	.word	0x08006b55
 8006a3c:	08006ad3 	.word	0x08006ad3
 8006a40:	08006b55 	.word	0x08006b55
 8006a44:	08006b55 	.word	0x08006b55
 8006a48:	08006b55 	.word	0x08006b55
 8006a4c:	08006b13 	.word	0x08006b13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fa14 	bl	8006e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0208 	orr.w	r2, r2, #8
 8006a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0204 	bic.w	r2, r2, #4
 8006a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6999      	ldr	r1, [r3, #24]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	691a      	ldr	r2, [r3, #16]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	619a      	str	r2, [r3, #24]
      break;
 8006a8e:	e062      	b.n	8006b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fa64 	bl	8006f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6999      	ldr	r1, [r3, #24]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	021a      	lsls	r2, r3, #8
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	619a      	str	r2, [r3, #24]
      break;
 8006ad0:	e041      	b.n	8006b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fab9 	bl	8007050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0208 	orr.w	r2, r2, #8
 8006aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0204 	bic.w	r2, r2, #4
 8006afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69d9      	ldr	r1, [r3, #28]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	61da      	str	r2, [r3, #28]
      break;
 8006b10:	e021      	b.n	8006b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fb0d 	bl	8007138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69d9      	ldr	r1, [r3, #28]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	021a      	lsls	r2, r3, #8
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	61da      	str	r2, [r3, #28]
      break;
 8006b52:	e000      	b.n	8006b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006b54:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_TIM_ConfigClockSource+0x18>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e0a6      	b.n	8006cd6 <HAL_TIM_ConfigClockSource+0x166>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d067      	beq.n	8006c90 <HAL_TIM_ConfigClockSource+0x120>
 8006bc0:	2b40      	cmp	r3, #64	; 0x40
 8006bc2:	d80b      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x6c>
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d073      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0x140>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d802      	bhi.n	8006bd2 <HAL_TIM_ConfigClockSource+0x62>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d06f      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006bd0:	e078      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d06c      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0x140>
 8006bd6:	2b30      	cmp	r3, #48	; 0x30
 8006bd8:	d06a      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006bda:	e073      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bdc:	2b70      	cmp	r3, #112	; 0x70
 8006bde:	d00d      	beq.n	8006bfc <HAL_TIM_ConfigClockSource+0x8c>
 8006be0:	2b70      	cmp	r3, #112	; 0x70
 8006be2:	d804      	bhi.n	8006bee <HAL_TIM_ConfigClockSource+0x7e>
 8006be4:	2b50      	cmp	r3, #80	; 0x50
 8006be6:	d033      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0xe0>
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d041      	beq.n	8006c70 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006bec:	e06a      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	d066      	beq.n	8006cc2 <HAL_TIM_ConfigClockSource+0x152>
 8006bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf8:	d017      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006bfa:	e063      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6899      	ldr	r1, [r3, #8]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f000 fb64 	bl	80072d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	609a      	str	r2, [r3, #8]
      break;
 8006c28:	e04c      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6899      	ldr	r1, [r3, #8]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f000 fb4d 	bl	80072d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c4c:	609a      	str	r2, [r3, #8]
      break;
 8006c4e:	e039      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	6859      	ldr	r1, [r3, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f000 fac1 	bl	80071e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2150      	movs	r1, #80	; 0x50
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fb1a 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006c6e:	e029      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6859      	ldr	r1, [r3, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f000 fae0 	bl	8007242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2160      	movs	r1, #96	; 0x60
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fb0a 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006c8e:	e019      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	6859      	ldr	r1, [r3, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f000 faa1 	bl	80071e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2140      	movs	r1, #64	; 0x40
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fafa 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006cae:	e009      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f000 faf1 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006cc0:	e000      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a40      	ldr	r2, [pc, #256]	; (8006e58 <TIM_Base_SetConfig+0x114>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d013      	beq.n	8006d84 <TIM_Base_SetConfig+0x40>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d62:	d00f      	beq.n	8006d84 <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a3d      	ldr	r2, [pc, #244]	; (8006e5c <TIM_Base_SetConfig+0x118>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a3c      	ldr	r2, [pc, #240]	; (8006e60 <TIM_Base_SetConfig+0x11c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a3b      	ldr	r2, [pc, #236]	; (8006e64 <TIM_Base_SetConfig+0x120>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3a      	ldr	r2, [pc, #232]	; (8006e68 <TIM_Base_SetConfig+0x124>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d108      	bne.n	8006d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2f      	ldr	r2, [pc, #188]	; (8006e58 <TIM_Base_SetConfig+0x114>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d02b      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da4:	d027      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2c      	ldr	r2, [pc, #176]	; (8006e5c <TIM_Base_SetConfig+0x118>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d023      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a2b      	ldr	r2, [pc, #172]	; (8006e60 <TIM_Base_SetConfig+0x11c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01f      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2a      	ldr	r2, [pc, #168]	; (8006e64 <TIM_Base_SetConfig+0x120>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01b      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a29      	ldr	r2, [pc, #164]	; (8006e68 <TIM_Base_SetConfig+0x124>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d017      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a28      	ldr	r2, [pc, #160]	; (8006e6c <TIM_Base_SetConfig+0x128>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a27      	ldr	r2, [pc, #156]	; (8006e70 <TIM_Base_SetConfig+0x12c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00f      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a26      	ldr	r2, [pc, #152]	; (8006e74 <TIM_Base_SetConfig+0x130>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00b      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a25      	ldr	r2, [pc, #148]	; (8006e78 <TIM_Base_SetConfig+0x134>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d007      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a24      	ldr	r2, [pc, #144]	; (8006e7c <TIM_Base_SetConfig+0x138>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d003      	beq.n	8006df6 <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a23      	ldr	r2, [pc, #140]	; (8006e80 <TIM_Base_SetConfig+0x13c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d108      	bne.n	8006e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a0a      	ldr	r2, [pc, #40]	; (8006e58 <TIM_Base_SetConfig+0x114>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <TIM_Base_SetConfig+0xf8>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <TIM_Base_SetConfig+0x124>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d103      	bne.n	8006e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	615a      	str	r2, [r3, #20]
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40010000 	.word	0x40010000
 8006e5c:	40000400 	.word	0x40000400
 8006e60:	40000800 	.word	0x40000800
 8006e64:	40000c00 	.word	0x40000c00
 8006e68:	40010400 	.word	0x40010400
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40014400 	.word	0x40014400
 8006e74:	40014800 	.word	0x40014800
 8006e78:	40001800 	.word	0x40001800
 8006e7c:	40001c00 	.word	0x40001c00
 8006e80:	40002000 	.word	0x40002000

08006e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f023 0201 	bic.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f023 0302 	bic.w	r3, r3, #2
 8006ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a20      	ldr	r2, [pc, #128]	; (8006f5c <TIM_OC1_SetConfig+0xd8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d003      	beq.n	8006ee8 <TIM_OC1_SetConfig+0x64>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a1f      	ldr	r2, [pc, #124]	; (8006f60 <TIM_OC1_SetConfig+0xdc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d10c      	bne.n	8006f02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f023 0308 	bic.w	r3, r3, #8
 8006eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f023 0304 	bic.w	r3, r3, #4
 8006f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <TIM_OC1_SetConfig+0xd8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_OC1_SetConfig+0x8e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <TIM_OC1_SetConfig+0xdc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d111      	bne.n	8006f36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	621a      	str	r2, [r3, #32]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40010400 	.word	0x40010400

08006f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0210 	bic.w	r2, r3, #16
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f023 0320 	bic.w	r3, r3, #32
 8006fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a22      	ldr	r2, [pc, #136]	; (8007048 <TIM_OC2_SetConfig+0xe4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC2_SetConfig+0x68>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	; (800704c <TIM_OC2_SetConfig+0xe8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d10d      	bne.n	8006fe8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a17      	ldr	r2, [pc, #92]	; (8007048 <TIM_OC2_SetConfig+0xe4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d003      	beq.n	8006ff8 <TIM_OC2_SetConfig+0x94>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a16      	ldr	r2, [pc, #88]	; (800704c <TIM_OC2_SetConfig+0xe8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d113      	bne.n	8007020 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40010000 	.word	0x40010000
 800704c:	40010400 	.word	0x40010400

08007050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0303 	bic.w	r3, r3, #3
 8007086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a21      	ldr	r2, [pc, #132]	; (8007130 <TIM_OC3_SetConfig+0xe0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_OC3_SetConfig+0x66>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a20      	ldr	r2, [pc, #128]	; (8007134 <TIM_OC3_SetConfig+0xe4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d10d      	bne.n	80070d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a16      	ldr	r2, [pc, #88]	; (8007130 <TIM_OC3_SetConfig+0xe0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d003      	beq.n	80070e2 <TIM_OC3_SetConfig+0x92>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a15      	ldr	r2, [pc, #84]	; (8007134 <TIM_OC3_SetConfig+0xe4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d113      	bne.n	800710a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	621a      	str	r2, [r3, #32]
}
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	40010000 	.word	0x40010000
 8007134:	40010400 	.word	0x40010400

08007138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	031b      	lsls	r3, r3, #12
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4313      	orrs	r3, r2
 800718e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a12      	ldr	r2, [pc, #72]	; (80071dc <TIM_OC4_SetConfig+0xa4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_OC4_SetConfig+0x68>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a11      	ldr	r2, [pc, #68]	; (80071e0 <TIM_OC4_SetConfig+0xa8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d109      	bne.n	80071b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	019b      	lsls	r3, r3, #6
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	621a      	str	r2, [r3, #32]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40010400 	.word	0x40010400

080071e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0201 	bic.w	r2, r3, #1
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800720e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f023 030a 	bic.w	r3, r3, #10
 8007220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4313      	orrs	r3, r2
 8007228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	621a      	str	r2, [r3, #32]
}
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007242:	b480      	push	{r7}
 8007244:	b087      	sub	sp, #28
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0210 	bic.w	r2, r3, #16
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800726c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	031b      	lsls	r3, r3, #12
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800727e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b085      	sub	sp, #20
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	f043 0307 	orr.w	r3, r3, #7
 80072c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	609a      	str	r2, [r3, #8]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	021a      	lsls	r2, r3, #8
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4313      	orrs	r3, r2
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	609a      	str	r2, [r3, #8]
}
 800730c:	bf00      	nop
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800732c:	2302      	movs	r3, #2
 800732e:	e05a      	b.n	80073e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a21      	ldr	r2, [pc, #132]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d022      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737c:	d01d      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a1d      	ldr	r2, [pc, #116]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d018      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a1a      	ldr	r2, [pc, #104]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00e      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a18      	ldr	r2, [pc, #96]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d009      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a17      	ldr	r2, [pc, #92]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d004      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a15      	ldr	r2, [pc, #84]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d10c      	bne.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40000400 	.word	0x40000400
 80073fc:	40000800 	.word	0x40000800
 8007400:	40000c00 	.word	0x40000c00
 8007404:	40010400 	.word	0x40010400
 8007408:	40014000 	.word	0x40014000
 800740c:	40001800 	.word	0x40001800

08007410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007428:	2302      	movs	r3, #2
 800742a:	e03d      	b.n	80074a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e047      	b.n	800757e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d106      	bne.n	8007508 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fa fb2a 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2224      	movs	r2, #36	; 0x24
 800750c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800751e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f831 	bl	8007588 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007534:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695a      	ldr	r2, [r3, #20]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8007544:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0208 	orr.w	r2, r2, #8
 8007554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80075ca:	f023 030c 	bic.w	r3, r3, #12
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6812      	ldr	r2, [r2, #0]
 80075d2:	68f9      	ldr	r1, [r7, #12]
 80075d4:	430b      	orrs	r3, r1
 80075d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f6:	f040 818b 	bne.w	8007910 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4ac1      	ldr	r2, [pc, #772]	; (8007904 <UART_SetConfig+0x37c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d005      	beq.n	8007610 <UART_SetConfig+0x88>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4abf      	ldr	r2, [pc, #764]	; (8007908 <UART_SetConfig+0x380>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f040 80bd 	bne.w	800778a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007610:	f7fc feb6 	bl	8004380 <HAL_RCC_GetPCLK2Freq>
 8007614:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	461d      	mov	r5, r3
 800761a:	f04f 0600 	mov.w	r6, #0
 800761e:	46a8      	mov	r8, r5
 8007620:	46b1      	mov	r9, r6
 8007622:	eb18 0308 	adds.w	r3, r8, r8
 8007626:	eb49 0409 	adc.w	r4, r9, r9
 800762a:	4698      	mov	r8, r3
 800762c:	46a1      	mov	r9, r4
 800762e:	eb18 0805 	adds.w	r8, r8, r5
 8007632:	eb49 0906 	adc.w	r9, r9, r6
 8007636:	f04f 0100 	mov.w	r1, #0
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007642:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007646:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800764a:	4688      	mov	r8, r1
 800764c:	4691      	mov	r9, r2
 800764e:	eb18 0005 	adds.w	r0, r8, r5
 8007652:	eb49 0106 	adc.w	r1, r9, r6
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	461d      	mov	r5, r3
 800765c:	f04f 0600 	mov.w	r6, #0
 8007660:	196b      	adds	r3, r5, r5
 8007662:	eb46 0406 	adc.w	r4, r6, r6
 8007666:	461a      	mov	r2, r3
 8007668:	4623      	mov	r3, r4
 800766a:	f7f8 fddd 	bl	8000228 <__aeabi_uldivmod>
 800766e:	4603      	mov	r3, r0
 8007670:	460c      	mov	r4, r1
 8007672:	461a      	mov	r2, r3
 8007674:	4ba5      	ldr	r3, [pc, #660]	; (800790c <UART_SetConfig+0x384>)
 8007676:	fba3 2302 	umull	r2, r3, r3, r2
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	461d      	mov	r5, r3
 8007684:	f04f 0600 	mov.w	r6, #0
 8007688:	46a9      	mov	r9, r5
 800768a:	46b2      	mov	sl, r6
 800768c:	eb19 0309 	adds.w	r3, r9, r9
 8007690:	eb4a 040a 	adc.w	r4, sl, sl
 8007694:	4699      	mov	r9, r3
 8007696:	46a2      	mov	sl, r4
 8007698:	eb19 0905 	adds.w	r9, r9, r5
 800769c:	eb4a 0a06 	adc.w	sl, sl, r6
 80076a0:	f04f 0100 	mov.w	r1, #0
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076b4:	4689      	mov	r9, r1
 80076b6:	4692      	mov	sl, r2
 80076b8:	eb19 0005 	adds.w	r0, r9, r5
 80076bc:	eb4a 0106 	adc.w	r1, sl, r6
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	461d      	mov	r5, r3
 80076c6:	f04f 0600 	mov.w	r6, #0
 80076ca:	196b      	adds	r3, r5, r5
 80076cc:	eb46 0406 	adc.w	r4, r6, r6
 80076d0:	461a      	mov	r2, r3
 80076d2:	4623      	mov	r3, r4
 80076d4:	f7f8 fda8 	bl	8000228 <__aeabi_uldivmod>
 80076d8:	4603      	mov	r3, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	461a      	mov	r2, r3
 80076de:	4b8b      	ldr	r3, [pc, #556]	; (800790c <UART_SetConfig+0x384>)
 80076e0:	fba3 1302 	umull	r1, r3, r3, r2
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	2164      	movs	r1, #100	; 0x64
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	3332      	adds	r3, #50	; 0x32
 80076f2:	4a86      	ldr	r2, [pc, #536]	; (800790c <UART_SetConfig+0x384>)
 80076f4:	fba2 2303 	umull	r2, r3, r2, r3
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007700:	4498      	add	r8, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	461d      	mov	r5, r3
 8007706:	f04f 0600 	mov.w	r6, #0
 800770a:	46a9      	mov	r9, r5
 800770c:	46b2      	mov	sl, r6
 800770e:	eb19 0309 	adds.w	r3, r9, r9
 8007712:	eb4a 040a 	adc.w	r4, sl, sl
 8007716:	4699      	mov	r9, r3
 8007718:	46a2      	mov	sl, r4
 800771a:	eb19 0905 	adds.w	r9, r9, r5
 800771e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800772e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007736:	4689      	mov	r9, r1
 8007738:	4692      	mov	sl, r2
 800773a:	eb19 0005 	adds.w	r0, r9, r5
 800773e:	eb4a 0106 	adc.w	r1, sl, r6
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	461d      	mov	r5, r3
 8007748:	f04f 0600 	mov.w	r6, #0
 800774c:	196b      	adds	r3, r5, r5
 800774e:	eb46 0406 	adc.w	r4, r6, r6
 8007752:	461a      	mov	r2, r3
 8007754:	4623      	mov	r3, r4
 8007756:	f7f8 fd67 	bl	8000228 <__aeabi_uldivmod>
 800775a:	4603      	mov	r3, r0
 800775c:	460c      	mov	r4, r1
 800775e:	461a      	mov	r2, r3
 8007760:	4b6a      	ldr	r3, [pc, #424]	; (800790c <UART_SetConfig+0x384>)
 8007762:	fba3 1302 	umull	r1, r3, r3, r2
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	2164      	movs	r1, #100	; 0x64
 800776a:	fb01 f303 	mul.w	r3, r1, r3
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	3332      	adds	r3, #50	; 0x32
 8007774:	4a65      	ldr	r2, [pc, #404]	; (800790c <UART_SetConfig+0x384>)
 8007776:	fba2 2303 	umull	r2, r3, r2, r3
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	f003 0207 	and.w	r2, r3, #7
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4442      	add	r2, r8
 8007786:	609a      	str	r2, [r3, #8]
 8007788:	e26f      	b.n	8007c6a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800778a:	f7fc fde5 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 800778e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	461d      	mov	r5, r3
 8007794:	f04f 0600 	mov.w	r6, #0
 8007798:	46a8      	mov	r8, r5
 800779a:	46b1      	mov	r9, r6
 800779c:	eb18 0308 	adds.w	r3, r8, r8
 80077a0:	eb49 0409 	adc.w	r4, r9, r9
 80077a4:	4698      	mov	r8, r3
 80077a6:	46a1      	mov	r9, r4
 80077a8:	eb18 0805 	adds.w	r8, r8, r5
 80077ac:	eb49 0906 	adc.w	r9, r9, r6
 80077b0:	f04f 0100 	mov.w	r1, #0
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077c4:	4688      	mov	r8, r1
 80077c6:	4691      	mov	r9, r2
 80077c8:	eb18 0005 	adds.w	r0, r8, r5
 80077cc:	eb49 0106 	adc.w	r1, r9, r6
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	461d      	mov	r5, r3
 80077d6:	f04f 0600 	mov.w	r6, #0
 80077da:	196b      	adds	r3, r5, r5
 80077dc:	eb46 0406 	adc.w	r4, r6, r6
 80077e0:	461a      	mov	r2, r3
 80077e2:	4623      	mov	r3, r4
 80077e4:	f7f8 fd20 	bl	8000228 <__aeabi_uldivmod>
 80077e8:	4603      	mov	r3, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b47      	ldr	r3, [pc, #284]	; (800790c <UART_SetConfig+0x384>)
 80077f0:	fba3 2302 	umull	r2, r3, r3, r2
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	461d      	mov	r5, r3
 80077fe:	f04f 0600 	mov.w	r6, #0
 8007802:	46a9      	mov	r9, r5
 8007804:	46b2      	mov	sl, r6
 8007806:	eb19 0309 	adds.w	r3, r9, r9
 800780a:	eb4a 040a 	adc.w	r4, sl, sl
 800780e:	4699      	mov	r9, r3
 8007810:	46a2      	mov	sl, r4
 8007812:	eb19 0905 	adds.w	r9, r9, r5
 8007816:	eb4a 0a06 	adc.w	sl, sl, r6
 800781a:	f04f 0100 	mov.w	r1, #0
 800781e:	f04f 0200 	mov.w	r2, #0
 8007822:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007826:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800782a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800782e:	4689      	mov	r9, r1
 8007830:	4692      	mov	sl, r2
 8007832:	eb19 0005 	adds.w	r0, r9, r5
 8007836:	eb4a 0106 	adc.w	r1, sl, r6
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	461d      	mov	r5, r3
 8007840:	f04f 0600 	mov.w	r6, #0
 8007844:	196b      	adds	r3, r5, r5
 8007846:	eb46 0406 	adc.w	r4, r6, r6
 800784a:	461a      	mov	r2, r3
 800784c:	4623      	mov	r3, r4
 800784e:	f7f8 fceb 	bl	8000228 <__aeabi_uldivmod>
 8007852:	4603      	mov	r3, r0
 8007854:	460c      	mov	r4, r1
 8007856:	461a      	mov	r2, r3
 8007858:	4b2c      	ldr	r3, [pc, #176]	; (800790c <UART_SetConfig+0x384>)
 800785a:	fba3 1302 	umull	r1, r3, r3, r2
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	2164      	movs	r1, #100	; 0x64
 8007862:	fb01 f303 	mul.w	r3, r1, r3
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	3332      	adds	r3, #50	; 0x32
 800786c:	4a27      	ldr	r2, [pc, #156]	; (800790c <UART_SetConfig+0x384>)
 800786e:	fba2 2303 	umull	r2, r3, r2, r3
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800787a:	4498      	add	r8, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	461d      	mov	r5, r3
 8007880:	f04f 0600 	mov.w	r6, #0
 8007884:	46a9      	mov	r9, r5
 8007886:	46b2      	mov	sl, r6
 8007888:	eb19 0309 	adds.w	r3, r9, r9
 800788c:	eb4a 040a 	adc.w	r4, sl, sl
 8007890:	4699      	mov	r9, r3
 8007892:	46a2      	mov	sl, r4
 8007894:	eb19 0905 	adds.w	r9, r9, r5
 8007898:	eb4a 0a06 	adc.w	sl, sl, r6
 800789c:	f04f 0100 	mov.w	r1, #0
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078b0:	4689      	mov	r9, r1
 80078b2:	4692      	mov	sl, r2
 80078b4:	eb19 0005 	adds.w	r0, r9, r5
 80078b8:	eb4a 0106 	adc.w	r1, sl, r6
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	461d      	mov	r5, r3
 80078c2:	f04f 0600 	mov.w	r6, #0
 80078c6:	196b      	adds	r3, r5, r5
 80078c8:	eb46 0406 	adc.w	r4, r6, r6
 80078cc:	461a      	mov	r2, r3
 80078ce:	4623      	mov	r3, r4
 80078d0:	f7f8 fcaa 	bl	8000228 <__aeabi_uldivmod>
 80078d4:	4603      	mov	r3, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	461a      	mov	r2, r3
 80078da:	4b0c      	ldr	r3, [pc, #48]	; (800790c <UART_SetConfig+0x384>)
 80078dc:	fba3 1302 	umull	r1, r3, r3, r2
 80078e0:	095b      	lsrs	r3, r3, #5
 80078e2:	2164      	movs	r1, #100	; 0x64
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	3332      	adds	r3, #50	; 0x32
 80078ee:	4a07      	ldr	r2, [pc, #28]	; (800790c <UART_SetConfig+0x384>)
 80078f0:	fba2 2303 	umull	r2, r3, r2, r3
 80078f4:	095b      	lsrs	r3, r3, #5
 80078f6:	f003 0207 	and.w	r2, r3, #7
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4442      	add	r2, r8
 8007900:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007902:	e1b2      	b.n	8007c6a <UART_SetConfig+0x6e2>
 8007904:	40011000 	.word	0x40011000
 8007908:	40011400 	.word	0x40011400
 800790c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4ad7      	ldr	r2, [pc, #860]	; (8007c74 <UART_SetConfig+0x6ec>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d005      	beq.n	8007926 <UART_SetConfig+0x39e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4ad6      	ldr	r2, [pc, #856]	; (8007c78 <UART_SetConfig+0x6f0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	f040 80d1 	bne.w	8007ac8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007926:	f7fc fd2b 	bl	8004380 <HAL_RCC_GetPCLK2Freq>
 800792a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	469a      	mov	sl, r3
 8007930:	f04f 0b00 	mov.w	fp, #0
 8007934:	46d0      	mov	r8, sl
 8007936:	46d9      	mov	r9, fp
 8007938:	eb18 0308 	adds.w	r3, r8, r8
 800793c:	eb49 0409 	adc.w	r4, r9, r9
 8007940:	4698      	mov	r8, r3
 8007942:	46a1      	mov	r9, r4
 8007944:	eb18 080a 	adds.w	r8, r8, sl
 8007948:	eb49 090b 	adc.w	r9, r9, fp
 800794c:	f04f 0100 	mov.w	r1, #0
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007958:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800795c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007960:	4688      	mov	r8, r1
 8007962:	4691      	mov	r9, r2
 8007964:	eb1a 0508 	adds.w	r5, sl, r8
 8007968:	eb4b 0609 	adc.w	r6, fp, r9
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4619      	mov	r1, r3
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	f04f 0400 	mov.w	r4, #0
 800797e:	0094      	lsls	r4, r2, #2
 8007980:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007984:	008b      	lsls	r3, r1, #2
 8007986:	461a      	mov	r2, r3
 8007988:	4623      	mov	r3, r4
 800798a:	4628      	mov	r0, r5
 800798c:	4631      	mov	r1, r6
 800798e:	f7f8 fc4b 	bl	8000228 <__aeabi_uldivmod>
 8007992:	4603      	mov	r3, r0
 8007994:	460c      	mov	r4, r1
 8007996:	461a      	mov	r2, r3
 8007998:	4bb8      	ldr	r3, [pc, #736]	; (8007c7c <UART_SetConfig+0x6f4>)
 800799a:	fba3 2302 	umull	r2, r3, r3, r2
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	469b      	mov	fp, r3
 80079a8:	f04f 0c00 	mov.w	ip, #0
 80079ac:	46d9      	mov	r9, fp
 80079ae:	46e2      	mov	sl, ip
 80079b0:	eb19 0309 	adds.w	r3, r9, r9
 80079b4:	eb4a 040a 	adc.w	r4, sl, sl
 80079b8:	4699      	mov	r9, r3
 80079ba:	46a2      	mov	sl, r4
 80079bc:	eb19 090b 	adds.w	r9, r9, fp
 80079c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079c4:	f04f 0100 	mov.w	r1, #0
 80079c8:	f04f 0200 	mov.w	r2, #0
 80079cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079d8:	4689      	mov	r9, r1
 80079da:	4692      	mov	sl, r2
 80079dc:	eb1b 0509 	adds.w	r5, fp, r9
 80079e0:	eb4c 060a 	adc.w	r6, ip, sl
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	4619      	mov	r1, r3
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	f04f 0400 	mov.w	r4, #0
 80079f6:	0094      	lsls	r4, r2, #2
 80079f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079fc:	008b      	lsls	r3, r1, #2
 80079fe:	461a      	mov	r2, r3
 8007a00:	4623      	mov	r3, r4
 8007a02:	4628      	mov	r0, r5
 8007a04:	4631      	mov	r1, r6
 8007a06:	f7f8 fc0f 	bl	8000228 <__aeabi_uldivmod>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	461a      	mov	r2, r3
 8007a10:	4b9a      	ldr	r3, [pc, #616]	; (8007c7c <UART_SetConfig+0x6f4>)
 8007a12:	fba3 1302 	umull	r1, r3, r3, r2
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	2164      	movs	r1, #100	; 0x64
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	3332      	adds	r3, #50	; 0x32
 8007a24:	4a95      	ldr	r2, [pc, #596]	; (8007c7c <UART_SetConfig+0x6f4>)
 8007a26:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2a:	095b      	lsrs	r3, r3, #5
 8007a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a30:	4498      	add	r8, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	469b      	mov	fp, r3
 8007a36:	f04f 0c00 	mov.w	ip, #0
 8007a3a:	46d9      	mov	r9, fp
 8007a3c:	46e2      	mov	sl, ip
 8007a3e:	eb19 0309 	adds.w	r3, r9, r9
 8007a42:	eb4a 040a 	adc.w	r4, sl, sl
 8007a46:	4699      	mov	r9, r3
 8007a48:	46a2      	mov	sl, r4
 8007a4a:	eb19 090b 	adds.w	r9, r9, fp
 8007a4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a52:	f04f 0100 	mov.w	r1, #0
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a66:	4689      	mov	r9, r1
 8007a68:	4692      	mov	sl, r2
 8007a6a:	eb1b 0509 	adds.w	r5, fp, r9
 8007a6e:	eb4c 060a 	adc.w	r6, ip, sl
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	4619      	mov	r1, r3
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	f04f 0400 	mov.w	r4, #0
 8007a84:	0094      	lsls	r4, r2, #2
 8007a86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a8a:	008b      	lsls	r3, r1, #2
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	4623      	mov	r3, r4
 8007a90:	4628      	mov	r0, r5
 8007a92:	4631      	mov	r1, r6
 8007a94:	f7f8 fbc8 	bl	8000228 <__aeabi_uldivmod>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4b77      	ldr	r3, [pc, #476]	; (8007c7c <UART_SetConfig+0x6f4>)
 8007aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	2164      	movs	r1, #100	; 0x64
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	3332      	adds	r3, #50	; 0x32
 8007ab2:	4a72      	ldr	r2, [pc, #456]	; (8007c7c <UART_SetConfig+0x6f4>)
 8007ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	f003 020f 	and.w	r2, r3, #15
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4442      	add	r2, r8
 8007ac4:	609a      	str	r2, [r3, #8]
 8007ac6:	e0d0      	b.n	8007c6a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ac8:	f7fc fc46 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 8007acc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	469a      	mov	sl, r3
 8007ad2:	f04f 0b00 	mov.w	fp, #0
 8007ad6:	46d0      	mov	r8, sl
 8007ad8:	46d9      	mov	r9, fp
 8007ada:	eb18 0308 	adds.w	r3, r8, r8
 8007ade:	eb49 0409 	adc.w	r4, r9, r9
 8007ae2:	4698      	mov	r8, r3
 8007ae4:	46a1      	mov	r9, r4
 8007ae6:	eb18 080a 	adds.w	r8, r8, sl
 8007aea:	eb49 090b 	adc.w	r9, r9, fp
 8007aee:	f04f 0100 	mov.w	r1, #0
 8007af2:	f04f 0200 	mov.w	r2, #0
 8007af6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007afa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007afe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b02:	4688      	mov	r8, r1
 8007b04:	4691      	mov	r9, r2
 8007b06:	eb1a 0508 	adds.w	r5, sl, r8
 8007b0a:	eb4b 0609 	adc.w	r6, fp, r9
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	4619      	mov	r1, r3
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	f04f 0300 	mov.w	r3, #0
 8007b1c:	f04f 0400 	mov.w	r4, #0
 8007b20:	0094      	lsls	r4, r2, #2
 8007b22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b26:	008b      	lsls	r3, r1, #2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	4631      	mov	r1, r6
 8007b30:	f7f8 fb7a 	bl	8000228 <__aeabi_uldivmod>
 8007b34:	4603      	mov	r3, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4b50      	ldr	r3, [pc, #320]	; (8007c7c <UART_SetConfig+0x6f4>)
 8007b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	469b      	mov	fp, r3
 8007b4a:	f04f 0c00 	mov.w	ip, #0
 8007b4e:	46d9      	mov	r9, fp
 8007b50:	46e2      	mov	sl, ip
 8007b52:	eb19 0309 	adds.w	r3, r9, r9
 8007b56:	eb4a 040a 	adc.w	r4, sl, sl
 8007b5a:	4699      	mov	r9, r3
 8007b5c:	46a2      	mov	sl, r4
 8007b5e:	eb19 090b 	adds.w	r9, r9, fp
 8007b62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b66:	f04f 0100 	mov.w	r1, #0
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b7a:	4689      	mov	r9, r1
 8007b7c:	4692      	mov	sl, r2
 8007b7e:	eb1b 0509 	adds.w	r5, fp, r9
 8007b82:	eb4c 060a 	adc.w	r6, ip, sl
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f04f 0200 	mov.w	r2, #0
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	f04f 0400 	mov.w	r4, #0
 8007b98:	0094      	lsls	r4, r2, #2
 8007b9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b9e:	008b      	lsls	r3, r1, #2
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	4623      	mov	r3, r4
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	f7f8 fb3e 	bl	8000228 <__aeabi_uldivmod>
 8007bac:	4603      	mov	r3, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4b32      	ldr	r3, [pc, #200]	; (8007c7c <UART_SetConfig+0x6f4>)
 8007bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8007bb8:	095b      	lsrs	r3, r3, #5
 8007bba:	2164      	movs	r1, #100	; 0x64
 8007bbc:	fb01 f303 	mul.w	r3, r1, r3
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	3332      	adds	r3, #50	; 0x32
 8007bc6:	4a2d      	ldr	r2, [pc, #180]	; (8007c7c <UART_SetConfig+0x6f4>)
 8007bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bcc:	095b      	lsrs	r3, r3, #5
 8007bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bd2:	4498      	add	r8, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	469b      	mov	fp, r3
 8007bd8:	f04f 0c00 	mov.w	ip, #0
 8007bdc:	46d9      	mov	r9, fp
 8007bde:	46e2      	mov	sl, ip
 8007be0:	eb19 0309 	adds.w	r3, r9, r9
 8007be4:	eb4a 040a 	adc.w	r4, sl, sl
 8007be8:	4699      	mov	r9, r3
 8007bea:	46a2      	mov	sl, r4
 8007bec:	eb19 090b 	adds.w	r9, r9, fp
 8007bf0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bf4:	f04f 0100 	mov.w	r1, #0
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c08:	4689      	mov	r9, r1
 8007c0a:	4692      	mov	sl, r2
 8007c0c:	eb1b 0509 	adds.w	r5, fp, r9
 8007c10:	eb4c 060a 	adc.w	r6, ip, sl
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	f04f 0300 	mov.w	r3, #0
 8007c22:	f04f 0400 	mov.w	r4, #0
 8007c26:	0094      	lsls	r4, r2, #2
 8007c28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c2c:	008b      	lsls	r3, r1, #2
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4623      	mov	r3, r4
 8007c32:	4628      	mov	r0, r5
 8007c34:	4631      	mov	r1, r6
 8007c36:	f7f8 faf7 	bl	8000228 <__aeabi_uldivmod>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	461a      	mov	r2, r3
 8007c40:	4b0e      	ldr	r3, [pc, #56]	; (8007c7c <UART_SetConfig+0x6f4>)
 8007c42:	fba3 1302 	umull	r1, r3, r3, r2
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	2164      	movs	r1, #100	; 0x64
 8007c4a:	fb01 f303 	mul.w	r3, r1, r3
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	3332      	adds	r3, #50	; 0x32
 8007c54:	4a09      	ldr	r2, [pc, #36]	; (8007c7c <UART_SetConfig+0x6f4>)
 8007c56:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	f003 020f 	and.w	r2, r3, #15
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4442      	add	r2, r8
 8007c66:	609a      	str	r2, [r3, #8]
}
 8007c68:	e7ff      	b.n	8007c6a <UART_SetConfig+0x6e2>
 8007c6a:	bf00      	nop
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c74:	40011000 	.word	0x40011000
 8007c78:	40011400 	.word	0x40011400
 8007c7c:	51eb851f 	.word	0x51eb851f

08007c80 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007c80:	b084      	sub	sp, #16
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	f107 001c 	add.w	r0, r7, #28
 8007c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007c96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007c98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007c9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007c9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007ca2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007ca6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007caa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	b004      	add	sp, #16
 8007cd4:	4770      	bx	lr

08007cd6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007d20:	2002      	movs	r0, #2
 8007d22:	f7fa f893 	bl	8001e4c <HAL_Delay>
  
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0303 	and.w	r3, r3, #3
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007d70:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007d76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007d86:	f023 030f 	bic.w	r3, r3, #15
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	b2db      	uxtb	r3, r3
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3314      	adds	r3, #20
 8007dc8:	461a      	mov	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	4413      	add	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
}  
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e06:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007e0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007e12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0

}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007e46:	2310      	movs	r3, #16
 8007e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e4a:	2340      	movs	r3, #64	; 0x40
 8007e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e58:	f107 0308 	add.w	r3, r7, #8
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff ff74 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e68:	2110      	movs	r1, #16
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa40 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e72:	69fb      	ldr	r3, [r7, #28]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007e8a:	2311      	movs	r3, #17
 8007e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e8e:	2340      	movs	r3, #64	; 0x40
 8007e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e92:	2300      	movs	r3, #0
 8007e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff ff52 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eac:	2111      	movs	r1, #17
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa1e 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007eb6:	69fb      	ldr	r3, [r7, #28]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3720      	adds	r7, #32
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007ece:	2312      	movs	r3, #18
 8007ed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ed2:	2340      	movs	r3, #64	; 0x40
 8007ed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ede:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ee0:	f107 0308 	add.w	r3, r7, #8
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff ff30 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef0:	2112      	movs	r1, #18
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9fc 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007efa:	69fb      	ldr	r3, [r7, #28]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3720      	adds	r7, #32
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007f12:	2318      	movs	r3, #24
 8007f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f24:	f107 0308 	add.w	r3, r7, #8
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff ff0e 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f34:	2118      	movs	r1, #24
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f9da 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f3e:	69fb      	ldr	r3, [r7, #28]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007f56:	2319      	movs	r3, #25
 8007f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f68:	f107 0308 	add.w	r3, r7, #8
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff feec 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f78:	2119      	movs	r1, #25
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f9b8 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007f80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f82:	69fb      	ldr	r3, [r7, #28]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3720      	adds	r7, #32
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007f98:	230c      	movs	r3, #12
 8007f9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f9c:	2340      	movs	r3, #64	; 0x40
 8007f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007faa:	f107 0308 	add.w	r3, r7, #8
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff fecb 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007fb6:	4a05      	ldr	r2, [pc, #20]	; (8007fcc <SDMMC_CmdStopTransfer+0x40>)
 8007fb8:	210c      	movs	r1, #12
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f998 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fc2:	69fb      	ldr	r3, [r7, #28]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3720      	adds	r7, #32
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	05f5e100 	.word	0x05f5e100

08007fd0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	; 0x28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007fe0:	2307      	movs	r3, #7
 8007fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fe4:	2340      	movs	r3, #64	; 0x40
 8007fe6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ff0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ff2:	f107 0310 	add.w	r3, r7, #16
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f7ff fea7 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008002:	2107      	movs	r1, #7
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f973 	bl	80082f0 <SDMMC_GetCmdResp1>
 800800a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800800e:	4618      	mov	r0, r3
 8008010:	3728      	adds	r7, #40	; 0x28
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b088      	sub	sp, #32
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008026:	2300      	movs	r3, #0
 8008028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800802e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fe86 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f92d 	bl	80082a0 <SDMMC_GetCmdError>
 8008046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008048:	69fb      	ldr	r3, [r7, #28]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800805a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800805e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008060:	2308      	movs	r3, #8
 8008062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800806c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff fe67 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fb16 	bl	80086b0 <SDMMC_GetCmdResp7>
 8008084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008086:	69fb      	ldr	r3, [r7, #28]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3720      	adds	r7, #32
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800809e:	2337      	movs	r3, #55	; 0x37
 80080a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080a2:	2340      	movs	r3, #64	; 0x40
 80080a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080b0:	f107 0308 	add.w	r3, r7, #8
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff fe48 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80080bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c0:	2137      	movs	r1, #55	; 0x37
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f914 	bl	80082f0 <SDMMC_GetCmdResp1>
 80080c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ca:	69fb      	ldr	r3, [r7, #28]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3720      	adds	r7, #32
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80080ea:	2329      	movs	r3, #41	; 0x29
 80080ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080ee:	2340      	movs	r3, #64	; 0x40
 80080f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080fc:	f107 0308 	add.w	r3, r7, #8
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff fe22 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fa23 	bl	8008554 <SDMMC_GetCmdResp3>
 800810e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008110:	69fb      	ldr	r3, [r7, #28]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b088      	sub	sp, #32
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008128:	2306      	movs	r3, #6
 800812a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800812c:	2340      	movs	r3, #64	; 0x40
 800812e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008130:	2300      	movs	r3, #0
 8008132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008138:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800813a:	f107 0308 	add.w	r3, r7, #8
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff fe03 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008146:	f241 3288 	movw	r2, #5000	; 0x1388
 800814a:	2106      	movs	r1, #6
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f8cf 	bl	80082f0 <SDMMC_GetCmdResp1>
 8008152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008154:	69fb      	ldr	r3, [r7, #28]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b088      	sub	sp, #32
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800816a:	2333      	movs	r3, #51	; 0x33
 800816c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800816e:	2340      	movs	r3, #64	; 0x40
 8008170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800817a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800817c:	f107 0308 	add.w	r3, r7, #8
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff fde2 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008188:	f241 3288 	movw	r2, #5000	; 0x1388
 800818c:	2133      	movs	r1, #51	; 0x33
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f8ae 	bl	80082f0 <SDMMC_GetCmdResp1>
 8008194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008196:	69fb      	ldr	r3, [r7, #28]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80081ac:	2302      	movs	r3, #2
 80081ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80081b0:	23c0      	movs	r3, #192	; 0xc0
 80081b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081be:	f107 0308 	add.w	r3, r7, #8
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff fdc1 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f97c 	bl	80084c8 <SDMMC_GetCmdResp2>
 80081d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081d2:	69fb      	ldr	r3, [r7, #28]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3720      	adds	r7, #32
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80081ea:	2309      	movs	r3, #9
 80081ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80081ee:	23c0      	movs	r3, #192	; 0xc0
 80081f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081fc:	f107 0308 	add.w	r3, r7, #8
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fda2 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f95d 	bl	80084c8 <SDMMC_GetCmdResp2>
 800820e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008210:	69fb      	ldr	r3, [r7, #28]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3720      	adds	r7, #32
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b088      	sub	sp, #32
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008228:	2303      	movs	r3, #3
 800822a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800822c:	2340      	movs	r3, #64	; 0x40
 800822e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008230:	2300      	movs	r3, #0
 8008232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008238:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800823a:	f107 0308 	add.w	r3, r7, #8
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff fd83 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	2103      	movs	r1, #3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f9bc 	bl	80085c8 <SDMMC_GetCmdResp6>
 8008250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008252:	69fb      	ldr	r3, [r7, #28]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800826a:	230d      	movs	r3, #13
 800826c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800826e:	2340      	movs	r3, #64	; 0x40
 8008270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800827a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800827c:	f107 0308 	add.w	r3, r7, #8
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fd62 	bl	8007d4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008288:	f241 3288 	movw	r2, #5000	; 0x1388
 800828c:	210d      	movs	r1, #13
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f82e 	bl	80082f0 <SDMMC_GetCmdResp1>
 8008294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008296:	69fb      	ldr	r3, [r7, #28]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80082a0:	b490      	push	{r4, r7}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082a8:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <SDMMC_GetCmdError+0x48>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a0f      	ldr	r2, [pc, #60]	; (80082ec <SDMMC_GetCmdError+0x4c>)
 80082ae:	fba2 2303 	umull	r2, r3, r2, r3
 80082b2:	0a5b      	lsrs	r3, r3, #9
 80082b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80082bc:	4623      	mov	r3, r4
 80082be:	1e5c      	subs	r4, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d102      	bne.n	80082ca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082c8:	e009      	b.n	80082de <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0f2      	beq.n	80082bc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	22c5      	movs	r2, #197	; 0xc5
 80082da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc90      	pop	{r4, r7}
 80082e6:	4770      	bx	lr
 80082e8:	20000004 	.word	0x20000004
 80082ec:	10624dd3 	.word	0x10624dd3

080082f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80082f0:	b590      	push	{r4, r7, lr}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	460b      	mov	r3, r1
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80082fe:	4b6f      	ldr	r3, [pc, #444]	; (80084bc <SDMMC_GetCmdResp1+0x1cc>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a6f      	ldr	r2, [pc, #444]	; (80084c0 <SDMMC_GetCmdResp1+0x1d0>)
 8008304:	fba2 2303 	umull	r2, r3, r2, r3
 8008308:	0a5b      	lsrs	r3, r3, #9
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008310:	4623      	mov	r3, r4
 8008312:	1e5c      	subs	r4, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800831c:	e0c9      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008322:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0f0      	beq.n	8008310 <SDMMC_GetCmdResp1+0x20>
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1eb      	bne.n	8008310 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2204      	movs	r2, #4
 8008348:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800834a:	2304      	movs	r3, #4
 800834c:	e0b1      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d004      	beq.n	8008364 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008360:	2301      	movs	r3, #1
 8008362:	e0a6      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	22c5      	movs	r2, #197	; 0xc5
 8008368:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7ff fd18 	bl	8007da0 <SDIO_GetCommandResponse>
 8008370:	4603      	mov	r3, r0
 8008372:	461a      	mov	r2, r3
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	4293      	cmp	r3, r2
 8008378:	d001      	beq.n	800837e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800837a:	2301      	movs	r3, #1
 800837c:	e099      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800837e:	2100      	movs	r1, #0
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f7ff fd1a 	bl	8007dba <SDIO_GetResponse>
 8008386:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4b4e      	ldr	r3, [pc, #312]	; (80084c4 <SDMMC_GetCmdResp1+0x1d4>)
 800838c:	4013      	ands	r3, r2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8008392:	2300      	movs	r3, #0
 8008394:	e08d      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	da02      	bge.n	80083a2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800839c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083a0:	e087      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80083ac:	2340      	movs	r3, #64	; 0x40
 80083ae:	e080      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80083ba:	2380      	movs	r3, #128	; 0x80
 80083bc:	e079      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80083c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083cc:	e071      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80083d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083dc:	e069      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80083e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ec:	e061      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80083f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083fc:	e059      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800840c:	e051      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800841c:	e049      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008428:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800842c:	e041      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800843c:	e039      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800844c:	e031      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008458:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800845c:	e029      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008468:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800846c:	e021      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800847c:	e019      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800848c:	e011      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008498:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800849c:	e009      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80084a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80084ac:	e001      	b.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80084ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd90      	pop	{r4, r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000004 	.word	0x20000004
 80084c0:	10624dd3 	.word	0x10624dd3
 80084c4:	fdffe008 	.word	0xfdffe008

080084c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80084c8:	b490      	push	{r4, r7}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084d0:	4b1e      	ldr	r3, [pc, #120]	; (800854c <SDMMC_GetCmdResp2+0x84>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a1e      	ldr	r2, [pc, #120]	; (8008550 <SDMMC_GetCmdResp2+0x88>)
 80084d6:	fba2 2303 	umull	r2, r3, r2, r3
 80084da:	0a5b      	lsrs	r3, r3, #9
 80084dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80084e4:	4623      	mov	r3, r4
 80084e6:	1e5c      	subs	r4, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084f0:	e026      	b.n	8008540 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0f0      	beq.n	80084e4 <SDMMC_GetCmdResp2+0x1c>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1eb      	bne.n	80084e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d004      	beq.n	8008522 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2204      	movs	r2, #4
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800851e:	2304      	movs	r3, #4
 8008520:	e00e      	b.n	8008540 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d004      	beq.n	8008538 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008534:	2301      	movs	r3, #1
 8008536:	e003      	b.n	8008540 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	22c5      	movs	r2, #197	; 0xc5
 800853c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bc90      	pop	{r4, r7}
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000004 	.word	0x20000004
 8008550:	10624dd3 	.word	0x10624dd3

08008554 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008554:	b490      	push	{r4, r7}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800855c:	4b18      	ldr	r3, [pc, #96]	; (80085c0 <SDMMC_GetCmdResp3+0x6c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a18      	ldr	r2, [pc, #96]	; (80085c4 <SDMMC_GetCmdResp3+0x70>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	0a5b      	lsrs	r3, r3, #9
 8008568:	f241 3288 	movw	r2, #5000	; 0x1388
 800856c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008570:	4623      	mov	r3, r4
 8008572:	1e5c      	subs	r4, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800857c:	e01b      	b.n	80085b6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008582:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0f0      	beq.n	8008570 <SDMMC_GetCmdResp3+0x1c>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1eb      	bne.n	8008570 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d004      	beq.n	80085ae <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2204      	movs	r2, #4
 80085a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085aa:	2304      	movs	r3, #4
 80085ac:	e003      	b.n	80085b6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	22c5      	movs	r2, #197	; 0xc5
 80085b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc90      	pop	{r4, r7}
 80085be:	4770      	bx	lr
 80085c0:	20000004 	.word	0x20000004
 80085c4:	10624dd3 	.word	0x10624dd3

080085c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80085c8:	b590      	push	{r4, r7, lr}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	460b      	mov	r3, r1
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085d6:	4b34      	ldr	r3, [pc, #208]	; (80086a8 <SDMMC_GetCmdResp6+0xe0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a34      	ldr	r2, [pc, #208]	; (80086ac <SDMMC_GetCmdResp6+0xe4>)
 80085dc:	fba2 2303 	umull	r2, r3, r2, r3
 80085e0:	0a5b      	lsrs	r3, r3, #9
 80085e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80085ea:	4623      	mov	r3, r4
 80085ec:	1e5c      	subs	r4, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085f6:	e052      	b.n	800869e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0f0      	beq.n	80085ea <SDMMC_GetCmdResp6+0x22>
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1eb      	bne.n	80085ea <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008616:	f003 0304 	and.w	r3, r3, #4
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2204      	movs	r2, #4
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008624:	2304      	movs	r3, #4
 8008626:	e03a      	b.n	800869e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800863a:	2301      	movs	r3, #1
 800863c:	e02f      	b.n	800869e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fbae 	bl	8007da0 <SDIO_GetCommandResponse>
 8008644:	4603      	mov	r3, r0
 8008646:	461a      	mov	r2, r3
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	4293      	cmp	r3, r2
 800864c:	d001      	beq.n	8008652 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800864e:	2301      	movs	r3, #1
 8008650:	e025      	b.n	800869e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	22c5      	movs	r2, #197	; 0xc5
 8008656:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008658:	2100      	movs	r1, #0
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff fbad 	bl	8007dba <SDIO_GetResponse>
 8008660:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	0c1b      	lsrs	r3, r3, #16
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008676:	2300      	movs	r3, #0
 8008678:	e011      	b.n	800869e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008688:	e009      	b.n	800869e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008698:	e001      	b.n	800869e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800869a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd90      	pop	{r4, r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000004 	.word	0x20000004
 80086ac:	10624dd3 	.word	0x10624dd3

080086b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80086b0:	b490      	push	{r4, r7}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086b8:	4b21      	ldr	r3, [pc, #132]	; (8008740 <SDMMC_GetCmdResp7+0x90>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a21      	ldr	r2, [pc, #132]	; (8008744 <SDMMC_GetCmdResp7+0x94>)
 80086be:	fba2 2303 	umull	r2, r3, r2, r3
 80086c2:	0a5b      	lsrs	r3, r3, #9
 80086c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80086cc:	4623      	mov	r3, r4
 80086ce:	1e5c      	subs	r4, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086d8:	e02c      	b.n	8008734 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f0      	beq.n	80086cc <SDMMC_GetCmdResp7+0x1c>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1eb      	bne.n	80086cc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d004      	beq.n	800870a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2204      	movs	r2, #4
 8008704:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008706:	2304      	movs	r3, #4
 8008708:	e014      	b.n	8008734 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d004      	beq.n	8008720 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800871c:	2301      	movs	r3, #1
 800871e:	e009      	b.n	8008734 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2240      	movs	r2, #64	; 0x40
 8008730:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008732:	2300      	movs	r3, #0
  
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bc90      	pop	{r4, r7}
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20000004 	.word	0x20000004
 8008744:	10624dd3 	.word	0x10624dd3

08008748 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008748:	b084      	sub	sp, #16
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	f107 001c 	add.w	r0, r7, #28
 8008756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	2b01      	cmp	r3, #1
 800875e:	d122      	bne.n	80087a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008764:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878a:	2b01      	cmp	r3, #1
 800878c:	d105      	bne.n	800879a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 fac0 	bl	8009d20 <USB_CoreReset>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]
 80087a4:	e01a      	b.n	80087dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 fab4 	bl	8009d20 <USB_CoreReset>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80087bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d106      	bne.n	80087d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	639a      	str	r2, [r3, #56]	; 0x38
 80087ce:	e005      	b.n	80087dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d10b      	bne.n	80087fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f043 0206 	orr.w	r2, r3, #6
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f043 0220 	orr.w	r2, r3, #32
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008806:	b004      	add	sp, #16
 8008808:	4770      	bx	lr
	...

0800880c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	2b02      	cmp	r3, #2
 800881e:	d165      	bne.n	80088ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	4a41      	ldr	r2, [pc, #260]	; (8008928 <USB_SetTurnaroundTime+0x11c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d906      	bls.n	8008836 <USB_SetTurnaroundTime+0x2a>
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4a40      	ldr	r2, [pc, #256]	; (800892c <USB_SetTurnaroundTime+0x120>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d802      	bhi.n	8008836 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008830:	230f      	movs	r3, #15
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	e062      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	4a3c      	ldr	r2, [pc, #240]	; (800892c <USB_SetTurnaroundTime+0x120>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d906      	bls.n	800884c <USB_SetTurnaroundTime+0x40>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	4a3b      	ldr	r2, [pc, #236]	; (8008930 <USB_SetTurnaroundTime+0x124>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d802      	bhi.n	800884c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008846:	230e      	movs	r3, #14
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	e057      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4a38      	ldr	r2, [pc, #224]	; (8008930 <USB_SetTurnaroundTime+0x124>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d906      	bls.n	8008862 <USB_SetTurnaroundTime+0x56>
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	4a37      	ldr	r2, [pc, #220]	; (8008934 <USB_SetTurnaroundTime+0x128>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d802      	bhi.n	8008862 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800885c:	230d      	movs	r3, #13
 800885e:	617b      	str	r3, [r7, #20]
 8008860:	e04c      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	4a33      	ldr	r2, [pc, #204]	; (8008934 <USB_SetTurnaroundTime+0x128>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d906      	bls.n	8008878 <USB_SetTurnaroundTime+0x6c>
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	4a32      	ldr	r2, [pc, #200]	; (8008938 <USB_SetTurnaroundTime+0x12c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d802      	bhi.n	8008878 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008872:	230c      	movs	r3, #12
 8008874:	617b      	str	r3, [r7, #20]
 8008876:	e041      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4a2f      	ldr	r2, [pc, #188]	; (8008938 <USB_SetTurnaroundTime+0x12c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d906      	bls.n	800888e <USB_SetTurnaroundTime+0x82>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4a2e      	ldr	r2, [pc, #184]	; (800893c <USB_SetTurnaroundTime+0x130>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d802      	bhi.n	800888e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008888:	230b      	movs	r3, #11
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e036      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4a2a      	ldr	r2, [pc, #168]	; (800893c <USB_SetTurnaroundTime+0x130>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d906      	bls.n	80088a4 <USB_SetTurnaroundTime+0x98>
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4a29      	ldr	r2, [pc, #164]	; (8008940 <USB_SetTurnaroundTime+0x134>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d802      	bhi.n	80088a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800889e:	230a      	movs	r3, #10
 80088a0:	617b      	str	r3, [r7, #20]
 80088a2:	e02b      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4a26      	ldr	r2, [pc, #152]	; (8008940 <USB_SetTurnaroundTime+0x134>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d906      	bls.n	80088ba <USB_SetTurnaroundTime+0xae>
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4a25      	ldr	r2, [pc, #148]	; (8008944 <USB_SetTurnaroundTime+0x138>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d802      	bhi.n	80088ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80088b4:	2309      	movs	r3, #9
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e020      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	4a21      	ldr	r2, [pc, #132]	; (8008944 <USB_SetTurnaroundTime+0x138>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d906      	bls.n	80088d0 <USB_SetTurnaroundTime+0xc4>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	4a20      	ldr	r2, [pc, #128]	; (8008948 <USB_SetTurnaroundTime+0x13c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d802      	bhi.n	80088d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80088ca:	2308      	movs	r3, #8
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	e015      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4a1d      	ldr	r2, [pc, #116]	; (8008948 <USB_SetTurnaroundTime+0x13c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d906      	bls.n	80088e6 <USB_SetTurnaroundTime+0xda>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4a1c      	ldr	r2, [pc, #112]	; (800894c <USB_SetTurnaroundTime+0x140>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d802      	bhi.n	80088e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80088e0:	2307      	movs	r3, #7
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e00a      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80088e6:	2306      	movs	r3, #6
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	e007      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d102      	bne.n	80088f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80088f2:	2309      	movs	r3, #9
 80088f4:	617b      	str	r3, [r7, #20]
 80088f6:	e001      	b.n	80088fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80088f8:	2309      	movs	r3, #9
 80088fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	029b      	lsls	r3, r3, #10
 8008910:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008914:	431a      	orrs	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	371c      	adds	r7, #28
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	00d8acbf 	.word	0x00d8acbf
 800892c:	00e4e1bf 	.word	0x00e4e1bf
 8008930:	00f423ff 	.word	0x00f423ff
 8008934:	0106737f 	.word	0x0106737f
 8008938:	011a499f 	.word	0x011a499f
 800893c:	01312cff 	.word	0x01312cff
 8008940:	014ca43f 	.word	0x014ca43f
 8008944:	016e35ff 	.word	0x016e35ff
 8008948:	01a6ab1f 	.word	0x01a6ab1f
 800894c:	01e847ff 	.word	0x01e847ff

08008950 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f043 0201 	orr.w	r2, r3, #1
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f023 0201 	bic.w	r2, r3, #1
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d106      	bne.n	80089c0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	60da      	str	r2, [r3, #12]
 80089be:	e00b      	b.n	80089d8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d106      	bne.n	80089d4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	60da      	str	r2, [r3, #12]
 80089d2:	e001      	b.n	80089d8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e003      	b.n	80089e0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80089d8:	2032      	movs	r0, #50	; 0x32
 80089da:	f7f9 fa37 	bl	8001e4c <HAL_Delay>

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089e8:	b084      	sub	sp, #16
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b086      	sub	sp, #24
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80089f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a02:	2300      	movs	r3, #0
 8008a04:	613b      	str	r3, [r7, #16]
 8008a06:	e009      	b.n	8008a1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	3340      	adds	r3, #64	; 0x40
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	2200      	movs	r2, #0
 8008a14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	613b      	str	r3, [r7, #16]
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2b0e      	cmp	r3, #14
 8008a20:	d9f2      	bls.n	8008a08 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d11c      	bne.n	8008a62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a36:	f043 0302 	orr.w	r3, r3, #2
 8008a3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	e005      	b.n	8008a6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a74:	461a      	mov	r2, r3
 8008a76:	2300      	movs	r3, #0
 8008a78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a80:	4619      	mov	r1, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a88:	461a      	mov	r2, r3
 8008a8a:	680b      	ldr	r3, [r1, #0]
 8008a8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d10c      	bne.n	8008aae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d104      	bne.n	8008aa4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f949 	bl	8008d34 <USB_SetDevSpeed>
 8008aa2:	e008      	b.n	8008ab6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f944 	bl	8008d34 <USB_SetDevSpeed>
 8008aac:	e003      	b.n	8008ab6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008aae:	2103      	movs	r1, #3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f93f 	bl	8008d34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ab6:	2110      	movs	r1, #16
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f8f3 	bl	8008ca4 <USB_FlushTxFifo>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f911 	bl	8008cf0 <USB_FlushRxFifo>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ade:	461a      	mov	r2, r3
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aea:	461a      	mov	r2, r3
 8008aec:	2300      	movs	r3, #0
 8008aee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af6:	461a      	mov	r2, r3
 8008af8:	2300      	movs	r3, #0
 8008afa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008afc:	2300      	movs	r3, #0
 8008afe:	613b      	str	r3, [r7, #16]
 8008b00:	e043      	b.n	8008b8a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b18:	d118      	bne.n	8008b4c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10a      	bne.n	8008b36 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	e013      	b.n	8008b5e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b42:	461a      	mov	r2, r3
 8008b44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	e008      	b.n	8008b5e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b58:	461a      	mov	r2, r3
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	3301      	adds	r3, #1
 8008b88:	613b      	str	r3, [r7, #16]
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d3b7      	bcc.n	8008b02 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b92:	2300      	movs	r3, #0
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	e043      	b.n	8008c20 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bae:	d118      	bne.n	8008be2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10a      	bne.n	8008bcc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	e013      	b.n	8008bf4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd8:	461a      	mov	r2, r3
 8008bda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	e008      	b.n	8008bf4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bee:	461a      	mov	r2, r3
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c00:	461a      	mov	r2, r3
 8008c02:	2300      	movs	r3, #0
 8008c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c12:	461a      	mov	r2, r3
 8008c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d3b7      	bcc.n	8008b98 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d105      	bne.n	8008c5c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f043 0210 	orr.w	r2, r3, #16
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699a      	ldr	r2, [r3, #24]
 8008c60:	4b0f      	ldr	r3, [pc, #60]	; (8008ca0 <USB_DevInit+0x2b8>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f043 0208 	orr.w	r2, r3, #8
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d107      	bne.n	8008c90 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c88:	f043 0304 	orr.w	r3, r3, #4
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c9c:	b004      	add	sp, #16
 8008c9e:	4770      	bx	lr
 8008ca0:	803c3800 	.word	0x803c3800

08008ca4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	019b      	lsls	r3, r3, #6
 8008cb6:	f043 0220 	orr.w	r2, r3, #32
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4a09      	ldr	r2, [pc, #36]	; (8008cec <USB_FlushTxFifo+0x48>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d901      	bls.n	8008cd0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e006      	b.n	8008cde <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	f003 0320 	and.w	r3, r3, #32
 8008cd8:	2b20      	cmp	r3, #32
 8008cda:	d0f0      	beq.n	8008cbe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	00030d40 	.word	0x00030d40

08008cf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2210      	movs	r2, #16
 8008d00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3301      	adds	r3, #1
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4a09      	ldr	r2, [pc, #36]	; (8008d30 <USB_FlushRxFifo+0x40>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d901      	bls.n	8008d14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e006      	b.n	8008d22 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	f003 0310 	and.w	r3, r3, #16
 8008d1c:	2b10      	cmp	r3, #16
 8008d1e:	d0f0      	beq.n	8008d02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	00030d40 	.word	0x00030d40

08008d34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d54:	4313      	orrs	r3, r2
 8008d56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b087      	sub	sp, #28
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f003 0306 	and.w	r3, r3, #6
 8008d7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]
 8008d8a:	e00a      	b.n	8008da2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d002      	beq.n	8008d98 <USB_GetDevSpeed+0x32>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b06      	cmp	r3, #6
 8008d96:	d102      	bne.n	8008d9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	75fb      	strb	r3, [r7, #23]
 8008d9c:	e001      	b.n	8008da2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d9e:	230f      	movs	r3, #15
 8008da0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	371c      	adds	r7, #28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d13a      	bne.n	8008e42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd2:	69da      	ldr	r2, [r3, #28]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fa01 f303 	lsl.w	r3, r1, r3
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dea:	4313      	orrs	r3, r2
 8008dec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d155      	bne.n	8008eb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	78db      	ldrb	r3, [r3, #3]
 8008e1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	059b      	lsls	r3, r3, #22
 8008e26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	0151      	lsls	r1, r2, #5
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	440a      	add	r2, r1
 8008e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	e036      	b.n	8008eb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e48:	69da      	ldr	r2, [r3, #28]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	2101      	movs	r1, #1
 8008e54:	fa01 f303 	lsl.w	r3, r1, r3
 8008e58:	041b      	lsls	r3, r3, #16
 8008e5a:	68f9      	ldr	r1, [r7, #12]
 8008e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e60:	4313      	orrs	r3, r2
 8008e62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d11a      	bne.n	8008eb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	78db      	ldrb	r3, [r3, #3]
 8008e94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e96:	430b      	orrs	r3, r1
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
	...

08008ec0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d161      	bne.n	8008fa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ef2:	d11f      	bne.n	8008f34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	0151      	lsls	r1, r2, #5
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	440a      	add	r2, r1
 8008f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	0151      	lsls	r1, r2, #5
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	440a      	add	r2, r1
 8008f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	f003 030f 	and.w	r3, r3, #15
 8008f44:	2101      	movs	r1, #1
 8008f46:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f54:	4013      	ands	r3, r2
 8008f56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5e:	69da      	ldr	r2, [r3, #28]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	2101      	movs	r1, #1
 8008f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	43db      	mvns	r3, r3
 8008f72:	68f9      	ldr	r1, [r7, #12]
 8008f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f78:	4013      	ands	r3, r2
 8008f7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	0159      	lsls	r1, r3, #5
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	440b      	add	r3, r1
 8008f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f96:	4619      	mov	r1, r3
 8008f98:	4b35      	ldr	r3, [pc, #212]	; (8009070 <USB_DeactivateEndpoint+0x1b0>)
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	600b      	str	r3, [r1, #0]
 8008f9e:	e060      	b.n	8009062 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fb6:	d11f      	bne.n	8008ff8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	0151      	lsls	r1, r2, #5
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	440a      	add	r2, r1
 8008fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	0151      	lsls	r1, r2, #5
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	440a      	add	r2, r1
 8008fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	2101      	movs	r1, #1
 800900a:	fa01 f303 	lsl.w	r3, r1, r3
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	43db      	mvns	r3, r3
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009018:	4013      	ands	r3, r2
 800901a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009022:	69da      	ldr	r2, [r3, #28]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	f003 030f 	and.w	r3, r3, #15
 800902c:	2101      	movs	r1, #1
 800902e:	fa01 f303 	lsl.w	r3, r1, r3
 8009032:	041b      	lsls	r3, r3, #16
 8009034:	43db      	mvns	r3, r3
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800903c:	4013      	ands	r3, r2
 800903e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	0159      	lsls	r1, r3, #5
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	440b      	add	r3, r1
 8009056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905a:	4619      	mov	r1, r3
 800905c:	4b05      	ldr	r3, [pc, #20]	; (8009074 <USB_DeactivateEndpoint+0x1b4>)
 800905e:	4013      	ands	r3, r2
 8009060:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	ec337800 	.word	0xec337800
 8009074:	eff37800 	.word	0xeff37800

08009078 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	; 0x28
 800907c:	af02      	add	r7, sp, #8
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	785b      	ldrb	r3, [r3, #1]
 8009094:	2b01      	cmp	r3, #1
 8009096:	f040 815c 	bne.w	8009352 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d132      	bne.n	8009108 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	0151      	lsls	r1, r2, #5
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	440a      	add	r2, r1
 80090b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	0151      	lsls	r1, r2, #5
 80090d8:	69fa      	ldr	r2, [r7, #28]
 80090da:	440a      	add	r2, r1
 80090dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	0151      	lsls	r1, r2, #5
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	440a      	add	r2, r1
 80090fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009100:	0cdb      	lsrs	r3, r3, #19
 8009102:	04db      	lsls	r3, r3, #19
 8009104:	6113      	str	r3, [r2, #16]
 8009106:	e074      	b.n	80091f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009122:	0cdb      	lsrs	r3, r3, #19
 8009124:	04db      	lsls	r3, r3, #19
 8009126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	0151      	lsls	r1, r2, #5
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	440a      	add	r2, r1
 800913e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009142:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009146:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800914a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009158:	691a      	ldr	r2, [r3, #16]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6959      	ldr	r1, [r3, #20]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	440b      	add	r3, r1
 8009164:	1e59      	subs	r1, r3, #1
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	fbb1 f3f3 	udiv	r3, r1, r3
 800916e:	04d9      	lsls	r1, r3, #19
 8009170:	4b9d      	ldr	r3, [pc, #628]	; (80093e8 <USB_EPStartXfer+0x370>)
 8009172:	400b      	ands	r3, r1
 8009174:	69b9      	ldr	r1, [r7, #24]
 8009176:	0148      	lsls	r0, r1, #5
 8009178:	69f9      	ldr	r1, [r7, #28]
 800917a:	4401      	add	r1, r0
 800917c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009180:	4313      	orrs	r3, r2
 8009182:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009190:	691a      	ldr	r2, [r3, #16]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800919a:	69b9      	ldr	r1, [r7, #24]
 800919c:	0148      	lsls	r0, r1, #5
 800919e:	69f9      	ldr	r1, [r7, #28]
 80091a0:	4401      	add	r1, r0
 80091a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091a6:	4313      	orrs	r3, r2
 80091a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	78db      	ldrb	r3, [r3, #3]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d11f      	bne.n	80091f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	0151      	lsls	r1, r2, #5
 80091c4:	69fa      	ldr	r2, [r7, #28]
 80091c6:	440a      	add	r2, r1
 80091c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80091d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	0151      	lsls	r1, r2, #5
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	440a      	add	r2, r1
 80091e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d14b      	bne.n	8009290 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920c:	461a      	mov	r2, r3
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	78db      	ldrb	r3, [r3, #3]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d128      	bne.n	800926e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009228:	2b00      	cmp	r3, #0
 800922a:	d110      	bne.n	800924e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	e00f      	b.n	800926e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800926c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	69fa      	ldr	r2, [r7, #28]
 8009282:	440a      	add	r2, r1
 8009284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009288:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	e12f      	b.n	80094f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	78db      	ldrb	r3, [r3, #3]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d015      	beq.n	80092e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8117 	beq.w	80094f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	2101      	movs	r1, #1
 80092d4:	fa01 f303 	lsl.w	r3, r1, r3
 80092d8:	69f9      	ldr	r1, [r7, #28]
 80092da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092de:	4313      	orrs	r3, r2
 80092e0:	634b      	str	r3, [r1, #52]	; 0x34
 80092e2:	e105      	b.n	80094f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d110      	bne.n	8009316 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	0151      	lsls	r1, r2, #5
 8009306:	69fa      	ldr	r2, [r7, #28]
 8009308:	440a      	add	r2, r1
 800930a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800930e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009312:	6013      	str	r3, [r2, #0]
 8009314:	e00f      	b.n	8009336 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	0151      	lsls	r1, r2, #5
 8009328:	69fa      	ldr	r2, [r7, #28]
 800932a:	440a      	add	r2, r1
 800932c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009334:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	68d9      	ldr	r1, [r3, #12]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	b298      	uxth	r0, r3
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	4603      	mov	r3, r0
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fa2b 	bl	80097a6 <USB_WritePacket>
 8009350:	e0ce      	b.n	80094f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	4413      	add	r3, r2
 800935a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	69fa      	ldr	r2, [r7, #28]
 8009366:	440a      	add	r2, r1
 8009368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936c:	0cdb      	lsrs	r3, r3, #19
 800936e:	04db      	lsls	r3, r3, #19
 8009370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4413      	add	r3, r2
 800937a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	69ba      	ldr	r2, [r7, #24]
 8009382:	0151      	lsls	r1, r2, #5
 8009384:	69fa      	ldr	r2, [r7, #28]
 8009386:	440a      	add	r2, r1
 8009388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800938c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009394:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d126      	bne.n	80093ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093aa:	691a      	ldr	r2, [r3, #16]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093b4:	69b9      	ldr	r1, [r7, #24]
 80093b6:	0148      	lsls	r0, r1, #5
 80093b8:	69f9      	ldr	r1, [r7, #28]
 80093ba:	4401      	add	r1, r0
 80093bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093c0:	4313      	orrs	r3, r2
 80093c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	0151      	lsls	r1, r2, #5
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	440a      	add	r2, r1
 80093da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093e2:	6113      	str	r3, [r2, #16]
 80093e4:	e036      	b.n	8009454 <USB_EPStartXfer+0x3dc>
 80093e6:	bf00      	nop
 80093e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	695a      	ldr	r2, [r3, #20]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	4413      	add	r3, r2
 80093f6:	1e5a      	subs	r2, r3, #1
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009400:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940e:	691a      	ldr	r2, [r3, #16]
 8009410:	8afb      	ldrh	r3, [r7, #22]
 8009412:	04d9      	lsls	r1, r3, #19
 8009414:	4b39      	ldr	r3, [pc, #228]	; (80094fc <USB_EPStartXfer+0x484>)
 8009416:	400b      	ands	r3, r1
 8009418:	69b9      	ldr	r1, [r7, #24]
 800941a:	0148      	lsls	r0, r1, #5
 800941c:	69f9      	ldr	r1, [r7, #28]
 800941e:	4401      	add	r1, r0
 8009420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009424:	4313      	orrs	r3, r2
 8009426:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009434:	691a      	ldr	r2, [r3, #16]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	8af9      	ldrh	r1, [r7, #22]
 800943c:	fb01 f303 	mul.w	r3, r1, r3
 8009440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009444:	69b9      	ldr	r1, [r7, #24]
 8009446:	0148      	lsls	r0, r1, #5
 8009448:	69f9      	ldr	r1, [r7, #28]
 800944a:	4401      	add	r1, r0
 800944c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009450:	4313      	orrs	r3, r2
 8009452:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d10d      	bne.n	8009476 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d009      	beq.n	8009476 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	68d9      	ldr	r1, [r3, #12]
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009472:	460a      	mov	r2, r1
 8009474:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	78db      	ldrb	r3, [r3, #3]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d128      	bne.n	80094d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948a:	2b00      	cmp	r3, #0
 800948c:	d110      	bne.n	80094b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	0151      	lsls	r1, r2, #5
 80094a0:	69fa      	ldr	r2, [r7, #28]
 80094a2:	440a      	add	r2, r1
 80094a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	e00f      	b.n	80094d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	0151      	lsls	r1, r2, #5
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	440a      	add	r2, r1
 80094c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	0151      	lsls	r1, r2, #5
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	440a      	add	r2, r1
 80094e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	1ff80000 	.word	0x1ff80000

08009500 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	785b      	ldrb	r3, [r3, #1]
 800951c:	2b01      	cmp	r3, #1
 800951e:	f040 80cd 	bne.w	80096bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d132      	bne.n	8009590 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	4413      	add	r3, r2
 8009532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	0151      	lsls	r1, r2, #5
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	440a      	add	r2, r1
 8009540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009544:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009548:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800954c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	440a      	add	r2, r1
 8009564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800956c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	4413      	add	r3, r2
 8009576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	0151      	lsls	r1, r2, #5
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	440a      	add	r2, r1
 8009584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009588:	0cdb      	lsrs	r3, r3, #19
 800958a:	04db      	lsls	r3, r3, #19
 800958c:	6113      	str	r3, [r2, #16]
 800958e:	e04e      	b.n	800962e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	0151      	lsls	r1, r2, #5
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	440a      	add	r2, r1
 80095a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095aa:	0cdb      	lsrs	r3, r3, #19
 80095ac:	04db      	lsls	r3, r3, #19
 80095ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	0151      	lsls	r1, r2, #5
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	440a      	add	r2, r1
 80095c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	695a      	ldr	r2, [r3, #20]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d903      	bls.n	80095e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	0151      	lsls	r1, r2, #5
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	440a      	add	r2, r1
 80095fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	4413      	add	r3, r2
 8009610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009614:	691a      	ldr	r2, [r3, #16]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800961e:	6939      	ldr	r1, [r7, #16]
 8009620:	0148      	lsls	r0, r1, #5
 8009622:	6979      	ldr	r1, [r7, #20]
 8009624:	4401      	add	r1, r0
 8009626:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800962a:	4313      	orrs	r3, r2
 800962c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d11e      	bne.n	8009672 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d009      	beq.n	8009650 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	4413      	add	r3, r2
 8009644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009648:	461a      	mov	r2, r3
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	0151      	lsls	r1, r2, #5
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	440a      	add	r2, r1
 8009666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800966a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	e092      	b.n	8009798 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009690:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d07e      	beq.n	8009798 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	f003 030f 	and.w	r3, r3, #15
 80096aa:	2101      	movs	r1, #1
 80096ac:	fa01 f303 	lsl.w	r3, r1, r3
 80096b0:	6979      	ldr	r1, [r7, #20]
 80096b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096b6:	4313      	orrs	r3, r2
 80096b8:	634b      	str	r3, [r1, #52]	; 0x34
 80096ba:	e06d      	b.n	8009798 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d6:	0cdb      	lsrs	r3, r3, #19
 80096d8:	04db      	lsls	r3, r3, #19
 80096da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	0151      	lsls	r1, r2, #5
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	440a      	add	r2, r1
 80096f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	689a      	ldr	r2, [r3, #8]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	0151      	lsls	r1, r2, #5
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	440a      	add	r2, r1
 8009726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800972e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973c:	691a      	ldr	r2, [r3, #16]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009746:	6939      	ldr	r1, [r7, #16]
 8009748:	0148      	lsls	r0, r1, #5
 800974a:	6979      	ldr	r1, [r7, #20]
 800974c:	4401      	add	r1, r0
 800974e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009752:	4313      	orrs	r3, r2
 8009754:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d10d      	bne.n	8009778 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d009      	beq.n	8009778 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	68d9      	ldr	r1, [r3, #12]
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009774:	460a      	mov	r2, r1
 8009776:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b089      	sub	sp, #36	; 0x24
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	4611      	mov	r1, r2
 80097b2:	461a      	mov	r2, r3
 80097b4:	460b      	mov	r3, r1
 80097b6:	71fb      	strb	r3, [r7, #7]
 80097b8:	4613      	mov	r3, r2
 80097ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80097c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d11a      	bne.n	8009802 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80097cc:	88bb      	ldrh	r3, [r7, #4]
 80097ce:	3303      	adds	r3, #3
 80097d0:	089b      	lsrs	r3, r3, #2
 80097d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80097d4:	2300      	movs	r3, #0
 80097d6:	61bb      	str	r3, [r7, #24]
 80097d8:	e00f      	b.n	80097fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	031a      	lsls	r2, r3, #12
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097e6:	461a      	mov	r2, r3
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	3304      	adds	r3, #4
 80097f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	3301      	adds	r3, #1
 80097f8:	61bb      	str	r3, [r7, #24]
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d3eb      	bcc.n	80097da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3724      	adds	r7, #36	; 0x24
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009810:	b480      	push	{r7}
 8009812:	b089      	sub	sp, #36	; 0x24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	4613      	mov	r3, r2
 800981c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009826:	88fb      	ldrh	r3, [r7, #6]
 8009828:	3303      	adds	r3, #3
 800982a:	089b      	lsrs	r3, r3, #2
 800982c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800982e:	2300      	movs	r3, #0
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	e00b      	b.n	800984c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	3304      	adds	r3, #4
 8009844:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	3301      	adds	r3, #1
 800984a:	61bb      	str	r3, [r7, #24]
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	429a      	cmp	r2, r3
 8009852:	d3ef      	bcc.n	8009834 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009854:	69fb      	ldr	r3, [r7, #28]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3724      	adds	r7, #36	; 0x24
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009862:	b480      	push	{r7}
 8009864:	b085      	sub	sp, #20
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	785b      	ldrb	r3, [r3, #1]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d12c      	bne.n	80098d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	db12      	blt.n	80098b6 <USB_EPSetStall+0x54>
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00f      	beq.n	80098b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	0151      	lsls	r1, r2, #5
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	440a      	add	r2, r1
 80098ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80098b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	0151      	lsls	r1, r2, #5
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	440a      	add	r2, r1
 80098cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	e02b      	b.n	8009930 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	db12      	blt.n	8009910 <USB_EPSetStall+0xae>
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00f      	beq.n	8009910 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	440a      	add	r2, r1
 8009906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800990a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800990e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	0151      	lsls	r1, r2, #5
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	440a      	add	r2, r1
 8009926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800992a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800992e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d128      	bne.n	80099ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	0151      	lsls	r1, r2, #5
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	440a      	add	r2, r1
 8009970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009978:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	78db      	ldrb	r3, [r3, #3]
 800997e:	2b03      	cmp	r3, #3
 8009980:	d003      	beq.n	800998a <USB_EPClearStall+0x4c>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	78db      	ldrb	r3, [r3, #3]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d138      	bne.n	80099fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	e027      	b.n	80099fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	0151      	lsls	r1, r2, #5
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	440a      	add	r2, r1
 80099c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	78db      	ldrb	r3, [r3, #3]
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d003      	beq.n	80099dc <USB_EPClearStall+0x9e>
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	78db      	ldrb	r3, [r3, #3]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d10f      	bne.n	80099fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	015a      	lsls	r2, r3, #5
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	0151      	lsls	r1, r2, #5
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	440a      	add	r2, r1
 80099f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b085      	sub	sp, #20
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009a2c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	011b      	lsls	r3, r3, #4
 8009a3a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009a3e:	68f9      	ldr	r1, [r7, #12]
 8009a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a44:	4313      	orrs	r3, r2
 8009a46:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a70:	f023 0303 	bic.w	r3, r3, #3
 8009a74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a84:	f023 0302 	bic.w	r3, r3, #2
 8009a88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ab2:	f023 0303 	bic.w	r3, r3, #3
 8009ab6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ac6:	f043 0302 	orr.w	r3, r3, #2
 8009aca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b085      	sub	sp, #20
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4013      	ands	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009af2:	68fb      	ldr	r3, [r7, #12]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	4013      	ands	r3, r2
 8009b22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	0c1b      	lsrs	r3, r3, #16
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	4013      	ands	r3, r2
 8009b56:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	b29b      	uxth	r3, r3
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	4013      	ands	r3, r2
 8009b94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b96:	68bb      	ldr	r3, [r7, #8]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009bc8:	78fb      	ldrb	r3, [r7, #3]
 8009bca:	f003 030f 	and.w	r3, r3, #15
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd4:	01db      	lsls	r3, r3, #7
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009bde:	78fb      	ldrb	r3, [r7, #3]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	4013      	ands	r3, r2
 8009bf0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	371c      	adds	r7, #28
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009c3a:	f023 0307 	bic.w	r3, r3, #7
 8009c3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
	...

08009c64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	333c      	adds	r3, #60	; 0x3c
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	4a26      	ldr	r2, [pc, #152]	; (8009d1c <USB_EP0_OutStart+0xb8>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d90a      	bls.n	8009c9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c98:	d101      	bne.n	8009c9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e037      	b.n	8009d0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ccc:	f043 0318 	orr.w	r3, r3, #24
 8009cd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ce0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ce4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ce6:	7afb      	ldrb	r3, [r7, #11]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d10f      	bne.n	8009d0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009d0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	371c      	adds	r7, #28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	4f54300a 	.word	0x4f54300a

08009d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <USB_CoreReset+0x64>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d901      	bls.n	8009d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e01b      	b.n	8009d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	daf2      	bge.n	8009d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	f043 0201 	orr.w	r2, r3, #1
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4a09      	ldr	r2, [pc, #36]	; (8009d84 <USB_CoreReset+0x64>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d901      	bls.n	8009d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e006      	b.n	8009d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d0f0      	beq.n	8009d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	00030d40 	.word	0x00030d40

08009d88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009d8c:	4904      	ldr	r1, [pc, #16]	; (8009da0 <MX_FATFS_Init+0x18>)
 8009d8e:	4805      	ldr	r0, [pc, #20]	; (8009da4 <MX_FATFS_Init+0x1c>)
 8009d90:	f001 fdf0 	bl	800b974 <FATFS_LinkDriver>
 8009d94:	4603      	mov	r3, r0
 8009d96:	461a      	mov	r2, r3
 8009d98:	4b03      	ldr	r3, [pc, #12]	; (8009da8 <MX_FATFS_Init+0x20>)
 8009d9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009d9c:	bf00      	nop
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	2000064c 	.word	0x2000064c
 8009da4:	0800c680 	.word	0x0800c680
 8009da8:	20000648 	.word	0x20000648

08009dac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009db6:	f000 f879 	bl	8009eac <BSP_SD_IsDetected>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d001      	beq.n	8009dc4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e012      	b.n	8009dea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009dc4:	480b      	ldr	r0, [pc, #44]	; (8009df4 <BSP_SD_Init+0x48>)
 8009dc6:	f7fb fa13 	bl	80051f0 <HAL_SD_Init>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009dce:	79fb      	ldrb	r3, [r7, #7]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d109      	bne.n	8009de8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009dd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009dd8:	4806      	ldr	r0, [pc, #24]	; (8009df4 <BSP_SD_Init+0x48>)
 8009dda:	f7fc f801 	bl	8005de0 <HAL_SD_ConfigWideBusOperation>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009de8:	79fb      	ldrb	r3, [r7, #7]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000440 	.word	0x20000440

08009df8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b088      	sub	sp, #32
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	68f9      	ldr	r1, [r7, #12]
 8009e14:	4806      	ldr	r0, [pc, #24]	; (8009e30 <BSP_SD_ReadBlocks+0x38>)
 8009e16:	f7fb fa7b 	bl	8005310 <HAL_SD_ReadBlocks>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000440 	.word	0x20000440

08009e34 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	68f9      	ldr	r1, [r7, #12]
 8009e50:	4806      	ldr	r0, [pc, #24]	; (8009e6c <BSP_SD_WriteBlocks+0x38>)
 8009e52:	f7fb fc55 	bl	8005700 <HAL_SD_WriteBlocks>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20000440 	.word	0x20000440

08009e70 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009e74:	4805      	ldr	r0, [pc, #20]	; (8009e8c <BSP_SD_GetCardState+0x1c>)
 8009e76:	f7fc f82f 	bl	8005ed8 <HAL_SD_GetCardState>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	bf14      	ite	ne
 8009e80:	2301      	movne	r3, #1
 8009e82:	2300      	moveq	r3, #0
 8009e84:	b2db      	uxtb	r3, r3
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20000440 	.word	0x20000440

08009e90 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	4803      	ldr	r0, [pc, #12]	; (8009ea8 <BSP_SD_GetCardInfo+0x18>)
 8009e9c:	f7fb ff74 	bl	8005d88 <HAL_SD_GetCardInfo>
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	20000440 	.word	0x20000440

08009eac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009eb6:	f000 f80b 	bl	8009ed0 <BSP_PlatformIsDetected>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009ec4:	79fb      	ldrb	r3, [r7, #7]
 8009ec6:	b2db      	uxtb	r3, r3
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009eda:	2180      	movs	r1, #128	; 0x80
 8009edc:	4806      	ldr	r0, [pc, #24]	; (8009ef8 <BSP_PlatformIsDetected+0x28>)
 8009ede:	f7f8 fde9 	bl	8002ab4 <HAL_GPIO_ReadPin>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009eec:	79fb      	ldrb	r3, [r7, #7]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	40021000 	.word	0x40021000

08009efc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009f06:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <SD_CheckStatus+0x38>)
 8009f08:	2201      	movs	r2, #1
 8009f0a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009f0c:	f7ff ffb0 	bl	8009e70 <BSP_SD_GetCardState>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d107      	bne.n	8009f26 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009f16:	4b07      	ldr	r3, [pc, #28]	; (8009f34 <SD_CheckStatus+0x38>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	f023 0301 	bic.w	r3, r3, #1
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	4b04      	ldr	r3, [pc, #16]	; (8009f34 <SD_CheckStatus+0x38>)
 8009f24:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009f26:	4b03      	ldr	r3, [pc, #12]	; (8009f34 <SD_CheckStatus+0x38>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	b2db      	uxtb	r3, r3
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	2000000d 	.word	0x2000000d

08009f38 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009f42:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <SD_initialize+0x38>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009f48:	f7ff ff30 	bl	8009dac <BSP_SD_Init>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d107      	bne.n	8009f62 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff ffd1 	bl	8009efc <SD_CheckStatus>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <SD_initialize+0x38>)
 8009f60:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009f62:	4b03      	ldr	r3, [pc, #12]	; (8009f70 <SD_initialize+0x38>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	b2db      	uxtb	r3, r3
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	2000000d 	.word	0x2000000d

08009f74 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff ffbb 	bl	8009efc <SD_CheckStatus>
 8009f86:	4603      	mov	r3, r0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	607a      	str	r2, [r7, #4]
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	6879      	ldr	r1, [r7, #4]
 8009fac:	68b8      	ldr	r0, [r7, #8]
 8009fae:	f7ff ff23 	bl	8009df8 <BSP_SD_ReadBlocks>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d107      	bne.n	8009fc8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009fb8:	bf00      	nop
 8009fba:	f7ff ff59 	bl	8009e70 <BSP_SD_GetCardState>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1fa      	bne.n	8009fba <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b086      	sub	sp, #24
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	6879      	ldr	r1, [r7, #4]
 8009fee:	68b8      	ldr	r0, [r7, #8]
 8009ff0:	f7ff ff20 	bl	8009e34 <BSP_SD_WriteBlocks>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d107      	bne.n	800a00a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009ffa:	bf00      	nop
 8009ffc:	f7ff ff38 	bl	8009e70 <BSP_SD_GetCardState>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1fa      	bne.n	8009ffc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b08c      	sub	sp, #48	; 0x30
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	603a      	str	r2, [r7, #0]
 800a01e:	71fb      	strb	r3, [r7, #7]
 800a020:	460b      	mov	r3, r1
 800a022:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a02a:	4b25      	ldr	r3, [pc, #148]	; (800a0c0 <SD_ioctl+0xac>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <SD_ioctl+0x28>
 800a038:	2303      	movs	r3, #3
 800a03a:	e03c      	b.n	800a0b6 <SD_ioctl+0xa2>

  switch (cmd)
 800a03c:	79bb      	ldrb	r3, [r7, #6]
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d834      	bhi.n	800a0ac <SD_ioctl+0x98>
 800a042:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <SD_ioctl+0x34>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a059 	.word	0x0800a059
 800a04c:	0800a061 	.word	0x0800a061
 800a050:	0800a079 	.word	0x0800a079
 800a054:	0800a093 	.word	0x0800a093
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a05e:	e028      	b.n	800a0b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a060:	f107 030c 	add.w	r3, r7, #12
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff ff13 	bl	8009e90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a076:	e01c      	b.n	800a0b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a078:	f107 030c 	add.w	r3, r7, #12
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff ff07 	bl	8009e90 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a084:	b29a      	uxth	r2, r3
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a090:	e00f      	b.n	800a0b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a092:	f107 030c 	add.w	r3, r7, #12
 800a096:	4618      	mov	r0, r3
 800a098:	f7ff fefa 	bl	8009e90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	0a5a      	lsrs	r2, r3, #9
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0aa:	e002      	b.n	800a0b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a0b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3730      	adds	r7, #48	; 0x30
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	2000000d 	.word	0x2000000d

0800a0c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a0d4:	f002 f9a6 	bl	800c424 <malloc>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d105      	bne.n	800a0ee <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e066      	b.n	800a1bc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	7c1b      	ldrb	r3, [r3, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d119      	bne.n	800a132 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a102:	2202      	movs	r2, #2
 800a104:	2181      	movs	r1, #129	; 0x81
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f002 f813 	bl	800c132 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a112:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a116:	2202      	movs	r2, #2
 800a118:	2101      	movs	r1, #1
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f002 f809 	bl	800c132 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2210      	movs	r2, #16
 800a12c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a130:	e016      	b.n	800a160 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a132:	2340      	movs	r3, #64	; 0x40
 800a134:	2202      	movs	r2, #2
 800a136:	2181      	movs	r1, #129	; 0x81
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 fffa 	bl	800c132 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a144:	2340      	movs	r3, #64	; 0x40
 800a146:	2202      	movs	r2, #2
 800a148:	2101      	movs	r1, #1
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 fff1 	bl	800c132 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2210      	movs	r2, #16
 800a15c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a160:	2308      	movs	r3, #8
 800a162:	2203      	movs	r2, #3
 800a164:	2182      	movs	r1, #130	; 0x82
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f001 ffe3 	bl	800c132 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7c1b      	ldrb	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d109      	bne.n	800a1aa <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a19c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f002 f8b4 	bl	800c310 <USBD_LL_PrepareReceive>
 800a1a8:	e007      	b.n	800a1ba <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1b0:	2340      	movs	r3, #64	; 0x40
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f002 f8ab 	bl	800c310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a1d4:	2181      	movs	r1, #129	; 0x81
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 ffd1 	bl	800c17e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 ffca 	bl	800c17e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a1f2:	2182      	movs	r1, #130	; 0x82
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f001 ffc2 	bl	800c17e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00e      	beq.n	800a232 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a224:	4618      	mov	r0, r3
 800a226:	f002 f905 	bl	800c434 <free>
    pdev->pClassData = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800a232:	7bfb      	ldrb	r3, [r7, #15]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a24c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a252:	2300      	movs	r3, #0
 800a254:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a262:	2b00      	cmp	r3, #0
 800a264:	d03a      	beq.n	800a2dc <USBD_CDC_Setup+0xa0>
 800a266:	2b20      	cmp	r3, #32
 800a268:	f040 8097 	bne.w	800a39a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	88db      	ldrh	r3, [r3, #6]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d029      	beq.n	800a2c8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	b25b      	sxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	da11      	bge.n	800a2a2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800a28a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	88d2      	ldrh	r2, [r2, #6]
 800a290:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a292:	6939      	ldr	r1, [r7, #16]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	88db      	ldrh	r3, [r3, #6]
 800a298:	461a      	mov	r2, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 fa9d 	bl	800b7da <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800a2a0:	e082      	b.n	800a3a8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	785a      	ldrb	r2, [r3, #1]
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	88db      	ldrh	r3, [r3, #6]
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a2b8:	6939      	ldr	r1, [r7, #16]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	88db      	ldrh	r3, [r3, #6]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f001 fab6 	bl	800b832 <USBD_CtlPrepareRx>
    break;
 800a2c6:	e06f      	b.n	800a3a8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	7850      	ldrb	r0, [r2, #1]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	4798      	blx	r3
    break;
 800a2da:	e065      	b.n	800a3a8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	2b0b      	cmp	r3, #11
 800a2e2:	d84f      	bhi.n	800a384 <USBD_CDC_Setup+0x148>
 800a2e4:	a201      	add	r2, pc, #4	; (adr r2, 800a2ec <USBD_CDC_Setup+0xb0>)
 800a2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ea:	bf00      	nop
 800a2ec:	0800a31d 	.word	0x0800a31d
 800a2f0:	0800a393 	.word	0x0800a393
 800a2f4:	0800a385 	.word	0x0800a385
 800a2f8:	0800a385 	.word	0x0800a385
 800a2fc:	0800a385 	.word	0x0800a385
 800a300:	0800a385 	.word	0x0800a385
 800a304:	0800a385 	.word	0x0800a385
 800a308:	0800a385 	.word	0x0800a385
 800a30c:	0800a385 	.word	0x0800a385
 800a310:	0800a385 	.word	0x0800a385
 800a314:	0800a345 	.word	0x0800a345
 800a318:	0800a36d 	.word	0x0800a36d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a322:	2b03      	cmp	r3, #3
 800a324:	d107      	bne.n	800a336 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a326:	f107 030c 	add.w	r3, r7, #12
 800a32a:	2202      	movs	r2, #2
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f001 fa53 	bl	800b7da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a334:	e030      	b.n	800a398 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 f9dd 	bl	800b6f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800a33e:	2303      	movs	r3, #3
 800a340:	75fb      	strb	r3, [r7, #23]
      break;
 800a342:	e029      	b.n	800a398 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d107      	bne.n	800a35e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a34e:	f107 030f 	add.w	r3, r7, #15
 800a352:	2201      	movs	r2, #1
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 fa3f 	bl	800b7da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a35c:	e01c      	b.n	800a398 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 f9c9 	bl	800b6f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800a366:	2303      	movs	r3, #3
 800a368:	75fb      	strb	r3, [r7, #23]
      break;
 800a36a:	e015      	b.n	800a398 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a372:	2b03      	cmp	r3, #3
 800a374:	d00f      	beq.n	800a396 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 f9bd 	bl	800b6f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800a37e:	2303      	movs	r3, #3
 800a380:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a382:	e008      	b.n	800a396 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 f9b6 	bl	800b6f8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a38c:	2303      	movs	r3, #3
 800a38e:	75fb      	strb	r3, [r7, #23]
      break;
 800a390:	e002      	b.n	800a398 <USBD_CDC_Setup+0x15c>
      break;
 800a392:	bf00      	nop
 800a394:	e008      	b.n	800a3a8 <USBD_CDC_Setup+0x16c>
      break;
 800a396:	bf00      	nop
    }
    break;
 800a398:	e006      	b.n	800a3a8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f001 f9ab 	bl	800b6f8 <USBD_CtlError>
    ret = USBD_FAIL;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	75fb      	strb	r3, [r7, #23]
    break;
 800a3a6:	bf00      	nop
  }

  return (uint8_t)ret;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop

0800a3b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d101      	bne.n	800a3d6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e049      	b.n	800a46a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3de:	78fa      	ldrb	r2, [r7, #3]
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	440b      	add	r3, r1
 800a3ec:	3318      	adds	r3, #24
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d029      	beq.n	800a448 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a3f4:	78fa      	ldrb	r2, [r7, #3]
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	440b      	add	r3, r1
 800a402:	3318      	adds	r3, #24
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	78f9      	ldrb	r1, [r7, #3]
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	460b      	mov	r3, r1
 800a40c:	00db      	lsls	r3, r3, #3
 800a40e:	1a5b      	subs	r3, r3, r1
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4403      	add	r3, r0
 800a414:	3344      	adds	r3, #68	; 0x44
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	fbb2 f1f3 	udiv	r1, r2, r3
 800a41c:	fb03 f301 	mul.w	r3, r3, r1
 800a420:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a422:	2b00      	cmp	r3, #0
 800a424:	d110      	bne.n	800a448 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	440b      	add	r3, r1
 800a434:	3318      	adds	r3, #24
 800a436:	2200      	movs	r2, #0
 800a438:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a43a:	78f9      	ldrb	r1, [r7, #3]
 800a43c:	2300      	movs	r3, #0
 800a43e:	2200      	movs	r2, #0
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 ff44 	bl	800c2ce <USBD_LL_Transmit>
 800a446:	e00f      	b.n	800a468 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a464:	78fa      	ldrb	r2, [r7, #3]
 800a466:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	460b      	mov	r3, r1
 800a47c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a484:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a490:	2303      	movs	r3, #3
 800a492:	e015      	b.n	800a4c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 ff5a 	bl	800c352 <USBD_LL_GetRxDataSize>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4d6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d015      	beq.n	800a50e <USBD_CDC_EP0_RxReady+0x46>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a4e8:	2bff      	cmp	r3, #255	; 0xff
 800a4ea:	d010      	beq.n	800a50e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a4fa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a502:	b292      	uxth	r2, r2
 800a504:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	22ff      	movs	r2, #255	; 0xff
 800a50a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2243      	movs	r2, #67	; 0x43
 800a524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a526:	4b03      	ldr	r3, [pc, #12]	; (800a534 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20000098 	.word	0x20000098

0800a538 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2243      	movs	r2, #67	; 0x43
 800a544:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a546:	4b03      	ldr	r3, [pc, #12]	; (800a554 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr
 800a554:	20000054 	.word	0x20000054

0800a558 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2243      	movs	r2, #67	; 0x43
 800a564:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a566:	4b03      	ldr	r3, [pc, #12]	; (800a574 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	200000dc 	.word	0x200000dc

0800a578 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	220a      	movs	r2, #10
 800a584:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a586:	4b03      	ldr	r3, [pc, #12]	; (800a594 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	20000010 	.word	0x20000010

0800a598 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e004      	b.n	800a5b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a5c2:	b480      	push	{r7}
 800a5c4:	b087      	sub	sp, #28
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	60b9      	str	r1, [r7, #8]
 800a5cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	371c      	adds	r7, #28
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a604:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a62a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a62c:	2301      	movs	r3, #1
 800a62e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e01a      	b.n	800a674 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a644:	2b00      	cmp	r3, #0
 800a646:	d114      	bne.n	800a672 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a666:	2181      	movs	r1, #129	; 0x81
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f001 fe30 	bl	800c2ce <USBD_LL_Transmit>

    ret = USBD_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a672:	7bfb      	ldrb	r3, [r7, #15]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a68a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a696:	2303      	movs	r3, #3
 800a698:	e016      	b.n	800a6c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	7c1b      	ldrb	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d109      	bne.n	800a6b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f001 fe2e 	bl	800c310 <USBD_LL_PrepareReceive>
 800a6b4:	e007      	b.n	800a6c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6bc:	2340      	movs	r3, #64	; 0x40
 800a6be:	2101      	movs	r1, #1
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 fe25 	bl	800c310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e025      	b.n	800a734 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a700:	2b00      	cmp	r3, #0
 800a702:	d003      	beq.n	800a70c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	79fa      	ldrb	r2, [r7, #7]
 800a726:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f001 fc9b 	bl	800c064 <USBD_LL_Init>
 800a72e:	4603      	mov	r3, r0
 800a730:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a732:	7dfb      	ldrb	r3, [r7, #23]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3718      	adds	r7, #24
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a750:	2303      	movs	r3, #3
 800a752:	e010      	b.n	800a776 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a764:	f107 020e 	add.w	r2, r7, #14
 800a768:	4610      	mov	r0, r2
 800a76a:	4798      	blx	r3
 800a76c:	4602      	mov	r2, r0
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f001 fcb8 	bl	800c0fc <USBD_LL_Start>
 800a78c:	4603      	mov	r3, r0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d009      	beq.n	800a7da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	78fa      	ldrb	r2, [r7, #3]
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	4798      	blx	r3
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d007      	beq.n	800a80a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	78fa      	ldrb	r2, [r7, #3]
 800a804:	4611      	mov	r1, r2
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	4798      	blx	r3
  }

  return USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	4618      	mov	r0, r3
 800a828:	f000 ff2c 	bl	800b684 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a83a:	461a      	mov	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a848:	f003 031f 	and.w	r3, r3, #31
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d00e      	beq.n	800a86e <USBD_LL_SetupStage+0x5a>
 800a850:	2b01      	cmp	r3, #1
 800a852:	d302      	bcc.n	800a85a <USBD_LL_SetupStage+0x46>
 800a854:	2b02      	cmp	r3, #2
 800a856:	d014      	beq.n	800a882 <USBD_LL_SetupStage+0x6e>
 800a858:	e01d      	b.n	800a896 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa18 	bl	800ac98 <USBD_StdDevReq>
 800a868:	4603      	mov	r3, r0
 800a86a:	73fb      	strb	r3, [r7, #15]
      break;
 800a86c:	e020      	b.n	800a8b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fa7c 	bl	800ad74 <USBD_StdItfReq>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73fb      	strb	r3, [r7, #15]
      break;
 800a880:	e016      	b.n	800a8b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fab8 	bl	800ae00 <USBD_StdEPReq>
 800a890:	4603      	mov	r3, r0
 800a892:	73fb      	strb	r3, [r7, #15]
      break;
 800a894:	e00c      	b.n	800a8b0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a89c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f001 fc89 	bl	800c1bc <USBD_LL_StallEP>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ae:	bf00      	nop
  }

  return ret;
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b086      	sub	sp, #24
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	607a      	str	r2, [r7, #4]
 800a8c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a8c8:	7afb      	ldrb	r3, [r7, #11]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d137      	bne.n	800a93e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d14a      	bne.n	800a976 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d913      	bls.n	800a914 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	1ad2      	subs	r2, r2, r3
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	4293      	cmp	r3, r2
 800a904:	bf28      	it	cs
 800a906:	4613      	movcs	r3, r2
 800a908:	461a      	mov	r2, r3
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 ffad 	bl	800b86c <USBD_CtlContinueRx>
 800a912:	e030      	b.n	800a976 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00a      	beq.n	800a936 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a926:	2b03      	cmp	r3, #3
 800a928:	d105      	bne.n	800a936 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 ffa9 	bl	800b88e <USBD_CtlSendStatus>
 800a93c:	e01b      	b.n	800a976 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d013      	beq.n	800a972 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a950:	2b03      	cmp	r3, #3
 800a952:	d10e      	bne.n	800a972 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95a:	699b      	ldr	r3, [r3, #24]
 800a95c:	7afa      	ldrb	r2, [r7, #11]
 800a95e:	4611      	mov	r1, r2
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	4798      	blx	r3
 800a964:	4603      	mov	r3, r0
 800a966:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a968:	7dfb      	ldrb	r3, [r7, #23]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	e002      	b.n	800a978 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a972:	2303      	movs	r3, #3
 800a974:	e000      	b.n	800a978 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3718      	adds	r7, #24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	460b      	mov	r3, r1
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a98e:	7afb      	ldrb	r3, [r7, #11]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d16a      	bne.n	800aa6a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3314      	adds	r3, #20
 800a998:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d155      	bne.n	800aa50 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	689a      	ldr	r2, [r3, #8]
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d914      	bls.n	800a9da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	1ad2      	subs	r2, r2, r3
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	6879      	ldr	r1, [r7, #4]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 ff22 	bl	800b810 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f001 fc9c 	bl	800c310 <USBD_LL_PrepareReceive>
 800a9d8:	e03a      	b.n	800aa50 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	68da      	ldr	r2, [r3, #12]
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d11c      	bne.n	800aa20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d316      	bcc.n	800aa20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d20f      	bcs.n	800aa20 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa00:	2200      	movs	r2, #0
 800aa02:	2100      	movs	r1, #0
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 ff03 	bl	800b810 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa12:	2300      	movs	r3, #0
 800aa14:	2200      	movs	r2, #0
 800aa16:	2100      	movs	r1, #0
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f001 fc79 	bl	800c310 <USBD_LL_PrepareReceive>
 800aa1e:	e017      	b.n	800aa50 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00a      	beq.n	800aa42 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d105      	bne.n	800aa42 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa42:	2180      	movs	r1, #128	; 0x80
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f001 fbb9 	bl	800c1bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 ff32 	bl	800b8b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d123      	bne.n	800aaa2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f7ff fe9b 	bl	800a796 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa68:	e01b      	b.n	800aaa2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d013      	beq.n	800aa9e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d10e      	bne.n	800aa9e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	7afa      	ldrb	r2, [r7, #11]
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	4798      	blx	r3
 800aa90:	4603      	mov	r3, r0
 800aa92:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	e002      	b.n	800aaa4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e000      	b.n	800aaa4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d009      	beq.n	800aaf0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	6852      	ldr	r2, [r2, #4]
 800aae8:	b2d2      	uxtb	r2, r2
 800aaea:	4611      	mov	r1, r2
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaf0:	2340      	movs	r3, #64	; 0x40
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 fb1b 	bl	800c132 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2240      	movs	r2, #64	; 0x40
 800ab08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab0c:	2340      	movs	r3, #64	; 0x40
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2180      	movs	r1, #128	; 0x80
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 fb0d 	bl	800c132 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2240      	movs	r2, #64	; 0x40
 800ab22:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	78fa      	ldrb	r2, [r7, #3]
 800ab3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2204      	movs	r2, #4
 800ab66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	d105      	bne.n	800ab96 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d10b      	bne.n	800abce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d005      	beq.n	800abce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abf2:	b480      	push	{r7}
 800abf4:	b083      	sub	sp, #12
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	460b      	mov	r3, r1
 800abfc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b082      	sub	sp, #8
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d009      	beq.n	800ac50 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	6852      	ldr	r2, [r2, #4]
 800ac48:	b2d2      	uxtb	r2, r2
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	4798      	blx	r3
  }

  return USBD_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b087      	sub	sp, #28
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac78:	8a3b      	ldrh	r3, [r7, #16]
 800ac7a:	021b      	lsls	r3, r3, #8
 800ac7c:	b21a      	sxth	r2, r3
 800ac7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	b21b      	sxth	r3, r3
 800ac86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac88:	89fb      	ldrh	r3, [r7, #14]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	371c      	adds	r7, #28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
	...

0800ac98 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acae:	2b20      	cmp	r3, #32
 800acb0:	d004      	beq.n	800acbc <USBD_StdDevReq+0x24>
 800acb2:	2b40      	cmp	r3, #64	; 0x40
 800acb4:	d002      	beq.n	800acbc <USBD_StdDevReq+0x24>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <USBD_StdDevReq+0x38>
 800acba:	e050      	b.n	800ad5e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	4798      	blx	r3
 800acca:	4603      	mov	r3, r0
 800accc:	73fb      	strb	r3, [r7, #15]
    break;
 800acce:	e04b      	b.n	800ad68 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	2b09      	cmp	r3, #9
 800acd6:	d83c      	bhi.n	800ad52 <USBD_StdDevReq+0xba>
 800acd8:	a201      	add	r2, pc, #4	; (adr r2, 800ace0 <USBD_StdDevReq+0x48>)
 800acda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acde:	bf00      	nop
 800ace0:	0800ad35 	.word	0x0800ad35
 800ace4:	0800ad49 	.word	0x0800ad49
 800ace8:	0800ad53 	.word	0x0800ad53
 800acec:	0800ad3f 	.word	0x0800ad3f
 800acf0:	0800ad53 	.word	0x0800ad53
 800acf4:	0800ad13 	.word	0x0800ad13
 800acf8:	0800ad09 	.word	0x0800ad09
 800acfc:	0800ad53 	.word	0x0800ad53
 800ad00:	0800ad2b 	.word	0x0800ad2b
 800ad04:	0800ad1d 	.word	0x0800ad1d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f9ce 	bl	800b0ac <USBD_GetDescriptor>
      break;
 800ad10:	e024      	b.n	800ad5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ad12:	6839      	ldr	r1, [r7, #0]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fb33 	bl	800b380 <USBD_SetAddress>
      break;
 800ad1a:	e01f      	b.n	800ad5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fb70 	bl	800b404 <USBD_SetConfig>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]
      break;
 800ad28:	e018      	b.n	800ad5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fc0d 	bl	800b54c <USBD_GetConfig>
      break;
 800ad32:	e013      	b.n	800ad5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fc3c 	bl	800b5b4 <USBD_GetStatus>
      break;
 800ad3c:	e00e      	b.n	800ad5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fc6a 	bl	800b61a <USBD_SetFeature>
      break;
 800ad46:	e009      	b.n	800ad5c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fc79 	bl	800b642 <USBD_ClrFeature>
      break;
 800ad50:	e004      	b.n	800ad5c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fccf 	bl	800b6f8 <USBD_CtlError>
      break;
 800ad5a:	bf00      	nop
    }
    break;
 800ad5c:	e004      	b.n	800ad68 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fcc9 	bl	800b6f8 <USBD_CtlError>
    break;
 800ad66:	bf00      	nop
  }

  return ret;
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop

0800ad74 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad8a:	2b20      	cmp	r3, #32
 800ad8c:	d003      	beq.n	800ad96 <USBD_StdItfReq+0x22>
 800ad8e:	2b40      	cmp	r3, #64	; 0x40
 800ad90:	d001      	beq.n	800ad96 <USBD_StdItfReq+0x22>
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d12a      	bne.n	800adec <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d81d      	bhi.n	800adde <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	889b      	ldrh	r3, [r3, #4]
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d813      	bhi.n	800add4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	6839      	ldr	r1, [r7, #0]
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	4798      	blx	r3
 800adba:	4603      	mov	r3, r0
 800adbc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	88db      	ldrh	r3, [r3, #6]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d110      	bne.n	800ade8 <USBD_StdItfReq+0x74>
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10d      	bne.n	800ade8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fd5e 	bl	800b88e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800add2:	e009      	b.n	800ade8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fc8e 	bl	800b6f8 <USBD_CtlError>
      break;
 800addc:	e004      	b.n	800ade8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fc89 	bl	800b6f8 <USBD_CtlError>
      break;
 800ade6:	e000      	b.n	800adea <USBD_StdItfReq+0x76>
      break;
 800ade8:	bf00      	nop
    }
    break;
 800adea:	e004      	b.n	800adf6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fc82 	bl	800b6f8 <USBD_CtlError>
    break;
 800adf4:	bf00      	nop
  }

  return ret;
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	889b      	ldrh	r3, [r3, #4]
 800ae12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae1c:	2b20      	cmp	r3, #32
 800ae1e:	d004      	beq.n	800ae2a <USBD_StdEPReq+0x2a>
 800ae20:	2b40      	cmp	r3, #64	; 0x40
 800ae22:	d002      	beq.n	800ae2a <USBD_StdEPReq+0x2a>
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00a      	beq.n	800ae3e <USBD_StdEPReq+0x3e>
 800ae28:	e135      	b.n	800b096 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	4798      	blx	r3
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3c:	e130      	b.n	800b0a0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	785b      	ldrb	r3, [r3, #1]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d03e      	beq.n	800aec4 <USBD_StdEPReq+0xc4>
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d002      	beq.n	800ae50 <USBD_StdEPReq+0x50>
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d077      	beq.n	800af3e <USBD_StdEPReq+0x13e>
 800ae4e:	e11c      	b.n	800b08a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d002      	beq.n	800ae60 <USBD_StdEPReq+0x60>
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d015      	beq.n	800ae8a <USBD_StdEPReq+0x8a>
 800ae5e:	e02b      	b.n	800aeb8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00c      	beq.n	800ae80 <USBD_StdEPReq+0x80>
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	2b80      	cmp	r3, #128	; 0x80
 800ae6a:	d009      	beq.n	800ae80 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 f9a3 	bl	800c1bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae76:	2180      	movs	r1, #128	; 0x80
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f001 f99f 	bl	800c1bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ae7e:	e020      	b.n	800aec2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fc38 	bl	800b6f8 <USBD_CtlError>
        break;
 800ae88:	e01b      	b.n	800aec2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10e      	bne.n	800aeb0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae92:	7bbb      	ldrb	r3, [r7, #14]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00b      	beq.n	800aeb0 <USBD_StdEPReq+0xb0>
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	2b80      	cmp	r3, #128	; 0x80
 800ae9c:	d008      	beq.n	800aeb0 <USBD_StdEPReq+0xb0>
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	88db      	ldrh	r3, [r3, #6]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d104      	bne.n	800aeb0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f001 f986 	bl	800c1bc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fcec 	bl	800b88e <USBD_CtlSendStatus>

        break;
 800aeb6:	e004      	b.n	800aec2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fc1c 	bl	800b6f8 <USBD_CtlError>
        break;
 800aec0:	bf00      	nop
      }
      break;
 800aec2:	e0e7      	b.n	800b094 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d002      	beq.n	800aed4 <USBD_StdEPReq+0xd4>
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d015      	beq.n	800aefe <USBD_StdEPReq+0xfe>
 800aed2:	e02d      	b.n	800af30 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00c      	beq.n	800aef4 <USBD_StdEPReq+0xf4>
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b80      	cmp	r3, #128	; 0x80
 800aede:	d009      	beq.n	800aef4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f001 f969 	bl	800c1bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeea:	2180      	movs	r1, #128	; 0x80
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 f965 	bl	800c1bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800aef2:	e023      	b.n	800af3c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fbfe 	bl	800b6f8 <USBD_CtlError>
        break;
 800aefc:	e01e      	b.n	800af3c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	885b      	ldrh	r3, [r3, #2]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d119      	bne.n	800af3a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d004      	beq.n	800af1a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af10:	7bbb      	ldrb	r3, [r7, #14]
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f001 f970 	bl	800c1fa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fcb7 	bl	800b88e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	4798      	blx	r3
        }
        break;
 800af2e:	e004      	b.n	800af3a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fbe0 	bl	800b6f8 <USBD_CtlError>
        break;
 800af38:	e000      	b.n	800af3c <USBD_StdEPReq+0x13c>
        break;
 800af3a:	bf00      	nop
      }
      break;
 800af3c:	e0aa      	b.n	800b094 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af44:	2b02      	cmp	r3, #2
 800af46:	d002      	beq.n	800af4e <USBD_StdEPReq+0x14e>
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d032      	beq.n	800afb2 <USBD_StdEPReq+0x1b2>
 800af4c:	e097      	b.n	800b07e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af4e:	7bbb      	ldrb	r3, [r7, #14]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d007      	beq.n	800af64 <USBD_StdEPReq+0x164>
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	2b80      	cmp	r3, #128	; 0x80
 800af58:	d004      	beq.n	800af64 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fbcb 	bl	800b6f8 <USBD_CtlError>
          break;
 800af62:	e091      	b.n	800b088 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	da0b      	bge.n	800af84 <USBD_StdEPReq+0x184>
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af72:	4613      	mov	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	4413      	add	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	3310      	adds	r3, #16
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	4413      	add	r3, r2
 800af80:	3304      	adds	r3, #4
 800af82:	e00b      	b.n	800af9c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800af84:	7bbb      	ldrb	r3, [r7, #14]
 800af86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	4413      	add	r3, r2
 800af9a:	3304      	adds	r3, #4
 800af9c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2200      	movs	r2, #0
 800afa2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2202      	movs	r2, #2
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fc15 	bl	800b7da <USBD_CtlSendData>
        break;
 800afb0:	e06a      	b.n	800b088 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800afb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	da11      	bge.n	800afde <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800afba:	7bbb      	ldrb	r3, [r7, #14]
 800afbc:	f003 020f 	and.w	r2, r3, #15
 800afc0:	6879      	ldr	r1, [r7, #4]
 800afc2:	4613      	mov	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	440b      	add	r3, r1
 800afcc:	3324      	adds	r3, #36	; 0x24
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d117      	bne.n	800b004 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fb8e 	bl	800b6f8 <USBD_CtlError>
            break;
 800afdc:	e054      	b.n	800b088 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	f003 020f 	and.w	r2, r3, #15
 800afe4:	6879      	ldr	r1, [r7, #4]
 800afe6:	4613      	mov	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	440b      	add	r3, r1
 800aff0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d104      	bne.n	800b004 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fb7b 	bl	800b6f8 <USBD_CtlError>
            break;
 800b002:	e041      	b.n	800b088 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	da0b      	bge.n	800b024 <USBD_StdEPReq+0x224>
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	3310      	adds	r3, #16
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	4413      	add	r3, r2
 800b020:	3304      	adds	r3, #4
 800b022:	e00b      	b.n	800b03c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b02a:	4613      	mov	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	4413      	add	r3, r2
 800b03a:	3304      	adds	r3, #4
 800b03c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <USBD_StdEPReq+0x24a>
 800b044:	7bbb      	ldrb	r3, [r7, #14]
 800b046:	2b80      	cmp	r3, #128	; 0x80
 800b048:	d103      	bne.n	800b052 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2200      	movs	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	e00e      	b.n	800b070 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 f8ee 	bl	800c238 <USBD_LL_IsStallEP>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2201      	movs	r2, #1
 800b066:	601a      	str	r2, [r3, #0]
 800b068:	e002      	b.n	800b070 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2202      	movs	r2, #2
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fbaf 	bl	800b7da <USBD_CtlSendData>
          break;
 800b07c:	e004      	b.n	800b088 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fb39 	bl	800b6f8 <USBD_CtlError>
        break;
 800b086:	bf00      	nop
      }
      break;
 800b088:	e004      	b.n	800b094 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fb33 	bl	800b6f8 <USBD_CtlError>
      break;
 800b092:	bf00      	nop
    }
    break;
 800b094:	e004      	b.n	800b0a0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 fb2d 	bl	800b6f8 <USBD_CtlError>
    break;
 800b09e:	bf00      	nop
  }

  return ret;
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	885b      	ldrh	r3, [r3, #2]
 800b0c6:	0a1b      	lsrs	r3, r3, #8
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	2b06      	cmp	r3, #6
 800b0ce:	f200 8128 	bhi.w	800b322 <USBD_GetDescriptor+0x276>
 800b0d2:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <USBD_GetDescriptor+0x2c>)
 800b0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d8:	0800b0f5 	.word	0x0800b0f5
 800b0dc:	0800b10d 	.word	0x0800b10d
 800b0e0:	0800b14d 	.word	0x0800b14d
 800b0e4:	0800b323 	.word	0x0800b323
 800b0e8:	0800b323 	.word	0x0800b323
 800b0ec:	0800b2c3 	.word	0x0800b2c3
 800b0f0:	0800b2ef 	.word	0x0800b2ef
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	7c12      	ldrb	r2, [r2, #16]
 800b100:	f107 0108 	add.w	r1, r7, #8
 800b104:	4610      	mov	r0, r2
 800b106:	4798      	blx	r3
 800b108:	60f8      	str	r0, [r7, #12]
    break;
 800b10a:	e112      	b.n	800b332 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	7c1b      	ldrb	r3, [r3, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10d      	bne.n	800b130 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11c:	f107 0208 	add.w	r2, r7, #8
 800b120:	4610      	mov	r0, r2
 800b122:	4798      	blx	r3
 800b124:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3301      	adds	r3, #1
 800b12a:	2202      	movs	r2, #2
 800b12c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b12e:	e100      	b.n	800b332 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b138:	f107 0208 	add.w	r2, r7, #8
 800b13c:	4610      	mov	r0, r2
 800b13e:	4798      	blx	r3
 800b140:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	2202      	movs	r2, #2
 800b148:	701a      	strb	r2, [r3, #0]
    break;
 800b14a:	e0f2      	b.n	800b332 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	885b      	ldrh	r3, [r3, #2]
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b05      	cmp	r3, #5
 800b154:	f200 80ac 	bhi.w	800b2b0 <USBD_GetDescriptor+0x204>
 800b158:	a201      	add	r2, pc, #4	; (adr r2, 800b160 <USBD_GetDescriptor+0xb4>)
 800b15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15e:	bf00      	nop
 800b160:	0800b179 	.word	0x0800b179
 800b164:	0800b1ad 	.word	0x0800b1ad
 800b168:	0800b1e1 	.word	0x0800b1e1
 800b16c:	0800b215 	.word	0x0800b215
 800b170:	0800b249 	.word	0x0800b249
 800b174:	0800b27d 	.word	0x0800b27d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00b      	beq.n	800b19c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	7c12      	ldrb	r2, [r2, #16]
 800b190:	f107 0108 	add.w	r1, r7, #8
 800b194:	4610      	mov	r0, r2
 800b196:	4798      	blx	r3
 800b198:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b19a:	e091      	b.n	800b2c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 faaa 	bl	800b6f8 <USBD_CtlError>
        err++;
 800b1a4:	7afb      	ldrb	r3, [r7, #11]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	72fb      	strb	r3, [r7, #11]
      break;
 800b1aa:	e089      	b.n	800b2c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00b      	beq.n	800b1d0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	7c12      	ldrb	r2, [r2, #16]
 800b1c4:	f107 0108 	add.w	r1, r7, #8
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
 800b1cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1ce:	e077      	b.n	800b2c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fa90 	bl	800b6f8 <USBD_CtlError>
        err++;
 800b1d8:	7afb      	ldrb	r3, [r7, #11]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	72fb      	strb	r3, [r7, #11]
      break;
 800b1de:	e06f      	b.n	800b2c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00b      	beq.n	800b204 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	7c12      	ldrb	r2, [r2, #16]
 800b1f8:	f107 0108 	add.w	r1, r7, #8
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	4798      	blx	r3
 800b200:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b202:	e05d      	b.n	800b2c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fa76 	bl	800b6f8 <USBD_CtlError>
        err++;
 800b20c:	7afb      	ldrb	r3, [r7, #11]
 800b20e:	3301      	adds	r3, #1
 800b210:	72fb      	strb	r3, [r7, #11]
      break;
 800b212:	e055      	b.n	800b2c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00b      	beq.n	800b238 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	7c12      	ldrb	r2, [r2, #16]
 800b22c:	f107 0108 	add.w	r1, r7, #8
 800b230:	4610      	mov	r0, r2
 800b232:	4798      	blx	r3
 800b234:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b236:	e043      	b.n	800b2c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fa5c 	bl	800b6f8 <USBD_CtlError>
        err++;
 800b240:	7afb      	ldrb	r3, [r7, #11]
 800b242:	3301      	adds	r3, #1
 800b244:	72fb      	strb	r3, [r7, #11]
      break;
 800b246:	e03b      	b.n	800b2c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00b      	beq.n	800b26c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25a:	695b      	ldr	r3, [r3, #20]
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	7c12      	ldrb	r2, [r2, #16]
 800b260:	f107 0108 	add.w	r1, r7, #8
 800b264:	4610      	mov	r0, r2
 800b266:	4798      	blx	r3
 800b268:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b26a:	e029      	b.n	800b2c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fa42 	bl	800b6f8 <USBD_CtlError>
        err++;
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	3301      	adds	r3, #1
 800b278:	72fb      	strb	r3, [r7, #11]
      break;
 800b27a:	e021      	b.n	800b2c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00b      	beq.n	800b2a0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	7c12      	ldrb	r2, [r2, #16]
 800b294:	f107 0108 	add.w	r1, r7, #8
 800b298:	4610      	mov	r0, r2
 800b29a:	4798      	blx	r3
 800b29c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b29e:	e00f      	b.n	800b2c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fa28 	bl	800b6f8 <USBD_CtlError>
        err++;
 800b2a8:	7afb      	ldrb	r3, [r7, #11]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	72fb      	strb	r3, [r7, #11]
      break;
 800b2ae:	e007      	b.n	800b2c0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fa20 	bl	800b6f8 <USBD_CtlError>
      err++;
 800b2b8:	7afb      	ldrb	r3, [r7, #11]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b2be:	bf00      	nop
    }
    break;
 800b2c0:	e037      	b.n	800b332 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	7c1b      	ldrb	r3, [r3, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d109      	bne.n	800b2de <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d2:	f107 0208 	add.w	r2, r7, #8
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	4798      	blx	r3
 800b2da:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b2dc:	e029      	b.n	800b332 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fa09 	bl	800b6f8 <USBD_CtlError>
      err++;
 800b2e6:	7afb      	ldrb	r3, [r7, #11]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	72fb      	strb	r3, [r7, #11]
    break;
 800b2ec:	e021      	b.n	800b332 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7c1b      	ldrb	r3, [r3, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10d      	bne.n	800b312 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fe:	f107 0208 	add.w	r2, r7, #8
 800b302:	4610      	mov	r0, r2
 800b304:	4798      	blx	r3
 800b306:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3301      	adds	r3, #1
 800b30c:	2207      	movs	r2, #7
 800b30e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b310:	e00f      	b.n	800b332 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f9ef 	bl	800b6f8 <USBD_CtlError>
      err++;
 800b31a:	7afb      	ldrb	r3, [r7, #11]
 800b31c:	3301      	adds	r3, #1
 800b31e:	72fb      	strb	r3, [r7, #11]
    break;
 800b320:	e007      	b.n	800b332 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f9e7 	bl	800b6f8 <USBD_CtlError>
    err++;
 800b32a:	7afb      	ldrb	r3, [r7, #11]
 800b32c:	3301      	adds	r3, #1
 800b32e:	72fb      	strb	r3, [r7, #11]
    break;
 800b330:	bf00      	nop
  }

  if (err != 0U)
 800b332:	7afb      	ldrb	r3, [r7, #11]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d11e      	bne.n	800b376 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	88db      	ldrh	r3, [r3, #6]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d016      	beq.n	800b36e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b340:	893b      	ldrh	r3, [r7, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00e      	beq.n	800b364 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	88da      	ldrh	r2, [r3, #6]
 800b34a:	893b      	ldrh	r3, [r7, #8]
 800b34c:	4293      	cmp	r3, r2
 800b34e:	bf28      	it	cs
 800b350:	4613      	movcs	r3, r2
 800b352:	b29b      	uxth	r3, r3
 800b354:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b356:	893b      	ldrh	r3, [r7, #8]
 800b358:	461a      	mov	r2, r3
 800b35a:	68f9      	ldr	r1, [r7, #12]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fa3c 	bl	800b7da <USBD_CtlSendData>
 800b362:	e009      	b.n	800b378 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f9c6 	bl	800b6f8 <USBD_CtlError>
 800b36c:	e004      	b.n	800b378 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fa8d 	bl	800b88e <USBD_CtlSendStatus>
 800b374:	e000      	b.n	800b378 <USBD_GetDescriptor+0x2cc>
    return;
 800b376:	bf00      	nop
    }
  }
}
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop

0800b380 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	889b      	ldrh	r3, [r3, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d130      	bne.n	800b3f4 <USBD_SetAddress+0x74>
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	88db      	ldrh	r3, [r3, #6]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d12c      	bne.n	800b3f4 <USBD_SetAddress+0x74>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	885b      	ldrh	r3, [r3, #2]
 800b39e:	2b7f      	cmp	r3, #127	; 0x7f
 800b3a0:	d828      	bhi.n	800b3f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	885b      	ldrh	r3, [r3, #2]
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d104      	bne.n	800b3c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f99c 	bl	800b6f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c0:	e01c      	b.n	800b3fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	7bfa      	ldrb	r2, [r7, #15]
 800b3c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 ff5e 	bl	800c290 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fa5a 	bl	800b88e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e8:	e008      	b.n	800b3fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f2:	e003      	b.n	800b3fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f97e 	bl	800b6f8 <USBD_CtlError>
  }
}
 800b3fc:	bf00      	nop
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	885b      	ldrh	r3, [r3, #2]
 800b416:	b2da      	uxtb	r2, r3
 800b418:	4b4b      	ldr	r3, [pc, #300]	; (800b548 <USBD_SetConfig+0x144>)
 800b41a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b41c:	4b4a      	ldr	r3, [pc, #296]	; (800b548 <USBD_SetConfig+0x144>)
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d905      	bls.n	800b430 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f966 	bl	800b6f8 <USBD_CtlError>
    return USBD_FAIL;
 800b42c:	2303      	movs	r3, #3
 800b42e:	e087      	b.n	800b540 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b436:	2b02      	cmp	r3, #2
 800b438:	d002      	beq.n	800b440 <USBD_SetConfig+0x3c>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d025      	beq.n	800b48a <USBD_SetConfig+0x86>
 800b43e:	e071      	b.n	800b524 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b440:	4b41      	ldr	r3, [pc, #260]	; (800b548 <USBD_SetConfig+0x144>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d01c      	beq.n	800b482 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b448:	4b3f      	ldr	r3, [pc, #252]	; (800b548 <USBD_SetConfig+0x144>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	461a      	mov	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b452:	4b3d      	ldr	r3, [pc, #244]	; (800b548 <USBD_SetConfig+0x144>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	4619      	mov	r1, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff f9a7 	bl	800a7ac <USBD_SetClassConfig>
 800b45e:	4603      	mov	r3, r0
 800b460:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b462:	7bfb      	ldrb	r3, [r7, #15]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d004      	beq.n	800b472 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f944 	bl	800b6f8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b470:	e065      	b.n	800b53e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fa0b 	bl	800b88e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2203      	movs	r2, #3
 800b47c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b480:	e05d      	b.n	800b53e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fa03 	bl	800b88e <USBD_CtlSendStatus>
    break;
 800b488:	e059      	b.n	800b53e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b48a:	4b2f      	ldr	r3, [pc, #188]	; (800b548 <USBD_SetConfig+0x144>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d112      	bne.n	800b4b8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2202      	movs	r2, #2
 800b496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b49a:	4b2b      	ldr	r3, [pc, #172]	; (800b548 <USBD_SetConfig+0x144>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4a4:	4b28      	ldr	r3, [pc, #160]	; (800b548 <USBD_SetConfig+0x144>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff f99a 	bl	800a7e4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f9ec 	bl	800b88e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b4b6:	e042      	b.n	800b53e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b4b8:	4b23      	ldr	r3, [pc, #140]	; (800b548 <USBD_SetConfig+0x144>)
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d02a      	beq.n	800b51c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff f988 	bl	800a7e4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b4d4:	4b1c      	ldr	r3, [pc, #112]	; (800b548 <USBD_SetConfig+0x144>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4de:	4b1a      	ldr	r3, [pc, #104]	; (800b548 <USBD_SetConfig+0x144>)
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7ff f961 	bl	800a7ac <USBD_SetClassConfig>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00f      	beq.n	800b514 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f8fe 	bl	800b6f8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	b2db      	uxtb	r3, r3
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f7ff f96d 	bl	800a7e4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2202      	movs	r2, #2
 800b50e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b512:	e014      	b.n	800b53e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 f9ba 	bl	800b88e <USBD_CtlSendStatus>
    break;
 800b51a:	e010      	b.n	800b53e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f9b6 	bl	800b88e <USBD_CtlSendStatus>
    break;
 800b522:	e00c      	b.n	800b53e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b524:	6839      	ldr	r1, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f8e6 	bl	800b6f8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b52c:	4b06      	ldr	r3, [pc, #24]	; (800b548 <USBD_SetConfig+0x144>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7ff f956 	bl	800a7e4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b538:	2303      	movs	r3, #3
 800b53a:	73fb      	strb	r3, [r7, #15]
    break;
 800b53c:	bf00      	nop
  }

  return ret;
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	2000020c 	.word	0x2000020c

0800b54c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	88db      	ldrh	r3, [r3, #6]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d004      	beq.n	800b568 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f8c9 	bl	800b6f8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b566:	e021      	b.n	800b5ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b56e:	2b01      	cmp	r3, #1
 800b570:	db17      	blt.n	800b5a2 <USBD_GetConfig+0x56>
 800b572:	2b02      	cmp	r3, #2
 800b574:	dd02      	ble.n	800b57c <USBD_GetConfig+0x30>
 800b576:	2b03      	cmp	r3, #3
 800b578:	d00b      	beq.n	800b592 <USBD_GetConfig+0x46>
 800b57a:	e012      	b.n	800b5a2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	3308      	adds	r3, #8
 800b586:	2201      	movs	r2, #1
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f925 	bl	800b7da <USBD_CtlSendData>
      break;
 800b590:	e00c      	b.n	800b5ac <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3304      	adds	r3, #4
 800b596:	2201      	movs	r2, #1
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f91d 	bl	800b7da <USBD_CtlSendData>
      break;
 800b5a0:	e004      	b.n	800b5ac <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f8a7 	bl	800b6f8 <USBD_CtlError>
      break;
 800b5aa:	bf00      	nop
}
 800b5ac:	bf00      	nop
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d81e      	bhi.n	800b608 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	88db      	ldrh	r3, [r3, #6]
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d004      	beq.n	800b5dc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f88f 	bl	800b6f8 <USBD_CtlError>
      break;
 800b5da:	e01a      	b.n	800b612 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	f043 0202 	orr.w	r2, r3, #2
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	330c      	adds	r3, #12
 800b5fc:	2202      	movs	r2, #2
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f8ea 	bl	800b7da <USBD_CtlSendData>
    break;
 800b606:	e004      	b.n	800b612 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f874 	bl	800b6f8 <USBD_CtlError>
    break;
 800b610:	bf00      	nop
  }
}
 800b612:	bf00      	nop
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b082      	sub	sp, #8
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	885b      	ldrh	r3, [r3, #2]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d106      	bne.n	800b63a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f92a 	bl	800b88e <USBD_CtlSendStatus>
  }
}
 800b63a:	bf00      	nop
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b082      	sub	sp, #8
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b652:	3b01      	subs	r3, #1
 800b654:	2b02      	cmp	r3, #2
 800b656:	d80b      	bhi.n	800b670 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	885b      	ldrh	r3, [r3, #2]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d10c      	bne.n	800b67a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f910 	bl	800b88e <USBD_CtlSendStatus>
      }
      break;
 800b66e:	e004      	b.n	800b67a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f840 	bl	800b6f8 <USBD_CtlError>
      break;
 800b678:	e000      	b.n	800b67c <USBD_ClrFeature+0x3a>
      break;
 800b67a:	bf00      	nop
  }
}
 800b67c:	bf00      	nop
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	781a      	ldrb	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	3301      	adds	r3, #1
 800b69e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	781a      	ldrb	r2, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7ff fad3 	bl	800ac5a <SWAPBYTE>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7ff fac6 	bl	800ac5a <SWAPBYTE>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f7ff fab9 	bl	800ac5a <SWAPBYTE>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	80da      	strh	r2, [r3, #6]
}
 800b6f0:	bf00      	nop
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b702:	2180      	movs	r1, #128	; 0x80
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fd59 	bl	800c1bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b70a:	2100      	movs	r1, #0
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fd55 	bl	800c1bc <USBD_LL_StallEP>
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b086      	sub	sp, #24
 800b71e:	af00      	add	r7, sp, #0
 800b720:	60f8      	str	r0, [r7, #12]
 800b722:	60b9      	str	r1, [r7, #8]
 800b724:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d036      	beq.n	800b79e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b734:	6938      	ldr	r0, [r7, #16]
 800b736:	f000 f836 	bl	800b7a6 <USBD_GetLen>
 800b73a:	4603      	mov	r3, r0
 800b73c:	3301      	adds	r3, #1
 800b73e:	b29b      	uxth	r3, r3
 800b740:	005b      	lsls	r3, r3, #1
 800b742:	b29a      	uxth	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b748:	7dfb      	ldrb	r3, [r7, #23]
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	4413      	add	r3, r2
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	7812      	ldrb	r2, [r2, #0]
 800b752:	701a      	strb	r2, [r3, #0]
  idx++;
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	3301      	adds	r3, #1
 800b758:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	4413      	add	r3, r2
 800b760:	2203      	movs	r2, #3
 800b762:	701a      	strb	r2, [r3, #0]
  idx++;
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	3301      	adds	r3, #1
 800b768:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b76a:	e013      	b.n	800b794 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	4413      	add	r3, r2
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	7812      	ldrb	r2, [r2, #0]
 800b776:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	3301      	adds	r3, #1
 800b77c:	613b      	str	r3, [r7, #16]
    idx++;
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	3301      	adds	r3, #1
 800b782:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b784:	7dfb      	ldrb	r3, [r7, #23]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	4413      	add	r3, r2
 800b78a:	2200      	movs	r2, #0
 800b78c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
 800b790:	3301      	adds	r3, #1
 800b792:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1e7      	bne.n	800b76c <USBD_GetString+0x52>
 800b79c:	e000      	b.n	800b7a0 <USBD_GetString+0x86>
    return;
 800b79e:	bf00      	nop
  }
}
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b085      	sub	sp, #20
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7b6:	e005      	b.n	800b7c4 <USBD_GetLen+0x1e>
  {
    len++;
 800b7b8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1f5      	bne.n	800b7b8 <USBD_GetLen+0x12>
  }

  return len;
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	60f8      	str	r0, [r7, #12]
 800b7e2:	60b9      	str	r1, [r7, #8]
 800b7e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	2100      	movs	r1, #0
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f000 fd64 	bl	800c2ce <USBD_LL_Transmit>

  return USBD_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	2100      	movs	r1, #0
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 fd53 	bl	800c2ce <USBD_LL_Transmit>

  return USBD_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b084      	sub	sp, #16
 800b836:	af00      	add	r7, sp, #0
 800b838:	60f8      	str	r0, [r7, #12]
 800b83a:	60b9      	str	r1, [r7, #8]
 800b83c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2203      	movs	r2, #3
 800b842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	2100      	movs	r1, #0
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 fd57 	bl	800c310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	2100      	movs	r1, #0
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f000 fd46 	bl	800c310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b082      	sub	sp, #8
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2204      	movs	r2, #4
 800b89a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b89e:	2300      	movs	r3, #0
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 fd12 	bl	800c2ce <USBD_LL_Transmit>

  return USBD_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2205      	movs	r2, #5
 800b8c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fd20 	bl	800c310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b8f2:	4b1f      	ldr	r3, [pc, #124]	; (800b970 <FATFS_LinkDriverEx+0x94>)
 800b8f4:	7a5b      	ldrb	r3, [r3, #9]
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d131      	bne.n	800b960 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b8fc:	4b1c      	ldr	r3, [pc, #112]	; (800b970 <FATFS_LinkDriverEx+0x94>)
 800b8fe:	7a5b      	ldrb	r3, [r3, #9]
 800b900:	b2db      	uxtb	r3, r3
 800b902:	461a      	mov	r2, r3
 800b904:	4b1a      	ldr	r3, [pc, #104]	; (800b970 <FATFS_LinkDriverEx+0x94>)
 800b906:	2100      	movs	r1, #0
 800b908:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b90a:	4b19      	ldr	r3, [pc, #100]	; (800b970 <FATFS_LinkDriverEx+0x94>)
 800b90c:	7a5b      	ldrb	r3, [r3, #9]
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	4a17      	ldr	r2, [pc, #92]	; (800b970 <FATFS_LinkDriverEx+0x94>)
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b91a:	4b15      	ldr	r3, [pc, #84]	; (800b970 <FATFS_LinkDriverEx+0x94>)
 800b91c:	7a5b      	ldrb	r3, [r3, #9]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	461a      	mov	r2, r3
 800b922:	4b13      	ldr	r3, [pc, #76]	; (800b970 <FATFS_LinkDriverEx+0x94>)
 800b924:	4413      	add	r3, r2
 800b926:	79fa      	ldrb	r2, [r7, #7]
 800b928:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b92a:	4b11      	ldr	r3, [pc, #68]	; (800b970 <FATFS_LinkDriverEx+0x94>)
 800b92c:	7a5b      	ldrb	r3, [r3, #9]
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	b2d1      	uxtb	r1, r2
 800b934:	4a0e      	ldr	r2, [pc, #56]	; (800b970 <FATFS_LinkDriverEx+0x94>)
 800b936:	7251      	strb	r1, [r2, #9]
 800b938:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b93a:	7dbb      	ldrb	r3, [r7, #22]
 800b93c:	3330      	adds	r3, #48	; 0x30
 800b93e:	b2da      	uxtb	r2, r3
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	3301      	adds	r3, #1
 800b948:	223a      	movs	r2, #58	; 0x3a
 800b94a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	3302      	adds	r3, #2
 800b950:	222f      	movs	r2, #47	; 0x2f
 800b952:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	3303      	adds	r3, #3
 800b958:	2200      	movs	r2, #0
 800b95a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b960:	7dfb      	ldrb	r3, [r7, #23]
}
 800b962:	4618      	mov	r0, r3
 800b964:	371c      	adds	r7, #28
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	20000210 	.word	0x20000210

0800b974 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b97e:	2200      	movs	r2, #0
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ffaa 	bl	800b8dc <FATFS_LinkDriverEx>
 800b988:	4603      	mov	r3, r0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
	...

0800b994 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b998:	2200      	movs	r2, #0
 800b99a:	4912      	ldr	r1, [pc, #72]	; (800b9e4 <MX_USB_DEVICE_Init+0x50>)
 800b99c:	4812      	ldr	r0, [pc, #72]	; (800b9e8 <MX_USB_DEVICE_Init+0x54>)
 800b99e:	f7fe fe97 	bl	800a6d0 <USBD_Init>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b9a8:	f7f5 fd10 	bl	80013cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b9ac:	490f      	ldr	r1, [pc, #60]	; (800b9ec <MX_USB_DEVICE_Init+0x58>)
 800b9ae:	480e      	ldr	r0, [pc, #56]	; (800b9e8 <MX_USB_DEVICE_Init+0x54>)
 800b9b0:	f7fe fec4 	bl	800a73c <USBD_RegisterClass>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b9ba:	f7f5 fd07 	bl	80013cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b9be:	490c      	ldr	r1, [pc, #48]	; (800b9f0 <MX_USB_DEVICE_Init+0x5c>)
 800b9c0:	4809      	ldr	r0, [pc, #36]	; (800b9e8 <MX_USB_DEVICE_Init+0x54>)
 800b9c2:	f7fe fde9 	bl	800a598 <USBD_CDC_RegisterInterface>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b9cc:	f7f5 fcfe 	bl	80013cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b9d0:	4805      	ldr	r0, [pc, #20]	; (800b9e8 <MX_USB_DEVICE_Init+0x54>)
 800b9d2:	f7fe fed4 	bl	800a77e <USBD_Start>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b9dc:	f7f5 fcf6 	bl	80013cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b9e0:	bf00      	nop
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20000134 	.word	0x20000134
 800b9e8:	20000ab0 	.word	0x20000ab0
 800b9ec:	2000001c 	.word	0x2000001c
 800b9f0:	20000120 	.word	0x20000120

0800b9f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	4905      	ldr	r1, [pc, #20]	; (800ba10 <CDC_Init_FS+0x1c>)
 800b9fc:	4805      	ldr	r0, [pc, #20]	; (800ba14 <CDC_Init_FS+0x20>)
 800b9fe:	f7fe fde0 	bl	800a5c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba02:	4905      	ldr	r1, [pc, #20]	; (800ba18 <CDC_Init_FS+0x24>)
 800ba04:	4803      	ldr	r0, [pc, #12]	; (800ba14 <CDC_Init_FS+0x20>)
 800ba06:	f7fe fdf5 	bl	800a5f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20001580 	.word	0x20001580
 800ba14:	20000ab0 	.word	0x20000ab0
 800ba18:	20000d80 	.word	0x20000d80

0800ba1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ba20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	4603      	mov	r3, r0
 800ba34:	6039      	str	r1, [r7, #0]
 800ba36:	71fb      	strb	r3, [r7, #7]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	2b23      	cmp	r3, #35	; 0x23
 800ba40:	d84a      	bhi.n	800bad8 <CDC_Control_FS+0xac>
 800ba42:	a201      	add	r2, pc, #4	; (adr r2, 800ba48 <CDC_Control_FS+0x1c>)
 800ba44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba48:	0800bad9 	.word	0x0800bad9
 800ba4c:	0800bad9 	.word	0x0800bad9
 800ba50:	0800bad9 	.word	0x0800bad9
 800ba54:	0800bad9 	.word	0x0800bad9
 800ba58:	0800bad9 	.word	0x0800bad9
 800ba5c:	0800bad9 	.word	0x0800bad9
 800ba60:	0800bad9 	.word	0x0800bad9
 800ba64:	0800bad9 	.word	0x0800bad9
 800ba68:	0800bad9 	.word	0x0800bad9
 800ba6c:	0800bad9 	.word	0x0800bad9
 800ba70:	0800bad9 	.word	0x0800bad9
 800ba74:	0800bad9 	.word	0x0800bad9
 800ba78:	0800bad9 	.word	0x0800bad9
 800ba7c:	0800bad9 	.word	0x0800bad9
 800ba80:	0800bad9 	.word	0x0800bad9
 800ba84:	0800bad9 	.word	0x0800bad9
 800ba88:	0800bad9 	.word	0x0800bad9
 800ba8c:	0800bad9 	.word	0x0800bad9
 800ba90:	0800bad9 	.word	0x0800bad9
 800ba94:	0800bad9 	.word	0x0800bad9
 800ba98:	0800bad9 	.word	0x0800bad9
 800ba9c:	0800bad9 	.word	0x0800bad9
 800baa0:	0800bad9 	.word	0x0800bad9
 800baa4:	0800bad9 	.word	0x0800bad9
 800baa8:	0800bad9 	.word	0x0800bad9
 800baac:	0800bad9 	.word	0x0800bad9
 800bab0:	0800bad9 	.word	0x0800bad9
 800bab4:	0800bad9 	.word	0x0800bad9
 800bab8:	0800bad9 	.word	0x0800bad9
 800babc:	0800bad9 	.word	0x0800bad9
 800bac0:	0800bad9 	.word	0x0800bad9
 800bac4:	0800bad9 	.word	0x0800bad9
 800bac8:	0800bad9 	.word	0x0800bad9
 800bacc:	0800bad9 	.word	0x0800bad9
 800bad0:	0800bad9 	.word	0x0800bad9
 800bad4:	0800bad9 	.word	0x0800bad9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bad8:	bf00      	nop
  }

  return (USBD_OK);
 800bada:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800badc:	4618      	mov	r0, r3
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800baf2:	6879      	ldr	r1, [r7, #4]
 800baf4:	4812      	ldr	r0, [pc, #72]	; (800bb40 <CDC_Receive_FS+0x58>)
 800baf6:	f7fe fd7d 	bl	800a5f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bafa:	4811      	ldr	r0, [pc, #68]	; (800bb40 <CDC_Receive_FS+0x58>)
 800bafc:	f7fe fdbe 	bl	800a67c <USBD_CDC_ReceivePacket>
  //uint8_t len = (uint8_t) *Len;
  memset(com_buf, 0, 64);
 800bb00:	2240      	movs	r2, #64	; 0x40
 800bb02:	2100      	movs	r1, #0
 800bb04:	480f      	ldr	r0, [pc, #60]	; (800bb44 <CDC_Receive_FS+0x5c>)
 800bb06:	f000 fca8 	bl	800c45a <memset>
  if(*Len < 64)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b3f      	cmp	r3, #63	; 0x3f
 800bb10:	d806      	bhi.n	800bb20 <CDC_Receive_FS+0x38>
	  memcpy(com_buf, Buf, (size_t) *Len);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	480a      	ldr	r0, [pc, #40]	; (800bb44 <CDC_Receive_FS+0x5c>)
 800bb1c:	f000 fc92 	bl	800c444 <memcpy>
  memset(Buf, '\0', (size_t) *Len);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	461a      	mov	r2, r3
 800bb26:	2100      	movs	r1, #0
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fc96 	bl	800c45a <memset>
  com_bytes_available = 1;
 800bb2e:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <CDC_Receive_FS+0x60>)
 800bb30:	2201      	movs	r2, #1
 800bb32:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800bb34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	20000ab0 	.word	0x20000ab0
 800bb44:	200004c4 	.word	0x200004c4
 800bb48:	20000204 	.word	0x20000204

0800bb4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bb5c:	4b0d      	ldr	r3, [pc, #52]	; (800bb94 <CDC_Transmit_FS+0x48>)
 800bb5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e00b      	b.n	800bb8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bb72:	887b      	ldrh	r3, [r7, #2]
 800bb74:	461a      	mov	r2, r3
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	4806      	ldr	r0, [pc, #24]	; (800bb94 <CDC_Transmit_FS+0x48>)
 800bb7a:	f7fe fd22 	bl	800a5c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bb7e:	4805      	ldr	r0, [pc, #20]	; (800bb94 <CDC_Transmit_FS+0x48>)
 800bb80:	f7fe fd4c 	bl	800a61c <USBD_CDC_TransmitPacket>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	20000ab0 	.word	0x20000ab0

0800bb98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b087      	sub	sp, #28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	4613      	mov	r3, r2
 800bba4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bbaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
	...

0800bbbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	6039      	str	r1, [r7, #0]
 800bbc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2212      	movs	r2, #18
 800bbcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bbce:	4b03      	ldr	r3, [pc, #12]	; (800bbdc <USBD_FS_DeviceDescriptor+0x20>)
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	20000150 	.word	0x20000150

0800bbe0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	6039      	str	r1, [r7, #0]
 800bbea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2204      	movs	r2, #4
 800bbf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bbf2:	4b03      	ldr	r3, [pc, #12]	; (800bc00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	20000164 	.word	0x20000164

0800bc04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	6039      	str	r1, [r7, #0]
 800bc0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc10:	79fb      	ldrb	r3, [r7, #7]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d105      	bne.n	800bc22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	4907      	ldr	r1, [pc, #28]	; (800bc38 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc1a:	4808      	ldr	r0, [pc, #32]	; (800bc3c <USBD_FS_ProductStrDescriptor+0x38>)
 800bc1c:	f7ff fd7d 	bl	800b71a <USBD_GetString>
 800bc20:	e004      	b.n	800bc2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	4904      	ldr	r1, [pc, #16]	; (800bc38 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc26:	4805      	ldr	r0, [pc, #20]	; (800bc3c <USBD_FS_ProductStrDescriptor+0x38>)
 800bc28:	f7ff fd77 	bl	800b71a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc2c:	4b02      	ldr	r3, [pc, #8]	; (800bc38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20001d80 	.word	0x20001d80
 800bc3c:	0800c628 	.word	0x0800c628

0800bc40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	6039      	str	r1, [r7, #0]
 800bc4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc4c:	683a      	ldr	r2, [r7, #0]
 800bc4e:	4904      	ldr	r1, [pc, #16]	; (800bc60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc50:	4804      	ldr	r0, [pc, #16]	; (800bc64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc52:	f7ff fd62 	bl	800b71a <USBD_GetString>
  return USBD_StrDesc;
 800bc56:	4b02      	ldr	r3, [pc, #8]	; (800bc60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	20001d80 	.word	0x20001d80
 800bc64:	0800c638 	.word	0x0800c638

0800bc68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	221a      	movs	r2, #26
 800bc78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc7a:	f000 f843 	bl	800bd04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc7e:	4b02      	ldr	r3, [pc, #8]	; (800bc88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	20000168 	.word	0x20000168

0800bc8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	6039      	str	r1, [r7, #0]
 800bc96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d105      	bne.n	800bcaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	4907      	ldr	r1, [pc, #28]	; (800bcc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bca2:	4808      	ldr	r0, [pc, #32]	; (800bcc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bca4:	f7ff fd39 	bl	800b71a <USBD_GetString>
 800bca8:	e004      	b.n	800bcb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	4904      	ldr	r1, [pc, #16]	; (800bcc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcae:	4805      	ldr	r0, [pc, #20]	; (800bcc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcb0:	f7ff fd33 	bl	800b71a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcb4:	4b02      	ldr	r3, [pc, #8]	; (800bcc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20001d80 	.word	0x20001d80
 800bcc4:	0800c64c 	.word	0x0800c64c

0800bcc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	6039      	str	r1, [r7, #0]
 800bcd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcd4:	79fb      	ldrb	r3, [r7, #7]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d105      	bne.n	800bce6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	4907      	ldr	r1, [pc, #28]	; (800bcfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcde:	4808      	ldr	r0, [pc, #32]	; (800bd00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bce0:	f7ff fd1b 	bl	800b71a <USBD_GetString>
 800bce4:	e004      	b.n	800bcf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	4904      	ldr	r1, [pc, #16]	; (800bcfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcea:	4805      	ldr	r0, [pc, #20]	; (800bd00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcec:	f7ff fd15 	bl	800b71a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcf0:	4b02      	ldr	r3, [pc, #8]	; (800bcfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20001d80 	.word	0x20001d80
 800bd00:	0800c658 	.word	0x0800c658

0800bd04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd0a:	4b0f      	ldr	r3, [pc, #60]	; (800bd48 <Get_SerialNum+0x44>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd10:	4b0e      	ldr	r3, [pc, #56]	; (800bd4c <Get_SerialNum+0x48>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd16:	4b0e      	ldr	r3, [pc, #56]	; (800bd50 <Get_SerialNum+0x4c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4413      	add	r3, r2
 800bd22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d009      	beq.n	800bd3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd2a:	2208      	movs	r2, #8
 800bd2c:	4909      	ldr	r1, [pc, #36]	; (800bd54 <Get_SerialNum+0x50>)
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f000 f814 	bl	800bd5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd34:	2204      	movs	r2, #4
 800bd36:	4908      	ldr	r1, [pc, #32]	; (800bd58 <Get_SerialNum+0x54>)
 800bd38:	68b8      	ldr	r0, [r7, #8]
 800bd3a:	f000 f80f 	bl	800bd5c <IntToUnicode>
  }
}
 800bd3e:	bf00      	nop
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	1fff7a10 	.word	0x1fff7a10
 800bd4c:	1fff7a14 	.word	0x1fff7a14
 800bd50:	1fff7a18 	.word	0x1fff7a18
 800bd54:	2000016a 	.word	0x2000016a
 800bd58:	2000017a 	.word	0x2000017a

0800bd5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	4613      	mov	r3, r2
 800bd68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd6e:	2300      	movs	r3, #0
 800bd70:	75fb      	strb	r3, [r7, #23]
 800bd72:	e027      	b.n	800bdc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	0f1b      	lsrs	r3, r3, #28
 800bd78:	2b09      	cmp	r3, #9
 800bd7a:	d80b      	bhi.n	800bd94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	0f1b      	lsrs	r3, r3, #28
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	7dfb      	ldrb	r3, [r7, #23]
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	4619      	mov	r1, r3
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	440b      	add	r3, r1
 800bd8c:	3230      	adds	r2, #48	; 0x30
 800bd8e:	b2d2      	uxtb	r2, r2
 800bd90:	701a      	strb	r2, [r3, #0]
 800bd92:	e00a      	b.n	800bdaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	0f1b      	lsrs	r3, r3, #28
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	7dfb      	ldrb	r3, [r7, #23]
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	4619      	mov	r1, r3
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	440b      	add	r3, r1
 800bda4:	3237      	adds	r2, #55	; 0x37
 800bda6:	b2d2      	uxtb	r2, r2
 800bda8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	011b      	lsls	r3, r3, #4
 800bdae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	4413      	add	r3, r2
 800bdba:	2200      	movs	r2, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdbe:	7dfb      	ldrb	r3, [r7, #23]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	75fb      	strb	r3, [r7, #23]
 800bdc4:	7dfa      	ldrb	r2, [r7, #23]
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d3d3      	bcc.n	800bd74 <IntToUnicode+0x18>
  }
}
 800bdcc:	bf00      	nop
 800bdce:	371c      	adds	r7, #28
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b08a      	sub	sp, #40	; 0x28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bde0:	f107 0314 	add.w	r3, r7, #20
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]
 800bde8:	605a      	str	r2, [r3, #4]
 800bdea:	609a      	str	r2, [r3, #8]
 800bdec:	60da      	str	r2, [r3, #12]
 800bdee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdf8:	d13a      	bne.n	800be70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	613b      	str	r3, [r7, #16]
 800bdfe:	4b1e      	ldr	r3, [pc, #120]	; (800be78 <HAL_PCD_MspInit+0xa0>)
 800be00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be02:	4a1d      	ldr	r2, [pc, #116]	; (800be78 <HAL_PCD_MspInit+0xa0>)
 800be04:	f043 0301 	orr.w	r3, r3, #1
 800be08:	6313      	str	r3, [r2, #48]	; 0x30
 800be0a:	4b1b      	ldr	r3, [pc, #108]	; (800be78 <HAL_PCD_MspInit+0xa0>)
 800be0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	613b      	str	r3, [r7, #16]
 800be14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800be16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800be1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be1c:	2302      	movs	r3, #2
 800be1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be20:	2300      	movs	r3, #0
 800be22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be24:	2303      	movs	r3, #3
 800be26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800be28:	230a      	movs	r3, #10
 800be2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be2c:	f107 0314 	add.w	r3, r7, #20
 800be30:	4619      	mov	r1, r3
 800be32:	4812      	ldr	r0, [pc, #72]	; (800be7c <HAL_PCD_MspInit+0xa4>)
 800be34:	f7f6 fcac 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be38:	4b0f      	ldr	r3, [pc, #60]	; (800be78 <HAL_PCD_MspInit+0xa0>)
 800be3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be3c:	4a0e      	ldr	r2, [pc, #56]	; (800be78 <HAL_PCD_MspInit+0xa0>)
 800be3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be42:	6353      	str	r3, [r2, #52]	; 0x34
 800be44:	2300      	movs	r3, #0
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	4b0b      	ldr	r3, [pc, #44]	; (800be78 <HAL_PCD_MspInit+0xa0>)
 800be4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be4c:	4a0a      	ldr	r2, [pc, #40]	; (800be78 <HAL_PCD_MspInit+0xa0>)
 800be4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be52:	6453      	str	r3, [r2, #68]	; 0x44
 800be54:	4b08      	ldr	r3, [pc, #32]	; (800be78 <HAL_PCD_MspInit+0xa0>)
 800be56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be5c:	60fb      	str	r3, [r7, #12]
 800be5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800be60:	2200      	movs	r2, #0
 800be62:	2100      	movs	r1, #0
 800be64:	2043      	movs	r0, #67	; 0x43
 800be66:	f7f6 fc5c 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800be6a:	2043      	movs	r0, #67	; 0x43
 800be6c:	f7f6 fc75 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800be70:	bf00      	nop
 800be72:	3728      	adds	r7, #40	; 0x28
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	40023800 	.word	0x40023800
 800be7c:	40020000 	.word	0x40020000

0800be80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800be94:	4619      	mov	r1, r3
 800be96:	4610      	mov	r0, r2
 800be98:	f7fe fcbc 	bl	800a814 <USBD_LL_SetupStage>
}
 800be9c:	bf00      	nop
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800beb6:	78fa      	ldrb	r2, [r7, #3]
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4613      	mov	r3, r2
 800bebc:	00db      	lsls	r3, r3, #3
 800bebe:	1a9b      	subs	r3, r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	78fb      	ldrb	r3, [r7, #3]
 800becc:	4619      	mov	r1, r3
 800bece:	f7fe fcf4 	bl	800a8ba <USBD_LL_DataOutStage>
}
 800bed2:	bf00      	nop
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b082      	sub	sp, #8
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	460b      	mov	r3, r1
 800bee4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800beec:	78fa      	ldrb	r2, [r7, #3]
 800beee:	6879      	ldr	r1, [r7, #4]
 800bef0:	4613      	mov	r3, r2
 800bef2:	00db      	lsls	r3, r3, #3
 800bef4:	1a9b      	subs	r3, r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	440b      	add	r3, r1
 800befa:	3348      	adds	r3, #72	; 0x48
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	78fb      	ldrb	r3, [r7, #3]
 800bf00:	4619      	mov	r1, r3
 800bf02:	f7fe fd3d 	bl	800a980 <USBD_LL_DataInStage>
}
 800bf06:	bf00      	nop
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b082      	sub	sp, #8
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fe fe41 	bl	800aba4 <USBD_LL_SOF>
}
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf32:	2301      	movs	r3, #1
 800bf34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d102      	bne.n	800bf44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73fb      	strb	r3, [r7, #15]
 800bf42:	e008      	b.n	800bf56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d102      	bne.n	800bf52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	73fb      	strb	r3, [r7, #15]
 800bf50:	e001      	b.n	800bf56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bf52:	f7f5 fa3b 	bl	80013cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf5c:	7bfa      	ldrb	r2, [r7, #15]
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fe fde4 	bl	800ab2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fe fd9d 	bl	800aaac <USBD_LL_Reset>
}
 800bf72:	bf00      	nop
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe fddf 	bl	800ab4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	6812      	ldr	r2, [r2, #0]
 800bf9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfa2:	f043 0301 	orr.w	r3, r3, #1
 800bfa6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a1b      	ldr	r3, [r3, #32]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d005      	beq.n	800bfbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfb0:	4b04      	ldr	r3, [pc, #16]	; (800bfc4 <HAL_PCD_SuspendCallback+0x48>)
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	4a03      	ldr	r2, [pc, #12]	; (800bfc4 <HAL_PCD_SuspendCallback+0x48>)
 800bfb6:	f043 0306 	orr.w	r3, r3, #6
 800bfba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	e000ed00 	.word	0xe000ed00

0800bfc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fe fdce 	bl	800ab78 <USBD_LL_Resume>
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bff6:	78fa      	ldrb	r2, [r7, #3]
 800bff8:	4611      	mov	r1, r2
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fe fdf9 	bl	800abf2 <USBD_LL_IsoOUTIncomplete>
}
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c01a:	78fa      	ldrb	r2, [r7, #3]
 800c01c:	4611      	mov	r1, r2
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fdda 	bl	800abd8 <USBD_LL_IsoINIncomplete>
}
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe fde6 	bl	800ac0c <USBD_LL_DevConnected>
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c056:	4618      	mov	r0, r3
 800c058:	f7fe fde3 	bl	800ac22 <USBD_LL_DevDisconnected>
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d13c      	bne.n	800c0ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c074:	4a20      	ldr	r2, [pc, #128]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a1e      	ldr	r2, [pc, #120]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c080:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c084:	4b1c      	ldr	r3, [pc, #112]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c086:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c08a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c08c:	4b1a      	ldr	r3, [pc, #104]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c08e:	2206      	movs	r2, #6
 800c090:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c092:	4b19      	ldr	r3, [pc, #100]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c094:	2202      	movs	r2, #2
 800c096:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c098:	4b17      	ldr	r3, [pc, #92]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c09a:	2200      	movs	r2, #0
 800c09c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c09e:	4b16      	ldr	r3, [pc, #88]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c0a4:	4b14      	ldr	r3, [pc, #80]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c0aa:	4b13      	ldr	r3, [pc, #76]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c0b0:	4b11      	ldr	r3, [pc, #68]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c0b6:	4b10      	ldr	r3, [pc, #64]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c0bc:	4b0e      	ldr	r3, [pc, #56]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c0c2:	480d      	ldr	r0, [pc, #52]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0c4:	f7f6 fe7a 	bl	8002dbc <HAL_PCD_Init>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d001      	beq.n	800c0d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c0ce:	f7f5 f97d 	bl	80013cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c0d2:	2180      	movs	r1, #128	; 0x80
 800c0d4:	4808      	ldr	r0, [pc, #32]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0d6:	f7f8 f80c 	bl	80040f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c0da:	2240      	movs	r2, #64	; 0x40
 800c0dc:	2100      	movs	r1, #0
 800c0de:	4806      	ldr	r0, [pc, #24]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0e0:	f7f7 ffc0 	bl	8004064 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c0e4:	2280      	movs	r2, #128	; 0x80
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	4803      	ldr	r0, [pc, #12]	; (800c0f8 <USBD_LL_Init+0x94>)
 800c0ea:	f7f7 ffbb 	bl	8004064 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	20001f80 	.word	0x20001f80

0800c0fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c112:	4618      	mov	r0, r3
 800c114:	f7f6 ff76 	bl	8003004 <HAL_PCD_Start>
 800c118:	4603      	mov	r3, r0
 800c11a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
 800c11e:	4618      	mov	r0, r3
 800c120:	f000 f92a 	bl	800c378 <USBD_Get_USB_Status>
 800c124:	4603      	mov	r3, r0
 800c126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c128:	7bbb      	ldrb	r3, [r7, #14]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b084      	sub	sp, #16
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	4608      	mov	r0, r1
 800c13c:	4611      	mov	r1, r2
 800c13e:	461a      	mov	r2, r3
 800c140:	4603      	mov	r3, r0
 800c142:	70fb      	strb	r3, [r7, #3]
 800c144:	460b      	mov	r3, r1
 800c146:	70bb      	strb	r3, [r7, #2]
 800c148:	4613      	mov	r3, r2
 800c14a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c15a:	78bb      	ldrb	r3, [r7, #2]
 800c15c:	883a      	ldrh	r2, [r7, #0]
 800c15e:	78f9      	ldrb	r1, [r7, #3]
 800c160:	f7f7 fb87 	bl	8003872 <HAL_PCD_EP_Open>
 800c164:	4603      	mov	r3, r0
 800c166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c168:	7bfb      	ldrb	r3, [r7, #15]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f000 f904 	bl	800c378 <USBD_Get_USB_Status>
 800c170:	4603      	mov	r3, r0
 800c172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c174:	7bbb      	ldrb	r3, [r7, #14]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b084      	sub	sp, #16
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	460b      	mov	r3, r1
 800c188:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c18a:	2300      	movs	r3, #0
 800c18c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c198:	78fa      	ldrb	r2, [r7, #3]
 800c19a:	4611      	mov	r1, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7f7 fbd0 	bl	8003942 <HAL_PCD_EP_Close>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 f8e5 	bl	800c378 <USBD_Get_USB_Status>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1d6:	78fa      	ldrb	r2, [r7, #3]
 800c1d8:	4611      	mov	r1, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7f7 fca8 	bl	8003b30 <HAL_PCD_EP_SetStall>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f8c6 	bl	800c378 <USBD_Get_USB_Status>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	460b      	mov	r3, r1
 800c204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c20a:	2300      	movs	r3, #0
 800c20c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c214:	78fa      	ldrb	r2, [r7, #3]
 800c216:	4611      	mov	r1, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f7f7 fced 	bl	8003bf8 <HAL_PCD_EP_ClrStall>
 800c21e:	4603      	mov	r3, r0
 800c220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	4618      	mov	r0, r3
 800c226:	f000 f8a7 	bl	800c378 <USBD_Get_USB_Status>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c22e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c24a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c24c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c250:	2b00      	cmp	r3, #0
 800c252:	da0b      	bge.n	800c26c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c254:	78fb      	ldrb	r3, [r7, #3]
 800c256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c25a:	68f9      	ldr	r1, [r7, #12]
 800c25c:	4613      	mov	r3, r2
 800c25e:	00db      	lsls	r3, r3, #3
 800c260:	1a9b      	subs	r3, r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	440b      	add	r3, r1
 800c266:	333e      	adds	r3, #62	; 0x3e
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	e00b      	b.n	800c284 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c26c:	78fb      	ldrb	r3, [r7, #3]
 800c26e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c272:	68f9      	ldr	r1, [r7, #12]
 800c274:	4613      	mov	r3, r2
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	1a9b      	subs	r3, r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	440b      	add	r3, r1
 800c27e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c282:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2aa:	78fa      	ldrb	r2, [r7, #3]
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7f7 faba 	bl	8003828 <HAL_PCD_SetAddress>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 f85c 	bl	800c378 <USBD_Get_USB_Status>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b086      	sub	sp, #24
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	607a      	str	r2, [r7, #4]
 800c2d8:	603b      	str	r3, [r7, #0]
 800c2da:	460b      	mov	r3, r1
 800c2dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2ec:	7af9      	ldrb	r1, [r7, #11]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	f7f7 fbd3 	bl	8003a9c <HAL_PCD_EP_Transmit>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 f83b 	bl	800c378 <USBD_Get_USB_Status>
 800c302:	4603      	mov	r3, r0
 800c304:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c306:	7dbb      	ldrb	r3, [r7, #22]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	607a      	str	r2, [r7, #4]
 800c31a:	603b      	str	r3, [r7, #0]
 800c31c:	460b      	mov	r3, r1
 800c31e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c32e:	7af9      	ldrb	r1, [r7, #11]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	f7f7 fb4f 	bl	80039d6 <HAL_PCD_EP_Receive>
 800c338:	4603      	mov	r3, r0
 800c33a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 f81a 	bl	800c378 <USBD_Get_USB_Status>
 800c344:	4603      	mov	r3, r0
 800c346:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c348:	7dbb      	ldrb	r3, [r7, #22]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3718      	adds	r7, #24
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	460b      	mov	r3, r1
 800c35c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c364:	78fa      	ldrb	r2, [r7, #3]
 800c366:	4611      	mov	r1, r2
 800c368:	4618      	mov	r0, r3
 800c36a:	f7f7 fb7f 	bl	8003a6c <HAL_PCD_EP_GetRxCount>
 800c36e:	4603      	mov	r3, r0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	4603      	mov	r3, r0
 800c380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d817      	bhi.n	800c3bc <USBD_Get_USB_Status+0x44>
 800c38c:	a201      	add	r2, pc, #4	; (adr r2, 800c394 <USBD_Get_USB_Status+0x1c>)
 800c38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c392:	bf00      	nop
 800c394:	0800c3a5 	.word	0x0800c3a5
 800c398:	0800c3ab 	.word	0x0800c3ab
 800c39c:	0800c3b1 	.word	0x0800c3b1
 800c3a0:	0800c3b7 	.word	0x0800c3b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3a8:	e00b      	b.n	800c3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ae:	e008      	b.n	800c3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3b4:	e005      	b.n	800c3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ba:	e002      	b.n	800c3c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c0:	bf00      	nop
  }
  return usb_status;
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <__errno>:
 800c3d0:	4b01      	ldr	r3, [pc, #4]	; (800c3d8 <__errno+0x8>)
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	20000184 	.word	0x20000184

0800c3dc <__libc_init_array>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	4e0d      	ldr	r6, [pc, #52]	; (800c414 <__libc_init_array+0x38>)
 800c3e0:	4c0d      	ldr	r4, [pc, #52]	; (800c418 <__libc_init_array+0x3c>)
 800c3e2:	1ba4      	subs	r4, r4, r6
 800c3e4:	10a4      	asrs	r4, r4, #2
 800c3e6:	2500      	movs	r5, #0
 800c3e8:	42a5      	cmp	r5, r4
 800c3ea:	d109      	bne.n	800c400 <__libc_init_array+0x24>
 800c3ec:	4e0b      	ldr	r6, [pc, #44]	; (800c41c <__libc_init_array+0x40>)
 800c3ee:	4c0c      	ldr	r4, [pc, #48]	; (800c420 <__libc_init_array+0x44>)
 800c3f0:	f000 f8f6 	bl	800c5e0 <_init>
 800c3f4:	1ba4      	subs	r4, r4, r6
 800c3f6:	10a4      	asrs	r4, r4, #2
 800c3f8:	2500      	movs	r5, #0
 800c3fa:	42a5      	cmp	r5, r4
 800c3fc:	d105      	bne.n	800c40a <__libc_init_array+0x2e>
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}
 800c400:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c404:	4798      	blx	r3
 800c406:	3501      	adds	r5, #1
 800c408:	e7ee      	b.n	800c3e8 <__libc_init_array+0xc>
 800c40a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c40e:	4798      	blx	r3
 800c410:	3501      	adds	r5, #1
 800c412:	e7f2      	b.n	800c3fa <__libc_init_array+0x1e>
 800c414:	0800c69c 	.word	0x0800c69c
 800c418:	0800c69c 	.word	0x0800c69c
 800c41c:	0800c69c 	.word	0x0800c69c
 800c420:	0800c6a0 	.word	0x0800c6a0

0800c424 <malloc>:
 800c424:	4b02      	ldr	r3, [pc, #8]	; (800c430 <malloc+0xc>)
 800c426:	4601      	mov	r1, r0
 800c428:	6818      	ldr	r0, [r3, #0]
 800c42a:	f000 b86d 	b.w	800c508 <_malloc_r>
 800c42e:	bf00      	nop
 800c430:	20000184 	.word	0x20000184

0800c434 <free>:
 800c434:	4b02      	ldr	r3, [pc, #8]	; (800c440 <free+0xc>)
 800c436:	4601      	mov	r1, r0
 800c438:	6818      	ldr	r0, [r3, #0]
 800c43a:	f000 b817 	b.w	800c46c <_free_r>
 800c43e:	bf00      	nop
 800c440:	20000184 	.word	0x20000184

0800c444 <memcpy>:
 800c444:	b510      	push	{r4, lr}
 800c446:	1e43      	subs	r3, r0, #1
 800c448:	440a      	add	r2, r1
 800c44a:	4291      	cmp	r1, r2
 800c44c:	d100      	bne.n	800c450 <memcpy+0xc>
 800c44e:	bd10      	pop	{r4, pc}
 800c450:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c454:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c458:	e7f7      	b.n	800c44a <memcpy+0x6>

0800c45a <memset>:
 800c45a:	4402      	add	r2, r0
 800c45c:	4603      	mov	r3, r0
 800c45e:	4293      	cmp	r3, r2
 800c460:	d100      	bne.n	800c464 <memset+0xa>
 800c462:	4770      	bx	lr
 800c464:	f803 1b01 	strb.w	r1, [r3], #1
 800c468:	e7f9      	b.n	800c45e <memset+0x4>
	...

0800c46c <_free_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4605      	mov	r5, r0
 800c470:	2900      	cmp	r1, #0
 800c472:	d045      	beq.n	800c500 <_free_r+0x94>
 800c474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c478:	1f0c      	subs	r4, r1, #4
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	bfb8      	it	lt
 800c47e:	18e4      	addlt	r4, r4, r3
 800c480:	f000 f8ac 	bl	800c5dc <__malloc_lock>
 800c484:	4a1f      	ldr	r2, [pc, #124]	; (800c504 <_free_r+0x98>)
 800c486:	6813      	ldr	r3, [r2, #0]
 800c488:	4610      	mov	r0, r2
 800c48a:	b933      	cbnz	r3, 800c49a <_free_r+0x2e>
 800c48c:	6063      	str	r3, [r4, #4]
 800c48e:	6014      	str	r4, [r2, #0]
 800c490:	4628      	mov	r0, r5
 800c492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c496:	f000 b8a2 	b.w	800c5de <__malloc_unlock>
 800c49a:	42a3      	cmp	r3, r4
 800c49c:	d90c      	bls.n	800c4b8 <_free_r+0x4c>
 800c49e:	6821      	ldr	r1, [r4, #0]
 800c4a0:	1862      	adds	r2, r4, r1
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	bf04      	itt	eq
 800c4a6:	681a      	ldreq	r2, [r3, #0]
 800c4a8:	685b      	ldreq	r3, [r3, #4]
 800c4aa:	6063      	str	r3, [r4, #4]
 800c4ac:	bf04      	itt	eq
 800c4ae:	1852      	addeq	r2, r2, r1
 800c4b0:	6022      	streq	r2, [r4, #0]
 800c4b2:	6004      	str	r4, [r0, #0]
 800c4b4:	e7ec      	b.n	800c490 <_free_r+0x24>
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	685a      	ldr	r2, [r3, #4]
 800c4ba:	b10a      	cbz	r2, 800c4c0 <_free_r+0x54>
 800c4bc:	42a2      	cmp	r2, r4
 800c4be:	d9fa      	bls.n	800c4b6 <_free_r+0x4a>
 800c4c0:	6819      	ldr	r1, [r3, #0]
 800c4c2:	1858      	adds	r0, r3, r1
 800c4c4:	42a0      	cmp	r0, r4
 800c4c6:	d10b      	bne.n	800c4e0 <_free_r+0x74>
 800c4c8:	6820      	ldr	r0, [r4, #0]
 800c4ca:	4401      	add	r1, r0
 800c4cc:	1858      	adds	r0, r3, r1
 800c4ce:	4282      	cmp	r2, r0
 800c4d0:	6019      	str	r1, [r3, #0]
 800c4d2:	d1dd      	bne.n	800c490 <_free_r+0x24>
 800c4d4:	6810      	ldr	r0, [r2, #0]
 800c4d6:	6852      	ldr	r2, [r2, #4]
 800c4d8:	605a      	str	r2, [r3, #4]
 800c4da:	4401      	add	r1, r0
 800c4dc:	6019      	str	r1, [r3, #0]
 800c4de:	e7d7      	b.n	800c490 <_free_r+0x24>
 800c4e0:	d902      	bls.n	800c4e8 <_free_r+0x7c>
 800c4e2:	230c      	movs	r3, #12
 800c4e4:	602b      	str	r3, [r5, #0]
 800c4e6:	e7d3      	b.n	800c490 <_free_r+0x24>
 800c4e8:	6820      	ldr	r0, [r4, #0]
 800c4ea:	1821      	adds	r1, r4, r0
 800c4ec:	428a      	cmp	r2, r1
 800c4ee:	bf04      	itt	eq
 800c4f0:	6811      	ldreq	r1, [r2, #0]
 800c4f2:	6852      	ldreq	r2, [r2, #4]
 800c4f4:	6062      	str	r2, [r4, #4]
 800c4f6:	bf04      	itt	eq
 800c4f8:	1809      	addeq	r1, r1, r0
 800c4fa:	6021      	streq	r1, [r4, #0]
 800c4fc:	605c      	str	r4, [r3, #4]
 800c4fe:	e7c7      	b.n	800c490 <_free_r+0x24>
 800c500:	bd38      	pop	{r3, r4, r5, pc}
 800c502:	bf00      	nop
 800c504:	2000021c 	.word	0x2000021c

0800c508 <_malloc_r>:
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	1ccd      	adds	r5, r1, #3
 800c50c:	f025 0503 	bic.w	r5, r5, #3
 800c510:	3508      	adds	r5, #8
 800c512:	2d0c      	cmp	r5, #12
 800c514:	bf38      	it	cc
 800c516:	250c      	movcc	r5, #12
 800c518:	2d00      	cmp	r5, #0
 800c51a:	4606      	mov	r6, r0
 800c51c:	db01      	blt.n	800c522 <_malloc_r+0x1a>
 800c51e:	42a9      	cmp	r1, r5
 800c520:	d903      	bls.n	800c52a <_malloc_r+0x22>
 800c522:	230c      	movs	r3, #12
 800c524:	6033      	str	r3, [r6, #0]
 800c526:	2000      	movs	r0, #0
 800c528:	bd70      	pop	{r4, r5, r6, pc}
 800c52a:	f000 f857 	bl	800c5dc <__malloc_lock>
 800c52e:	4a21      	ldr	r2, [pc, #132]	; (800c5b4 <_malloc_r+0xac>)
 800c530:	6814      	ldr	r4, [r2, #0]
 800c532:	4621      	mov	r1, r4
 800c534:	b991      	cbnz	r1, 800c55c <_malloc_r+0x54>
 800c536:	4c20      	ldr	r4, [pc, #128]	; (800c5b8 <_malloc_r+0xb0>)
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	b91b      	cbnz	r3, 800c544 <_malloc_r+0x3c>
 800c53c:	4630      	mov	r0, r6
 800c53e:	f000 f83d 	bl	800c5bc <_sbrk_r>
 800c542:	6020      	str	r0, [r4, #0]
 800c544:	4629      	mov	r1, r5
 800c546:	4630      	mov	r0, r6
 800c548:	f000 f838 	bl	800c5bc <_sbrk_r>
 800c54c:	1c43      	adds	r3, r0, #1
 800c54e:	d124      	bne.n	800c59a <_malloc_r+0x92>
 800c550:	230c      	movs	r3, #12
 800c552:	6033      	str	r3, [r6, #0]
 800c554:	4630      	mov	r0, r6
 800c556:	f000 f842 	bl	800c5de <__malloc_unlock>
 800c55a:	e7e4      	b.n	800c526 <_malloc_r+0x1e>
 800c55c:	680b      	ldr	r3, [r1, #0]
 800c55e:	1b5b      	subs	r3, r3, r5
 800c560:	d418      	bmi.n	800c594 <_malloc_r+0x8c>
 800c562:	2b0b      	cmp	r3, #11
 800c564:	d90f      	bls.n	800c586 <_malloc_r+0x7e>
 800c566:	600b      	str	r3, [r1, #0]
 800c568:	50cd      	str	r5, [r1, r3]
 800c56a:	18cc      	adds	r4, r1, r3
 800c56c:	4630      	mov	r0, r6
 800c56e:	f000 f836 	bl	800c5de <__malloc_unlock>
 800c572:	f104 000b 	add.w	r0, r4, #11
 800c576:	1d23      	adds	r3, r4, #4
 800c578:	f020 0007 	bic.w	r0, r0, #7
 800c57c:	1ac3      	subs	r3, r0, r3
 800c57e:	d0d3      	beq.n	800c528 <_malloc_r+0x20>
 800c580:	425a      	negs	r2, r3
 800c582:	50e2      	str	r2, [r4, r3]
 800c584:	e7d0      	b.n	800c528 <_malloc_r+0x20>
 800c586:	428c      	cmp	r4, r1
 800c588:	684b      	ldr	r3, [r1, #4]
 800c58a:	bf16      	itet	ne
 800c58c:	6063      	strne	r3, [r4, #4]
 800c58e:	6013      	streq	r3, [r2, #0]
 800c590:	460c      	movne	r4, r1
 800c592:	e7eb      	b.n	800c56c <_malloc_r+0x64>
 800c594:	460c      	mov	r4, r1
 800c596:	6849      	ldr	r1, [r1, #4]
 800c598:	e7cc      	b.n	800c534 <_malloc_r+0x2c>
 800c59a:	1cc4      	adds	r4, r0, #3
 800c59c:	f024 0403 	bic.w	r4, r4, #3
 800c5a0:	42a0      	cmp	r0, r4
 800c5a2:	d005      	beq.n	800c5b0 <_malloc_r+0xa8>
 800c5a4:	1a21      	subs	r1, r4, r0
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f000 f808 	bl	800c5bc <_sbrk_r>
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	d0cf      	beq.n	800c550 <_malloc_r+0x48>
 800c5b0:	6025      	str	r5, [r4, #0]
 800c5b2:	e7db      	b.n	800c56c <_malloc_r+0x64>
 800c5b4:	2000021c 	.word	0x2000021c
 800c5b8:	20000220 	.word	0x20000220

0800c5bc <_sbrk_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4c06      	ldr	r4, [pc, #24]	; (800c5d8 <_sbrk_r+0x1c>)
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	4605      	mov	r5, r0
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	6023      	str	r3, [r4, #0]
 800c5c8:	f7f5 fb58 	bl	8001c7c <_sbrk>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d102      	bne.n	800c5d6 <_sbrk_r+0x1a>
 800c5d0:	6823      	ldr	r3, [r4, #0]
 800c5d2:	b103      	cbz	r3, 800c5d6 <_sbrk_r+0x1a>
 800c5d4:	602b      	str	r3, [r5, #0]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	20002388 	.word	0x20002388

0800c5dc <__malloc_lock>:
 800c5dc:	4770      	bx	lr

0800c5de <__malloc_unlock>:
 800c5de:	4770      	bx	lr

0800c5e0 <_init>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr

0800c5ec <_fini>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr
