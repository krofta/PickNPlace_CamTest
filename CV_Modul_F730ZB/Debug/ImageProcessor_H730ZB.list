
ImageProcessor_H730ZB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af00  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800b1cc  0800b1cc  0001b1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b264  0800b264  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b264  0800b264  0001b264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b26c  0800b26c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b270  0800b270  0001b270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800b274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  24000010  0800b284  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000890  0800b284  00020890  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003381f  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b10  00000000  00000000  0005385d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f70  00000000  00000000  00058370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d98  00000000  00000000  0005a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038cc6  00000000  00000000  0005c078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c21b  00000000  00000000  00094d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00169e97  00000000  00000000  000b0f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021adf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088c0  00000000  00000000  0021ae6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b1b4 	.word	0x0800b1b4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800b1b4 	.word	0x0800b1b4

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b972 	b.w	8000608 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	4688      	mov	r8, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14b      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034a:	428a      	cmp	r2, r1
 800034c:	4615      	mov	r5, r2
 800034e:	d967      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0720 	rsb	r7, r2, #32
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	fa20 f707 	lsr.w	r7, r0, r7
 8000362:	4095      	lsls	r5, r2
 8000364:	ea47 0803 	orr.w	r8, r7, r3
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbb8 f7fe 	udiv	r7, r8, lr
 8000374:	fa1f fc85 	uxth.w	ip, r5
 8000378:	fb0e 8817 	mls	r8, lr, r7, r8
 800037c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000380:	fb07 f10c 	mul.w	r1, r7, ip
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18eb      	adds	r3, r5, r3
 800038a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800038e:	f080 811b 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8118 	bls.w	80005c8 <__udivmoddi4+0x28c>
 8000398:	3f02      	subs	r7, #2
 800039a:	442b      	add	r3, r5
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ba:	f080 8107 	bcs.w	80005cc <__udivmoddi4+0x290>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	f240 8104 	bls.w	80005cc <__udivmoddi4+0x290>
 80003c4:	3802      	subs	r0, #2
 80003c6:	442c      	add	r4, r5
 80003c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003cc:	eba4 040c 	sub.w	r4, r4, ip
 80003d0:	2700      	movs	r7, #0
 80003d2:	b11e      	cbz	r6, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c6 4300 	strd	r4, r3, [r6]
 80003dc:	4639      	mov	r1, r7
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d909      	bls.n	80003fa <__udivmoddi4+0xbe>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80eb 	beq.w	80005c2 <__udivmoddi4+0x286>
 80003ec:	2700      	movs	r7, #0
 80003ee:	e9c6 0100 	strd	r0, r1, [r6]
 80003f2:	4638      	mov	r0, r7
 80003f4:	4639      	mov	r1, r7
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	fab3 f783 	clz	r7, r3
 80003fe:	2f00      	cmp	r7, #0
 8000400:	d147      	bne.n	8000492 <__udivmoddi4+0x156>
 8000402:	428b      	cmp	r3, r1
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xd0>
 8000406:	4282      	cmp	r2, r0
 8000408:	f200 80fa 	bhi.w	8000600 <__udivmoddi4+0x2c4>
 800040c:	1a84      	subs	r4, r0, r2
 800040e:	eb61 0303 	sbc.w	r3, r1, r3
 8000412:	2001      	movs	r0, #1
 8000414:	4698      	mov	r8, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d0e0      	beq.n	80003dc <__udivmoddi4+0xa0>
 800041a:	e9c6 4800 	strd	r4, r8, [r6]
 800041e:	e7dd      	b.n	80003dc <__udivmoddi4+0xa0>
 8000420:	b902      	cbnz	r2, 8000424 <__udivmoddi4+0xe8>
 8000422:	deff      	udf	#255	; 0xff
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	2a00      	cmp	r2, #0
 800042a:	f040 808f 	bne.w	800054c <__udivmoddi4+0x210>
 800042e:	1b49      	subs	r1, r1, r5
 8000430:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000434:	fa1f f885 	uxth.w	r8, r5
 8000438:	2701      	movs	r7, #1
 800043a:	fbb1 fcfe 	udiv	ip, r1, lr
 800043e:	0c23      	lsrs	r3, r4, #16
 8000440:	fb0e 111c 	mls	r1, lr, ip, r1
 8000444:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000448:	fb08 f10c 	mul.w	r1, r8, ip
 800044c:	4299      	cmp	r1, r3
 800044e:	d907      	bls.n	8000460 <__udivmoddi4+0x124>
 8000450:	18eb      	adds	r3, r5, r3
 8000452:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4299      	cmp	r1, r3
 800045a:	f200 80cd 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 800045e:	4684      	mov	ip, r0
 8000460:	1a59      	subs	r1, r3, r1
 8000462:	b2a3      	uxth	r3, r4
 8000464:	fbb1 f0fe 	udiv	r0, r1, lr
 8000468:	fb0e 1410 	mls	r4, lr, r0, r1
 800046c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000470:	fb08 f800 	mul.w	r8, r8, r0
 8000474:	45a0      	cmp	r8, r4
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0x14c>
 8000478:	192c      	adds	r4, r5, r4
 800047a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x14a>
 8000480:	45a0      	cmp	r8, r4
 8000482:	f200 80b6 	bhi.w	80005f2 <__udivmoddi4+0x2b6>
 8000486:	4618      	mov	r0, r3
 8000488:	eba4 0408 	sub.w	r4, r4, r8
 800048c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000490:	e79f      	b.n	80003d2 <__udivmoddi4+0x96>
 8000492:	f1c7 0c20 	rsb	ip, r7, #32
 8000496:	40bb      	lsls	r3, r7
 8000498:	fa22 fe0c 	lsr.w	lr, r2, ip
 800049c:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a0:	fa01 f407 	lsl.w	r4, r1, r7
 80004a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80004a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80004ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b0:	4325      	orrs	r5, r4
 80004b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80004b6:	0c2c      	lsrs	r4, r5, #16
 80004b8:	fb08 3319 	mls	r3, r8, r9, r3
 80004bc:	fa1f fa8e 	uxth.w	sl, lr
 80004c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c4:	fb09 f40a 	mul.w	r4, r9, sl
 80004c8:	429c      	cmp	r4, r3
 80004ca:	fa02 f207 	lsl.w	r2, r2, r7
 80004ce:	fa00 f107 	lsl.w	r1, r0, r7
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1e 0303 	adds.w	r3, lr, r3
 80004d8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004dc:	f080 8087 	bcs.w	80005ee <__udivmoddi4+0x2b2>
 80004e0:	429c      	cmp	r4, r3
 80004e2:	f240 8084 	bls.w	80005ee <__udivmoddi4+0x2b2>
 80004e6:	f1a9 0902 	sub.w	r9, r9, #2
 80004ea:	4473      	add	r3, lr
 80004ec:	1b1b      	subs	r3, r3, r4
 80004ee:	b2ad      	uxth	r5, r5
 80004f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f4:	fb08 3310 	mls	r3, r8, r0, r3
 80004f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000500:	45a2      	cmp	sl, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1e 0404 	adds.w	r4, lr, r4
 8000508:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800050c:	d26b      	bcs.n	80005e6 <__udivmoddi4+0x2aa>
 800050e:	45a2      	cmp	sl, r4
 8000510:	d969      	bls.n	80005e6 <__udivmoddi4+0x2aa>
 8000512:	3802      	subs	r0, #2
 8000514:	4474      	add	r4, lr
 8000516:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051a:	fba0 8902 	umull	r8, r9, r0, r2
 800051e:	eba4 040a 	sub.w	r4, r4, sl
 8000522:	454c      	cmp	r4, r9
 8000524:	46c2      	mov	sl, r8
 8000526:	464b      	mov	r3, r9
 8000528:	d354      	bcc.n	80005d4 <__udivmoddi4+0x298>
 800052a:	d051      	beq.n	80005d0 <__udivmoddi4+0x294>
 800052c:	2e00      	cmp	r6, #0
 800052e:	d069      	beq.n	8000604 <__udivmoddi4+0x2c8>
 8000530:	ebb1 050a 	subs.w	r5, r1, sl
 8000534:	eb64 0403 	sbc.w	r4, r4, r3
 8000538:	fa04 fc0c 	lsl.w	ip, r4, ip
 800053c:	40fd      	lsrs	r5, r7
 800053e:	40fc      	lsrs	r4, r7
 8000540:	ea4c 0505 	orr.w	r5, ip, r5
 8000544:	e9c6 5400 	strd	r5, r4, [r6]
 8000548:	2700      	movs	r7, #0
 800054a:	e747      	b.n	80003dc <__udivmoddi4+0xa0>
 800054c:	f1c2 0320 	rsb	r3, r2, #32
 8000550:	fa20 f703 	lsr.w	r7, r0, r3
 8000554:	4095      	lsls	r5, r2
 8000556:	fa01 f002 	lsl.w	r0, r1, r2
 800055a:	fa21 f303 	lsr.w	r3, r1, r3
 800055e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000562:	4338      	orrs	r0, r7
 8000564:	0c01      	lsrs	r1, r0, #16
 8000566:	fbb3 f7fe 	udiv	r7, r3, lr
 800056a:	fa1f f885 	uxth.w	r8, r5
 800056e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb07 f308 	mul.w	r3, r7, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	fa04 f402 	lsl.w	r4, r4, r2
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x256>
 8000582:	1869      	adds	r1, r5, r1
 8000584:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000588:	d22f      	bcs.n	80005ea <__udivmoddi4+0x2ae>
 800058a:	428b      	cmp	r3, r1
 800058c:	d92d      	bls.n	80005ea <__udivmoddi4+0x2ae>
 800058e:	3f02      	subs	r7, #2
 8000590:	4429      	add	r1, r5
 8000592:	1acb      	subs	r3, r1, r3
 8000594:	b281      	uxth	r1, r0
 8000596:	fbb3 f0fe 	udiv	r0, r3, lr
 800059a:	fb0e 3310 	mls	r3, lr, r0, r3
 800059e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a2:	fb00 f308 	mul.w	r3, r0, r8
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d907      	bls.n	80005ba <__udivmoddi4+0x27e>
 80005aa:	1869      	adds	r1, r5, r1
 80005ac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b0:	d217      	bcs.n	80005e2 <__udivmoddi4+0x2a6>
 80005b2:	428b      	cmp	r3, r1
 80005b4:	d915      	bls.n	80005e2 <__udivmoddi4+0x2a6>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4429      	add	r1, r5
 80005ba:	1ac9      	subs	r1, r1, r3
 80005bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c0:	e73b      	b.n	800043a <__udivmoddi4+0xfe>
 80005c2:	4637      	mov	r7, r6
 80005c4:	4630      	mov	r0, r6
 80005c6:	e709      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c8:	4607      	mov	r7, r0
 80005ca:	e6e7      	b.n	800039c <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fb      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005d0:	4541      	cmp	r1, r8
 80005d2:	d2ab      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80005d8:	eb69 020e 	sbc.w	r2, r9, lr
 80005dc:	3801      	subs	r0, #1
 80005de:	4613      	mov	r3, r2
 80005e0:	e7a4      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e2:	4660      	mov	r0, ip
 80005e4:	e7e9      	b.n	80005ba <__udivmoddi4+0x27e>
 80005e6:	4618      	mov	r0, r3
 80005e8:	e795      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ea:	4667      	mov	r7, ip
 80005ec:	e7d1      	b.n	8000592 <__udivmoddi4+0x256>
 80005ee:	4681      	mov	r9, r0
 80005f0:	e77c      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f2:	3802      	subs	r0, #2
 80005f4:	442c      	add	r4, r5
 80005f6:	e747      	b.n	8000488 <__udivmoddi4+0x14c>
 80005f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005fc:	442b      	add	r3, r5
 80005fe:	e72f      	b.n	8000460 <__udivmoddi4+0x124>
 8000600:	4638      	mov	r0, r7
 8000602:	e708      	b.n	8000416 <__udivmoddi4+0xda>
 8000604:	4637      	mov	r7, r6
 8000606:	e6e9      	b.n	80003dc <__udivmoddi4+0xa0>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f001 faca 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f830 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 fc2e 	bl	8000e78 <MX_GPIO_Init>
  MX_FMC_Init();
 800061c:	f000 fbde 	bl	8000ddc <MX_FMC_Init>
  MX_DCMI_Init();
 8000620:	f000 f8ee 	bl	8000800 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000624:	f000 f984 	bl	8000930 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000628:	f000 f9e4 	bl	80009f4 <MX_SPI1_Init>
  MX_TIM8_Init();
 800062c:	f000 fb30 	bl	8000c90 <MX_TIM8_Init>
  MX_SDMMC2_SD_Init();
 8000630:	f000 f9be 	bl	80009b0 <MX_SDMMC2_SD_Init>
  MX_TIM2_Init();
 8000634:	f000 fa34 	bl	8000aa0 <MX_TIM2_Init>
  MX_UART4_Init();
 8000638:	f000 fb84 	bl	8000d44 <MX_UART4_Init>
  MX_TIM3_Init();
 800063c:	f000 faa6 	bl	8000b8c <MX_TIM3_Init>
  MX_FATFS_Init();
 8000640:	f00a fb86 	bl	800ad50 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 8000644:	f000 f910 	bl	8000868 <MX_FDCAN3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0x68>)
 8000650:	f002 fc54 	bl	8002efc <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_Status_GPIO_Port, LED_Status_Pin);
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <main+0x68>)
 800065a:	f002 fc68 	bl	8002f2e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_Error_GPIO_Port, LED_Error_Pin);
 800065e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <main+0x68>)
 8000664:	f002 fc63 	bl	8002f2e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066c:	f001 fb2e 	bl	8001ccc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_Status_GPIO_Port, LED_Status_Pin);
 8000670:	e7f0      	b.n	8000654 <main+0x48>
 8000672:	bf00      	nop
 8000674:	58020800 	.word	0x58020800

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0ca      	sub	sp, #296	; 0x128
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000682:	224c      	movs	r2, #76	; 0x4c
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f00a fd8b 	bl	800b1a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000690:	2220      	movs	r2, #32
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f00a fd84 	bl	800b1a2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4618      	mov	r0, r3
 80006a0:	23b4      	movs	r3, #180	; 0xb4
 80006a2:	461a      	mov	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f00a fd7c 	bl	800b1a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006aa:	2002      	movs	r0, #2
 80006ac:	f002 fd82 	bl	80031b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	4b50      	ldr	r3, [pc, #320]	; (80007f8 <SystemClock_Config+0x180>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a4f      	ldr	r2, [pc, #316]	; (80007f8 <SystemClock_Config+0x180>)
 80006bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b4d      	ldr	r3, [pc, #308]	; (80007f8 <SystemClock_Config+0x180>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d2:	bf00      	nop
 80006d4:	4b48      	ldr	r3, [pc, #288]	; (80007f8 <SystemClock_Config+0x180>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006e0:	d1f8      	bne.n	80006d4 <SystemClock_Config+0x5c>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006e2:	2303      	movs	r3, #3
 80006e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2340      	movs	r3, #64	; 0x40
 80006f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000708:	2303      	movs	r3, #3
 800070a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 25;
 800070e:	2319      	movs	r3, #25
 8000710:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000726:	230c      	movs	r3, #12
 8000728:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fd73 	bl	8003228 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000748:	f000 fca0 	bl	800108c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	233f      	movs	r3, #63	; 0x3f
 800074e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2303      	movs	r3, #3
 8000754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800075e:	2308      	movs	r3, #8
 8000760:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000764:	2340      	movs	r3, #64	; 0x40
 8000766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000782:	2102      	movs	r1, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f003 f8dd 	bl	8003944 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000790:	f000 fc7c 	bl	800108c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_FDCAN
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	4a18      	ldr	r2, [pc, #96]	; (80007fc <SystemClock_Config+0x184>)
 800079a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2200      	movs	r2, #0
 80007a2:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	2200      	movs	r2, #0
 80007aa:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2200      	movs	r2, #0
 80007b2:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2200      	movs	r2, #0
 80007c2:	671a      	str	r2, [r3, #112]	; 0x70
  PeriphClkInitStruct.I2c1235ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	67da      	str	r2, [r3, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fca5 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x168>
  {
    Error_Handler();
 80007dc:	f000 fc56 	bl	800108c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007e4:	2100      	movs	r1, #0
 80007e6:	2000      	movs	r0, #0
 80007e8:	f003 fa62 	bl	8003cb0 <HAL_RCC_MCOConfig>
}
 80007ec:	bf00      	nop
 80007ee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800
 80007fc:	0101900a 	.word	0x0101900a

08000800 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_DCMI_Init+0x60>)
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <MX_DCMI_Init+0x64>)
 8000808:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_DCMI_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_DCMI_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_DCMI_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_DCMI_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_DCMI_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MX_DCMI_Init+0x60>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_DCMI_Init+0x60>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_DCMI_Init+0x60>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_DCMI_Init+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_DCMI_Init+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_DCMI_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_DCMI_Init+0x60>)
 800084e:	f001 fb6f 	bl	8001f30 <HAL_DCMI_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 fc18 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	24000240 	.word	0x24000240
 8000864:	48020000 	.word	0x48020000

08000868 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 800086e:	4a2f      	ldr	r2, [pc, #188]	; (800092c <MX_FDCAN3_Init+0xc4>)
 8000870:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000878:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000884:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 8000886:	2200      	movs	r2, #0
 8000888:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 8000892:	2201      	movs	r2, #1
 8000894:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000896:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 8000898:	2201      	movs	r2, #1
 800089a:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 800089e:	2202      	movs	r2, #2
 80008a0:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008bc:	2201      	movs	r2, #1
 80008be:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008da:	2204      	movs	r2, #4
 80008dc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 8000904:	2200      	movs	r2, #0
 8000906:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 8000910:	2204      	movs	r2, #4
 8000912:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_FDCAN3_Init+0xc0>)
 8000916:	f001 fdc9 	bl	80024ac <HAL_FDCAN_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000920:	f000 fbb4 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	240000d4 	.word	0x240000d4
 800092c:	4000d400 	.word	0x4000d400

08000930 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_I2C2_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_I2C2_Init+0x74>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <MX_I2C2_Init+0x7c>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <MX_I2C2_Init+0x74>)
 800096c:	f002 fafa 	bl	8002f64 <HAL_I2C_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000976:	f000 fb89 	bl	800108c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_I2C2_Init+0x74>)
 800097e:	f002 fb81 	bl	8003084 <HAL_I2CEx_ConfigAnalogFilter>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 fb80 	bl	800108c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000990:	f002 fbc3 	bl	800311a <HAL_I2CEx_ConfigDigitalFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 fb77 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	24000088 	.word	0x24000088
 80009a8:	40005800 	.word	0x40005800
 80009ac:	10c0ecff 	.word	0x10c0ecff

080009b0 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <MX_SDMMC2_SD_Init+0x3c>)
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <MX_SDMMC2_SD_Init+0x40>)
 80009b8:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_SDMMC2_SD_Init+0x3c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_SDMMC2_SD_Init+0x3c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_SDMMC2_SD_Init+0x3c>)
 80009c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009cc:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <MX_SDMMC2_SD_Init+0x3c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <MX_SDMMC2_SD_Init+0x3c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  hsd2.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80009da:	4b04      	ldr	r3, [pc, #16]	; (80009ec <MX_SDMMC2_SD_Init+0x3c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	240001c0 	.word	0x240001c0
 80009f0:	48022400 	.word	0x48022400

080009f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <MX_SPI1_Init+0xa4>)
 80009fa:	4a28      	ldr	r2, [pc, #160]	; (8000a9c <MX_SPI1_Init+0xa8>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a08:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000a0c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a10:	2203      	movs	r2, #3
 8000a12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_SPI1_Init+0xa4>)
 8000a86:	f006 fd69 	bl	800755c <HAL_SPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000a90:	f000 fafc 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2400031c 	.word	0x2400031c
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000afa:	4823      	ldr	r0, [pc, #140]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000afc:	f007 f905 	bl	8007d0a <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b06:	f000 fac1 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b14:	4619      	mov	r1, r3
 8000b16:	481c      	ldr	r0, [pc, #112]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000b18:	f007 fb66 	bl	80081e8 <HAL_TIM_ConfigClockSource>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b22:	f000 fab3 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000b28:	f007 f946 	bl	8007db8 <HAL_TIM_PWM_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b32:	f000 faab 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000b46:	f008 f831 	bl	8008bac <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b50:	f000 fa9c 	bl	800108c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	2360      	movs	r3, #96	; 0x60
 8000b56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000b6c:	f007 fa2c 	bl	8007fc8 <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b76:	f000 fa89 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM2_Init+0xe8>)
 8000b7c:	f000 fdd2 	bl	8001724 <HAL_TIM_MspPostInit>

}
 8000b80:	bf00      	nop
 8000b82:	3738      	adds	r7, #56	; 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	240003a4 	.word	0x240003a4

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
 8000bba:	615a      	str	r2, [r3, #20]
 8000bbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000bc0:	4a32      	ldr	r2, [pc, #200]	; (8000c8c <MX_TIM3_Init+0x100>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000be4:	4828      	ldr	r0, [pc, #160]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000be6:	f007 f890 	bl	8007d0a <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bf0:	f000 fa4c 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4821      	ldr	r0, [pc, #132]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000c02:	f007 faf1 	bl	80081e8 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c0c:	f000 fa3e 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c10:	481d      	ldr	r0, [pc, #116]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000c12:	f007 f8d1 	bl	8007db8 <HAL_TIM_PWM_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c1c:	f000 fa36 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4816      	ldr	r0, [pc, #88]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000c30:	f007 ffbc 	bl	8008bac <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c3a:	f000 fa27 	bl	800108c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3e:	2360      	movs	r3, #96	; 0x60
 8000c40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2204      	movs	r2, #4
 8000c52:	4619      	mov	r1, r3
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000c56:	f007 f9b7 	bl	8007fc8 <HAL_TIM_PWM_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c60:	f000 fa14 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	2208      	movs	r2, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000c6c:	f007 f9ac 	bl	8007fc8 <HAL_TIM_PWM_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c76:	f000 fa09 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c7a:	4803      	ldr	r0, [pc, #12]	; (8000c88 <MX_TIM3_Init+0xfc>)
 8000c7c:	f000 fd52 	bl	8001724 <HAL_TIM_MspPostInit>

}
 8000c80:	bf00      	nop
 8000c82:	3738      	adds	r7, #56	; 0x38
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000174 	.word	0x24000174
 8000c8c:	40000400 	.word	0x40000400

08000c90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2224      	movs	r2, #36	; 0x24
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00a fa7f 	bl	800b1a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <MX_TIM8_Init+0xac>)
 8000cb0:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <MX_TIM8_Init+0xb0>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_TIM8_Init+0xac>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_TIM8_Init+0xac>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_TIM8_Init+0xac>)
 8000cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_TIM8_Init+0xac>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_TIM8_Init+0xac>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_TIM8_Init+0xac>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_TIM8_Init+0xac>)
 8000d06:	f007 f8b9 	bl	8007e7c <HAL_TIM_Encoder_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000d10:	f000 f9bc 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_TIM8_Init+0xac>)
 8000d26:	f007 ff41 	bl	8008bac <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000d30:	f000 f9ac 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3730      	adds	r7, #48	; 0x30
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2400003c 	.word	0x2400003c
 8000d40:	40010400 	.word	0x40010400

08000d44 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d4a:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <MX_UART4_Init+0x94>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000d8e:	f007 ffa9 	bl	8008ce4 <HAL_UART_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000d98:	f000 f978 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000da0:	f009 f83f 	bl	8009e22 <HAL_UARTEx_SetTxFifoThreshold>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000daa:	f000 f96f 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000db2:	f009 f874 	bl	8009e9e <HAL_UARTEx_SetRxFifoThreshold>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000dbc:	f000 f966 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_UART4_Init+0x90>)
 8000dc2:	f008 fff5 	bl	8009db0 <HAL_UARTEx_DisableFifoMode>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000dcc:	f000 f95e 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	24000290 	.word	0x24000290
 8000dd8:	40004c00 	.word	0x40004c00

08000ddc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_FMC_Init+0x94>)
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <MX_FMC_Init+0x98>)
 8000df8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_FMC_Init+0x94>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e08:	2204      	movs	r2, #4
 8000e0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e0e:	2210      	movs	r2, #16
 8000e10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000e36:	2310      	movs	r3, #16
 8000e38:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000e42:	2310      	movs	r3, #16
 8000e44:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000e46:	2310      	movs	r3, #16
 8000e48:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_FMC_Init+0x94>)
 8000e58:	f006 fb44 	bl	80074e4 <HAL_SDRAM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000e62:	f000 f913 	bl	800108c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	240003f0 	.word	0x240003f0
 8000e74:	52004140 	.word	0x52004140

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8e:	4b78      	ldr	r3, [pc, #480]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	4a76      	ldr	r2, [pc, #472]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9e:	4b74      	ldr	r3, [pc, #464]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	4b70      	ldr	r3, [pc, #448]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	4a6f      	ldr	r2, [pc, #444]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebc:	4b6c      	ldr	r3, [pc, #432]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eca:	4b69      	ldr	r3, [pc, #420]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	4a67      	ldr	r2, [pc, #412]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eda:	4b65      	ldr	r3, [pc, #404]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	f003 0320 	and.w	r3, r3, #32
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee8:	4b61      	ldr	r3, [pc, #388]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	4a60      	ldr	r2, [pc, #384]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef8:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b5a      	ldr	r3, [pc, #360]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a58      	ldr	r2, [pc, #352]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b56      	ldr	r3, [pc, #344]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	4b52      	ldr	r3, [pc, #328]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a51      	ldr	r2, [pc, #324]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b4e      	ldr	r3, [pc, #312]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f42:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	4a49      	ldr	r2, [pc, #292]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f52:	4b47      	ldr	r3, [pc, #284]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	4a42      	ldr	r2, [pc, #264]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <MX_GPIO_Init+0x1f8>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	210c      	movs	r1, #12
 8000f82:	483c      	ldr	r0, [pc, #240]	; (8001074 <MX_GPIO_Init+0x1fc>)
 8000f84:	f001 ffba 	bl	8002efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Status_Pin|LED_Error_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 41c2 	mov.w	r1, #24832	; 0x6100
 8000f8e:	483a      	ldr	r0, [pc, #232]	; (8001078 <MX_GPIO_Init+0x200>)
 8000f90:	f001 ffb4 	bl	8002efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8000f9a:	4838      	ldr	r0, [pc, #224]	; (800107c <MX_GPIO_Init+0x204>)
 8000f9c:	f001 ffae 	bl	8002efc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	482f      	ldr	r0, [pc, #188]	; (8001074 <MX_GPIO_Init+0x1fc>)
 8000fb8:	f001 fde0 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Status_Pin LED_Error_Pin PC8 */
  GPIO_InitStruct.Pin = LED_Status_Pin|LED_Error_Pin|GPIO_PIN_8;
 8000fbc:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4828      	ldr	r0, [pc, #160]	; (8001078 <MX_GPIO_Init+0x200>)
 8000fd6:	f001 fdd1 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4824      	ldr	r0, [pc, #144]	; (8001080 <MX_GPIO_Init+0x208>)
 8000fee:	f001 fdc5 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADDR0_Pin */
  GPIO_InitStruct.Pin = ADDR0_Pin;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADDR0_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	481f      	ldr	r0, [pc, #124]	; (8001084 <MX_GPIO_Init+0x20c>)
 8001008:	f001 fdb8 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR1_Pin ADDR2_Pin ADDR3_Pin */
  GPIO_InitStruct.Pin = ADDR1_Pin|ADDR2_Pin|ADDR3_Pin;
 800100c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <MX_GPIO_Init+0x210>)
 8001022:	f001 fdab 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <MX_GPIO_Init+0x208>)
 8001044:	f001 fd9a 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 8001048:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_GPIO_Init+0x204>)
 8001062:	f001 fd8b 	bl	8002b7c <HAL_GPIO_Init>

}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	58024400 	.word	0x58024400
 8001074:	58021000 	.word	0x58021000
 8001078:	58020800 	.word	0x58020800
 800107c:	58021800 	.word	0x58021800
 8001080:	58020000 	.word	0x58020000
 8001084:	58020400 	.word	0x58020400
 8001088:	58020c00 	.word	0x58020c00

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001092:	e7fe      	b.n	8001092 <Error_Handler+0x6>

08001094 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_MspInit+0x30>)
 800109c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x30>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x30>)
 80010ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	58024400 	.word	0x58024400

080010c8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a6a      	ldr	r2, [pc, #424]	; (8001290 <HAL_DCMI_MspInit+0x1c8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	f040 80cd 	bne.w	8001286 <HAL_DCMI_MspInit+0x1be>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80010ec:	4b69      	ldr	r3, [pc, #420]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 80010ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80010f2:	4a68      	ldr	r2, [pc, #416]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80010fc:	4b65      	ldr	r3, [pc, #404]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 80010fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800110a:	4b62      	ldr	r3, [pc, #392]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	4a60      	ldr	r2, [pc, #384]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111a:	4b5e      	ldr	r3, [pc, #376]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	f003 0310 	and.w	r3, r3, #16
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b5a      	ldr	r3, [pc, #360]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	4a59      	ldr	r2, [pc, #356]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001138:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4a51      	ldr	r2, [pc, #324]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a42      	ldr	r2, [pc, #264]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b40      	ldr	r3, [pc, #256]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a0:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a3b      	ldr	r2, [pc, #236]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 80011a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_DCMI_MspInit+0x1cc>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> DCMI_D0
    PA10     ------> DCMI_D1
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011be:	2370      	movs	r3, #112	; 0x70
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011ce:	230d      	movs	r3, #13
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	482f      	ldr	r0, [pc, #188]	; (8001298 <HAL_DCMI_MspInit+0x1d0>)
 80011da:	f001 fccf 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 80011de:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011f0:	230d      	movs	r3, #13
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	4828      	ldr	r0, [pc, #160]	; (800129c <HAL_DCMI_MspInit+0x1d4>)
 80011fc:	f001 fcbe 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001212:	230d      	movs	r3, #13
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	4820      	ldr	r0, [pc, #128]	; (80012a0 <HAL_DCMI_MspInit+0x1d8>)
 800121e:	f001 fcad 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001234:	230d      	movs	r3, #13
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	4819      	ldr	r0, [pc, #100]	; (80012a4 <HAL_DCMI_MspInit+0x1dc>)
 8001240:	f001 fc9c 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001244:	2308      	movs	r3, #8
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001254:	230d      	movs	r3, #13
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	4619      	mov	r1, r3
 800125e:	4812      	ldr	r0, [pc, #72]	; (80012a8 <HAL_DCMI_MspInit+0x1e0>)
 8001260:	f001 fc8c 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001276:	230d      	movs	r3, #13
 8001278:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	480a      	ldr	r0, [pc, #40]	; (80012ac <HAL_DCMI_MspInit+0x1e4>)
 8001282:	f001 fc7b 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3738      	adds	r7, #56	; 0x38
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	48020000 	.word	0x48020000
 8001294:	58024400 	.word	0x58024400
 8001298:	58021000 	.word	0x58021000
 800129c:	58020000 	.word	0x58020000
 80012a0:	58020400 	.word	0x58020400
 80012a4:	58020800 	.word	0x58020800
 80012a8:	58020c00 	.word	0x58020c00
 80012ac:	58021800 	.word	0x58021800

080012b0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN3)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <HAL_FDCAN_MspInit+0x88>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12d      	bne.n	800132e <HAL_FDCAN_MspInit+0x7e>
  {
  /* USER CODE BEGIN FDCAN3_MspInit 0 */

  /* USER CODE END FDCAN3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <HAL_FDCAN_MspInit+0x8c>)
 80012d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012d8:	4a18      	ldr	r2, [pc, #96]	; (800133c <HAL_FDCAN_MspInit+0x8c>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_FDCAN_MspInit+0x8c>)
 80012e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_FDCAN_MspInit+0x8c>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_FDCAN_MspInit+0x8c>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_FDCAN_MspInit+0x8c>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800130e:	23c0      	movs	r3, #192	; 0xc0
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800131e:	2302      	movs	r3, #2
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_FDCAN_MspInit+0x90>)
 800132a:	f001 fc27 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	4000d400 	.word	0x4000d400
 800133c:	58024400 	.word	0x58024400
 8001340:	58021400 	.word	0x58021400

08001344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_I2C_MspInit+0x88>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12e      	bne.n	80013c4 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_I2C_MspInit+0x8c>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <HAL_I2C_MspInit+0x8c>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_I2C_MspInit+0x8c>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001384:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138a:	2312      	movs	r3, #18
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001396:	2304      	movs	r3, #4
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <HAL_I2C_MspInit+0x90>)
 80013a2:	f001 fbeb 	bl	8002b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_I2C_MspInit+0x8c>)
 80013a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ac:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <HAL_I2C_MspInit+0x8c>)
 80013ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_I2C_MspInit+0x8c>)
 80013b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40005800 	.word	0x40005800
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58020400 	.word	0x58020400

080013d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <HAL_SD_MspInit+0x148>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	f040 808d 	bne.w	8001516 <HAL_SD_MspInit+0x13e>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80013fc:	4b49      	ldr	r3, [pc, #292]	; (8001524 <HAL_SD_MspInit+0x14c>)
 80013fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001402:	4a48      	ldr	r2, [pc, #288]	; (8001524 <HAL_SD_MspInit+0x14c>)
 8001404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001408:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800140c:	4b45      	ldr	r3, [pc, #276]	; (8001524 <HAL_SD_MspInit+0x14c>)
 800140e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b42      	ldr	r3, [pc, #264]	; (8001524 <HAL_SD_MspInit+0x14c>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	4a40      	ldr	r2, [pc, #256]	; (8001524 <HAL_SD_MspInit+0x14c>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <HAL_SD_MspInit+0x14c>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <HAL_SD_MspInit+0x14c>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	4a39      	ldr	r2, [pc, #228]	; (8001524 <HAL_SD_MspInit+0x14c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001448:	4b36      	ldr	r3, [pc, #216]	; (8001524 <HAL_SD_MspInit+0x14c>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	4b33      	ldr	r3, [pc, #204]	; (8001524 <HAL_SD_MspInit+0x14c>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	4a31      	ldr	r2, [pc, #196]	; (8001524 <HAL_SD_MspInit+0x14c>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_SD_MspInit+0x14c>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <HAL_SD_MspInit+0x14c>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	4a2a      	ldr	r2, [pc, #168]	; (8001524 <HAL_SD_MspInit+0x14c>)
 800147c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_SD_MspInit+0x14c>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> SDMMC2_D0
    PB15     ------> SDMMC2_D1
    PG12     ------> SDMMC2_D3
    PB3(JTDO/TRACESWO)     ------> SDMMC2_D2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001492:	2302      	movs	r3, #2
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_SDMMC2;
 80014a2:	2309      	movs	r3, #9
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	481e      	ldr	r0, [pc, #120]	; (8001528 <HAL_SD_MspInit+0x150>)
 80014ae:	f001 fb65 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_SDMMC2;
 80014c2:	2309      	movs	r3, #9
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4817      	ldr	r0, [pc, #92]	; (800152c <HAL_SD_MspInit+0x154>)
 80014ce:	f001 fb55 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3;
 80014d2:	f24c 0308 	movw	r3, #49160	; 0xc008
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_SDMMC2;
 80014e4:	2309      	movs	r3, #9
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4810      	ldr	r0, [pc, #64]	; (8001530 <HAL_SD_MspInit+0x158>)
 80014f0:	f001 fb44 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001506:	230a      	movs	r3, #10
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <HAL_SD_MspInit+0x15c>)
 8001512:	f001 fb33 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	; 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	48022400 	.word	0x48022400
 8001524:	58024400 	.word	0x58024400
 8001528:	58020800 	.word	0x58020800
 800152c:	58020000 	.word	0x58020000
 8001530:	58020400 	.word	0x58020400
 8001534:	58021800 	.word	0x58021800

08001538 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2e      	ldr	r2, [pc, #184]	; (8001610 <HAL_SPI_MspInit+0xd8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d155      	bne.n	8001606 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_SPI_MspInit+0xdc>)
 800155c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001560:	4a2c      	ldr	r2, [pc, #176]	; (8001614 <HAL_SPI_MspInit+0xdc>)
 8001562:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001566:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_SPI_MspInit+0xdc>)
 800156c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_SPI_MspInit+0xdc>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	4a25      	ldr	r2, [pc, #148]	; (8001614 <HAL_SPI_MspInit+0xdc>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_SPI_MspInit+0xdc>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_SPI_MspInit+0xdc>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <HAL_SPI_MspInit+0xdc>)
 800159e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_SPI_MspInit+0xdc>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015c4:	2305      	movs	r3, #5
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4812      	ldr	r0, [pc, #72]	; (8001618 <HAL_SPI_MspInit+0xe0>)
 80015d0:	f001 fad4 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e6:	2305      	movs	r3, #5
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <HAL_SPI_MspInit+0xe4>)
 80015f2:	f001 fac3 	bl	8002b7c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2023      	movs	r0, #35	; 0x23
 80015fc:	f000 fc63 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001600:	2023      	movs	r0, #35	; 0x23
 8001602:	f000 fc7a 	bl	8001efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40013000 	.word	0x40013000
 8001614:	58024400 	.word	0x58024400
 8001618:	58020c00 	.word	0x58020c00
 800161c:	58021800 	.word	0x58021800

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001630:	d10f      	bne.n	8001652 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_TIM_Base_MspInit+0x68>)
 8001634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001638:	4a13      	ldr	r2, [pc, #76]	; (8001688 <HAL_TIM_Base_MspInit+0x68>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_TIM_Base_MspInit+0x68>)
 8001644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001650:	e013      	b.n	800167a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_TIM_Base_MspInit+0x6c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d10e      	bne.n	800167a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_TIM_Base_MspInit+0x68>)
 800165e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <HAL_TIM_Base_MspInit+0x68>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_TIM_Base_MspInit+0x68>)
 800166e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	58024400 	.word	0x58024400
 800168c:	40000400 	.word	0x40000400

08001690 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_TIM_Encoder_MspInit+0x88>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12d      	bne.n	800170e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_TIM_Encoder_MspInit+0x8c>)
 80016b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_TIM_Encoder_MspInit+0x8c>)
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_TIM_Encoder_MspInit+0x8c>)
 80016c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_TIM_Encoder_MspInit+0x8c>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a11      	ldr	r2, [pc, #68]	; (800171c <HAL_TIM_Encoder_MspInit+0x8c>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_TIM_Encoder_MspInit+0x8c>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ee:	23c0      	movs	r3, #192	; 0xc0
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016fe:	2303      	movs	r3, #3
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_TIM_Encoder_MspInit+0x90>)
 800170a:	f001 fa37 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40010400 	.word	0x40010400
 800171c:	58024400 	.word	0x58024400
 8001720:	58020800 	.word	0x58020800

08001724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001744:	d11f      	bne.n	8001786 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_TIM_MspPostInit+0xf0>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_TIM_MspPostInit+0xf0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_TIM_MspPostInit+0xf0>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001764:	2320      	movs	r3, #32
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001774:	2301      	movs	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4826      	ldr	r0, [pc, #152]	; (8001818 <HAL_TIM_MspPostInit+0xf4>)
 8001780:	f001 f9fc 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001784:	e042      	b.n	800180c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <HAL_TIM_MspPostInit+0xf8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d13d      	bne.n	800180c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_TIM_MspPostInit+0xf0>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_TIM_MspPostInit+0xf0>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HAL_TIM_MspPostInit+0xf0>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_TIM_MspPostInit+0xf0>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b4:	4a17      	ldr	r2, [pc, #92]	; (8001814 <HAL_TIM_MspPostInit+0xf0>)
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_TIM_MspPostInit+0xf0>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017dc:	2302      	movs	r3, #2
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <HAL_TIM_MspPostInit+0xf4>)
 80017e8:	f001 f9c8 	bl	8002b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ec:	2301      	movs	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017fc:	2302      	movs	r3, #2
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <HAL_TIM_MspPostInit+0xfc>)
 8001808:	f001 f9b8 	bl	8002b7c <HAL_GPIO_Init>
}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	58024400 	.word	0x58024400
 8001818:	58020000 	.word	0x58020000
 800181c:	40000400 	.word	0x40000400
 8001820:	58020400 	.word	0x58020400

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1a      	ldr	r2, [pc, #104]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12e      	bne.n	80018a4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_UART_MspInit+0x8c>)
 8001848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184c:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <HAL_UART_MspInit+0x8c>)
 800184e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001852:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_UART_MspInit+0x8c>)
 8001858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_UART_MspInit+0x8c>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <HAL_UART_MspInit+0x8c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_UART_MspInit+0x8c>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001882:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001894:	2306      	movs	r3, #6
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <HAL_UART_MspInit+0x90>)
 80018a0:	f001 f96c 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40004c00 	.word	0x40004c00
 80018b0:	58024400 	.word	0x58024400
 80018b4:	58020000 	.word	0x58020000

080018b8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80018cc:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <HAL_FMC_MspInit+0x108>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d170      	bne.n	80019b6 <HAL_FMC_MspInit+0xfe>
    return;
  }
  FMC_Initialized = 1;
 80018d4:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_FMC_MspInit+0x108>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <HAL_FMC_MspInit+0x10c>)
 80018dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018e0:	4a38      	ldr	r2, [pc, #224]	; (80019c4 <HAL_FMC_MspInit+0x10c>)
 80018e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_FMC_MspInit+0x10c>)
 80018ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018f8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80018fc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190a:	230c      	movs	r3, #12
 800190c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	4619      	mov	r1, r3
 8001912:	482d      	ldr	r0, [pc, #180]	; (80019c8 <HAL_FMC_MspInit+0x110>)
 8001914:	f001 f932 	bl	8002b7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001918:	2301      	movs	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001928:	230c      	movs	r3, #12
 800192a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4826      	ldr	r0, [pc, #152]	; (80019cc <HAL_FMC_MspInit+0x114>)
 8001932:	f001 f923 	bl	8002b7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001936:	f248 1333 	movw	r3, #33075	; 0x8133
 800193a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001948:	230c      	movs	r3, #12
 800194a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4619      	mov	r1, r3
 8001950:	481f      	ldr	r0, [pc, #124]	; (80019d0 <HAL_FMC_MspInit+0x118>)
 8001952:	f001 f913 	bl	8002b7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001956:	f64f 7383 	movw	r3, #65411	; 0xff83
 800195a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001968:	230c      	movs	r3, #12
 800196a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4818      	ldr	r0, [pc, #96]	; (80019d4 <HAL_FMC_MspInit+0x11c>)
 8001972:	f001 f903 	bl	8002b7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001976:	f24c 7303 	movw	r3, #50947	; 0xc703
 800197a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001988:	230c      	movs	r3, #12
 800198a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4811      	ldr	r0, [pc, #68]	; (80019d8 <HAL_FMC_MspInit+0x120>)
 8001992:	f001 f8f3 	bl	8002b7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001996:	2360      	movs	r3, #96	; 0x60
 8001998:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019a6:	230c      	movs	r3, #12
 80019a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	480b      	ldr	r0, [pc, #44]	; (80019dc <HAL_FMC_MspInit+0x124>)
 80019b0:	f001 f8e4 	bl	8002b7c <HAL_GPIO_Init>
 80019b4:	e000      	b.n	80019b8 <HAL_FMC_MspInit+0x100>
    return;
 80019b6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2400002c 	.word	0x2400002c
 80019c4:	58024400 	.word	0x58024400
 80019c8:	58021400 	.word	0x58021400
 80019cc:	58020800 	.word	0x58020800
 80019d0:	58021800 	.word	0x58021800
 80019d4:	58021000 	.word	0x58021000
 80019d8:	58020c00 	.word	0x58020c00
 80019dc:	58020400 	.word	0x58020400

080019e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80019e8:	f7ff ff66 	bl	80018b8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <NMI_Handler+0x4>

080019fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <MemManage_Handler+0x4>

08001a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a40:	f000 f924 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <SPI1_IRQHandler+0x10>)
 8001a4e:	f005 fe7d 	bl	800774c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2400031c 	.word	0x2400031c

08001a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a60:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <SystemInit+0xd8>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <SystemInit+0xd8>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <SystemInit+0xdc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	2b06      	cmp	r3, #6
 8001a7a:	d807      	bhi.n	8001a8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <SystemInit+0xdc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 030f 	bic.w	r3, r3, #15
 8001a84:	4a2c      	ldr	r2, [pc, #176]	; (8001b38 <SystemInit+0xdc>)
 8001a86:	f043 0307 	orr.w	r3, r3, #7
 8001a8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <SystemInit+0xe0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <SystemInit+0xe0>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <SystemInit+0xe0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <SystemInit+0xe0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4926      	ldr	r1, [pc, #152]	; (8001b3c <SystemInit+0xe0>)
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <SystemInit+0xe4>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <SystemInit+0xdc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	2b07      	cmp	r3, #7
 8001ab4:	d907      	bls.n	8001ac6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <SystemInit+0xdc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 030f 	bic.w	r3, r3, #15
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <SystemInit+0xdc>)
 8001ac0:	f043 0307 	orr.w	r3, r3, #7
 8001ac4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <SystemInit+0xe0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <SystemInit+0xe0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <SystemInit+0xe0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <SystemInit+0xe0>)
 8001ada:	4a1a      	ldr	r2, [pc, #104]	; (8001b44 <SystemInit+0xe8>)
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <SystemInit+0xe0>)
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <SystemInit+0xec>)
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <SystemInit+0xe0>)
 8001ae6:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <SystemInit+0xf0>)
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <SystemInit+0xe0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <SystemInit+0xe0>)
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <SystemInit+0xf0>)
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <SystemInit+0xe0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <SystemInit+0xe0>)
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <SystemInit+0xf0>)
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <SystemInit+0xe0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <SystemInit+0xe0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <SystemInit+0xe0>)
 8001b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <SystemInit+0xe0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <SystemInit+0xf4>)
 8001b1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b20:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SystemInit+0xd8>)
 8001b24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b28:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00
 8001b38:	52002000 	.word	0x52002000
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b44:	02020200 	.word	0x02020200
 8001b48:	01ff0000 	.word	0x01ff0000
 8001b4c:	01010280 	.word	0x01010280
 8001b50:	52004000 	.word	0x52004000

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b58:	f7ff ff80 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b5e:	e003      	b.n	8001b68 <LoopCopyDataInit>

08001b60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b66:	3104      	adds	r1, #4

08001b68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b68:	480a      	ldr	r0, [pc, #40]	; (8001b94 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b70:	d3f6      	bcc.n	8001b60 <CopyDataInit>
  ldr  r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b74:	e002      	b.n	8001b7c <LoopFillZerobss>

08001b76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b78:	f842 3b04 	str.w	r3, [r2], #4

08001b7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b80:	d3f9      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f009 fadf 	bl	800b144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7fe fd41 	bl	800060c <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001b90:	0800b274 	.word	0x0800b274
  ldr  r0, =_sdata
 8001b94:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b98:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001b9c:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8001ba0:	24000890 	.word	0x24000890

08001ba4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC3_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bae:	2003      	movs	r0, #3
 8001bb0:	f000 f97e 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bb4:	f002 f8e6 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8001bb8:	4601      	mov	r1, r0
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_Init+0x68>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_Init+0x6c>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	fa21 f303 	lsr.w	r3, r1, r3
 8001bd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_Init+0x68>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_Init+0x6c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_Init+0x70>)
 8001bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_Init+0x74>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f814 	bl	8001c20 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e002      	b.n	8001c08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c02:	f7ff fa47 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	58024400 	.word	0x58024400
 8001c14:	0800b228 	.word	0x0800b228
 8001c18:	24000004 	.word	0x24000004
 8001c1c:	24000000 	.word	0x24000000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_InitTick+0x60>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e021      	b.n	8001c78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_InitTick+0x64>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_InitTick+0x60>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f963 	bl	8001f16 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c68:	f000 f92d 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x68>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2400000c 	.word	0x2400000c
 8001c84:	24000000 	.word	0x24000000
 8001c88:	24000008 	.word	0x24000008

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2400000c 	.word	0x2400000c
 8001cb0:	24000424 	.word	0x24000424

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	24000424 	.word	0x24000424

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_Delay+0x40>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	2400000c 	.word	0x2400000c

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <__NVIC_SetPriorityGrouping+0x40>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x40>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00
 8001d54:	05fa0000 	.word	0x05fa0000

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff29 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff40 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff90 	bl	8001e04 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5f 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff33 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffa4 	bl	8001e6c <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e069      	b.n	8002016 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff f8ba 	bl	80010c8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <HAL_DCMI_Init+0xf0>)
 8001f76:	400b      	ands	r3, r1
 8001f78:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001f8e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001f9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001fa6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001fb2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001fbe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d112      	bne.n	8001ff6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7f1b      	ldrb	r3, [r3, #28]
 8001fd4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7f5b      	ldrb	r3, [r3, #29]
 8001fda:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001fdc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7f9b      	ldrb	r3, [r3, #30]
 8001fe2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001fe4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7fdb      	ldrb	r3, [r3, #31]
 8001fec:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001ff2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001ff4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 021e 	orr.w	r2, r2, #30
 8002004:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	ffe0f007 	.word	0xffe0f007

08002024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e205      	b.n	8002442 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d004      	beq.n	800204c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e1fa      	b.n	8002442 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a8c      	ldr	r2, [pc, #560]	; (8002284 <HAL_DMA_Abort_IT+0x260>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d04a      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a8b      	ldr	r2, [pc, #556]	; (8002288 <HAL_DMA_Abort_IT+0x264>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d045      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a89      	ldr	r2, [pc, #548]	; (800228c <HAL_DMA_Abort_IT+0x268>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d040      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a88      	ldr	r2, [pc, #544]	; (8002290 <HAL_DMA_Abort_IT+0x26c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d03b      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a86      	ldr	r2, [pc, #536]	; (8002294 <HAL_DMA_Abort_IT+0x270>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d036      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a85      	ldr	r2, [pc, #532]	; (8002298 <HAL_DMA_Abort_IT+0x274>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d031      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a83      	ldr	r2, [pc, #524]	; (800229c <HAL_DMA_Abort_IT+0x278>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02c      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a82      	ldr	r2, [pc, #520]	; (80022a0 <HAL_DMA_Abort_IT+0x27c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d027      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a80      	ldr	r2, [pc, #512]	; (80022a4 <HAL_DMA_Abort_IT+0x280>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d022      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7f      	ldr	r2, [pc, #508]	; (80022a8 <HAL_DMA_Abort_IT+0x284>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d01d      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a7d      	ldr	r2, [pc, #500]	; (80022ac <HAL_DMA_Abort_IT+0x288>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7c      	ldr	r2, [pc, #496]	; (80022b0 <HAL_DMA_Abort_IT+0x28c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a7a      	ldr	r2, [pc, #488]	; (80022b4 <HAL_DMA_Abort_IT+0x290>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a79      	ldr	r2, [pc, #484]	; (80022b8 <HAL_DMA_Abort_IT+0x294>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a77      	ldr	r2, [pc, #476]	; (80022bc <HAL_DMA_Abort_IT+0x298>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_Abort_IT+0xc8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a76      	ldr	r2, [pc, #472]	; (80022c0 <HAL_DMA_Abort_IT+0x29c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_DMA_Abort_IT+0xcc>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_DMA_Abort_IT+0xce>
 80020f0:	2300      	movs	r3, #0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d065      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2204      	movs	r2, #4
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a60      	ldr	r2, [pc, #384]	; (8002284 <HAL_DMA_Abort_IT+0x260>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04a      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a5e      	ldr	r2, [pc, #376]	; (8002288 <HAL_DMA_Abort_IT+0x264>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d045      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a5d      	ldr	r2, [pc, #372]	; (800228c <HAL_DMA_Abort_IT+0x268>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5b      	ldr	r2, [pc, #364]	; (8002290 <HAL_DMA_Abort_IT+0x26c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d03b      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5a      	ldr	r2, [pc, #360]	; (8002294 <HAL_DMA_Abort_IT+0x270>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d036      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a58      	ldr	r2, [pc, #352]	; (8002298 <HAL_DMA_Abort_IT+0x274>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a57      	ldr	r2, [pc, #348]	; (800229c <HAL_DMA_Abort_IT+0x278>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d02c      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <HAL_DMA_Abort_IT+0x27c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d027      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a54      	ldr	r2, [pc, #336]	; (80022a4 <HAL_DMA_Abort_IT+0x280>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_DMA_Abort_IT+0x284>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a51      	ldr	r2, [pc, #324]	; (80022ac <HAL_DMA_Abort_IT+0x288>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_DMA_Abort_IT+0x28c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <HAL_DMA_Abort_IT+0x290>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_DMA_Abort_IT+0x294>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_DMA_Abort_IT+0x298>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Abort_IT+0x17a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a49      	ldr	r2, [pc, #292]	; (80022c0 <HAL_DMA_Abort_IT+0x29c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <HAL_DMA_Abort_IT+0x18c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e147      	b.n	8002440 <HAL_DMA_Abort_IT+0x41c>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e13e      	b.n	8002440 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 020e 	bic.w	r2, r2, #14
 80021d0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <HAL_DMA_Abort_IT+0x260>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d04a      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <HAL_DMA_Abort_IT+0x264>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d045      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_DMA_Abort_IT+0x268>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d040      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a26      	ldr	r2, [pc, #152]	; (8002290 <HAL_DMA_Abort_IT+0x26c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d03b      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a25      	ldr	r2, [pc, #148]	; (8002294 <HAL_DMA_Abort_IT+0x270>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d036      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_DMA_Abort_IT+0x274>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a22      	ldr	r2, [pc, #136]	; (800229c <HAL_DMA_Abort_IT+0x278>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d02c      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <HAL_DMA_Abort_IT+0x27c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d027      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_DMA_Abort_IT+0x280>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d022      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <HAL_DMA_Abort_IT+0x284>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01d      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <HAL_DMA_Abort_IT+0x288>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d018      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <HAL_DMA_Abort_IT+0x28c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_DMA_Abort_IT+0x290>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00e      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_DMA_Abort_IT+0x294>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a16      	ldr	r2, [pc, #88]	; (80022bc <HAL_DMA_Abort_IT+0x298>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_DMA_Abort_IT+0x24e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <HAL_DMA_Abort_IT+0x29c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d128      	bne.n	80022c4 <HAL_DMA_Abort_IT+0x2a0>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e027      	b.n	80022d4 <HAL_DMA_Abort_IT+0x2b0>
 8002284:	40020010 	.word	0x40020010
 8002288:	40020028 	.word	0x40020028
 800228c:	40020040 	.word	0x40020040
 8002290:	40020058 	.word	0x40020058
 8002294:	40020070 	.word	0x40020070
 8002298:	40020088 	.word	0x40020088
 800229c:	400200a0 	.word	0x400200a0
 80022a0:	400200b8 	.word	0x400200b8
 80022a4:	40020410 	.word	0x40020410
 80022a8:	40020428 	.word	0x40020428
 80022ac:	40020440 	.word	0x40020440
 80022b0:	40020458 	.word	0x40020458
 80022b4:	40020470 	.word	0x40020470
 80022b8:	40020488 	.word	0x40020488
 80022bc:	400204a0 	.word	0x400204a0
 80022c0:	400204b8 	.word	0x400204b8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a5c      	ldr	r2, [pc, #368]	; (800244c <HAL_DMA_Abort_IT+0x428>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d072      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a5b      	ldr	r2, [pc, #364]	; (8002450 <HAL_DMA_Abort_IT+0x42c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d06d      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a59      	ldr	r2, [pc, #356]	; (8002454 <HAL_DMA_Abort_IT+0x430>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d068      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a58      	ldr	r2, [pc, #352]	; (8002458 <HAL_DMA_Abort_IT+0x434>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d063      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a56      	ldr	r2, [pc, #344]	; (800245c <HAL_DMA_Abort_IT+0x438>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d05e      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a55      	ldr	r2, [pc, #340]	; (8002460 <HAL_DMA_Abort_IT+0x43c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d059      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a53      	ldr	r2, [pc, #332]	; (8002464 <HAL_DMA_Abort_IT+0x440>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d054      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_DMA_Abort_IT+0x444>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d04f      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a50      	ldr	r2, [pc, #320]	; (800246c <HAL_DMA_Abort_IT+0x448>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d04a      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a4f      	ldr	r2, [pc, #316]	; (8002470 <HAL_DMA_Abort_IT+0x44c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d045      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <HAL_DMA_Abort_IT+0x450>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d040      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <HAL_DMA_Abort_IT+0x454>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d03b      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_DMA_Abort_IT+0x458>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d036      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a49      	ldr	r2, [pc, #292]	; (8002480 <HAL_DMA_Abort_IT+0x45c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d031      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_DMA_Abort_IT+0x460>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02c      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a46      	ldr	r2, [pc, #280]	; (8002488 <HAL_DMA_Abort_IT+0x464>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d027      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a44      	ldr	r2, [pc, #272]	; (800248c <HAL_DMA_Abort_IT+0x468>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d022      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a43      	ldr	r2, [pc, #268]	; (8002490 <HAL_DMA_Abort_IT+0x46c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d01d      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a41      	ldr	r2, [pc, #260]	; (8002494 <HAL_DMA_Abort_IT+0x470>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d018      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <HAL_DMA_Abort_IT+0x474>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3e      	ldr	r2, [pc, #248]	; (800249c <HAL_DMA_Abort_IT+0x478>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00e      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3d      	ldr	r2, [pc, #244]	; (80024a0 <HAL_DMA_Abort_IT+0x47c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d009      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <HAL_DMA_Abort_IT+0x480>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x3a0>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3a      	ldr	r2, [pc, #232]	; (80024a8 <HAL_DMA_Abort_IT+0x484>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d101      	bne.n	80023c8 <HAL_DMA_Abort_IT+0x3a4>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_DMA_Abort_IT+0x3a6>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d028      	beq.n	8002420 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2201      	movs	r2, #1
 80023ee:	409a      	lsls	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002414:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800241e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40020010 	.word	0x40020010
 8002450:	40020028 	.word	0x40020028
 8002454:	40020040 	.word	0x40020040
 8002458:	40020058 	.word	0x40020058
 800245c:	40020070 	.word	0x40020070
 8002460:	40020088 	.word	0x40020088
 8002464:	400200a0 	.word	0x400200a0
 8002468:	400200b8 	.word	0x400200b8
 800246c:	40020410 	.word	0x40020410
 8002470:	40020428 	.word	0x40020428
 8002474:	40020440 	.word	0x40020440
 8002478:	40020458 	.word	0x40020458
 800247c:	40020470 	.word	0x40020470
 8002480:	40020488 	.word	0x40020488
 8002484:	400204a0 	.word	0x400204a0
 8002488:	400204b8 	.word	0x400204b8
 800248c:	58025408 	.word	0x58025408
 8002490:	5802541c 	.word	0x5802541c
 8002494:	58025430 	.word	0x58025430
 8002498:	58025444 	.word	0x58025444
 800249c:	58025458 	.word	0x58025458
 80024a0:	5802546c 	.word	0x5802546c
 80024a4:	58025480 	.word	0x58025480
 80024a8:	58025494 	.word	0x58025494

080024ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b098      	sub	sp, #96	; 0x60
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80024b4:	4a84      	ldr	r2, [pc, #528]	; (80026c8 <HAL_FDCAN_Init+0x21c>)
 80024b6:	f107 030c 	add.w	r3, r7, #12
 80024ba:	4611      	mov	r1, r2
 80024bc:	224c      	movs	r2, #76	; 0x4c
 80024be:	4618      	mov	r0, r3
 80024c0:	f008 fe64 	bl	800b18c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e1ca      	b.n	8002864 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7e      	ldr	r2, [pc, #504]	; (80026cc <HAL_FDCAN_Init+0x220>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d106      	bne.n	80024e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024e0:	461a      	mov	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fed8 	bl	80012b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0210 	bic.w	r2, r2, #16
 800250e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002510:	f7ff fbd0 	bl	8001cb4 <HAL_GetTick>
 8002514:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002516:	e014      	b.n	8002542 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002518:	f7ff fbcc 	bl	8001cb4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b0a      	cmp	r3, #10
 8002524:	d90d      	bls.n	8002542 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2203      	movs	r2, #3
 800253a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e190      	b.n	8002864 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b08      	cmp	r3, #8
 800254e:	d0e3      	beq.n	8002518 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002560:	f7ff fba8 	bl	8001cb4 <HAL_GetTick>
 8002564:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002566:	e014      	b.n	8002592 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002568:	f7ff fba4 	bl	8001cb4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b0a      	cmp	r3, #10
 8002574:	d90d      	bls.n	8002592 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2203      	movs	r2, #3
 800258a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e168      	b.n	8002864 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0e3      	beq.n	8002568 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0202 	orr.w	r2, r2, #2
 80025ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7c1b      	ldrb	r3, [r3, #16]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d108      	bne.n	80025ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c6:	619a      	str	r2, [r3, #24]
 80025c8:	e007      	b.n	80025da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	7c5b      	ldrb	r3, [r3, #17]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d108      	bne.n	80025f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025f0:	619a      	str	r2, [r3, #24]
 80025f2:	e007      	b.n	8002604 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002602:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7c9b      	ldrb	r3, [r3, #18]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d108      	bne.n	800261e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800261a:	619a      	str	r2, [r3, #24]
 800261c:	e007      	b.n	800262e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800262c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002652:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0210 	bic.w	r2, r2, #16
 8002662:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d108      	bne.n	800267e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0204 	orr.w	r2, r2, #4
 800267a:	619a      	str	r2, [r3, #24]
 800267c:	e030      	b.n	80026e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02c      	beq.n	80026e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d020      	beq.n	80026d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800269c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0210 	orr.w	r2, r2, #16
 80026ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d114      	bne.n	80026e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699a      	ldr	r2, [r3, #24]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	619a      	str	r2, [r3, #24]
 80026c6:	e00b      	b.n	80026e0 <HAL_FDCAN_Init+0x234>
 80026c8:	0800b1cc 	.word	0x0800b1cc
 80026cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0220 	orr.w	r2, r2, #32
 80026de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80026f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	3b01      	subs	r3, #1
 8002702:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002708:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800270a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002714:	d115      	bne.n	8002742 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	3b01      	subs	r3, #1
 8002722:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002724:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	3b01      	subs	r3, #1
 800272c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800272e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	3b01      	subs	r3, #1
 8002738:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800273e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002740:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002768:	4413      	add	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d012      	beq.n	8002794 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002776:	f023 0107 	bic.w	r1, r3, #7
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002784:	4413      	add	r3, r2
 8002786:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d012      	beq.n	80027c2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80027a4:	f023 0107 	bic.w	r1, r3, #7
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027b2:	4413      	add	r3, r2
 80027b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d013      	beq.n	80027f2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80027d2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027e0:	4413      	add	r3, r2
 80027e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80027e6:	011a      	lsls	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d013      	beq.n	8002822 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002802:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002810:	4413      	add	r3, r2
 8002812:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002816:	021a      	lsls	r2, r3, #8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a11      	ldr	r2, [pc, #68]	; (800286c <HAL_FDCAN_Init+0x3c0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d107      	bne.n	800283c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f022 0203 	bic.w	r2, r2, #3
 800283a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f80b 	bl	8002870 <FDCAN_CalcultateRamBlockAddresses>
 800285a:	4603      	mov	r3, r0
 800285c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002860:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002864:	4618      	mov	r0, r3
 8002866:	3760      	adds	r7, #96	; 0x60
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	4000a000 	.word	0x4000a000

08002870 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002886:	4ba7      	ldr	r3, [pc, #668]	; (8002b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002888:	4013      	ands	r3, r2
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	0091      	lsls	r1, r2, #2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	430b      	orrs	r3, r1
 8002894:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	4413      	add	r3, r2
 80028bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028c6:	4b97      	ldr	r3, [pc, #604]	; (8002b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	0091      	lsls	r1, r2, #2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	430b      	orrs	r3, r1
 80028d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	4413      	add	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002908:	4b86      	ldr	r3, [pc, #536]	; (8002b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800290a:	4013      	ands	r3, r2
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	0091      	lsls	r1, r2, #2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002922:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	041a      	lsls	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	4413      	add	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002950:	4b74      	ldr	r3, [pc, #464]	; (8002b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002952:	4013      	ands	r3, r2
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	0091      	lsls	r1, r2, #2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800296a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002972:	041a      	lsls	r2, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	4413      	add	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002998:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800299a:	4013      	ands	r3, r2
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	0091      	lsls	r1, r2, #2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	4413      	add	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80029c4:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	0091      	lsls	r1, r2, #2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029de:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	041a      	lsls	r2, r3, #16
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4413      	add	r3, r2
 80029fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	0091      	lsls	r1, r2, #2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	430b      	orrs	r3, r1
 8002a14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a20:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	041a      	lsls	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a3c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a44:	061a      	lsls	r2, r3, #24
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a54:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002a56:	4413      	add	r3, r2
 8002a58:	009a      	lsls	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	441a      	add	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	441a      	add	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d915      	bls.n	8002b4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002b20:	e006      	b.n	8002b30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002b22:	bf00      	nop
 8002b24:	ffff0003 	.word	0xffff0003
 8002b28:	10002b00 	.word	0x10002b00
 8002b2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2203      	movs	r2, #3
 8002b44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e010      	b.n	8002b6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e005      	b.n	8002b60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d3f3      	bcc.n	8002b54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b8a:	4b86      	ldr	r3, [pc, #536]	; (8002da4 <HAL_GPIO_Init+0x228>)
 8002b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b8e:	e18c      	b.n	8002eaa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 817e 	beq.w	8002ea4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d00b      	beq.n	8002bc8 <HAL_GPIO_Init+0x4c>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d007      	beq.n	8002bc8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bbc:	2b11      	cmp	r3, #17
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b12      	cmp	r3, #18
 8002bc6:	d130      	bne.n	8002c2a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bfe:	2201      	movs	r2, #1
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 0201 	and.w	r2, r3, #1
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	2203      	movs	r2, #3
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0xee>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b12      	cmp	r3, #18
 8002c68:	d123      	bne.n	8002cb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	08da      	lsrs	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3208      	adds	r2, #8
 8002c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0203 	and.w	r2, r3, #3
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80d8 	beq.w	8002ea4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf4:	4b2c      	ldr	r3, [pc, #176]	; (8002da8 <HAL_GPIO_Init+0x22c>)
 8002cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cfa:	4a2b      	ldr	r2, [pc, #172]	; (8002da8 <HAL_GPIO_Init+0x22c>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d04:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <HAL_GPIO_Init+0x22c>)
 8002d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d12:	4a26      	ldr	r2, [pc, #152]	; (8002dac <HAL_GPIO_Init+0x230>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <HAL_GPIO_Init+0x234>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d04a      	beq.n	8002dd4 <HAL_GPIO_Init+0x258>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <HAL_GPIO_Init+0x238>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02b      	beq.n	8002d9e <HAL_GPIO_Init+0x222>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a1b      	ldr	r2, [pc, #108]	; (8002db8 <HAL_GPIO_Init+0x23c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d025      	beq.n	8002d9a <HAL_GPIO_Init+0x21e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_GPIO_Init+0x240>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <HAL_GPIO_Init+0x21a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_GPIO_Init+0x244>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d019      	beq.n	8002d92 <HAL_GPIO_Init+0x216>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_GPIO_Init+0x248>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_GPIO_Init+0x212>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <HAL_GPIO_Init+0x24c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_GPIO_Init+0x20e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <HAL_GPIO_Init+0x250>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x20a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <HAL_GPIO_Init+0x254>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_GPIO_Init+0x206>
 8002d7e:	2309      	movs	r3, #9
 8002d80:	e029      	b.n	8002dd6 <HAL_GPIO_Init+0x25a>
 8002d82:	230a      	movs	r3, #10
 8002d84:	e027      	b.n	8002dd6 <HAL_GPIO_Init+0x25a>
 8002d86:	2307      	movs	r3, #7
 8002d88:	e025      	b.n	8002dd6 <HAL_GPIO_Init+0x25a>
 8002d8a:	2306      	movs	r3, #6
 8002d8c:	e023      	b.n	8002dd6 <HAL_GPIO_Init+0x25a>
 8002d8e:	2305      	movs	r3, #5
 8002d90:	e021      	b.n	8002dd6 <HAL_GPIO_Init+0x25a>
 8002d92:	2304      	movs	r3, #4
 8002d94:	e01f      	b.n	8002dd6 <HAL_GPIO_Init+0x25a>
 8002d96:	2303      	movs	r3, #3
 8002d98:	e01d      	b.n	8002dd6 <HAL_GPIO_Init+0x25a>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e01b      	b.n	8002dd6 <HAL_GPIO_Init+0x25a>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e019      	b.n	8002dd6 <HAL_GPIO_Init+0x25a>
 8002da2:	bf00      	nop
 8002da4:	58000080 	.word	0x58000080
 8002da8:	58024400 	.word	0x58024400
 8002dac:	58000400 	.word	0x58000400
 8002db0:	58020000 	.word	0x58020000
 8002db4:	58020400 	.word	0x58020400
 8002db8:	58020800 	.word	0x58020800
 8002dbc:	58020c00 	.word	0x58020c00
 8002dc0:	58021000 	.word	0x58021000
 8002dc4:	58021400 	.word	0x58021400
 8002dc8:	58021800 	.word	0x58021800
 8002dcc:	58021c00 	.word	0x58021c00
 8002dd0:	58022400 	.word	0x58022400
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	f002 0203 	and.w	r2, r2, #3
 8002ddc:	0092      	lsls	r2, r2, #2
 8002dde:	4093      	lsls	r3, r2
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de6:	4938      	ldr	r1, [pc, #224]	; (8002ec8 <HAL_GPIO_Init+0x34c>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f47f ae6b 	bne.w	8002b90 <HAL_GPIO_Init+0x14>
  }
}
 8002eba:	bf00      	nop
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	58000400 	.word	0x58000400

08002ecc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	887b      	ldrh	r3, [r7, #2]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
 8002ee8:	e001      	b.n	8002eee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f0c:	787b      	ldrb	r3, [r7, #1]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f12:	887a      	ldrh	r2, [r7, #2]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f18:	e003      	b.n	8002f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f1a:	887b      	ldrh	r3, [r7, #2]
 8002f1c:	041a      	lsls	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	619a      	str	r2, [r3, #24]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	401a      	ands	r2, r3
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d104      	bne.n	8002f52 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	041a      	lsls	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002f50:	e002      	b.n	8002f58 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e07f      	b.n	8003076 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe f9da 	bl	8001344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e006      	b.n	8002fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d104      	bne.n	8002ffe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ffc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_I2C_Init+0x11c>)
 800300a:	430b      	orrs	r3, r1
 800300c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800301c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	ea42 0103 	orr.w	r1, r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	021a      	lsls	r2, r3, #8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69d9      	ldr	r1, [r3, #28]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	02008000 	.word	0x02008000

08003084 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b20      	cmp	r3, #32
 8003098:	d138      	bne.n	800310c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e032      	b.n	800310e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b20      	cmp	r3, #32
 800312e:	d139      	bne.n	80031a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800313a:	2302      	movs	r3, #2
 800313c:	e033      	b.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2224      	movs	r2, #36	; 0x24
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800316c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_PWREx_ConfigSupply+0x70>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d00a      	beq.n	80031de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_PWREx_ConfigSupply+0x70>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d001      	beq.n	80031da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e01f      	b.n	800321a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e01d      	b.n	800321a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_PWREx_ConfigSupply+0x70>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f023 0207 	bic.w	r2, r3, #7
 80031e6:	490f      	ldr	r1, [pc, #60]	; (8003224 <HAL_PWREx_ConfigSupply+0x70>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031ee:	f7fe fd61 	bl	8001cb4 <HAL_GetTick>
 80031f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031f4:	e009      	b.n	800320a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031f6:	f7fe fd5d 	bl	8001cb4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003204:	d901      	bls.n	800320a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e007      	b.n	800321a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_PWREx_ConfigSupply+0x70>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003216:	d1ee      	bne.n	80031f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	58024800 	.word	0x58024800

08003228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	; 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e37a      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8087 	beq.w	8003356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003248:	4ba0      	ldr	r3, [pc, #640]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003252:	4b9e      	ldr	r3, [pc, #632]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	2b10      	cmp	r3, #16
 800325c:	d007      	beq.n	800326e <HAL_RCC_OscConfig+0x46>
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	2b18      	cmp	r3, #24
 8003262:	d110      	bne.n	8003286 <HAL_RCC_OscConfig+0x5e>
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d10b      	bne.n	8003286 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326e:	4b97      	ldr	r3, [pc, #604]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d06c      	beq.n	8003354 <HAL_RCC_OscConfig+0x12c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d168      	bne.n	8003354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e354      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x76>
 8003290:	4b8e      	ldr	r3, [pc, #568]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a8d      	ldr	r2, [pc, #564]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e02e      	b.n	80032fc <HAL_RCC_OscConfig+0xd4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x98>
 80032a6:	4b89      	ldr	r3, [pc, #548]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a88      	ldr	r2, [pc, #544]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b86      	ldr	r3, [pc, #536]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a85      	ldr	r2, [pc, #532]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e01d      	b.n	80032fc <HAL_RCC_OscConfig+0xd4>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0xbc>
 80032ca:	4b80      	ldr	r3, [pc, #512]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7f      	ldr	r2, [pc, #508]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b7d      	ldr	r3, [pc, #500]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7c      	ldr	r2, [pc, #496]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0xd4>
 80032e4:	4b79      	ldr	r3, [pc, #484]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a78      	ldr	r2, [pc, #480]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b76      	ldr	r3, [pc, #472]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a75      	ldr	r2, [pc, #468]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe fcd6 	bl	8001cb4 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800330c:	f7fe fcd2 	bl	8001cb4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e308      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800331e:	4b6b      	ldr	r3, [pc, #428]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0xe4>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fcc2 	bl	8001cb4 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe fcbe 	bl	8001cb4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	; 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e2f4      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003346:	4b61      	ldr	r3, [pc, #388]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x10c>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d06d      	beq.n	800343e <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003362:	4b5a      	ldr	r3, [pc, #360]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800336a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800336c:	4b57      	ldr	r3, [pc, #348]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <HAL_RCC_OscConfig+0x160>
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	2b18      	cmp	r3, #24
 800337c:	d11b      	bne.n	80033b6 <HAL_RCC_OscConfig+0x18e>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d116      	bne.n	80033b6 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003388:	4b50      	ldr	r3, [pc, #320]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_OscConfig+0x178>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e2c7      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	4947      	ldr	r1, [pc, #284]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b4:	e043      	b.n	800343e <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d026      	beq.n	800340c <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033be:	4b43      	ldr	r3, [pc, #268]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 0219 	bic.w	r2, r3, #25
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4940      	ldr	r1, [pc, #256]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe fc70 	bl	8001cb4 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fe fc6c 	bl	8001cb4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e2a2      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ea:	4b38      	ldr	r3, [pc, #224]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b35      	ldr	r3, [pc, #212]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	061b      	lsls	r3, r3, #24
 8003404:	4931      	ldr	r1, [pc, #196]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
 800340a:	e018      	b.n	800343e <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe fc4c 	bl	8001cb4 <HAL_GetTick>
 800341c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003420:	f7fe fc48 	bl	8001cb4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e27e      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d06c      	beq.n	8003524 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003452:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d007      	beq.n	8003470 <HAL_RCC_OscConfig+0x248>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b18      	cmp	r3, #24
 8003464:	d11b      	bne.n	800349e <HAL_RCC_OscConfig+0x276>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d116      	bne.n	800349e <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_OscConfig+0x260>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	d001      	beq.n	8003488 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e253      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	490d      	ldr	r1, [pc, #52]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800349c:	e042      	b.n	8003524 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d025      	beq.n	80034f2 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <HAL_RCC_OscConfig+0x2a4>)
 80034ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fbff 	bl	8001cb4 <HAL_GetTick>
 80034b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034ba:	f7fe fbfb 	bl	8001cb4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d903      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e231      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
 80034cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034d0:	4ba3      	ldr	r3, [pc, #652]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ee      	beq.n	80034ba <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034dc:	4ba0      	ldr	r3, [pc, #640]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	499d      	ldr	r1, [pc, #628]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60cb      	str	r3, [r1, #12]
 80034f0:	e018      	b.n	8003524 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034f2:	4b9b      	ldr	r3, [pc, #620]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a9a      	ldr	r2, [pc, #616]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80034f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe fbd9 	bl	8001cb4 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003506:	f7fe fbd5 	bl	8001cb4 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e20b      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003518:	4b91      	ldr	r3, [pc, #580]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d036      	beq.n	800359e <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d019      	beq.n	800356c <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003538:	4b89      	ldr	r3, [pc, #548]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800353a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353c:	4a88      	ldr	r2, [pc, #544]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fe fbb6 	bl	8001cb4 <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354c:	f7fe fbb2 	bl	8001cb4 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e1e8      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800355e:	4b80      	ldr	r3, [pc, #512]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x324>
 800356a:	e018      	b.n	800359e <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b7c      	ldr	r3, [pc, #496]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe fb9c 	bl	8001cb4 <HAL_GetTick>
 800357c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe fb98 	bl	8001cb4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1ce      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003592:	4b73      	ldr	r3, [pc, #460]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d036      	beq.n	8003618 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d019      	beq.n	80035e6 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035b2:	4b6b      	ldr	r3, [pc, #428]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6a      	ldr	r2, [pc, #424]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80035b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035be:	f7fe fb79 	bl	8001cb4 <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035c6:	f7fe fb75 	bl	8001cb4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1ab      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d8:	4b61      	ldr	r3, [pc, #388]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x39e>
 80035e4:	e018      	b.n	8003618 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035e6:	4b5e      	ldr	r3, [pc, #376]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a5d      	ldr	r2, [pc, #372]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80035ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fb5f 	bl	8001cb4 <HAL_GetTick>
 80035f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035fa:	f7fe fb5b 	bl	8001cb4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e191      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800360c:	4b54      	ldr	r3, [pc, #336]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8081 	beq.w	8003728 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003626:	4b4f      	ldr	r3, [pc, #316]	; (8003764 <HAL_RCC_OscConfig+0x53c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4e      	ldr	r2, [pc, #312]	; (8003764 <HAL_RCC_OscConfig+0x53c>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003632:	f7fe fb3f 	bl	8001cb4 <HAL_GetTick>
 8003636:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fe fb3b 	bl	8001cb4 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	; 0x64
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e171      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800364c:	4b45      	ldr	r3, [pc, #276]	; (8003764 <HAL_RCC_OscConfig+0x53c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x446>
 8003660:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4a3e      	ldr	r2, [pc, #248]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	; 0x70
 800366c:	e02d      	b.n	80036ca <HAL_RCC_OscConfig+0x4a2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x468>
 8003676:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a39      	ldr	r2, [pc, #228]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a36      	ldr	r2, [pc, #216]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6713      	str	r3, [r2, #112]	; 0x70
 800368e:	e01c      	b.n	80036ca <HAL_RCC_OscConfig+0x4a2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x48a>
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a30      	ldr	r2, [pc, #192]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
 80036b0:	e00b      	b.n	80036ca <HAL_RCC_OscConfig+0x4a2>
 80036b2:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4a27      	ldr	r2, [pc, #156]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d2:	f7fe faef 	bl	8001cb4 <HAL_GetTick>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe faeb 	bl	8001cb4 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e11f      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCC_OscConfig+0x4b2>
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fe fad9 	bl	8001cb4 <HAL_GetTick>
 8003702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fad5 	bl	8001cb4 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e109      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80fe 	beq.w	800392e <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800373a:	2b18      	cmp	r3, #24
 800373c:	f000 80b9 	beq.w	80038b2 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 809a 	bne.w	800387e <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a04      	ldr	r2, [pc, #16]	; (8003760 <HAL_RCC_OscConfig+0x538>)
 8003750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fe faad 	bl	8001cb4 <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800375c:	e00d      	b.n	800377a <HAL_RCC_OscConfig+0x552>
 800375e:	bf00      	nop
 8003760:	58024400 	.word	0x58024400
 8003764:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe faa4 	bl	8001cb4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0da      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800377a:	4b6f      	ldr	r3, [pc, #444]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003786:	4b6c      	ldr	r3, [pc, #432]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800378a:	4b6c      	ldr	r3, [pc, #432]	; (800393c <HAL_RCC_OscConfig+0x714>)
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003796:	0112      	lsls	r2, r2, #4
 8003798:	430a      	orrs	r2, r1
 800379a:	4967      	ldr	r1, [pc, #412]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 800379c:	4313      	orrs	r3, r2
 800379e:	628b      	str	r3, [r1, #40]	; 0x28
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	3b01      	subs	r3, #1
 80037a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	3b01      	subs	r3, #1
 80037b0:	025b      	lsls	r3, r3, #9
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	3b01      	subs	r3, #1
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	3b01      	subs	r3, #1
 80037ca:	061b      	lsls	r3, r3, #24
 80037cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037d0:	4959      	ldr	r1, [pc, #356]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80037d6:	4b58      	ldr	r3, [pc, #352]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	4a57      	ldr	r2, [pc, #348]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037e2:	4b55      	ldr	r3, [pc, #340]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 80037e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e6:	4b56      	ldr	r3, [pc, #344]	; (8003940 <HAL_RCC_OscConfig+0x718>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ee:	00d2      	lsls	r2, r2, #3
 80037f0:	4951      	ldr	r1, [pc, #324]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037f6:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	f023 020c 	bic.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	494d      	ldr	r1, [pc, #308]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003804:	4313      	orrs	r3, r2
 8003806:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003808:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	f023 0202 	bic.w	r2, r3, #2
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	4948      	ldr	r1, [pc, #288]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003816:	4313      	orrs	r3, r2
 8003818:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	4a46      	ldr	r2, [pc, #280]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003826:	4b44      	ldr	r3, [pc, #272]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	4a43      	ldr	r2, [pc, #268]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 800382c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003830:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003832:	4b41      	ldr	r3, [pc, #260]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	4a40      	ldr	r2, [pc, #256]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800383c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800383e:	4b3e      	ldr	r3, [pc, #248]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	4a3d      	ldr	r2, [pc, #244]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384a:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a3a      	ldr	r2, [pc, #232]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe fa2d 	bl	8001cb4 <HAL_GetTick>
 800385a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385e:	f7fe fa29 	bl	8001cb4 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e05f      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003870:	4b31      	ldr	r3, [pc, #196]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x636>
 800387c:	e057      	b.n	800392e <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 8003884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fe fa13 	bl	8001cb4 <HAL_GetTick>
 800388e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003892:	f7fe fa0f 	bl	8001cb4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e045      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f0      	bne.n	8003892 <HAL_RCC_OscConfig+0x66a>
 80038b0:	e03d      	b.n	800392e <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <HAL_RCC_OscConfig+0x710>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d031      	beq.n	800392a <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f003 0203 	and.w	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d12a      	bne.n	800392a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d122      	bne.n	800392a <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d11a      	bne.n	800392a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	0a5b      	lsrs	r3, r3, #9
 80038f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d111      	bne.n	800392a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d108      	bne.n	800392a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	0e1b      	lsrs	r3, r3, #24
 800391c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	58024400 	.word	0x58024400
 800393c:	fffffc0c 	.word	0xfffffc0c
 8003940:	ffff0007 	.word	0xffff0007

08003944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e19c      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003958:	4b8a      	ldr	r3, [pc, #552]	; (8003b84 <HAL_RCC_ClockConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d910      	bls.n	8003988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b87      	ldr	r3, [pc, #540]	; (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 020f 	bic.w	r2, r3, #15
 800396e:	4985      	ldr	r1, [pc, #532]	; (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b83      	ldr	r3, [pc, #524]	; (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e184      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d010      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	4b7b      	ldr	r3, [pc, #492]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d908      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039a4:	4b78      	ldr	r3, [pc, #480]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	4975      	ldr	r1, [pc, #468]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	4b70      	ldr	r3, [pc, #448]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d908      	bls.n	80039e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039d2:	4b6d      	ldr	r3, [pc, #436]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	496a      	ldr	r1, [pc, #424]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d010      	beq.n	8003a12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	4b64      	ldr	r3, [pc, #400]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d908      	bls.n	8003a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a00:	4b61      	ldr	r3, [pc, #388]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	495e      	ldr	r1, [pc, #376]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d010      	beq.n	8003a40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d908      	bls.n	8003a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a2e:	4b56      	ldr	r3, [pc, #344]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	4953      	ldr	r1, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d010      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	4b4d      	ldr	r3, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d908      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b4a      	ldr	r3, [pc, #296]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f023 020f 	bic.w	r2, r3, #15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4947      	ldr	r1, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d055      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a7a:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4940      	ldr	r1, [pc, #256]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a94:	4b3c      	ldr	r3, [pc, #240]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d121      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0f6      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aac:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d115      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0ea      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ac4:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0de      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad4:	4b2c      	ldr	r3, [pc, #176]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0d6      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ae4:	4b28      	ldr	r3, [pc, #160]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f023 0207 	bic.w	r2, r3, #7
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4925      	ldr	r1, [pc, #148]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fe f8dd 	bl	8001cb4 <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afe:	f7fe f8d9 	bl	8001cb4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e0be      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b14:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d1eb      	bne.n	8003afe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d010      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d208      	bcs.n	8003b54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d214      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 020f 	bic.w	r2, r3, #15
 8003b6a:	4906      	ldr	r1, [pc, #24]	; (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e086      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
 8003b84:	52002000 	.word	0x52002000
 8003b88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d208      	bcs.n	8003bba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ba8:	4b3c      	ldr	r3, [pc, #240]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	4939      	ldr	r1, [pc, #228]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d010      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d208      	bcs.n	8003be8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	492e      	ldr	r1, [pc, #184]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699a      	ldr	r2, [r3, #24]
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d208      	bcs.n	8003c16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c04:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	4922      	ldr	r1, [pc, #136]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d010      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d208      	bcs.n	8003c44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4917      	ldr	r1, [pc, #92]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c44:	f000 f89e 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8003c48:	4601      	mov	r1, r0
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <HAL_RCC_ClockConfig+0x35c>)
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	fa21 f303 	lsr.w	r3, r1, r3
 8003c60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <HAL_RCC_ClockConfig+0x35c>)
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
 8003c78:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <HAL_RCC_ClockConfig+0x360>)
 8003c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x364>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_RCC_ClockConfig+0x368>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd ffca 	bl	8001c20 <HAL_InitTick>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	58024400 	.word	0x58024400
 8003ca0:	0800b228 	.word	0x0800b228
 8003ca4:	24000004 	.word	0x24000004
 8003ca8:	24000000 	.word	0x24000000
 8003cac:	24000008 	.word	0x24000008

08003cb0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08c      	sub	sp, #48	; 0x30
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d12a      	bne.n	8003d18 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc8:	4a2b      	ldr	r2, [pc, #172]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cea:	2303      	movs	r3, #3
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003cf6:	f107 031c 	add.w	r3, r7, #28
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	481f      	ldr	r0, [pc, #124]	; (8003d7c <HAL_RCC_MCOConfig+0xcc>)
 8003cfe:	f7fe ff3d 	bl	8002b7c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003d02:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	4919      	ldr	r1, [pc, #100]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003d16:	e02a      	b.n	8003d6e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d40:	2303      	movs	r3, #3
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003d4c:	f107 031c 	add.w	r3, r7, #28
 8003d50:	4619      	mov	r1, r3
 8003d52:	480b      	ldr	r0, [pc, #44]	; (8003d80 <HAL_RCC_MCOConfig+0xd0>)
 8003d54:	f7fe ff12 	bl	8002b7c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	01d9      	lsls	r1, r3, #7
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	430b      	orrs	r3, r1
 8003d68:	4903      	ldr	r1, [pc, #12]	; (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	610b      	str	r3, [r1, #16]
}
 8003d6e:	bf00      	nop
 8003d70:	3730      	adds	r7, #48	; 0x30
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	58020000 	.word	0x58020000
 8003d80:	58020800 	.word	0x58020800

08003d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b089      	sub	sp, #36	; 0x24
 8003d88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d8a:	4baf      	ldr	r3, [pc, #700]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d92:	2b18      	cmp	r3, #24
 8003d94:	f200 814e 	bhi.w	8004034 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003d98:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003e05 	.word	0x08003e05
 8003da4:	08004035 	.word	0x08004035
 8003da8:	08004035 	.word	0x08004035
 8003dac:	08004035 	.word	0x08004035
 8003db0:	08004035 	.word	0x08004035
 8003db4:	08004035 	.word	0x08004035
 8003db8:	08004035 	.word	0x08004035
 8003dbc:	08004035 	.word	0x08004035
 8003dc0:	08003e2b 	.word	0x08003e2b
 8003dc4:	08004035 	.word	0x08004035
 8003dc8:	08004035 	.word	0x08004035
 8003dcc:	08004035 	.word	0x08004035
 8003dd0:	08004035 	.word	0x08004035
 8003dd4:	08004035 	.word	0x08004035
 8003dd8:	08004035 	.word	0x08004035
 8003ddc:	08004035 	.word	0x08004035
 8003de0:	08003e31 	.word	0x08003e31
 8003de4:	08004035 	.word	0x08004035
 8003de8:	08004035 	.word	0x08004035
 8003dec:	08004035 	.word	0x08004035
 8003df0:	08004035 	.word	0x08004035
 8003df4:	08004035 	.word	0x08004035
 8003df8:	08004035 	.word	0x08004035
 8003dfc:	08004035 	.word	0x08004035
 8003e00:	08003e37 	.word	0x08003e37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e04:	4b90      	ldr	r3, [pc, #576]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e10:	4b8d      	ldr	r3, [pc, #564]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	08db      	lsrs	r3, r3, #3
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	4a8c      	ldr	r2, [pc, #560]	; (800404c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003e22:	e10a      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e24:	4b89      	ldr	r3, [pc, #548]	; (800404c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003e26:	61bb      	str	r3, [r7, #24]
    break;
 8003e28:	e107      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e2a:	4b89      	ldr	r3, [pc, #548]	; (8004050 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003e2c:	61bb      	str	r3, [r7, #24]
    break;
 8003e2e:	e104      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003e30:	4b88      	ldr	r3, [pc, #544]	; (8004054 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003e32:	61bb      	str	r3, [r7, #24]
    break;
 8003e34:	e101      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e36:	4b84      	ldr	r3, [pc, #528]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003e40:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e4c:	4b7e      	ldr	r3, [pc, #504]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003e56:	4b7c      	ldr	r3, [pc, #496]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	08db      	lsrs	r3, r3, #3
 8003e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80da 	beq.w	800402e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d05a      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d302      	bcc.n	8003e8a <HAL_RCC_GetSysClockFreq+0x106>
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d078      	beq.n	8003f7a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003e88:	e099      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e8a:	4b6f      	ldr	r3, [pc, #444]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d02d      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e96:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	08db      	lsrs	r3, r3, #3
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	4a6a      	ldr	r2, [pc, #424]	; (800404c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec0:	4b61      	ldr	r3, [pc, #388]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ed4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003ef0:	e087      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efc:	eddf 6a57 	vldr	s13, [pc, #348]	; 800405c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f04:	4b50      	ldr	r3, [pc, #320]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f14:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f18:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f34:	e065      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f40:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004060 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f48:	4b3f      	ldr	r3, [pc, #252]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f58:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f5c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003f60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f78:	e043      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f84:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004064 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f94:	ee07 3a90 	vmov	s15, r3
 8003f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fbc:	e021      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004060 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fe4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003fe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004000:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	0a5b      	lsrs	r3, r3, #9
 8004008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400c:	3301      	adds	r3, #1
 800400e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800401a:	edd7 6a07 	vldr	s13, [r7, #28]
 800401e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004026:	ee17 3a90 	vmov	r3, s15
 800402a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800402c:	e005      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
    break;
 8004032:	e002      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004036:	61bb      	str	r3, [r7, #24]
    break;
 8004038:	bf00      	nop
  }

  return sysclockfreq;
 800403a:	69bb      	ldr	r3, [r7, #24]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3724      	adds	r7, #36	; 0x24
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	58024400 	.word	0x58024400
 800404c:	03d09000 	.word	0x03d09000
 8004050:	003d0900 	.word	0x003d0900
 8004054:	02dc6c00 	.word	0x02dc6c00
 8004058:	46000000 	.word	0x46000000
 800405c:	4c742400 	.word	0x4c742400
 8004060:	4a742400 	.word	0x4a742400
 8004064:	4c371b00 	.word	0x4c371b00

08004068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800406e:	f7ff fe89 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8004072:	4601      	mov	r1, r0
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <HAL_RCC_GetHCLKFreq+0x54>)
 8004080:	5cd3      	ldrb	r3, [r2, r3]
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	fa21 f303 	lsr.w	r3, r1, r3
 800408a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_RCC_GetHCLKFreq+0x54>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	4a07      	ldr	r2, [pc, #28]	; (80040c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80040a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040a6:	4a07      	ldr	r2, [pc, #28]	; (80040c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	58024400 	.word	0x58024400
 80040bc:	0800b228 	.word	0x0800b228
 80040c0:	24000004 	.word	0x24000004
 80040c4:	24000000 	.word	0x24000000

080040c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80040cc:	f7ff ffcc 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040d0:	4601      	mov	r1, r0
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040de:	5cd3      	ldrb	r3, [r2, r3]
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	58024400 	.word	0x58024400
 80040f0:	0800b228 	.word	0x0800b228

080040f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80040f8:	f7ff ffb6 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040fc:	4601      	mov	r1, r0
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <HAL_RCC_GetPCLK2Freq+0x28>)
 800410a:	5cd3      	ldrb	r3, [r2, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	58024400 	.word	0x58024400
 800411c:	0800b228 	.word	0x0800b228

08004120 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800412c:	2300      	movs	r3, #0
 800412e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d03d      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004144:	d013      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414a:	d802      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004150:	e01f      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004156:	d013      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004158:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800415c:	d01c      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800415e:	e018      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004160:	4bae      	ldr	r3, [pc, #696]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4aad      	ldr	r2, [pc, #692]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800416c:	e015      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f001 fc95 	bl	8005aa4 <RCCEx_PLL2_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800417e:	e00c      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3324      	adds	r3, #36	; 0x24
 8004184:	2102      	movs	r1, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fd3e 	bl	8005c08 <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004190:	e003      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
      break;
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041a0:	4b9e      	ldr	r3, [pc, #632]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80041a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ac:	499b      	ldr	r1, [pc, #620]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	650b      	str	r3, [r1, #80]	; 0x50
 80041b2:	e001      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d03d      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d826      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041e9 	.word	0x080041e9
 80041d8:	080041f7 	.word	0x080041f7
 80041dc:	08004209 	.word	0x08004209
 80041e0:	08004221 	.word	0x08004221
 80041e4:	08004221 	.word	0x08004221
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4b8c      	ldr	r3, [pc, #560]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	4a8b      	ldr	r2, [pc, #556]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041f4:	e015      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fc51 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004206:	e00c      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3324      	adds	r3, #36	; 0x24
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f001 fcfa 	bl	8005c08 <RCCEx_PLL3_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
      break;
 800421e:	e000      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004228:	4b7c      	ldr	r3, [pc, #496]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800422a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422c:	f023 0207 	bic.w	r2, r3, #7
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	4979      	ldr	r1, [pc, #484]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	650b      	str	r3, [r1, #80]	; 0x50
 800423a:	e001      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004248:	2b00      	cmp	r3, #0
 800424a:	d049      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004256:	d022      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425c:	d805      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004266:	d011      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004268:	e022      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800426a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800426e:	d022      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004270:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004274:	d021      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004276:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800427a:	d020      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800427c:	e018      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x190>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427e:	4b67      	ldr	r3, [pc, #412]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	4a66      	ldr	r2, [pc, #408]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004288:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800428a:	e019      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f001 fc06 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800429c:	e010      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3324      	adds	r3, #36	; 0x24
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f001 fcaf 	bl	8005c08 <RCCEx_PLL3_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042ae:	e007      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	75fb      	strb	r3, [r7, #23]
      break;
 80042b4:	e004      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      break;
 80042b6:	bf00      	nop
 80042b8:	e002      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      break;
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      break;
 80042be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80042c6:	4b55      	ldr	r3, [pc, #340]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042d4:	4951      	ldr	r1, [pc, #324]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	658b      	str	r3, [r1, #88]	; 0x58
 80042da:	e001      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d049      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042f6:	d022      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80042f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042fc:	d805      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004306:	d011      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004308:	e022      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800430a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800430e:	d022      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8004310:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004314:	d021      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8004316:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800431a:	d020      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800431c:	e018      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x230>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431e:	4b3f      	ldr	r3, [pc, #252]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	4a3e      	ldr	r2, [pc, #248]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004328:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800432a:	e019      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x240>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fbb6 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800433c:	e010      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x240>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3324      	adds	r3, #36	; 0x24
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fc5f 	bl	8005c08 <RCCEx_PLL3_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800434e:	e007      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x240>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	75fb      	strb	r3, [r7, #23]
      break;
 8004354:	e004      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x240>
      break;
 8004356:	bf00      	nop
 8004358:	e002      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x240>
      break;
 800435a:	bf00      	nop
 800435c:	e000      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x240>
      break;
 800435e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004366:	4b2d      	ldr	r3, [pc, #180]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004374:	4929      	ldr	r1, [pc, #164]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	658b      	str	r3, [r1, #88]	; 0x58
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d032      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	2b10      	cmp	r3, #16
 8004392:	d009      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004394:	2b10      	cmp	r3, #16
 8004396:	d802      	bhi.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d018      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800439c:	e014      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d009      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80043a2:	2b30      	cmp	r3, #48	; 0x30
 80043a4:	d015      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 80043a6:	e00f      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	4a1b      	ldr	r2, [pc, #108]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80043ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80043b4:	e00e      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fb71 	bl	8005aa4 <RCCEx_PLL2_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80043c6:	e005      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
      break;
 80043cc:	e002      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      break;
 80043d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043da:	4b10      	ldr	r3, [pc, #64]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e6:	490d      	ldr	r1, [pc, #52]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043ec:	e001      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d045      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004406:	d022      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440c:	d808      	bhi.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004416:	d011      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004418:	e022      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x340>
 800441a:	bf00      	nop
 800441c:	58024400 	.word	0x58024400
 8004420:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004424:	d01f      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8004426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800442a:	d01e      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800442c:	e018      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442e:	4ba4      	ldr	r3, [pc, #656]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	4aa3      	ldr	r2, [pc, #652]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004438:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800443a:	e017      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x34c>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f001 fb2e 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800444c:	e00e      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x34c>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3324      	adds	r3, #36	; 0x24
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f001 fbd7 	bl	8005c08 <RCCEx_PLL3_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800445e:	e005      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x34c>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	75fb      	strb	r3, [r7, #23]
      break;
 8004464:	e002      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x34c>
      break;
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x34c>
      break;
 800446a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446c:	7dfb      	ldrb	r3, [r7, #23]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x366>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004472:	4b93      	ldr	r3, [pc, #588]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	4990      	ldr	r1, [pc, #576]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004480:	4313      	orrs	r3, r2
 8004482:	650b      	str	r3, [r1, #80]	; 0x50
 8004484:	e001      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d042      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800449e:	d01b      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80044a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a4:	d805      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d022      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80044aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 80044b0:	e01b      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80044b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044b6:	d01d      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 80044b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044bc:	d01c      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 80044be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044c2:	d01b      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80044c4:	e011      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	2101      	movs	r1, #1
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 fae9 	bl	8005aa4 <RCCEx_PLL2_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80044d6:	e012      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3324      	adds	r3, #36	; 0x24
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 fb92 	bl	8005c08 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80044e8:	e009      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
      break;
 80044ee:	e006      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
      break;
 80044f0:	bf00      	nop
 80044f2:	e004      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
      break;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
      break;
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
      break;
 80044fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004504:	4b6e      	ldr	r3, [pc, #440]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	496b      	ldr	r1, [pc, #428]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	650b      	str	r3, [r1, #80]	; 0x50
 8004516:	e001      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d044      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x492>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800452e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004532:	d01b      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8004534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004538:	d805      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d022      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800453e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004542:	d00a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004544:	e01b      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454a:	d01d      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800454c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004550:	d01c      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8004552:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004556:	d01b      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8004558:	e011      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x45e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	2101      	movs	r1, #1
 8004560:	4618      	mov	r0, r3
 8004562:	f001 fa9f 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800456a:	e012      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x472>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3324      	adds	r3, #36	; 0x24
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fb48 	bl	8005c08 <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800457c:	e009      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x472>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
      break;
 8004582:	e006      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x472>
      break;
 8004584:	bf00      	nop
 8004586:	e004      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x472>
      break;
 8004588:	bf00      	nop
 800458a:	e002      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x472>
      break;
 800458c:	bf00      	nop
 800458e:	e000      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x472>
      break;
 8004590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x48e>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004598:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045a6:	4946      	ldr	r1, [pc, #280]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	658b      	str	r3, [r1, #88]	; 0x58
 80045ac:	e001      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x492>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d02d      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c6:	d005      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
 80045c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045cc:	d009      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d013      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80045d2:	e00f      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d4:	4b3a      	ldr	r3, [pc, #232]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	4a39      	ldr	r2, [pc, #228]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80045da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045e0:	e00c      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2101      	movs	r1, #1
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 fa5b 	bl	8005aa4 <RCCEx_PLL2_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045f2:	e003      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
      break;
 80045f8:	e000      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      break;
 80045fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004602:	4b2f      	ldr	r3, [pc, #188]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800460e:	492c      	ldr	r1, [pc, #176]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004610:	4313      	orrs	r3, r2
 8004612:	650b      	str	r3, [r1, #80]	; 0x50
 8004614:	e001      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d031      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	2b03      	cmp	r3, #3
 800462c:	d81a      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x544>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	0800466b 	.word	0x0800466b
 8004638:	08004645 	.word	0x08004645
 800463c:	08004653 	.word	0x08004653
 8004640:	0800466b 	.word	0x0800466b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004644:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800464a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004650:	e00c      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x54c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3304      	adds	r3, #4
 8004656:	2102      	movs	r1, #2
 8004658:	4618      	mov	r0, r3
 800465a:	f001 fa23 	bl	8005aa4 <RCCEx_PLL2_Config>
 800465e:	4603      	mov	r3, r0
 8004660:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004662:	e003      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	75fb      	strb	r3, [r7, #23]
      break;
 8004668:	e000      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x54c>
      break;
 800466a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004672:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	f023 0203 	bic.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4910      	ldr	r1, [pc, #64]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004680:	4313      	orrs	r3, r2
 8004682:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004684:	e001      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x56a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 808a 	beq.w	80047ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800469e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046a4:	f7fd fb06 	bl	8001cb4 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046aa:	e00d      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ac:	f7fd fb02 	bl	8001cb4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d906      	bls.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      {
        ret = HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	75fb      	strb	r3, [r7, #23]
        break;
 80046be:	e009      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80046c0:	58024400 	.word	0x58024400
 80046c4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c8:	4bb9      	ldr	r3, [pc, #740]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0eb      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x58c>
      }
    }

    if(ret == HAL_OK)
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d166      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046da:	4bb6      	ldr	r3, [pc, #728]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80046dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046e4:	4053      	eors	r3, r2
 80046e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d013      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ee:	4bb1      	ldr	r3, [pc, #708]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046f8:	4bae      	ldr	r3, [pc, #696]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	4aad      	ldr	r2, [pc, #692]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004702:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004704:	4bab      	ldr	r3, [pc, #684]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4aaa      	ldr	r2, [pc, #680]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004710:	4aa8      	ldr	r2, [pc, #672]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800471c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004720:	d115      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x62e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004722:	f7fd fac7 	bl	8001cb4 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004728:	e00b      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x622>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fd fac3 	bl	8001cb4 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d902      	bls.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x622>
          {
            ret = HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	75fb      	strb	r3, [r7, #23]
            break;
 8004740:	e005      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004742:	4b9c      	ldr	r3, [pc, #624]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ed      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x60a>
          }
        }
      }

      if(ret == HAL_OK)
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d126      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800475a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004762:	d10d      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8004764:	4b93      	ldr	r3, [pc, #588]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004772:	0919      	lsrs	r1, r3, #4
 8004774:	4b90      	ldr	r3, [pc, #576]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x898>)
 8004776:	400b      	ands	r3, r1
 8004778:	498e      	ldr	r1, [pc, #568]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 800477a:	4313      	orrs	r3, r2
 800477c:	610b      	str	r3, [r1, #16]
 800477e:	e005      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004780:	4b8c      	ldr	r3, [pc, #560]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	4a8b      	ldr	r2, [pc, #556]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8004786:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800478a:	6113      	str	r3, [r2, #16]
 800478c:	4b89      	ldr	r3, [pc, #548]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 800478e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479a:	4986      	ldr	r1, [pc, #536]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 800479c:	4313      	orrs	r3, r2
 800479e:	670b      	str	r3, [r1, #112]	; 0x70
 80047a0:	e004      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
 80047a4:	75bb      	strb	r3, [r7, #22]
 80047a6:	e001      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d07e      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x796>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047bc:	2b28      	cmp	r3, #40	; 0x28
 80047be:	d867      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x770>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	08004897 	.word	0x08004897
 80047cc:	08004891 	.word	0x08004891
 80047d0:	08004891 	.word	0x08004891
 80047d4:	08004891 	.word	0x08004891
 80047d8:	08004891 	.word	0x08004891
 80047dc:	08004891 	.word	0x08004891
 80047e0:	08004891 	.word	0x08004891
 80047e4:	08004891 	.word	0x08004891
 80047e8:	0800486d 	.word	0x0800486d
 80047ec:	08004891 	.word	0x08004891
 80047f0:	08004891 	.word	0x08004891
 80047f4:	08004891 	.word	0x08004891
 80047f8:	08004891 	.word	0x08004891
 80047fc:	08004891 	.word	0x08004891
 8004800:	08004891 	.word	0x08004891
 8004804:	08004891 	.word	0x08004891
 8004808:	0800487f 	.word	0x0800487f
 800480c:	08004891 	.word	0x08004891
 8004810:	08004891 	.word	0x08004891
 8004814:	08004891 	.word	0x08004891
 8004818:	08004891 	.word	0x08004891
 800481c:	08004891 	.word	0x08004891
 8004820:	08004891 	.word	0x08004891
 8004824:	08004891 	.word	0x08004891
 8004828:	08004897 	.word	0x08004897
 800482c:	08004891 	.word	0x08004891
 8004830:	08004891 	.word	0x08004891
 8004834:	08004891 	.word	0x08004891
 8004838:	08004891 	.word	0x08004891
 800483c:	08004891 	.word	0x08004891
 8004840:	08004891 	.word	0x08004891
 8004844:	08004891 	.word	0x08004891
 8004848:	08004897 	.word	0x08004897
 800484c:	08004891 	.word	0x08004891
 8004850:	08004891 	.word	0x08004891
 8004854:	08004891 	.word	0x08004891
 8004858:	08004891 	.word	0x08004891
 800485c:	08004891 	.word	0x08004891
 8004860:	08004891 	.word	0x08004891
 8004864:	08004891 	.word	0x08004891
 8004868:	08004897 	.word	0x08004897
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	2101      	movs	r1, #1
 8004872:	4618      	mov	r0, r3
 8004874:	f001 f916 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800487c:	e00c      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x778>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3324      	adds	r3, #36	; 0x24
 8004882:	2101      	movs	r1, #1
 8004884:	4618      	mov	r0, r3
 8004886:	f001 f9bf 	bl	8005c08 <RCCEx_PLL3_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800488e:	e003      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x778>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	75fb      	strb	r3, [r7, #23]
      break;
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x778>
      break;
 8004896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800489e:	4b45      	ldr	r3, [pc, #276]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	4942      	ldr	r1, [pc, #264]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	654b      	str	r3, [r1, #84]	; 0x54
 80048b0:	e001      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d037      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x812>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d820      	bhi.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 80048ca:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	08004913 	.word	0x08004913
 80048d4:	080048e9 	.word	0x080048e9
 80048d8:	080048fb 	.word	0x080048fb
 80048dc:	08004913 	.word	0x08004913
 80048e0:	08004913 	.word	0x08004913
 80048e4:	08004913 	.word	0x08004913
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	2101      	movs	r1, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 f8d8 	bl	8005aa4 <RCCEx_PLL2_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048f8:	e00c      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x7f4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3324      	adds	r3, #36	; 0x24
 80048fe:	2101      	movs	r1, #1
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f981 	bl	8005c08 <RCCEx_PLL3_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800490a:	e003      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	75fb      	strb	r3, [r7, #23]
      break;
 8004910:	e000      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      break;
 8004912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004914:	7dfb      	ldrb	r3, [r7, #23]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	f023 0207 	bic.w	r2, r3, #7
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4923      	ldr	r1, [pc, #140]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8004928:	4313      	orrs	r3, r2
 800492a:	654b      	str	r3, [r1, #84]	; 0x54
 800492c:	e001      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x812>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	7dfb      	ldrb	r3, [r7, #23]
 8004930:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d040      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004944:	2b05      	cmp	r3, #5
 8004946:	d821      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004993 	.word	0x08004993
 8004954:	08004969 	.word	0x08004969
 8004958:	0800497b 	.word	0x0800497b
 800495c:	08004993 	.word	0x08004993
 8004960:	08004993 	.word	0x08004993
 8004964:	08004993 	.word	0x08004993
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f001 f898 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004978:	e00c      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x874>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3324      	adds	r3, #36	; 0x24
 800497e:	2101      	movs	r1, #1
 8004980:	4618      	mov	r0, r3
 8004982:	f001 f941 	bl	8005c08 <RCCEx_PLL3_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800498a:	e003      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x874>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	75fb      	strb	r3, [r7, #23]
      break;
 8004990:	e000      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x874>
      break;
 8004992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004994:	7dfb      	ldrb	r3, [r7, #23]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d110      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x89c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 800499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499e:	f023 0207 	bic.w	r2, r3, #7
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a8:	4902      	ldr	r1, [pc, #8]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	658b      	str	r3, [r1, #88]	; 0x58
 80049ae:	e007      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80049b0:	58024800 	.word	0x58024800
 80049b4:	58024400 	.word	0x58024400
 80049b8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d044      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x936>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d6:	d01b      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80049d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049dc:	d805      	bhi.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d022      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x908>
 80049e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80049e8:	e01b      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x902>
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ee:	d01d      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 80049f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f4:	d01c      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80049f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049fa:	d01b      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80049fc:	e011      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x902>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f84d 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a0e:	e012      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x916>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3324      	adds	r3, #36	; 0x24
 8004a14:	2102      	movs	r1, #2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 f8f6 	bl	8005c08 <RCCEx_PLL3_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a20:	e009      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x916>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
      break;
 8004a26:	e006      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x916>
      break;
 8004a28:	bf00      	nop
 8004a2a:	e004      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x916>
      break;
 8004a2c:	bf00      	nop
 8004a2e:	e002      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x916>
      break;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x916>
      break;
 8004a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x932>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a3c:	4bb2      	ldr	r3, [pc, #712]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	49af      	ldr	r1, [pc, #700]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a50:	e001      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x936>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
 8004a54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d044      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6c:	d01b      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x986>
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a72:	d805      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d022      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8004a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004a7e:	e01b      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a84:	d01d      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004a86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a8a:	d01c      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8004a8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a90:	d01b      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8004a92:	e011      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x998>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3304      	adds	r3, #4
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 f802 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004aa4:	e012      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x9ac>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3324      	adds	r3, #36	; 0x24
 8004aaa:	2102      	movs	r1, #2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f001 f8ab 	bl	8005c08 <RCCEx_PLL3_Config>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ab6:	e009      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
      break;
 8004abc:	e006      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e004      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e002      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      break;
 8004ac6:	bf00      	nop
 8004ac8:	e000      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      break;
 8004aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ad2:	4b8d      	ldr	r3, [pc, #564]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ae0:	4989      	ldr	r1, [pc, #548]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ae6:	e001      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
 8004aea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d044      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xa62>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b02:	d01b      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8004b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b08:	d805      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d022      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004b14:	e01b      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8004b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1a:	d01d      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8004b1c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b20:	d01c      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8004b22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b26:	d01b      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004b28:	e011      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 ffb7 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b3a:	e012      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xa42>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f860 	bl	8005c08 <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b4c:	e009      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xa42>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
      break;
 8004b52:	e006      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xa42>
      break;
 8004b54:	bf00      	nop
 8004b56:	e004      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xa42>
      break;
 8004b58:	bf00      	nop
 8004b5a:	e002      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xa42>
      break;
 8004b5c:	bf00      	nop
 8004b5e:	e000      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xa42>
      break;
 8004b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b68:	4b67      	ldr	r3, [pc, #412]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b76:	4964      	ldr	r1, [pc, #400]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	658b      	str	r3, [r1, #88]	; 0x58
 8004b7c:	e001      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xa62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d018      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d10a      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xa8e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3324      	adds	r3, #36	; 0x24
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 f832 	bl	8005c08 <RCCEx_PLL3_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xa8e>
        {
          status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004bae:	4b56      	ldr	r3, [pc, #344]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bba:	4953      	ldr	r1, [pc, #332]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd6:	d10a      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3324      	adds	r3, #36	; 0x24
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 f812 	bl	8005c08 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bee:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	4942      	ldr	r1, [pc, #264]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d030      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c18:	d00d      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8004c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1e:	d016      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d111      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 ff3a 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c34:	e00c      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3324      	adds	r3, #36	; 0x24
 8004c3a:	2102      	movs	r1, #2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 ffe3 	bl	8005c08 <RCCEx_PLL3_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c46:	e003      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4c:	e000      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c56:	4b2c      	ldr	r3, [pc, #176]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c64:	4928      	ldr	r1, [pc, #160]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	658b      	str	r3, [r1, #88]	; 0x58
 8004c6a:	e001      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02f      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c86:	d00c      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c8c:	d015      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 8004c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c92:	d10f      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c94:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ca0:	e00c      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3324      	adds	r3, #36	; 0x24
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 ffad 	bl	8005c08 <RCCEx_PLL3_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb8:	e000      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 8004cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc2:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cd0:	490d      	ldr	r1, [pc, #52]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	654b      	str	r3, [r1, #84]	; 0x54
 8004cd6:	e001      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02c      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004cf6:	e012      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	4a02      	ldr	r2, [pc, #8]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8004cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d04:	e00e      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8004d06:	bf00      	nop
 8004d08:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	2102      	movs	r1, #2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fec6 	bl	8005aa4 <RCCEx_PLL2_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d1c:	e002      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
      break;
 8004d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d2a:	4b4e      	ldr	r3, [pc, #312]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d36:	494b      	ldr	r1, [pc, #300]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d3c:	e001      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3324      	adds	r3, #36	; 0x24
 8004d52:	2102      	movs	r1, #2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 ff57 	bl	8005c08 <RCCEx_PLL3_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02f      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d78:	d00c      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7e:	d802      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d011      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8004d84:	e00d      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
 8004d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8a:	d00f      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xc8c>
 8004d8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d90:	d00e      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 8004d92:	e006      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d94:	4b33      	ldr	r3, [pc, #204]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004da0:	e007      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
      break;
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
      break;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
      break;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
      break;
 8004db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004db8:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc4:	4927      	ldr	r1, [pc, #156]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	654b      	str	r3, [r1, #84]	; 0x54
 8004dca:	e001      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ddc:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de8:	491e      	ldr	r1, [pc, #120]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dfa:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e06:	4917      	ldr	r1, [pc, #92]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00d      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	4a11      	ldr	r2, [pc, #68]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e22:	6113      	str	r3, [r2, #16]
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e2e:	490d      	ldr	r1, [pc, #52]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	da08      	bge.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	4906      	ldr	r1, [pc, #24]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004e4e:	7dbb      	ldrb	r3, [r7, #22]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>
  {
    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e000      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
  }
  return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	58024400 	.word	0x58024400

08004e68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b090      	sub	sp, #64	; 0x40
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e76:	d150      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004e78:	4ba3      	ldr	r3, [pc, #652]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d844      	bhi.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ea5 	.word	0x08004ea5
 8004e94:	08004eb5 	.word	0x08004eb5
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	08004f0d 	.word	0x08004f0d
 8004ea0:	08004ed5 	.word	0x08004ed5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fcaf 	bl	800580c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb2:	e1ed      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eb4:	f107 0318 	add.w	r3, r7, #24
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fa0f 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec2:	e1e5      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ec4:	f107 030c 	add.w	r3, r7, #12
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fb53 	bl	8005574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed2:	e1dd      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ed4:	4b8c      	ldr	r3, [pc, #560]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004ee4:	4b89      	ldr	r3, [pc, #548]	; (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004ee8:	e1d2      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ef0:	d102      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8004ef2:	4b87      	ldr	r3, [pc, #540]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ef6:	e1cb      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efe:	d102      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8004f00:	4b84      	ldr	r3, [pc, #528]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f04:	e1c4      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
            frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0a:	e1c1      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f0c:	4b82      	ldr	r3, [pc, #520]	; (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f10:	e1be      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      default :
        {
          frequency = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f16:	bf00      	nop
 8004f18:	e1ba      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f20:	d153      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004f22:	4b79      	ldr	r3, [pc, #484]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f32:	d01f      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f38:	d805      	bhi.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f42:	d00f      	beq.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
 8004f44:	e03d      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8004f46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f4a:	d037      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f50:	d018      	beq.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8004f52:	e036      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fc57 	bl	800580c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f62:	e195      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f64:	f107 0318 	add.w	r3, r7, #24
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 f9b7 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f72:	e18d      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fafb 	bl	8005574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f82:	e185      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f84:	4b60      	ldr	r3, [pc, #384]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004f94:	4b5d      	ldr	r3, [pc, #372]	; (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004f98:	e17a      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa0:	d102      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
            frequency = CSI_VALUE;
 8004fa2:	4b5b      	ldr	r3, [pc, #364]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa6:	e173      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fae:	d102      	bne.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
            frequency = HSE_VALUE;
 8004fb0:	4b58      	ldr	r3, [pc, #352]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fb4:	e16c      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
            frequency = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fba:	e169      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fbc:	4b56      	ldr	r3, [pc, #344]	; (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc0:	e166      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      default :
        {
          frequency = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc6:	bf00      	nop
 8004fc8:	e162      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd0:	d153      	bne.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004fd2:	4b4d      	ldr	r3, [pc, #308]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fe2:	d01f      	beq.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004fe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fe8:	d805      	bhi.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8004fee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ff2:	d00f      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004ff4:	e03d      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004ff6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ffa:	d037      	beq.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8004ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005000:	d018      	beq.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
 8005002:	e036      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fbff 	bl	800580c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005012:	e13d      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005014:	f107 0318 	add.w	r3, r7, #24
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f95f 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005022:	e135      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005024:	f107 030c 	add.w	r3, r7, #12
 8005028:	4618      	mov	r0, r3
 800502a:	f000 faa3 	bl	8005574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005032:	e12d      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005034:	4b34      	ldr	r3, [pc, #208]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800503c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005044:	4b31      	ldr	r3, [pc, #196]	; (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005048:	e122      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005050:	d102      	bne.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
            frequency = CSI_VALUE;
 8005052:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005056:	e11b      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505e:	d102      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
            frequency = HSE_VALUE;
 8005060:	4b2c      	ldr	r3, [pc, #176]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005064:	e114      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
            frequency = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800506a:	e111      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800506c:	4b2a      	ldr	r3, [pc, #168]	; (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005070:	e10e      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      default :
        {
          frequency = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005076:	bf00      	nop
 8005078:	e10a      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005080:	d15d      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005082:	4b21      	ldr	r3, [pc, #132]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005086:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800508a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005092:	d01f      	beq.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005098:	d805      	bhi.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d00f      	beq.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80050a4:	e047      	b.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 80050a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050aa:	d041      	beq.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 80050ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050b0:	d018      	beq.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80050b2:	e040      	b.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fba7 	bl	800580c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050c2:	e0e5      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050c4:	f107 0318 	add.w	r3, r7, #24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f907 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050d2:	e0dd      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050d4:	f107 030c 	add.w	r3, r7, #12
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fa4b 	bl	8005574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050e2:	e0d5      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80050e4:	4b08      	ldr	r3, [pc, #32]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80050e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80050f8:	e0ca      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80050fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005100:	d10c      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
            frequency = CSI_VALUE;
 8005102:	4b03      	ldr	r3, [pc, #12]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005106:	e0c3      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 8005108:	58024400 	.word	0x58024400
 800510c:	03d09000 	.word	0x03d09000
 8005110:	003d0900 	.word	0x003d0900
 8005114:	02dc6c00 	.word	0x02dc6c00
 8005118:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005122:	d102      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
            frequency = HSE_VALUE;
 8005124:	4b5d      	ldr	r3, [pc, #372]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005128:	e0b2      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
            frequency = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800512e:	e0af      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005130:	4b5b      	ldr	r3, [pc, #364]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005134:	e0ac      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      default :
        {
          frequency = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800513a:	bf00      	nop
 800513c:	e0a8      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005144:	d13d      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005146:	4b57      	ldr	r3, [pc, #348]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800514e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005156:	d00c      	beq.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 8005158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800515c:	d011      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d12b      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005162:	f107 0318 	add.w	r3, r7, #24
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f8b8 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005170:	e08e      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005172:	f107 030c 	add.w	r3, r7, #12
 8005176:	4618      	mov	r0, r3
 8005178:	f000 f9fc 	bl	8005574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005180:	e086      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005182:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800518a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005192:	4b45      	ldr	r3, [pc, #276]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005196:	e07b      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800519e:	d102      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            frequency = CSI_VALUE;
 80051a0:	4b42      	ldr	r3, [pc, #264]	; (80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a4:	e074      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80051a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ac:	d102      	bne.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
            frequency = HSE_VALUE;
 80051ae:	4b3b      	ldr	r3, [pc, #236]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 80051b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b2:	e06d      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
            frequency = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b8:	e06a      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      default :
        {
          frequency = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051be:	bf00      	nop
 80051c0:	e066      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c8:	d11f      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80051ca:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80051da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051de:	d008      	beq.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 80051e0:	e00f      	b.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fb10 	bl	800580c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f0:	e04e      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051f2:	f107 0318 	add.w	r3, r7, #24
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f870 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005200:	e046      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }

      default :
        {
          frequency = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005206:	bf00      	nop
 8005208:	e042      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005210:	d13c      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x424>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005212:	4b24      	ldr	r3, [pc, #144]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005216:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800521a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005222:	d01e      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8005224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005228:	d805      	bhi.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00d      	beq.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800522e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005232:	d00e      	beq.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8005234:	e026      	b.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d01d      	beq.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800523c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005240:	d01d      	beq.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8005242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005246:	d014      	beq.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005248:	e01c      	b.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800524a:	f000 f831 	bl	80052b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800524e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005250:	e01e      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005252:	f107 0318 	add.w	r3, r7, #24
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f840 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005260:	e016      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005262:	f107 030c 	add.w	r3, r7, #12
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f984 	bl	8005574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005270:	e00e      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8005272:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8005274:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005276:	e00b      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800527c:	e008      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 8005280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005282:	e005      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005288:	bf00      	nop
 800528a:	e001      	b.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        }
      }
    }
  else
    {
      frequency = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005292:	4618      	mov	r0, r3
 8005294:	3740      	adds	r7, #64	; 0x40
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	02dc6c00 	.word	0x02dc6c00
 80052a0:	00bb8000 	.word	0x00bb8000
 80052a4:	58024400 	.word	0x58024400
 80052a8:	03d09000 	.word	0x03d09000
 80052ac:	003d0900 	.word	0x003d0900

080052b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80052b4:	f7fe fed8 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80052b8:	4601      	mov	r1, r0
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80052c6:	5cd3      	ldrb	r3, [r2, r3]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	58024400 	.word	0x58024400
 80052d8:	0800b228 	.word	0x0800b228

080052dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80052dc:	b480      	push	{r7}
 80052de:	b089      	sub	sp, #36	; 0x24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052e4:	4b9d      	ldr	r3, [pc, #628]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80052ee:	4b9b      	ldr	r3, [pc, #620]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	0b1b      	lsrs	r3, r3, #12
 80052f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052fa:	4b98      	ldr	r3, [pc, #608]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005306:	4b95      	ldr	r3, [pc, #596]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	08db      	lsrs	r3, r3, #3
 800530c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 810a 	beq.w	800553e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d05a      	beq.n	80053e6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005330:	2b01      	cmp	r3, #1
 8005332:	d302      	bcc.n	800533a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005334:	2b02      	cmp	r3, #2
 8005336:	d078      	beq.n	800542a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005338:	e099      	b.n	800546e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533a:	4b88      	ldr	r3, [pc, #544]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d02d      	beq.n	80053a2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005346:	4b85      	ldr	r3, [pc, #532]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	08db      	lsrs	r3, r3, #3
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	4a83      	ldr	r2, [pc, #524]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005352:	fa22 f303 	lsr.w	r3, r2, r3
 8005356:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005370:	4b7a      	ldr	r3, [pc, #488]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005378:	ee07 3a90 	vmov	s15, r3
 800537c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005380:	ed97 6a03 	vldr	s12, [r7, #12]
 8005384:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053a0:	e087      	b.n	80054b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	ee07 3a90 	vmov	s15, r3
 80053a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005568 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80053b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b4:	4b69      	ldr	r3, [pc, #420]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80053c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80053cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053e4:	e065      	b.n	80054b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	ee07 3a90 	vmov	s15, r3
 80053ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800556c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80053f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f8:	4b58      	ldr	r3, [pc, #352]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005408:	ed97 6a03 	vldr	s12, [r7, #12]
 800540c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800541c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005424:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005428:	e043      	b.n	80054b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	ee07 3a90 	vmov	s15, r3
 8005430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005434:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005570 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543c:	4b47      	ldr	r3, [pc, #284]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005444:	ee07 3a90 	vmov	s15, r3
 8005448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005450:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005468:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800546c:	e021      	b.n	80054b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005478:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800556c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800547c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005480:	4b36      	ldr	r3, [pc, #216]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005488:	ee07 3a90 	vmov	s15, r3
 800548c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005490:	ed97 6a03 	vldr	s12, [r7, #12]
 8005494:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054b0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80054b2:	4b2a      	ldr	r3, [pc, #168]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	0a5b      	lsrs	r3, r3, #9
 80054b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054bc:	ee07 3a90 	vmov	s15, r3
 80054c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d8:	ee17 2a90 	vmov	r2, s15
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80054e0:	4b1e      	ldr	r3, [pc, #120]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005506:	ee17 2a90 	vmov	r2, s15
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	0e1b      	lsrs	r3, r3, #24
 8005514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005524:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005528:	edd7 6a07 	vldr	s13, [r7, #28]
 800552c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005534:	ee17 2a90 	vmov	r2, s15
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800553c:	e008      	b.n	8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	609a      	str	r2, [r3, #8]
}
 8005550:	bf00      	nop
 8005552:	3724      	adds	r7, #36	; 0x24
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	58024400 	.word	0x58024400
 8005560:	03d09000 	.word	0x03d09000
 8005564:	46000000 	.word	0x46000000
 8005568:	4c742400 	.word	0x4c742400
 800556c:	4a742400 	.word	0x4a742400
 8005570:	4c371b00 	.word	0x4c371b00

08005574 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005574:	b480      	push	{r7}
 8005576:	b089      	sub	sp, #36	; 0x24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800557c:	4b9d      	ldr	r3, [pc, #628]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005586:	4b9b      	ldr	r3, [pc, #620]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	0d1b      	lsrs	r3, r3, #20
 800558c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005590:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005592:	4b98      	ldr	r3, [pc, #608]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800559e:	4b95      	ldr	r3, [pc, #596]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	08db      	lsrs	r3, r3, #3
 80055a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 810a 	beq.w	80057d6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d05a      	beq.n	800567e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d302      	bcc.n	80055d2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d078      	beq.n	80056c2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80055d0:	e099      	b.n	8005706 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d2:	4b88      	ldr	r3, [pc, #544]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d02d      	beq.n	800563a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055de:	4b85      	ldr	r3, [pc, #532]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	08db      	lsrs	r3, r3, #3
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	4a83      	ldr	r2, [pc, #524]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80055ea:	fa22 f303 	lsr.w	r3, r2, r3
 80055ee:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	ee07 3a90 	vmov	s15, r3
 8005600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005608:	4b7a      	ldr	r3, [pc, #488]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005618:	ed97 6a03 	vldr	s12, [r7, #12]
 800561c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800562c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005634:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005638:	e087      	b.n	800574a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005644:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564c:	4b69      	ldr	r3, [pc, #420]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005660:	eddf 5a66 	vldr	s11, [pc, #408]	; 80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800567c:	e065      	b.n	800574a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005688:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800568c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005690:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80056a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80056a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056c0:	e043      	b.n	800574a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005808 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80056d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d4:	4b47      	ldr	r3, [pc, #284]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80056e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80056ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005704:	e021      	b.n	800574a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005710:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005720:	ee07 3a90 	vmov	s15, r3
 8005724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005728:	ed97 6a03 	vldr	s12, [r7, #12]
 800572c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800573c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005744:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005748:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800574a:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	0a5b      	lsrs	r3, r3, #9
 8005750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005764:	edd7 6a07 	vldr	s13, [r7, #28]
 8005768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005770:	ee17 2a90 	vmov	r2, s15
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005778:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800578e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005792:	edd7 6a07 	vldr	s13, [r7, #28]
 8005796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579e:	ee17 2a90 	vmov	r2, s15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	0e1b      	lsrs	r3, r3, #24
 80057ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057cc:	ee17 2a90 	vmov	r2, s15
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057d4:	e008      	b.n	80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	609a      	str	r2, [r3, #8]
}
 80057e8:	bf00      	nop
 80057ea:	3724      	adds	r7, #36	; 0x24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	58024400 	.word	0x58024400
 80057f8:	03d09000 	.word	0x03d09000
 80057fc:	46000000 	.word	0x46000000
 8005800:	4c742400 	.word	0x4c742400
 8005804:	4a742400 	.word	0x4a742400
 8005808:	4c371b00 	.word	0x4c371b00

0800580c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800580c:	b480      	push	{r7}
 800580e:	b089      	sub	sp, #36	; 0x24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005814:	4b9d      	ldr	r3, [pc, #628]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800581e:	4b9b      	ldr	r3, [pc, #620]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005828:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800582a:	4b98      	ldr	r3, [pc, #608]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005834:	4b95      	ldr	r3, [pc, #596]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005838:	08db      	lsrs	r3, r3, #3
 800583a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	fb02 f303 	mul.w	r3, r2, r3
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 810a 	beq.w	8005a6c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d05a      	beq.n	8005914 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800585e:	2b01      	cmp	r3, #1
 8005860:	d302      	bcc.n	8005868 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8005862:	2b02      	cmp	r3, #2
 8005864:	d078      	beq.n	8005958 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005866:	e099      	b.n	800599c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005868:	4b88      	ldr	r3, [pc, #544]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	d02d      	beq.n	80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005874:	4b85      	ldr	r3, [pc, #532]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	08db      	lsrs	r3, r3, #3
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	4a84      	ldr	r2, [pc, #528]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
 8005884:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589e:	4b7b      	ldr	r3, [pc, #492]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80058b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80058b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058ce:	e087      	b.n	80059e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b6a      	ldr	r3, [pc, #424]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005912:	e065      	b.n	80059e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b59      	ldr	r3, [pc, #356]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a03 	vldr	s12, [r7, #12]
 800593a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005956:	e043      	b.n	80059e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b48      	ldr	r3, [pc, #288]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a03 	vldr	s12, [r7, #12]
 800597e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800599a:	e021      	b.n	80059e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059de:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80059e0:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	0a5b      	lsrs	r3, r3, #9
 80059e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80059fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a06:	ee17 2a90 	vmov	r2, s15
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005a0e:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	0c1b      	lsrs	r3, r3, #16
 8005a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a18:	ee07 3a90 	vmov	s15, r3
 8005a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a34:	ee17 2a90 	vmov	r2, s15
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005a3c:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	0e1b      	lsrs	r3, r3, #24
 8005a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a62:	ee17 2a90 	vmov	r2, s15
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a6a:	e008      	b.n	8005a7e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
}
 8005a7e:	bf00      	nop
 8005a80:	3724      	adds	r7, #36	; 0x24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	03d09000 	.word	0x03d09000
 8005a94:	46000000 	.word	0x46000000
 8005a98:	4c742400 	.word	0x4c742400
 8005a9c:	4a742400 	.word	0x4a742400
 8005aa0:	4c371b00 	.word	0x4c371b00

08005aa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ab2:	4b53      	ldr	r3, [pc, #332]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d101      	bne.n	8005ac2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e099      	b.n	8005bf6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ac2:	4b4f      	ldr	r3, [pc, #316]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a4e      	ldr	r2, [pc, #312]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005ac8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ace:	f7fc f8f1 	bl	8001cb4 <HAL_GetTick>
 8005ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ad4:	e008      	b.n	8005ae8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ad6:	f7fc f8ed 	bl	8001cb4 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e086      	b.n	8005bf6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ae8:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f0      	bne.n	8005ad6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005af4:	4b42      	ldr	r3, [pc, #264]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	031b      	lsls	r3, r3, #12
 8005b02:	493f      	ldr	r1, [pc, #252]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	628b      	str	r3, [r1, #40]	; 0x28
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	025b      	lsls	r3, r3, #9
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	041b      	lsls	r3, r3, #16
 8005b26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	061b      	lsls	r3, r3, #24
 8005b34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b38:	4931      	ldr	r1, [pc, #196]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b3e:	4b30      	ldr	r3, [pc, #192]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	492d      	ldr	r1, [pc, #180]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b50:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	f023 0220 	bic.w	r2, r3, #32
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	4928      	ldr	r1, [pc, #160]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b62:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	4a26      	ldr	r2, [pc, #152]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b68:	f023 0310 	bic.w	r3, r3, #16
 8005b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b6e:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <RCCEx_PLL2_Config+0x160>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	69d2      	ldr	r2, [r2, #28]
 8005b7a:	00d2      	lsls	r2, r2, #3
 8005b7c:	4920      	ldr	r1, [pc, #128]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b82:	4b1f      	ldr	r3, [pc, #124]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b88:	f043 0310 	orr.w	r3, r3, #16
 8005b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b94:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ba0:	e00f      	b.n	8005bc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d106      	bne.n	8005bb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ba8:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bb4:	e005      	b.n	8005bc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bce:	f7fc f871 	bl	8001cb4 <HAL_GetTick>
 8005bd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bd4:	e008      	b.n	8005be8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005bd6:	f7fc f86d 	bl	8001cb4 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e006      	b.n	8005bf6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <RCCEx_PLL2_Config+0x15c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	58024400 	.word	0x58024400
 8005c04:	ffff0007 	.word	0xffff0007

08005c08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c16:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d101      	bne.n	8005c26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e099      	b.n	8005d5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c26:	4b4f      	ldr	r3, [pc, #316]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a4e      	ldr	r2, [pc, #312]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c32:	f7fc f83f 	bl	8001cb4 <HAL_GetTick>
 8005c36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c38:	e008      	b.n	8005c4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c3a:	f7fc f83b 	bl	8001cb4 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e086      	b.n	8005d5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c4c:	4b45      	ldr	r3, [pc, #276]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f0      	bne.n	8005c3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c58:	4b42      	ldr	r3, [pc, #264]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	051b      	lsls	r3, r3, #20
 8005c66:	493f      	ldr	r1, [pc, #252]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	025b      	lsls	r3, r3, #9
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	041b      	lsls	r3, r3, #16
 8005c8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c9c:	4931      	ldr	r1, [pc, #196]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ca2:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	492d      	ldr	r1, [pc, #180]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cb4:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	4928      	ldr	r1, [pc, #160]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	4a26      	ldr	r2, [pc, #152]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005cd2:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd6:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <RCCEx_PLL3_Config+0x160>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	69d2      	ldr	r2, [r2, #28]
 8005cde:	00d2      	lsls	r2, r2, #3
 8005ce0:	4920      	ldr	r1, [pc, #128]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ce6:	4b1f      	ldr	r3, [pc, #124]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005cf8:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d04:	e00f      	b.n	8005d26 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d106      	bne.n	8005d1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d0c:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005d12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d18:	e005      	b.n	8005d26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	4a11      	ldr	r2, [pc, #68]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a0e      	ldr	r2, [pc, #56]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d32:	f7fb ffbf 	bl	8001cb4 <HAL_GetTick>
 8005d36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d38:	e008      	b.n	8005d4c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d3a:	f7fb ffbb 	bl	8001cb4 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e006      	b.n	8005d5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <RCCEx_PLL3_Config+0x15c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	58024400 	.word	0x58024400
 8005d68:	ffff0007 	.word	0xffff0007

08005d6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07c      	b.n	8005e78 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10c      	bne.n	8005da4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fb fb1a 	bl	80013d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2203      	movs	r2, #3
 8005da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f867 	bl	8005e80 <HAL_SD_InitCard>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e05d      	b.n	8005e78 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005dbc:	f107 0308 	add.w	r3, r7, #8
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fdbe 	bl	8006944 <HAL_SD_GetCardStatus>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e052      	b.n	8005e78 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005dd2:	7e3b      	ldrb	r3, [r7, #24]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005dd8:	7e7b      	ldrb	r3, [r7, #25]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d10a      	bne.n	8005dfc <HAL_SD_Init+0x90>
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <HAL_SD_Init+0x86>
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dfa:	e00b      	b.n	8005e14 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d104      	bne.n	8005e0e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e0c:	e002      	b.n	8005e14 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fe74 	bl	8006b08 <HAL_SD_ConfigWideBusOperation>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e026      	b.n	8005e78 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005e2a:	f7fb ff43 	bl	8001cb4 <HAL_GetTick>
 8005e2e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005e30:	e011      	b.n	8005e56 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005e32:	f7fb ff3f 	bl	8001cb4 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e40:	d109      	bne.n	8005e56 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e010      	b.n	8005e78 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 ff00 	bl	8006c5c <HAL_SD_GetCardState>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d1e7      	bne.n	8005e32 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3728      	adds	r7, #40	; 0x28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b08e      	sub	sp, #56	; 0x38
 8005e84:	af04      	add	r7, sp, #16
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005e98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005e9c:	f7fe ffe4 	bl	8004e68 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ea0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	0a1b      	lsrs	r3, r3, #8
 8005ea6:	4a40      	ldr	r2, [pc, #256]	; (8005fa8 <HAL_SD_InitCard+0x128>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d107      	bne.n	8005ec8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0210 	orr.w	r2, r2, #16
 8005ec6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681d      	ldr	r5, [r3, #0]
 8005ecc:	466c      	mov	r4, sp
 8005ece:	f107 0314 	add.w	r3, r7, #20
 8005ed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005eda:	f107 0308 	add.w	r3, r7, #8
 8005ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f004 f949 	bl	800a178 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f004 f98c 	bl	800a208 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d008      	beq.n	8005f14 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005f02:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <HAL_SD_InitCard+0x12c>)
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fb fedd 	bl	8001ccc <HAL_Delay>
 8005f12:	e002      	b.n	8005f1a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8005f14:	2002      	movs	r0, #2
 8005f16:	f7fb fed9 	bl	8001ccc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 ff7c 	bl	8006e18 <SD_PowerON>
 8005f20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e02e      	b.n	8005f9e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 feab 	bl	8006c9c <SD_InitCard>
 8005f46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e01b      	b.n	8005f9e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f004 f9e0 	bl	800a334 <SDMMC_CmdBlockLength>
 8005f74:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00f      	beq.n	8005f9c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0b      	ldr	r2, [pc, #44]	; (8005fb0 <HAL_SD_InitCard+0x130>)
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3728      	adds	r7, #40	; 0x28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	014f8b59 	.word	0x014f8b59
 8005fac:	00012110 	.word	0x00012110
 8005fb0:	1fe00fff 	.word	0x1fe00fff

08005fb4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b092      	sub	sp, #72	; 0x48
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005fc2:	f7fb fe77 	bl	8001cb4 <HAL_GetTick>
 8005fc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d107      	bne.n	8005fe6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e167      	b.n	80062b6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	f040 815a 	bne.w	80062a8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	441a      	add	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006004:	429a      	cmp	r2, r3
 8006006:	d907      	bls.n	8006018 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e14e      	b.n	80062b6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2203      	movs	r2, #3
 800601c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2200      	movs	r2, #0
 8006026:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d002      	beq.n	8006036 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	025b      	lsls	r3, r3, #9
 8006034:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800603a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	025b      	lsls	r3, r3, #9
 8006040:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006042:	2390      	movs	r3, #144	; 0x90
 8006044:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006046:	2302      	movs	r3, #2
 8006048:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800604a:	2300      	movs	r3, #0
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800604e:	2300      	movs	r3, #0
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f107 0214 	add.w	r2, r7, #20
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f004 f93d 	bl	800a2dc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006070:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d90a      	bls.n	800608e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2202      	movs	r2, #2
 800607c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006084:	4618      	mov	r0, r3
 8006086:	f004 f99b 	bl	800a3c0 <SDMMC_CmdReadMultiBlock>
 800608a:	6478      	str	r0, [r7, #68]	; 0x44
 800608c:	e009      	b.n	80060a2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800609a:	4618      	mov	r0, r3
 800609c:	f004 f96d 	bl	800a37a <SDMMC_CmdReadSingleBlock>
 80060a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80060a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d012      	beq.n	80060ce <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a84      	ldr	r2, [pc, #528]	; (80062c0 <HAL_SD_ReadBlocks+0x30c>)
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b6:	431a      	orrs	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e0f3      	b.n	80062b6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80060d2:	e058      	b.n	8006186 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d033      	beq.n	800614a <HAL_SD_ReadBlocks+0x196>
 80060e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e4:	2b1f      	cmp	r3, #31
 80060e6:	d930      	bls.n	800614a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80060e8:	2300      	movs	r3, #0
 80060ea:	643b      	str	r3, [r7, #64]	; 0x40
 80060ec:	e027      	b.n	800613e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f004 f86a 	bl	800a1cc <SDMMC_ReadFIFO>
 80060f8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006100:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006104:	3301      	adds	r3, #1
 8006106:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	b2da      	uxtb	r2, r3
 800610e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006110:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006114:	3301      	adds	r3, #1
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611a:	0c1b      	lsrs	r3, r3, #16
 800611c:	b2da      	uxtb	r2, r3
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006124:	3301      	adds	r3, #1
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	0e1b      	lsrs	r3, r3, #24
 800612c:	b2da      	uxtb	r2, r3
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	3301      	adds	r3, #1
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8006138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613a:	3301      	adds	r3, #1
 800613c:	643b      	str	r3, [r7, #64]	; 0x40
 800613e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006140:	2b07      	cmp	r3, #7
 8006142:	d9d4      	bls.n	80060ee <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	3b20      	subs	r3, #32
 8006148:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800614a:	f7fb fdb3 	bl	8001cb4 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006156:	429a      	cmp	r2, r3
 8006158:	d902      	bls.n	8006160 <HAL_SD_ReadBlocks+0x1ac>
 800615a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615c:	2b00      	cmp	r3, #0
 800615e:	d112      	bne.n	8006186 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a56      	ldr	r2, [pc, #344]	; (80062c0 <HAL_SD_ReadBlocks+0x30c>)
 8006166:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e097      	b.n	80062b6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006190:	2b00      	cmp	r3, #0
 8006192:	d09f      	beq.n	80060d4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d022      	beq.n	80061f8 <HAL_SD_ReadBlocks+0x244>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d91f      	bls.n	80061f8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d01b      	beq.n	80061f8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f004 f965 	bl	800a494 <SDMMC_CmdStopTransfer>
 80061ca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80061cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d012      	beq.n	80061f8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a3a      	ldr	r2, [pc, #232]	; (80062c0 <HAL_SD_ReadBlocks+0x30c>)
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e0:	431a      	orrs	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e05e      	b.n	80062b6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d012      	beq.n	800622c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a2d      	ldr	r2, [pc, #180]	; (80062c0 <HAL_SD_ReadBlocks+0x30c>)
 800620c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	f043 0208 	orr.w	r2, r3, #8
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e044      	b.n	80062b6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d012      	beq.n	8006260 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <HAL_SD_ReadBlocks+0x30c>)
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	f043 0202 	orr.w	r2, r3, #2
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e02a      	b.n	80062b6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d012      	beq.n	8006294 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a13      	ldr	r2, [pc, #76]	; (80062c0 <HAL_SD_ReadBlocks+0x30c>)
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	f043 0220 	orr.w	r2, r3, #32
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e010      	b.n	80062b6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <HAL_SD_ReadBlocks+0x310>)
 800629a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e006      	b.n	80062b6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3748      	adds	r7, #72	; 0x48
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	1fe00fff 	.word	0x1fe00fff
 80062c4:	18000f3a 	.word	0x18000f3a

080062c8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b092      	sub	sp, #72	; 0x48
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80062d6:	f7fb fced 	bl	8001cb4 <HAL_GetTick>
 80062da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d107      	bne.n	80062fa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e16b      	b.n	80065d2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	f040 815e 	bne.w	80065c4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800630e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	441a      	add	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006318:	429a      	cmp	r2, r3
 800631a:	d907      	bls.n	800632c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e152      	b.n	80065d2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2203      	movs	r2, #3
 8006330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2200      	movs	r2, #0
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d002      	beq.n	800634a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	025b      	lsls	r3, r3, #9
 8006348:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800634a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800634e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	025b      	lsls	r3, r3, #9
 8006354:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006356:	2390      	movs	r3, #144	; 0x90
 8006358:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800635a:	2300      	movs	r3, #0
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800635e:	2300      	movs	r3, #0
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006362:	2300      	movs	r3, #0
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f107 0218 	add.w	r2, r7, #24
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f003 ffb3 	bl	800a2dc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006384:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d90a      	bls.n	80063a2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006398:	4618      	mov	r0, r3
 800639a:	f004 f857 	bl	800a44c <SDMMC_CmdWriteMultiBlock>
 800639e:	6478      	str	r0, [r7, #68]	; 0x44
 80063a0:	e009      	b.n	80063b6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2210      	movs	r2, #16
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063ae:	4618      	mov	r0, r3
 80063b0:	f004 f829 	bl	800a406 <SDMMC_CmdWriteSingleBlock>
 80063b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80063b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d012      	beq.n	80063e2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a86      	ldr	r2, [pc, #536]	; (80065dc <HAL_SD_WriteBlocks+0x314>)
 80063c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ca:	431a      	orrs	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e0f7      	b.n	80065d2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80063e6:	e05c      	b.n	80064a2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d037      	beq.n	8006466 <HAL_SD_WriteBlocks+0x19e>
 80063f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f8:	2b1f      	cmp	r3, #31
 80063fa:	d934      	bls.n	8006466 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80063fc:	2300      	movs	r3, #0
 80063fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006400:	e02b      	b.n	800645a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	3301      	adds	r3, #1
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800641a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641c:	3301      	adds	r3, #1
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	041a      	lsls	r2, r3, #16
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800642c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642e:	3301      	adds	r3, #1
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	061a      	lsls	r2, r3, #24
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	3301      	adds	r3, #1
 8006442:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f107 0214 	add.w	r2, r7, #20
 800644c:	4611      	mov	r1, r2
 800644e:	4618      	mov	r0, r3
 8006450:	f003 fec9 	bl	800a1e6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006456:	3301      	adds	r3, #1
 8006458:	643b      	str	r3, [r7, #64]	; 0x40
 800645a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645c:	2b07      	cmp	r3, #7
 800645e:	d9d0      	bls.n	8006402 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006462:	3b20      	subs	r3, #32
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006466:	f7fb fc25 	bl	8001cb4 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006472:	429a      	cmp	r2, r3
 8006474:	d902      	bls.n	800647c <HAL_SD_WriteBlocks+0x1b4>
 8006476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006478:	2b00      	cmp	r3, #0
 800647a:	d112      	bne.n	80064a2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a56      	ldr	r2, [pc, #344]	; (80065dc <HAL_SD_WriteBlocks+0x314>)
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648a:	431a      	orrs	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e097      	b.n	80065d2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d09b      	beq.n	80063e8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064be:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d022      	beq.n	8006514 <HAL_SD_WriteBlocks+0x24c>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d91f      	bls.n	8006514 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d01b      	beq.n	8006514 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f003 ffd7 	bl	800a494 <SDMMC_CmdStopTransfer>
 80064e6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80064e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d012      	beq.n	8006514 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a3a      	ldr	r2, [pc, #232]	; (80065dc <HAL_SD_WriteBlocks+0x314>)
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fc:	431a      	orrs	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e05e      	b.n	80065d2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d012      	beq.n	8006548 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2d      	ldr	r2, [pc, #180]	; (80065dc <HAL_SD_WriteBlocks+0x314>)
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	f043 0208 	orr.w	r2, r3, #8
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e044      	b.n	80065d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d012      	beq.n	800657c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a20      	ldr	r2, [pc, #128]	; (80065dc <HAL_SD_WriteBlocks+0x314>)
 800655c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	f043 0202 	orr.w	r2, r3, #2
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e02a      	b.n	80065d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b00      	cmp	r3, #0
 8006588:	d012      	beq.n	80065b0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a13      	ldr	r2, [pc, #76]	; (80065dc <HAL_SD_WriteBlocks+0x314>)
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	f043 0210 	orr.w	r2, r3, #16
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e010      	b.n	80065d2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <HAL_SD_WriteBlocks+0x318>)
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	e006      	b.n	80065d2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
  }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3748      	adds	r7, #72	; 0x48
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	1fe00fff 	.word	0x1fe00fff
 80065e0:	18000f3a 	.word	0x18000f3a

080065e4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660a:	0f9b      	lsrs	r3, r3, #30
 800660c:	b2da      	uxtb	r2, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006616:	0e9b      	lsrs	r3, r3, #26
 8006618:	b2db      	uxtb	r3, r3
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	b2da      	uxtb	r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006628:	0e1b      	lsrs	r3, r3, #24
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	b2da      	uxtb	r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663a:	0c1b      	lsrs	r3, r3, #16
 800663c:	b2da      	uxtb	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	b2da      	uxtb	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006652:	b2da      	uxtb	r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665c:	0d1b      	lsrs	r3, r3, #20
 800665e:	b29a      	uxth	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	b2da      	uxtb	r2, r3
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800667a:	0bdb      	lsrs	r3, r3, #15
 800667c:	b2db      	uxtb	r3, r3
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	b2da      	uxtb	r2, r3
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800668c:	0b9b      	lsrs	r3, r3, #14
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	b2da      	uxtb	r2, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800669e:	0b5b      	lsrs	r3, r3, #13
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b0:	0b1b      	lsrs	r3, r3, #12
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2200      	movs	r2, #0
 80066c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d163      	bne.n	8006794 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d0:	009a      	lsls	r2, r3, #2
 80066d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066d6:	4013      	ands	r3, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066dc:	0f92      	lsrs	r2, r2, #30
 80066de:	431a      	orrs	r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e8:	0edb      	lsrs	r3, r3, #27
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066fa:	0e1b      	lsrs	r3, r3, #24
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	b2da      	uxtb	r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800670c:	0d5b      	lsrs	r3, r3, #21
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671e:	0c9b      	lsrs	r3, r3, #18
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	b2da      	uxtb	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006730:	0bdb      	lsrs	r3, r3, #15
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	b2da      	uxtb	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	7e1b      	ldrb	r3, [r3, #24]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	3302      	adds	r3, #2
 8006754:	2201      	movs	r2, #1
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800675e:	fb02 f203 	mul.w	r2, r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	7a1b      	ldrb	r3, [r3, #8]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	2201      	movs	r2, #1
 8006772:	409a      	lsls	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006780:	0a52      	lsrs	r2, r2, #9
 8006782:	fb02 f203 	mul.w	r2, r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006790:	659a      	str	r2, [r3, #88]	; 0x58
 8006792:	e031      	b.n	80067f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	2b01      	cmp	r3, #1
 800679a:	d11d      	bne.n	80067d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a0:	041b      	lsls	r3, r3, #16
 80067a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067aa:	0c1b      	lsrs	r3, r3, #16
 80067ac:	431a      	orrs	r2, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	3301      	adds	r3, #1
 80067b8:	029a      	lsls	r2, r3, #10
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	659a      	str	r2, [r3, #88]	; 0x58
 80067d6:	e00f      	b.n	80067f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a58      	ldr	r2, [pc, #352]	; (8006940 <HAL_SD_GetCardCSD+0x344>)
 80067de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e09d      	b.n	8006934 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067fc:	0b9b      	lsrs	r3, r3, #14
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	b2da      	uxtb	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800680e:	09db      	lsrs	r3, r3, #7
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006816:	b2da      	uxtb	r2, r3
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006826:	b2da      	uxtb	r2, r3
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006830:	0fdb      	lsrs	r3, r3, #31
 8006832:	b2da      	uxtb	r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683c:	0f5b      	lsrs	r3, r3, #29
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	b2da      	uxtb	r2, r3
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684e:	0e9b      	lsrs	r3, r3, #26
 8006850:	b2db      	uxtb	r3, r3
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	b2da      	uxtb	r2, r3
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006860:	0d9b      	lsrs	r3, r3, #22
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	b2da      	uxtb	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006872:	0d5b      	lsrs	r3, r3, #21
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	b2da      	uxtb	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	b2da      	uxtb	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a2:	0bdb      	lsrs	r3, r3, #15
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b6:	0b9b      	lsrs	r3, r3, #14
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ca:	0b5b      	lsrs	r3, r3, #13
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068de:	0b1b      	lsrs	r3, r3, #12
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f2:	0a9b      	lsrs	r3, r3, #10
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006906:	0a1b      	lsrs	r3, r3, #8
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	b2da      	uxtb	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006922:	b2da      	uxtb	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	1fe00fff 	.word	0x1fe00fff

08006944 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b094      	sub	sp, #80	; 0x50
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fb64 	bl	8007028 <SD_SendSDStatus>
 8006960:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006964:	2b00      	cmp	r3, #0
 8006966:	d011      	beq.n	800698c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a4f      	ldr	r2, [pc, #316]	; (8006aac <HAL_SD_GetCardStatus+0x168>)
 800696e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800698a:	e070      	b.n	8006a6e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	099b      	lsrs	r3, r3, #6
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	b2da      	uxtb	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	0e1b      	lsrs	r3, r3, #24
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4313      	orrs	r3, r2
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	061a      	lsls	r2, r3, #24
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069d2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80069dc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	0e1b      	lsrs	r3, r3, #24
 80069e2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	0a1b      	lsrs	r3, r3, #8
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	0d1b      	lsrs	r3, r3, #20
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	0a9b      	lsrs	r3, r3, #10
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	f003 0303 	and.w	r3, r3, #3
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	091b      	lsrs	r3, r3, #4
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	0e1b      	lsrs	r3, r3, #24
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a76:	4618      	mov	r0, r3
 8006a78:	f003 fc5c 	bl	800a334 <SDMMC_CmdBlockLength>
 8006a7c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00d      	beq.n	8006aa0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <HAL_SD_GetCardStatus+0x168>)
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006aa0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3750      	adds	r7, #80	; 0x50
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	1fe00fff 	.word	0x1fe00fff

08006ab0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006b08:	b5b0      	push	{r4, r5, r7, lr}
 8006b0a:	b08e      	sub	sp, #56	; 0x38
 8006b0c:	af04      	add	r7, sp, #16
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d02e      	beq.n	8006b86 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b2e:	d106      	bne.n	8006b3e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b3c:	e029      	b.n	8006b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b44:	d10a      	bne.n	8006b5c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb66 	bl	8007218 <SD_WideBus_Enable>
 8006b4c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	639a      	str	r2, [r3, #56]	; 0x38
 8006b5a:	e01a      	b.n	8006b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fba3 	bl	80072ae <SD_WideBus_Disable>
 8006b68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	639a      	str	r2, [r3, #56]	; 0x38
 8006b76:	e00c      	b.n	8006b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38
 8006b84:	e005      	b.n	8006b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a2e      	ldr	r2, [pc, #184]	; (8006c58 <HAL_SD_ConfigWideBusOperation+0x150>)
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ba8:	e034      	b.n	8006c14 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d903      	bls.n	8006bd0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	e012      	b.n	8006bf6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd8:	d103      	bne.n	8006be2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	61bb      	str	r3, [r7, #24]
 8006be0:	e009      	b.n	8006bf6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bea:	d102      	bne.n	8006bf2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8006bec:	2302      	movs	r3, #2
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	e001      	b.n	8006bf6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8006bf2:	2304      	movs	r3, #4
 8006bf4:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681d      	ldr	r5, [r3, #0]
 8006bfa:	466c      	mov	r4, sp
 8006bfc:	f107 0314 	add.w	r3, r7, #20
 8006c00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c08:	f107 0308 	add.w	r3, r7, #8
 8006c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f003 fab2 	bl	800a178 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f003 fb89 	bl	800a334 <SDMMC_CmdBlockLength>
 8006c22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00c      	beq.n	8006c44 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a0a      	ldr	r2, [pc, #40]	; (8006c58 <HAL_SD_ConfigWideBusOperation+0x150>)
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3728      	adds	r7, #40	; 0x28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bdb0      	pop	{r4, r5, r7, pc}
 8006c58:	1fe00fff 	.word	0x1fe00fff

08006c5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006c68:	f107 030c 	add.w	r3, r7, #12
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 faaa 	bl	80071c8 <SD_SendStatus>
 8006c74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	0a5b      	lsrs	r3, r3, #9
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006c92:	693b      	ldr	r3, [r7, #16]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c9c:	b590      	push	{r4, r7, lr}
 8006c9e:	b091      	sub	sp, #68	; 0x44
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f003 fabc 	bl	800a22a <SDMMC_GetPowerState>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d102      	bne.n	8006cbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006cb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006cbc:	e0a8      	b.n	8006e10 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d02e      	beq.n	8006d24 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f003 fd08 	bl	800a6e0 <SDMMC_CmdSendCID>
 8006cd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <SD_InitCard+0x40>
    {
      return errorstate;
 8006cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cda:	e099      	b.n	8006e10 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f003 fae7 	bl	800a2b6 <SDMMC_GetResponse>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2104      	movs	r1, #4
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f003 fade 	bl	800a2b6 <SDMMC_GetResponse>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2108      	movs	r1, #8
 8006d06:	4618      	mov	r0, r3
 8006d08:	f003 fad5 	bl	800a2b6 <SDMMC_GetResponse>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	210c      	movs	r1, #12
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f003 facc 	bl	800a2b6 <SDMMC_GetResponse>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d00d      	beq.n	8006d48 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f107 020e 	add.w	r2, r7, #14
 8006d34:	4611      	mov	r1, r2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f003 fd11 	bl	800a75e <SDMMC_CmdSetRelAdd>
 8006d3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <SD_InitCard+0xac>
    {
      return errorstate;
 8006d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d46:	e063      	b.n	8006e10 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d036      	beq.n	8006dbe <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006d50:	89fb      	ldrh	r3, [r7, #14]
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f003 fcda 	bl	800a71e <SDMMC_CmdSendCSD>
 8006d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <SD_InitCard+0xda>
    {
      return errorstate;
 8006d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d74:	e04c      	b.n	8006e10 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f003 fa9a 	bl	800a2b6 <SDMMC_GetResponse>
 8006d82:	4602      	mov	r2, r0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2104      	movs	r1, #4
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f003 fa91 	bl	800a2b6 <SDMMC_GetResponse>
 8006d94:	4602      	mov	r2, r0
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2108      	movs	r1, #8
 8006da0:	4618      	mov	r0, r3
 8006da2:	f003 fa88 	bl	800a2b6 <SDMMC_GetResponse>
 8006da6:	4602      	mov	r2, r0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	210c      	movs	r1, #12
 8006db2:	4618      	mov	r0, r3
 8006db4:	f003 fa7f 	bl	800a2b6 <SDMMC_GetResponse>
 8006db8:	4602      	mov	r2, r0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2104      	movs	r1, #4
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f003 fa76 	bl	800a2b6 <SDMMC_GetResponse>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	0d1a      	lsrs	r2, r3, #20
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006dd2:	f107 0310 	add.w	r3, r7, #16
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fc0f 	bl	80065fc <HAL_SD_GetCardCSD>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006de4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006de8:	e012      	b.n	8006e10 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6819      	ldr	r1, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	f04f 0400 	mov.w	r4, #0
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	f003 fb85 	bl	800a50c <SDMMC_CmdSelDesel>
 8006e02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <SD_InitCard+0x172>
  {
    return errorstate;
 8006e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0c:	e000      	b.n	8006e10 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3744      	adds	r7, #68	; 0x44
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd90      	pop	{r4, r7, pc}

08006e18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8006e2c:	f7fa ff42 	bl	8001cb4 <HAL_GetTick>
 8006e30:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f003 fb8c 	bl	800a554 <SDMMC_CmdGoIdleState>
 8006e3c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <SD_PowerON+0x30>
  {
    return errorstate;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	e0e9      	b.n	800701c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f003 fb9f 	bl	800a590 <SDMMC_CmdOperCond>
 8006e52:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00d      	beq.n	8006e76 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f003 fb75 	bl	800a554 <SDMMC_CmdGoIdleState>
 8006e6a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d004      	beq.n	8006e7c <SD_PowerON+0x64>
    {
      return errorstate;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	e0d2      	b.n	800701c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d137      	bne.n	8006ef4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f003 fba0 	bl	800a5d0 <SDMMC_CmdAppCommand>
 8006e90:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d02d      	beq.n	8006ef4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e9c:	e0be      	b.n	800701c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f003 fb93 	bl	800a5d0 <SDMMC_CmdAppCommand>
 8006eaa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	e0b2      	b.n	800701c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	495a      	ldr	r1, [pc, #360]	; (8007024 <SD_PowerON+0x20c>)
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f003 fbaa 	bl	800a616 <SDMMC_CmdAppOperCommand>
 8006ec2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006eca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ece:	e0a5      	b.n	800701c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f003 f9ed 	bl	800a2b6 <SDMMC_GetResponse>
 8006edc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	0fdb      	lsrs	r3, r3, #31
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <SD_PowerON+0xd2>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <SD_PowerON+0xd4>
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]

    count++;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d802      	bhi.n	8006f04 <SD_PowerON+0xec>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0cc      	beq.n	8006e9e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d902      	bls.n	8006f14 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f12:	e083      	b.n	800701c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d07d      	beq.n	800701a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d176      	bne.n	800701a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d071      	beq.n	800701a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f3c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0208 	orr.w	r2, r2, #8
 8006f4c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f003 fc6a 	bl	800a82c <SDMMC_CmdVoltageSwitch>
 8006f58:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00c      	beq.n	8006f7a <SD_PowerON+0x162>
        {
          return errorstate;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	e05b      	b.n	800701c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f64:	f7fa fea6 	bl	8001cb4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f72:	d102      	bne.n	8006f7a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006f74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f78:	e050      	b.n	800701c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f88:	d1ec      	bne.n	8006f64 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa2:	d002      	beq.n	8006faa <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fa8:	e038      	b.n	800701c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8006faa:	2001      	movs	r0, #1
 8006fac:	f7ff fb1a 	bl	80065e4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0204 	orr.w	r2, r2, #4
 8006fbe:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006fc0:	e00a      	b.n	8006fd8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006fc2:	f7fa fe77 	bl	8001cb4 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fd0:	d102      	bne.n	8006fd8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006fd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fd6:	e021      	b.n	800701c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fe6:	d1ec      	bne.n	8006fc2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007000:	d102      	bne.n	8007008 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007006:	e009      	b.n	800701c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2213      	movs	r2, #19
 800700e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007018:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3720      	adds	r7, #32
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	c1100000 	.word	0xc1100000

08007028 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08c      	sub	sp, #48	; 0x30
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007032:	f7fa fe3f 	bl	8001cb4 <HAL_GetTick>
 8007036:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f003 f937 	bl	800a2b6 <SDMMC_GetResponse>
 8007048:	4603      	mov	r3, r0
 800704a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800704e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007052:	d102      	bne.n	800705a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007054:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007058:	e0b0      	b.n	80071bc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2140      	movs	r1, #64	; 0x40
 8007060:	4618      	mov	r0, r3
 8007062:	f003 f967 	bl	800a334 <SDMMC_CmdBlockLength>
 8007066:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	e0a0      	b.n	80071bc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f003 faa2 	bl	800a5d0 <SDMMC_CmdAppCommand>
 800708c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	e08d      	b.n	80071bc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070a4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80070a6:	2340      	movs	r3, #64	; 0x40
 80070a8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80070aa:	2360      	movs	r3, #96	; 0x60
 80070ac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070ae:	2302      	movs	r3, #2
 80070b0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f107 0208 	add.w	r2, r7, #8
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f003 f909 	bl	800a2dc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f003 fb8a 	bl	800a7e8 <SDMMC_CmdStatusRegister>
 80070d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d02b      	beq.n	8007134 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	e069      	b.n	80071bc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d013      	beq.n	800711e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070fa:	e00d      	b.n	8007118 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f003 f863 	bl	800a1cc <SDMMC_ReadFIFO>
 8007106:	4602      	mov	r2, r0
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	601a      	str	r2, [r3, #0]
        pData++;
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	3304      	adds	r3, #4
 8007110:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	3301      	adds	r3, #1
 8007116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	2b07      	cmp	r3, #7
 800711c:	d9ee      	bls.n	80070fc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800711e:	f7fa fdc9 	bl	8001cb4 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712c:	d102      	bne.n	8007134 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800712e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007132:	e043      	b.n	80071bc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0d2      	beq.n	80070e8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007150:	2308      	movs	r3, #8
 8007152:	e033      	b.n	80071bc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007162:	2302      	movs	r3, #2
 8007164:	e02a      	b.n	80071bc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d017      	beq.n	80071a4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007174:	2320      	movs	r3, #32
 8007176:	e021      	b.n	80071bc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f003 f825 	bl	800a1cc <SDMMC_ReadFIFO>
 8007182:	4602      	mov	r2, r0
 8007184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007186:	601a      	str	r2, [r3, #0]
    pData++;
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	3304      	adds	r3, #4
 800718c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800718e:	f7fa fd91 	bl	8001cb4 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800719c:	d102      	bne.n	80071a4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800719e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071a2:	e00b      	b.n	80071bc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e2      	bne.n	8007178 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a03      	ldr	r2, [pc, #12]	; (80071c4 <SD_SendSDStatus+0x19c>)
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3730      	adds	r7, #48	; 0x30
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	18000f3a 	.word	0x18000f3a

080071c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80071d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071dc:	e018      	b.n	8007210 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	4619      	mov	r1, r3
 80071ea:	4610      	mov	r0, r2
 80071ec:	f003 fad9 	bl	800a7a2 <SDMMC_CmdSendStatus>
 80071f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <SD_SendStatus+0x34>
  {
    return errorstate;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	e009      	b.n	8007210 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2100      	movs	r1, #0
 8007202:	4618      	mov	r0, r3
 8007204:	f003 f857 	bl	800a2b6 <SDMMC_GetResponse>
 8007208:	4602      	mov	r2, r0
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f003 f841 	bl	800a2b6 <SDMMC_GetResponse>
 8007234:	4603      	mov	r3, r0
 8007236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800723e:	d102      	bne.n	8007246 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007240:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007244:	e02f      	b.n	80072a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f879 	bl	8007344 <SD_FindSCR>
 8007252:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	e023      	b.n	80072a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01c      	beq.n	80072a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007270:	041b      	lsls	r3, r3, #16
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f003 f9ab 	bl	800a5d0 <SDMMC_CmdAppCommand>
 800727a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	e00f      	b.n	80072a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2102      	movs	r1, #2
 800728c:	4618      	mov	r0, r3
 800728e:	f003 f9e2 	bl	800a656 <SDMMC_CmdBusWidth>
 8007292:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	e003      	b.n	80072a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800729e:	2300      	movs	r3, #0
 80072a0:	e001      	b.n	80072a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b086      	sub	sp, #24
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2100      	movs	r1, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f002 fff6 	bl	800a2b6 <SDMMC_GetResponse>
 80072ca:	4603      	mov	r3, r0
 80072cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072d4:	d102      	bne.n	80072dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072da:	e02f      	b.n	800733c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072dc:	f107 030c 	add.w	r3, r7, #12
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f82e 	bl	8007344 <SD_FindSCR>
 80072e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	e023      	b.n	800733c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01c      	beq.n	8007338 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007306:	041b      	lsls	r3, r3, #16
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f003 f960 	bl	800a5d0 <SDMMC_CmdAppCommand>
 8007310:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	e00f      	b.n	800733c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f003 f997 	bl	800a656 <SDMMC_CmdBusWidth>
 8007328:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	e003      	b.n	800733c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007334:	2300      	movs	r3, #0
 8007336:	e001      	b.n	800733c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007338:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08e      	sub	sp, #56	; 0x38
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800734e:	f7fa fcb1 	bl	8001cb4 <HAL_GetTick>
 8007352:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007358:	2300      	movs	r3, #0
 800735a:	60bb      	str	r3, [r7, #8]
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2108      	movs	r1, #8
 800736a:	4618      	mov	r0, r3
 800736c:	f002 ffe2 	bl	800a334 <SDMMC_CmdBlockLength>
 8007370:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	e0ad      	b.n	80074d8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007384:	041b      	lsls	r3, r3, #16
 8007386:	4619      	mov	r1, r3
 8007388:	4610      	mov	r0, r2
 800738a:	f003 f921 	bl	800a5d0 <SDMMC_CmdAppCommand>
 800738e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	e09e      	b.n	80074d8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800739a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800739e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80073a0:	2308      	movs	r3, #8
 80073a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80073a4:	2330      	movs	r3, #48	; 0x30
 80073a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073a8:	2302      	movs	r3, #2
 80073aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80073b0:	2301      	movs	r3, #1
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f107 0210 	add.w	r2, r7, #16
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f002 ff8c 	bl	800a2dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f003 f967 	bl	800a69c <SDMMC_CmdSendSCR>
 80073ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d027      	beq.n	8007426 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	e07e      	b.n	80074d8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d113      	bne.n	8007410 <SD_FindSCR+0xcc>
 80073e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d110      	bne.n	8007410 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f002 feea 	bl	800a1cc <SDMMC_ReadFIFO>
 80073f8:	4603      	mov	r3, r0
 80073fa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4618      	mov	r0, r3
 8007402:	f002 fee3 	bl	800a1cc <SDMMC_ReadFIFO>
 8007406:	4603      	mov	r3, r0
 8007408:	60fb      	str	r3, [r7, #12]
      index++;
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740c:	3301      	adds	r3, #1
 800740e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007410:	f7fa fc50 	bl	8001cb4 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800741e:	d102      	bne.n	8007426 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007424:	e058      	b.n	80074d8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800742c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0d1      	beq.n	80073da <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2208      	movs	r2, #8
 800744a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800744c:	2308      	movs	r3, #8
 800744e:	e043      	b.n	80074d8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2202      	movs	r2, #2
 8007464:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007466:	2302      	movs	r3, #2
 8007468:	e036      	b.n	80074d8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2220      	movs	r2, #32
 800747e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007480:	2320      	movs	r3, #32
 8007482:	e029      	b.n	80074d8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <SD_FindSCR+0x19c>)
 800748a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	061a      	lsls	r2, r3, #24
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007498:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	0a1b      	lsrs	r3, r3, #8
 800749e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074a2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	601a      	str	r2, [r3, #0]
    scr++;
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	3304      	adds	r3, #4
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	061a      	lsls	r2, r3, #24
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	021b      	lsls	r3, r3, #8
 80074bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	0a1b      	lsrs	r3, r3, #8
 80074c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074ca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	0e1b      	lsrs	r3, r3, #24
 80074d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3738      	adds	r7, #56	; 0x38
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	18000f3a 	.word	0x18000f3a

080074e4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e02b      	b.n	8007550 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fa fa67 	bl	80019e0 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f002 fd61 	bl	8009fec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	461a      	mov	r2, r3
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	f002 fdb5 	bl	800a0a4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <HAL_SDRAM_Init+0x74>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a06      	ldr	r2, [pc, #24]	; (8007558 <HAL_SDRAM_Init+0x74>)
 8007540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007544:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	52004000 	.word	0x52004000

0800755c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e0e2      	b.n	8007738 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a70      	ldr	r2, [pc, #448]	; (8007740 <HAL_SPI_Init+0x1e4>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00f      	beq.n	80075a2 <HAL_SPI_Init+0x46>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a6f      	ldr	r2, [pc, #444]	; (8007744 <HAL_SPI_Init+0x1e8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00a      	beq.n	80075a2 <HAL_SPI_Init+0x46>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a6d      	ldr	r2, [pc, #436]	; (8007748 <HAL_SPI_Init+0x1ec>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d005      	beq.n	80075a2 <HAL_SPI_Init+0x46>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	2b0f      	cmp	r3, #15
 800759c:	d901      	bls.n	80075a2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e0ca      	b.n	8007738 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fb96 	bl	8007cd4 <SPI_GetPacketSize>
 80075a8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a64      	ldr	r2, [pc, #400]	; (8007740 <HAL_SPI_Init+0x1e4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00c      	beq.n	80075ce <HAL_SPI_Init+0x72>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a62      	ldr	r2, [pc, #392]	; (8007744 <HAL_SPI_Init+0x1e8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d007      	beq.n	80075ce <HAL_SPI_Init+0x72>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a61      	ldr	r2, [pc, #388]	; (8007748 <HAL_SPI_Init+0x1ec>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d002      	beq.n	80075ce <HAL_SPI_Init+0x72>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b08      	cmp	r3, #8
 80075cc:	d811      	bhi.n	80075f2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075d2:	4a5b      	ldr	r2, [pc, #364]	; (8007740 <HAL_SPI_Init+0x1e4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d009      	beq.n	80075ec <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a59      	ldr	r2, [pc, #356]	; (8007744 <HAL_SPI_Init+0x1e8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d004      	beq.n	80075ec <HAL_SPI_Init+0x90>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a58      	ldr	r2, [pc, #352]	; (8007748 <HAL_SPI_Init+0x1ec>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d104      	bne.n	80075f6 <HAL_SPI_Init+0x9a>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b10      	cmp	r3, #16
 80075f0:	d901      	bls.n	80075f6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e0a0      	b.n	8007738 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d106      	bne.n	8007610 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7f9 ff94 	bl	8001538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0201 	bic.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007630:	d110      	bne.n	8007654 <HAL_SPI_Init+0xf8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800763a:	d10b      	bne.n	8007654 <HAL_SPI_Init+0xf8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d107      	bne.n	8007654 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007652:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	431a      	orrs	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007666:	ea42 0103 	orr.w	r1, r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a8:	431a      	orrs	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b4:	ea42 0103 	orr.w	r1, r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d113      	bne.n	80076f4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076de:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076f2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0201 	bic.w	r2, r2, #1
 8007702:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40013000 	.word	0x40013000
 8007744:	40003800 	.word	0x40003800
 8007748:	40003c00 	.word	0x40003c00

0800774c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007764:	6a3a      	ldr	r2, [r7, #32]
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4013      	ands	r3, r2
 800776a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007774:	2300      	movs	r3, #0
 8007776:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800777e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3330      	adds	r3, #48	; 0x30
 8007786:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d113      	bne.n	80077ba <HAL_SPI_IRQHandler+0x6e>
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	f003 0320 	and.w	r3, r3, #32
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10e      	bne.n	80077ba <HAL_SPI_IRQHandler+0x6e>
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f003 0304 	and.w	r3, r3, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
    hspi->RxISR(hspi);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
    handled = 1UL;
 80077b6:	2301      	movs	r3, #1
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10f      	bne.n	80077e4 <HAL_SPI_IRQHandler+0x98>
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <HAL_SPI_IRQHandler+0x98>
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d105      	bne.n	80077e4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
    handled = 1UL;
 80077e0:	2301      	movs	r3, #1
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10f      	bne.n	800780e <HAL_SPI_IRQHandler+0xc2>
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <HAL_SPI_IRQHandler+0xc2>
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d105      	bne.n	800780e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
    handled = 1UL;
 800780a:	2301      	movs	r3, #1
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	f040 8170 	bne.w	8007af6 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80a0 	beq.w	8007962 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	699a      	ldr	r2, [r3, #24]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0208 	orr.w	r2, r2, #8
 8007830:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699a      	ldr	r2, [r3, #24]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0210 	orr.w	r2, r2, #16
 8007840:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007850:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0208 	bic.w	r2, r2, #8
 8007860:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00f      	beq.n	800788c <HAL_SPI_IRQHandler+0x140>
 800786c:	7cfb      	ldrb	r3, [r7, #19]
 800786e:	2b04      	cmp	r3, #4
 8007870:	d004      	beq.n	800787c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <HAL_SPI_IRQHandler+0x140>
 800787c:	7cfb      	ldrb	r3, [r7, #19]
 800787e:	2b03      	cmp	r3, #3
 8007880:	d059      	beq.n	8007936 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d154      	bne.n	8007936 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d13d      	bne.n	8007916 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800789a:	e036      	b.n	800790a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	2b0f      	cmp	r3, #15
 80078a2:	d90b      	bls.n	80078bc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80078ae:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	665a      	str	r2, [r3, #100]	; 0x64
 80078ba:	e01d      	b.n	80078f8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b07      	cmp	r3, #7
 80078c2:	d90b      	bls.n	80078dc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	8812      	ldrh	r2, [r2, #0]
 80078cc:	b292      	uxth	r2, r2
 80078ce:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d4:	1c9a      	adds	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	665a      	str	r2, [r3, #100]	; 0x64
 80078da:	e00d      	b.n	80078f8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007910:	b29b      	uxth	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1c2      	bne.n	800789c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f93c 	bl	8007b94 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f90c 	bl	8007b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007934:	e0e4      	b.n	8007b00 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007936:	7cfb      	ldrb	r3, [r7, #19]
 8007938:	2b05      	cmp	r3, #5
 800793a:	d103      	bne.n	8007944 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f8fb 	bl	8007b38 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8007942:	e0da      	b.n	8007afa <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007944:	7cfb      	ldrb	r3, [r7, #19]
 8007946:	2b04      	cmp	r3, #4
 8007948:	d103      	bne.n	8007952 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8ea 	bl	8007b24 <HAL_SPI_RxCpltCallback>
    return;
 8007950:	e0d3      	b.n	8007afa <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007952:	7cfb      	ldrb	r3, [r7, #19]
 8007954:	2b03      	cmp	r3, #3
 8007956:	f040 80d0 	bne.w	8007afa <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8d8 	bl	8007b10 <HAL_SPI_TxCpltCallback>
    return;
 8007960:	e0cb      	b.n	8007afa <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00d      	beq.n	8007988 <HAL_SPI_IRQHandler+0x23c>
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	f003 0308 	and.w	r3, r3, #8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d008      	beq.n	8007988 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699a      	ldr	r2, [r3, #24]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007984:	619a      	str	r2, [r3, #24]

    return;
 8007986:	e0bb      	b.n	8007b00 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 80b6 	beq.w	8007b00 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00f      	beq.n	80079be <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a4:	f043 0204 	orr.w	r2, r3, #4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699a      	ldr	r2, [r3, #24]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079bc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00f      	beq.n	80079e8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ce:	f043 0201 	orr.w	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00f      	beq.n	8007a12 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f8:	f043 0208 	orr.w	r2, r3, #8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699a      	ldr	r2, [r3, #24]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a10:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00f      	beq.n	8007a3c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0220 	orr.w	r2, r2, #32
 8007a3a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d05b      	beq.n	8007afe <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0201 	bic.w	r2, r2, #1
 8007a54:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6919      	ldr	r1, [r3, #16]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	4b29      	ldr	r3, [pc, #164]	; (8007b08 <HAL_SPI_IRQHandler+0x3bc>)
 8007a62:	400b      	ands	r3, r1
 8007a64:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a70:	d138      	bne.n	8007ae4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007a80:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d013      	beq.n	8007ab2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a8e:	4a1f      	ldr	r2, [pc, #124]	; (8007b0c <HAL_SPI_IRQHandler+0x3c0>)
 8007a90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fa fac4 	bl	8002024 <HAL_DMA_Abort_IT>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d007      	beq.n	8007ab2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d021      	beq.n	8007afe <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007abe:	4a13      	ldr	r2, [pc, #76]	; (8007b0c <HAL_SPI_IRQHandler+0x3c0>)
 8007ac0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fa faac 	bl	8002024 <HAL_DMA_Abort_IT>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d015      	beq.n	8007afe <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ae2:	e00c      	b.n	8007afe <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f82d 	bl	8007b4c <HAL_SPI_ErrorCallback>
    return;
 8007af2:	bf00      	nop
 8007af4:	e003      	b.n	8007afe <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007af6:	bf00      	nop
 8007af8:	e002      	b.n	8007b00 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8007afe:	bf00      	nop
  }
}
 8007b00:	3728      	adds	r7, #40	; 0x28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	fffffc94 	.word	0xfffffc94
 8007b0c:	08007b61 	.word	0x08007b61

08007b10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f7ff ffe0 	bl	8007b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0208 	orr.w	r2, r2, #8
 8007bb2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0210 	orr.w	r2, r2, #16
 8007bc2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0201 	bic.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6919      	ldr	r1, [r3, #16]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4b3c      	ldr	r3, [pc, #240]	; (8007cd0 <SPI_CloseTransfer+0x13c>)
 8007be0:	400b      	ands	r3, r1
 8007be2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007bf2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d014      	beq.n	8007c2a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00f      	beq.n	8007c2a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0220 	orr.w	r2, r2, #32
 8007c28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d014      	beq.n	8007c60 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00f      	beq.n	8007c60 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c46:	f043 0204 	orr.w	r2, r3, #4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c5e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00f      	beq.n	8007c8a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c70:	f043 0201 	orr.w	r2, r3, #1
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699a      	ldr	r2, [r3, #24]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c88:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00f      	beq.n	8007cb4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c9a:	f043 0208 	orr.w	r2, r3, #8
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cb2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	fffffc90 	.word	0xfffffc90

08007cd4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	3301      	adds	r3, #1
 8007cec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	3307      	adds	r3, #7
 8007cf2:	08db      	lsrs	r3, r3, #3
 8007cf4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	fb02 f303 	mul.w	r3, r2, r3
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e049      	b.n	8007db0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d106      	bne.n	8007d36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7f9 fc75 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3304      	adds	r3, #4
 8007d46:	4619      	mov	r1, r3
 8007d48:	4610      	mov	r0, r2
 8007d4a:	f000 fb1d 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e049      	b.n	8007e5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f841 	bl	8007e66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f000 fac6 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e08f      	b.n	8007fb0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d106      	bne.n	8007eaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7f9 fbf3 	bl	8001690 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6899      	ldr	r1, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	4b3e      	ldr	r3, [pc, #248]	; (8007fb8 <HAL_TIM_Encoder_Init+0x13c>)
 8007ebe:	400b      	ands	r3, r1
 8007ec0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4610      	mov	r0, r2
 8007ece:	f000 fa5b 	bl	8008388 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4b31      	ldr	r3, [pc, #196]	; (8007fbc <HAL_TIM_Encoder_Init+0x140>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	4313      	orrs	r3, r2
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4b2b      	ldr	r3, [pc, #172]	; (8007fc0 <HAL_TIM_Encoder_Init+0x144>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4b2a      	ldr	r3, [pc, #168]	; (8007fc4 <HAL_TIM_Encoder_Init+0x148>)
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	011a      	lsls	r2, r3, #4
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	031b      	lsls	r3, r3, #12
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007f4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007f52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	fffebff8 	.word	0xfffebff8
 8007fbc:	fffffcfc 	.word	0xfffffcfc
 8007fc0:	fffff3f3 	.word	0xfffff3f3
 8007fc4:	ffff0f0f 	.word	0xffff0f0f

08007fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d101      	bne.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	e0fd      	b.n	80081de <HAL_TIM_PWM_ConfigChannel+0x216>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b14      	cmp	r3, #20
 8007fee:	f200 80f0 	bhi.w	80081d2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	0800804d 	.word	0x0800804d
 8007ffc:	080081d3 	.word	0x080081d3
 8008000:	080081d3 	.word	0x080081d3
 8008004:	080081d3 	.word	0x080081d3
 8008008:	0800808d 	.word	0x0800808d
 800800c:	080081d3 	.word	0x080081d3
 8008010:	080081d3 	.word	0x080081d3
 8008014:	080081d3 	.word	0x080081d3
 8008018:	080080cf 	.word	0x080080cf
 800801c:	080081d3 	.word	0x080081d3
 8008020:	080081d3 	.word	0x080081d3
 8008024:	080081d3 	.word	0x080081d3
 8008028:	0800810f 	.word	0x0800810f
 800802c:	080081d3 	.word	0x080081d3
 8008030:	080081d3 	.word	0x080081d3
 8008034:	080081d3 	.word	0x080081d3
 8008038:	08008151 	.word	0x08008151
 800803c:	080081d3 	.word	0x080081d3
 8008040:	080081d3 	.word	0x080081d3
 8008044:	080081d3 	.word	0x080081d3
 8008048:	08008191 	.word	0x08008191
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fa3e 	bl	80084d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0208 	orr.w	r2, r2, #8
 8008066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699a      	ldr	r2, [r3, #24]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0204 	bic.w	r2, r2, #4
 8008076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6999      	ldr	r1, [r3, #24]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	619a      	str	r2, [r3, #24]
      break;
 800808a:	e0a3      	b.n	80081d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 faae 	bl	80085f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6999      	ldr	r1, [r3, #24]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	021a      	lsls	r2, r3, #8
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	619a      	str	r2, [r3, #24]
      break;
 80080cc:	e082      	b.n	80081d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 fb17 	bl	8008708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69da      	ldr	r2, [r3, #28]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0208 	orr.w	r2, r2, #8
 80080e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69da      	ldr	r2, [r3, #28]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0204 	bic.w	r2, r2, #4
 80080f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69d9      	ldr	r1, [r3, #28]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	61da      	str	r2, [r3, #28]
      break;
 800810c:	e062      	b.n	80081d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fb7d 	bl	8008814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69da      	ldr	r2, [r3, #28]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69d9      	ldr	r1, [r3, #28]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	021a      	lsls	r2, r3, #8
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	61da      	str	r2, [r3, #28]
      break;
 800814e:	e041      	b.n	80081d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fbc4 	bl	80088e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0208 	orr.w	r2, r2, #8
 800816a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0204 	bic.w	r2, r2, #4
 800817a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	691a      	ldr	r2, [r3, #16]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800818e:	e021      	b.n	80081d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fc06 	bl	80089a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	021a      	lsls	r2, r3, #8
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081d0:	e000      	b.n	80081d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80081d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop

080081e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d101      	bne.n	8008200 <HAL_TIM_ConfigClockSource+0x18>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e0b7      	b.n	8008370 <HAL_TIM_ConfigClockSource+0x188>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4b57      	ldr	r3, [pc, #348]	; (8008378 <HAL_TIM_ConfigClockSource+0x190>)
 800821c:	4013      	ands	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008226:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b70      	cmp	r3, #112	; 0x70
 8008236:	d02e      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0xae>
 8008238:	2b70      	cmp	r3, #112	; 0x70
 800823a:	d812      	bhi.n	8008262 <HAL_TIM_ConfigClockSource+0x7a>
 800823c:	2b30      	cmp	r3, #48	; 0x30
 800823e:	f000 8084 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x162>
 8008242:	2b30      	cmp	r3, #48	; 0x30
 8008244:	d806      	bhi.n	8008254 <HAL_TIM_ConfigClockSource+0x6c>
 8008246:	2b10      	cmp	r3, #16
 8008248:	d07f      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x162>
 800824a:	2b20      	cmp	r3, #32
 800824c:	d07d      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x162>
 800824e:	2b00      	cmp	r3, #0
 8008250:	d07b      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008252:	e084      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008254:	2b50      	cmp	r3, #80	; 0x50
 8008256:	d048      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x102>
 8008258:	2b60      	cmp	r3, #96	; 0x60
 800825a:	d056      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x122>
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d064      	beq.n	800832a <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008260:	e07d      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008262:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008266:	d070      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x162>
 8008268:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800826c:	d809      	bhi.n	8008282 <HAL_TIM_ConfigClockSource+0x9a>
 800826e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008272:	d027      	beq.n	80082c4 <HAL_TIM_ConfigClockSource+0xdc>
 8008274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008278:	d067      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x162>
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800827e:	d06d      	beq.n	800835c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008280:	e06d      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008282:	4a3e      	ldr	r2, [pc, #248]	; (800837c <HAL_TIM_ConfigClockSource+0x194>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d060      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x162>
 8008288:	4a3d      	ldr	r2, [pc, #244]	; (8008380 <HAL_TIM_ConfigClockSource+0x198>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d05d      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x162>
 800828e:	4a3d      	ldr	r2, [pc, #244]	; (8008384 <HAL_TIM_ConfigClockSource+0x19c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d05a      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008294:	e063      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6818      	ldr	r0, [r3, #0]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6899      	ldr	r1, [r3, #8]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f000 fc61 	bl	8008b6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	609a      	str	r2, [r3, #8]
      break;
 80082c2:	e04c      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	6899      	ldr	r1, [r3, #8]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f000 fc4a 	bl	8008b6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082e6:	609a      	str	r2, [r3, #8]
      break;
 80082e8:	e039      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	6859      	ldr	r1, [r3, #4]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	461a      	mov	r2, r3
 80082f8:	f000 fbba 	bl	8008a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2150      	movs	r1, #80	; 0x50
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fc14 	bl	8008b30 <TIM_ITRx_SetConfig>
      break;
 8008308:	e029      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	6859      	ldr	r1, [r3, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	461a      	mov	r2, r3
 8008318:	f000 fbd9 	bl	8008ace <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2160      	movs	r1, #96	; 0x60
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fc04 	bl	8008b30 <TIM_ITRx_SetConfig>
      break;
 8008328:	e019      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	6859      	ldr	r1, [r3, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	461a      	mov	r2, r3
 8008338:	f000 fb9a 	bl	8008a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2140      	movs	r1, #64	; 0x40
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fbf4 	bl	8008b30 <TIM_ITRx_SetConfig>
      break;
 8008348:	e009      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	4610      	mov	r0, r2
 8008356:	f000 fbeb 	bl	8008b30 <TIM_ITRx_SetConfig>
      break;
 800835a:	e000      	b.n	800835e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800835c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	ffceff88 	.word	0xffceff88
 800837c:	00100030 	.word	0x00100030
 8008380:	00100040 	.word	0x00100040
 8008384:	00100020 	.word	0x00100020

08008388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a44      	ldr	r2, [pc, #272]	; (80084ac <TIM_Base_SetConfig+0x124>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d013      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a6:	d00f      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a41      	ldr	r2, [pc, #260]	; (80084b0 <TIM_Base_SetConfig+0x128>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00b      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a40      	ldr	r2, [pc, #256]	; (80084b4 <TIM_Base_SetConfig+0x12c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a3f      	ldr	r2, [pc, #252]	; (80084b8 <TIM_Base_SetConfig+0x130>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a3e      	ldr	r2, [pc, #248]	; (80084bc <TIM_Base_SetConfig+0x134>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d108      	bne.n	80083da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a33      	ldr	r2, [pc, #204]	; (80084ac <TIM_Base_SetConfig+0x124>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d027      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e8:	d023      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a30      	ldr	r2, [pc, #192]	; (80084b0 <TIM_Base_SetConfig+0x128>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d01f      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2f      	ldr	r2, [pc, #188]	; (80084b4 <TIM_Base_SetConfig+0x12c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d01b      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a2e      	ldr	r2, [pc, #184]	; (80084b8 <TIM_Base_SetConfig+0x130>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d017      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2d      	ldr	r2, [pc, #180]	; (80084bc <TIM_Base_SetConfig+0x134>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d013      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2c      	ldr	r2, [pc, #176]	; (80084c0 <TIM_Base_SetConfig+0x138>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00f      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2b      	ldr	r2, [pc, #172]	; (80084c4 <TIM_Base_SetConfig+0x13c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00b      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a2a      	ldr	r2, [pc, #168]	; (80084c8 <TIM_Base_SetConfig+0x140>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d007      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a29      	ldr	r2, [pc, #164]	; (80084cc <TIM_Base_SetConfig+0x144>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d003      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a28      	ldr	r2, [pc, #160]	; (80084d0 <TIM_Base_SetConfig+0x148>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d108      	bne.n	8008444 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a10      	ldr	r2, [pc, #64]	; (80084ac <TIM_Base_SetConfig+0x124>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00f      	beq.n	8008490 <TIM_Base_SetConfig+0x108>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a12      	ldr	r2, [pc, #72]	; (80084bc <TIM_Base_SetConfig+0x134>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00b      	beq.n	8008490 <TIM_Base_SetConfig+0x108>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a11      	ldr	r2, [pc, #68]	; (80084c0 <TIM_Base_SetConfig+0x138>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d007      	beq.n	8008490 <TIM_Base_SetConfig+0x108>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a10      	ldr	r2, [pc, #64]	; (80084c4 <TIM_Base_SetConfig+0x13c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_Base_SetConfig+0x108>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a0f      	ldr	r2, [pc, #60]	; (80084c8 <TIM_Base_SetConfig+0x140>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d103      	bne.n	8008498 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	691a      	ldr	r2, [r3, #16]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	615a      	str	r2, [r3, #20]
}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40010000 	.word	0x40010000
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40000c00 	.word	0x40000c00
 80084bc:	40010400 	.word	0x40010400
 80084c0:	40014000 	.word	0x40014000
 80084c4:	40014400 	.word	0x40014400
 80084c8:	40014800 	.word	0x40014800
 80084cc:	4000e000 	.word	0x4000e000
 80084d0:	4000e400 	.word	0x4000e400

080084d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	f023 0201 	bic.w	r2, r3, #1
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4b37      	ldr	r3, [pc, #220]	; (80085dc <TIM_OC1_SetConfig+0x108>)
 8008500:	4013      	ands	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0303 	bic.w	r3, r3, #3
 800850a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 0302 	bic.w	r3, r3, #2
 800851c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a2d      	ldr	r2, [pc, #180]	; (80085e0 <TIM_OC1_SetConfig+0x10c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00f      	beq.n	8008550 <TIM_OC1_SetConfig+0x7c>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a2c      	ldr	r2, [pc, #176]	; (80085e4 <TIM_OC1_SetConfig+0x110>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00b      	beq.n	8008550 <TIM_OC1_SetConfig+0x7c>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a2b      	ldr	r2, [pc, #172]	; (80085e8 <TIM_OC1_SetConfig+0x114>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d007      	beq.n	8008550 <TIM_OC1_SetConfig+0x7c>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a2a      	ldr	r2, [pc, #168]	; (80085ec <TIM_OC1_SetConfig+0x118>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <TIM_OC1_SetConfig+0x7c>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a29      	ldr	r2, [pc, #164]	; (80085f0 <TIM_OC1_SetConfig+0x11c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d10c      	bne.n	800856a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f023 0308 	bic.w	r3, r3, #8
 8008556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f023 0304 	bic.w	r3, r3, #4
 8008568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a1c      	ldr	r2, [pc, #112]	; (80085e0 <TIM_OC1_SetConfig+0x10c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00f      	beq.n	8008592 <TIM_OC1_SetConfig+0xbe>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a1b      	ldr	r2, [pc, #108]	; (80085e4 <TIM_OC1_SetConfig+0x110>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00b      	beq.n	8008592 <TIM_OC1_SetConfig+0xbe>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a1a      	ldr	r2, [pc, #104]	; (80085e8 <TIM_OC1_SetConfig+0x114>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <TIM_OC1_SetConfig+0xbe>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a19      	ldr	r2, [pc, #100]	; (80085ec <TIM_OC1_SetConfig+0x118>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d003      	beq.n	8008592 <TIM_OC1_SetConfig+0xbe>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a18      	ldr	r2, [pc, #96]	; (80085f0 <TIM_OC1_SetConfig+0x11c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d111      	bne.n	80085b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	621a      	str	r2, [r3, #32]
}
 80085d0:	bf00      	nop
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	fffeff8f 	.word	0xfffeff8f
 80085e0:	40010000 	.word	0x40010000
 80085e4:	40010400 	.word	0x40010400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800

080085f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f023 0210 	bic.w	r2, r3, #16
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4b34      	ldr	r3, [pc, #208]	; (80086f0 <TIM_OC2_SetConfig+0xfc>)
 8008620:	4013      	ands	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800862a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f023 0320 	bic.w	r3, r3, #32
 800863e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a29      	ldr	r2, [pc, #164]	; (80086f4 <TIM_OC2_SetConfig+0x100>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_OC2_SetConfig+0x68>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a28      	ldr	r2, [pc, #160]	; (80086f8 <TIM_OC2_SetConfig+0x104>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d10d      	bne.n	8008678 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008676:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <TIM_OC2_SetConfig+0x100>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00f      	beq.n	80086a0 <TIM_OC2_SetConfig+0xac>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <TIM_OC2_SetConfig+0x104>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d00b      	beq.n	80086a0 <TIM_OC2_SetConfig+0xac>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a1c      	ldr	r2, [pc, #112]	; (80086fc <TIM_OC2_SetConfig+0x108>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d007      	beq.n	80086a0 <TIM_OC2_SetConfig+0xac>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a1b      	ldr	r2, [pc, #108]	; (8008700 <TIM_OC2_SetConfig+0x10c>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d003      	beq.n	80086a0 <TIM_OC2_SetConfig+0xac>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a1a      	ldr	r2, [pc, #104]	; (8008704 <TIM_OC2_SetConfig+0x110>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d113      	bne.n	80086c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	621a      	str	r2, [r3, #32]
}
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	feff8fff 	.word	0xfeff8fff
 80086f4:	40010000 	.word	0x40010000
 80086f8:	40010400 	.word	0x40010400
 80086fc:	40014000 	.word	0x40014000
 8008700:	40014400 	.word	0x40014400
 8008704:	40014800 	.word	0x40014800

08008708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	021b      	lsls	r3, r3, #8
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a27      	ldr	r2, [pc, #156]	; (8008800 <TIM_OC3_SetConfig+0xf8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d003      	beq.n	800876e <TIM_OC3_SetConfig+0x66>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a26      	ldr	r2, [pc, #152]	; (8008804 <TIM_OC3_SetConfig+0xfc>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d10d      	bne.n	800878a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	021b      	lsls	r3, r3, #8
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	4313      	orrs	r3, r2
 8008780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a1c      	ldr	r2, [pc, #112]	; (8008800 <TIM_OC3_SetConfig+0xf8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00f      	beq.n	80087b2 <TIM_OC3_SetConfig+0xaa>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a1b      	ldr	r2, [pc, #108]	; (8008804 <TIM_OC3_SetConfig+0xfc>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00b      	beq.n	80087b2 <TIM_OC3_SetConfig+0xaa>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a1a      	ldr	r2, [pc, #104]	; (8008808 <TIM_OC3_SetConfig+0x100>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d007      	beq.n	80087b2 <TIM_OC3_SetConfig+0xaa>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a19      	ldr	r2, [pc, #100]	; (800880c <TIM_OC3_SetConfig+0x104>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d003      	beq.n	80087b2 <TIM_OC3_SetConfig+0xaa>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a18      	ldr	r2, [pc, #96]	; (8008810 <TIM_OC3_SetConfig+0x108>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d113      	bne.n	80087da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	621a      	str	r2, [r3, #32]
}
 80087f4:	bf00      	nop
 80087f6:	371c      	adds	r7, #28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	40010000 	.word	0x40010000
 8008804:	40010400 	.word	0x40010400
 8008808:	40014000 	.word	0x40014000
 800880c:	40014400 	.word	0x40014400
 8008810:	40014800 	.word	0x40014800

08008814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800884a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800885e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	031b      	lsls	r3, r3, #12
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a18      	ldr	r2, [pc, #96]	; (80088d0 <TIM_OC4_SetConfig+0xbc>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d00f      	beq.n	8008894 <TIM_OC4_SetConfig+0x80>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a17      	ldr	r2, [pc, #92]	; (80088d4 <TIM_OC4_SetConfig+0xc0>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00b      	beq.n	8008894 <TIM_OC4_SetConfig+0x80>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a16      	ldr	r2, [pc, #88]	; (80088d8 <TIM_OC4_SetConfig+0xc4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d007      	beq.n	8008894 <TIM_OC4_SetConfig+0x80>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a15      	ldr	r2, [pc, #84]	; (80088dc <TIM_OC4_SetConfig+0xc8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d003      	beq.n	8008894 <TIM_OC4_SetConfig+0x80>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a14      	ldr	r2, [pc, #80]	; (80088e0 <TIM_OC4_SetConfig+0xcc>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d109      	bne.n	80088a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800889a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	019b      	lsls	r3, r3, #6
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	621a      	str	r2, [r3, #32]
}
 80088c2:	bf00      	nop
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40010400 	.word	0x40010400
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40014400 	.word	0x40014400
 80088e0:	40014800 	.word	0x40014800

080088e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	041b      	lsls	r3, r3, #16
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a17      	ldr	r2, [pc, #92]	; (8008994 <TIM_OC5_SetConfig+0xb0>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d00f      	beq.n	800895a <TIM_OC5_SetConfig+0x76>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a16      	ldr	r2, [pc, #88]	; (8008998 <TIM_OC5_SetConfig+0xb4>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d00b      	beq.n	800895a <TIM_OC5_SetConfig+0x76>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a15      	ldr	r2, [pc, #84]	; (800899c <TIM_OC5_SetConfig+0xb8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d007      	beq.n	800895a <TIM_OC5_SetConfig+0x76>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a14      	ldr	r2, [pc, #80]	; (80089a0 <TIM_OC5_SetConfig+0xbc>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d003      	beq.n	800895a <TIM_OC5_SetConfig+0x76>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a13      	ldr	r2, [pc, #76]	; (80089a4 <TIM_OC5_SetConfig+0xc0>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d109      	bne.n	800896e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	621a      	str	r2, [r3, #32]
}
 8008988:	bf00      	nop
 800898a:	371c      	adds	r7, #28
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	40010000 	.word	0x40010000
 8008998:	40010400 	.word	0x40010400
 800899c:	40014000 	.word	0x40014000
 80089a0:	40014400 	.word	0x40014400
 80089a4:	40014800 	.word	0x40014800

080089a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	051b      	lsls	r3, r3, #20
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a18      	ldr	r2, [pc, #96]	; (8008a5c <TIM_OC6_SetConfig+0xb4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00f      	beq.n	8008a20 <TIM_OC6_SetConfig+0x78>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a17      	ldr	r2, [pc, #92]	; (8008a60 <TIM_OC6_SetConfig+0xb8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00b      	beq.n	8008a20 <TIM_OC6_SetConfig+0x78>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a16      	ldr	r2, [pc, #88]	; (8008a64 <TIM_OC6_SetConfig+0xbc>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d007      	beq.n	8008a20 <TIM_OC6_SetConfig+0x78>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a15      	ldr	r2, [pc, #84]	; (8008a68 <TIM_OC6_SetConfig+0xc0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d003      	beq.n	8008a20 <TIM_OC6_SetConfig+0x78>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a14      	ldr	r2, [pc, #80]	; (8008a6c <TIM_OC6_SetConfig+0xc4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d109      	bne.n	8008a34 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	029b      	lsls	r3, r3, #10
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	621a      	str	r2, [r3, #32]
}
 8008a4e:	bf00      	nop
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	40010000 	.word	0x40010000
 8008a60:	40010400 	.word	0x40010400
 8008a64:	40014000 	.word	0x40014000
 8008a68:	40014400 	.word	0x40014400
 8008a6c:	40014800 	.word	0x40014800

08008a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	f023 0201 	bic.w	r2, r3, #1
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f023 030a 	bic.w	r3, r3, #10
 8008aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	621a      	str	r2, [r3, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b087      	sub	sp, #28
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	f023 0210 	bic.w	r2, r3, #16
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	031b      	lsls	r3, r3, #12
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
	...

08008b30 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4b09      	ldr	r3, [pc, #36]	; (8008b68 <TIM_ITRx_SetConfig+0x38>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	f043 0307 	orr.w	r3, r3, #7
 8008b52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	609a      	str	r2, [r3, #8]
}
 8008b5a:	bf00      	nop
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	ffcfff8f 	.word	0xffcfff8f

08008b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	021a      	lsls	r2, r3, #8
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	609a      	str	r2, [r3, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	371c      	adds	r7, #28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e077      	b.n	8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a35      	ldr	r2, [pc, #212]	; (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d004      	beq.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a34      	ldr	r2, [pc, #208]	; (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d108      	bne.n	8008c0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a25      	ldr	r2, [pc, #148]	; (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d02c      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c36:	d027      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a22      	ldr	r2, [pc, #136]	; (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d022      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a21      	ldr	r2, [pc, #132]	; (8008ccc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d01d      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a1f      	ldr	r2, [pc, #124]	; (8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d018      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a1a      	ldr	r2, [pc, #104]	; (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d013      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1b      	ldr	r2, [pc, #108]	; (8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00e      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a1a      	ldr	r2, [pc, #104]	; (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d009      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a17      	ldr	r2, [pc, #92]	; (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d10c      	bne.n	8008ca2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	40010000 	.word	0x40010000
 8008cc4:	40010400 	.word	0x40010400
 8008cc8:	40000400 	.word	0x40000400
 8008ccc:	40000800 	.word	0x40000800
 8008cd0:	40000c00 	.word	0x40000c00
 8008cd4:	40001800 	.word	0x40001800
 8008cd8:	40014000 	.word	0x40014000
 8008cdc:	4000e000 	.word	0x4000e000
 8008ce0:	4000e400 	.word	0x4000e400

08008ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e042      	b.n	8008d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d106      	bne.n	8008d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7f8 fd8b 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2224      	movs	r2, #36	; 0x24
 8008d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 0201 	bic.w	r2, r2, #1
 8008d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f82c 	bl	8008d84 <UART_SetConfig>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e022      	b.n	8008d7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fecc 	bl	8009adc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 ff53 	bl	8009c20 <UART_CheckIdleState>
 8008d7a:	4603      	mov	r3, r0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d84:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008d88:	b08e      	sub	sp, #56	; 0x38
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db2:	4313      	orrs	r3, r2
 8008db4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4bc1      	ldr	r3, [pc, #772]	; (80090c4 <UART_SetConfig+0x340>)
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6812      	ldr	r2, [r2, #0]
 8008dc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4ab7      	ldr	r2, [pc, #732]	; (80090c8 <UART_SetConfig+0x344>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d004      	beq.n	8008dfa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008df6:	4313      	orrs	r3, r2
 8008df8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	4bb2      	ldr	r3, [pc, #712]	; (80090cc <UART_SetConfig+0x348>)
 8008e02:	4013      	ands	r3, r2
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6812      	ldr	r2, [r2, #0]
 8008e08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	f023 010f 	bic.w	r1, r3, #15
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4aa9      	ldr	r2, [pc, #676]	; (80090d0 <UART_SetConfig+0x34c>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d177      	bne.n	8008f1e <UART_SetConfig+0x19a>
 8008e2e:	4ba9      	ldr	r3, [pc, #676]	; (80090d4 <UART_SetConfig+0x350>)
 8008e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e36:	2b28      	cmp	r3, #40	; 0x28
 8008e38:	d86c      	bhi.n	8008f14 <UART_SetConfig+0x190>
 8008e3a:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <UART_SetConfig+0xbc>)
 8008e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e40:	08008ee5 	.word	0x08008ee5
 8008e44:	08008f15 	.word	0x08008f15
 8008e48:	08008f15 	.word	0x08008f15
 8008e4c:	08008f15 	.word	0x08008f15
 8008e50:	08008f15 	.word	0x08008f15
 8008e54:	08008f15 	.word	0x08008f15
 8008e58:	08008f15 	.word	0x08008f15
 8008e5c:	08008f15 	.word	0x08008f15
 8008e60:	08008eed 	.word	0x08008eed
 8008e64:	08008f15 	.word	0x08008f15
 8008e68:	08008f15 	.word	0x08008f15
 8008e6c:	08008f15 	.word	0x08008f15
 8008e70:	08008f15 	.word	0x08008f15
 8008e74:	08008f15 	.word	0x08008f15
 8008e78:	08008f15 	.word	0x08008f15
 8008e7c:	08008f15 	.word	0x08008f15
 8008e80:	08008ef5 	.word	0x08008ef5
 8008e84:	08008f15 	.word	0x08008f15
 8008e88:	08008f15 	.word	0x08008f15
 8008e8c:	08008f15 	.word	0x08008f15
 8008e90:	08008f15 	.word	0x08008f15
 8008e94:	08008f15 	.word	0x08008f15
 8008e98:	08008f15 	.word	0x08008f15
 8008e9c:	08008f15 	.word	0x08008f15
 8008ea0:	08008efd 	.word	0x08008efd
 8008ea4:	08008f15 	.word	0x08008f15
 8008ea8:	08008f15 	.word	0x08008f15
 8008eac:	08008f15 	.word	0x08008f15
 8008eb0:	08008f15 	.word	0x08008f15
 8008eb4:	08008f15 	.word	0x08008f15
 8008eb8:	08008f15 	.word	0x08008f15
 8008ebc:	08008f15 	.word	0x08008f15
 8008ec0:	08008f05 	.word	0x08008f05
 8008ec4:	08008f15 	.word	0x08008f15
 8008ec8:	08008f15 	.word	0x08008f15
 8008ecc:	08008f15 	.word	0x08008f15
 8008ed0:	08008f15 	.word	0x08008f15
 8008ed4:	08008f15 	.word	0x08008f15
 8008ed8:	08008f15 	.word	0x08008f15
 8008edc:	08008f15 	.word	0x08008f15
 8008ee0:	08008f0d 	.word	0x08008f0d
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eea:	e339      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008eec:	2304      	movs	r3, #4
 8008eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ef2:	e335      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008efa:	e331      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008efc:	2310      	movs	r3, #16
 8008efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f02:	e32d      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f04:	2320      	movs	r3, #32
 8008f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f0a:	e329      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f0c:	2340      	movs	r3, #64	; 0x40
 8008f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f12:	e325      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f14:	2380      	movs	r3, #128	; 0x80
 8008f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f1a:	bf00      	nop
 8008f1c:	e320      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a6d      	ldr	r2, [pc, #436]	; (80090d8 <UART_SetConfig+0x354>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d132      	bne.n	8008f8e <UART_SetConfig+0x20a>
 8008f28:	4b6a      	ldr	r3, [pc, #424]	; (80090d4 <UART_SetConfig+0x350>)
 8008f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	2b05      	cmp	r3, #5
 8008f32:	d827      	bhi.n	8008f84 <UART_SetConfig+0x200>
 8008f34:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <UART_SetConfig+0x1b8>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008f55 	.word	0x08008f55
 8008f40:	08008f5d 	.word	0x08008f5d
 8008f44:	08008f65 	.word	0x08008f65
 8008f48:	08008f6d 	.word	0x08008f6d
 8008f4c:	08008f75 	.word	0x08008f75
 8008f50:	08008f7d 	.word	0x08008f7d
 8008f54:	2300      	movs	r3, #0
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	e301      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f5c:	2304      	movs	r3, #4
 8008f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f62:	e2fd      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f64:	2308      	movs	r3, #8
 8008f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6a:	e2f9      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f72:	e2f5      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f74:	2320      	movs	r3, #32
 8008f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7a:	e2f1      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f7c:	2340      	movs	r3, #64	; 0x40
 8008f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f82:	e2ed      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f84:	2380      	movs	r3, #128	; 0x80
 8008f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f8a:	bf00      	nop
 8008f8c:	e2e8      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a52      	ldr	r2, [pc, #328]	; (80090dc <UART_SetConfig+0x358>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d132      	bne.n	8008ffe <UART_SetConfig+0x27a>
 8008f98:	4b4e      	ldr	r3, [pc, #312]	; (80090d4 <UART_SetConfig+0x350>)
 8008f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	2b05      	cmp	r3, #5
 8008fa2:	d827      	bhi.n	8008ff4 <UART_SetConfig+0x270>
 8008fa4:	a201      	add	r2, pc, #4	; (adr r2, 8008fac <UART_SetConfig+0x228>)
 8008fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008faa:	bf00      	nop
 8008fac:	08008fc5 	.word	0x08008fc5
 8008fb0:	08008fcd 	.word	0x08008fcd
 8008fb4:	08008fd5 	.word	0x08008fd5
 8008fb8:	08008fdd 	.word	0x08008fdd
 8008fbc:	08008fe5 	.word	0x08008fe5
 8008fc0:	08008fed 	.word	0x08008fed
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fca:	e2c9      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008fcc:	2304      	movs	r3, #4
 8008fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd2:	e2c5      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008fd4:	2308      	movs	r3, #8
 8008fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fda:	e2c1      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008fdc:	2310      	movs	r3, #16
 8008fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe2:	e2bd      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008fe4:	2320      	movs	r3, #32
 8008fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fea:	e2b9      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008fec:	2340      	movs	r3, #64	; 0x40
 8008fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff2:	e2b5      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008ff4:	2380      	movs	r3, #128	; 0x80
 8008ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ffa:	bf00      	nop
 8008ffc:	e2b0      	b.n	8009560 <UART_SetConfig+0x7dc>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a37      	ldr	r2, [pc, #220]	; (80090e0 <UART_SetConfig+0x35c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d132      	bne.n	800906e <UART_SetConfig+0x2ea>
 8009008:	4b32      	ldr	r3, [pc, #200]	; (80090d4 <UART_SetConfig+0x350>)
 800900a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900c:	f003 0307 	and.w	r3, r3, #7
 8009010:	2b05      	cmp	r3, #5
 8009012:	d827      	bhi.n	8009064 <UART_SetConfig+0x2e0>
 8009014:	a201      	add	r2, pc, #4	; (adr r2, 800901c <UART_SetConfig+0x298>)
 8009016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901a:	bf00      	nop
 800901c:	08009035 	.word	0x08009035
 8009020:	0800903d 	.word	0x0800903d
 8009024:	08009045 	.word	0x08009045
 8009028:	0800904d 	.word	0x0800904d
 800902c:	08009055 	.word	0x08009055
 8009030:	0800905d 	.word	0x0800905d
 8009034:	2300      	movs	r3, #0
 8009036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903a:	e291      	b.n	8009560 <UART_SetConfig+0x7dc>
 800903c:	2304      	movs	r3, #4
 800903e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009042:	e28d      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009044:	2308      	movs	r3, #8
 8009046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904a:	e289      	b.n	8009560 <UART_SetConfig+0x7dc>
 800904c:	2310      	movs	r3, #16
 800904e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009052:	e285      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009054:	2320      	movs	r3, #32
 8009056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905a:	e281      	b.n	8009560 <UART_SetConfig+0x7dc>
 800905c:	2340      	movs	r3, #64	; 0x40
 800905e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009062:	e27d      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009064:	2380      	movs	r3, #128	; 0x80
 8009066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800906a:	bf00      	nop
 800906c:	e278      	b.n	8009560 <UART_SetConfig+0x7dc>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a1c      	ldr	r2, [pc, #112]	; (80090e4 <UART_SetConfig+0x360>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d144      	bne.n	8009102 <UART_SetConfig+0x37e>
 8009078:	4b16      	ldr	r3, [pc, #88]	; (80090d4 <UART_SetConfig+0x350>)
 800907a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907c:	f003 0307 	and.w	r3, r3, #7
 8009080:	2b05      	cmp	r3, #5
 8009082:	d839      	bhi.n	80090f8 <UART_SetConfig+0x374>
 8009084:	a201      	add	r2, pc, #4	; (adr r2, 800908c <UART_SetConfig+0x308>)
 8009086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908a:	bf00      	nop
 800908c:	080090a5 	.word	0x080090a5
 8009090:	080090ad 	.word	0x080090ad
 8009094:	080090b5 	.word	0x080090b5
 8009098:	080090bd 	.word	0x080090bd
 800909c:	080090e9 	.word	0x080090e9
 80090a0:	080090f1 	.word	0x080090f1
 80090a4:	2300      	movs	r3, #0
 80090a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090aa:	e259      	b.n	8009560 <UART_SetConfig+0x7dc>
 80090ac:	2304      	movs	r3, #4
 80090ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b2:	e255      	b.n	8009560 <UART_SetConfig+0x7dc>
 80090b4:	2308      	movs	r3, #8
 80090b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ba:	e251      	b.n	8009560 <UART_SetConfig+0x7dc>
 80090bc:	2310      	movs	r3, #16
 80090be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c2:	e24d      	b.n	8009560 <UART_SetConfig+0x7dc>
 80090c4:	cfff69f3 	.word	0xcfff69f3
 80090c8:	58000c00 	.word	0x58000c00
 80090cc:	11fff4ff 	.word	0x11fff4ff
 80090d0:	40011000 	.word	0x40011000
 80090d4:	58024400 	.word	0x58024400
 80090d8:	40004400 	.word	0x40004400
 80090dc:	40004800 	.word	0x40004800
 80090e0:	40004c00 	.word	0x40004c00
 80090e4:	40005000 	.word	0x40005000
 80090e8:	2320      	movs	r3, #32
 80090ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ee:	e237      	b.n	8009560 <UART_SetConfig+0x7dc>
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090f6:	e233      	b.n	8009560 <UART_SetConfig+0x7dc>
 80090f8:	2380      	movs	r3, #128	; 0x80
 80090fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090fe:	bf00      	nop
 8009100:	e22e      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4ab5      	ldr	r2, [pc, #724]	; (80093dc <UART_SetConfig+0x658>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d178      	bne.n	80091fe <UART_SetConfig+0x47a>
 800910c:	4bb4      	ldr	r3, [pc, #720]	; (80093e0 <UART_SetConfig+0x65c>)
 800910e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009114:	2b28      	cmp	r3, #40	; 0x28
 8009116:	d86d      	bhi.n	80091f4 <UART_SetConfig+0x470>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <UART_SetConfig+0x39c>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	080091c5 	.word	0x080091c5
 8009124:	080091f5 	.word	0x080091f5
 8009128:	080091f5 	.word	0x080091f5
 800912c:	080091f5 	.word	0x080091f5
 8009130:	080091f5 	.word	0x080091f5
 8009134:	080091f5 	.word	0x080091f5
 8009138:	080091f5 	.word	0x080091f5
 800913c:	080091f5 	.word	0x080091f5
 8009140:	080091cd 	.word	0x080091cd
 8009144:	080091f5 	.word	0x080091f5
 8009148:	080091f5 	.word	0x080091f5
 800914c:	080091f5 	.word	0x080091f5
 8009150:	080091f5 	.word	0x080091f5
 8009154:	080091f5 	.word	0x080091f5
 8009158:	080091f5 	.word	0x080091f5
 800915c:	080091f5 	.word	0x080091f5
 8009160:	080091d5 	.word	0x080091d5
 8009164:	080091f5 	.word	0x080091f5
 8009168:	080091f5 	.word	0x080091f5
 800916c:	080091f5 	.word	0x080091f5
 8009170:	080091f5 	.word	0x080091f5
 8009174:	080091f5 	.word	0x080091f5
 8009178:	080091f5 	.word	0x080091f5
 800917c:	080091f5 	.word	0x080091f5
 8009180:	080091dd 	.word	0x080091dd
 8009184:	080091f5 	.word	0x080091f5
 8009188:	080091f5 	.word	0x080091f5
 800918c:	080091f5 	.word	0x080091f5
 8009190:	080091f5 	.word	0x080091f5
 8009194:	080091f5 	.word	0x080091f5
 8009198:	080091f5 	.word	0x080091f5
 800919c:	080091f5 	.word	0x080091f5
 80091a0:	080091e5 	.word	0x080091e5
 80091a4:	080091f5 	.word	0x080091f5
 80091a8:	080091f5 	.word	0x080091f5
 80091ac:	080091f5 	.word	0x080091f5
 80091b0:	080091f5 	.word	0x080091f5
 80091b4:	080091f5 	.word	0x080091f5
 80091b8:	080091f5 	.word	0x080091f5
 80091bc:	080091f5 	.word	0x080091f5
 80091c0:	080091ed 	.word	0x080091ed
 80091c4:	2301      	movs	r3, #1
 80091c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ca:	e1c9      	b.n	8009560 <UART_SetConfig+0x7dc>
 80091cc:	2304      	movs	r3, #4
 80091ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d2:	e1c5      	b.n	8009560 <UART_SetConfig+0x7dc>
 80091d4:	2308      	movs	r3, #8
 80091d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091da:	e1c1      	b.n	8009560 <UART_SetConfig+0x7dc>
 80091dc:	2310      	movs	r3, #16
 80091de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091e2:	e1bd      	b.n	8009560 <UART_SetConfig+0x7dc>
 80091e4:	2320      	movs	r3, #32
 80091e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ea:	e1b9      	b.n	8009560 <UART_SetConfig+0x7dc>
 80091ec:	2340      	movs	r3, #64	; 0x40
 80091ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f2:	e1b5      	b.n	8009560 <UART_SetConfig+0x7dc>
 80091f4:	2380      	movs	r3, #128	; 0x80
 80091f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091fa:	bf00      	nop
 80091fc:	e1b0      	b.n	8009560 <UART_SetConfig+0x7dc>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a78      	ldr	r2, [pc, #480]	; (80093e4 <UART_SetConfig+0x660>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d132      	bne.n	800926e <UART_SetConfig+0x4ea>
 8009208:	4b75      	ldr	r3, [pc, #468]	; (80093e0 <UART_SetConfig+0x65c>)
 800920a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	2b05      	cmp	r3, #5
 8009212:	d827      	bhi.n	8009264 <UART_SetConfig+0x4e0>
 8009214:	a201      	add	r2, pc, #4	; (adr r2, 800921c <UART_SetConfig+0x498>)
 8009216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921a:	bf00      	nop
 800921c:	08009235 	.word	0x08009235
 8009220:	0800923d 	.word	0x0800923d
 8009224:	08009245 	.word	0x08009245
 8009228:	0800924d 	.word	0x0800924d
 800922c:	08009255 	.word	0x08009255
 8009230:	0800925d 	.word	0x0800925d
 8009234:	2300      	movs	r3, #0
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e191      	b.n	8009560 <UART_SetConfig+0x7dc>
 800923c:	2304      	movs	r3, #4
 800923e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009242:	e18d      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009244:	2308      	movs	r3, #8
 8009246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800924a:	e189      	b.n	8009560 <UART_SetConfig+0x7dc>
 800924c:	2310      	movs	r3, #16
 800924e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009252:	e185      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009254:	2320      	movs	r3, #32
 8009256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800925a:	e181      	b.n	8009560 <UART_SetConfig+0x7dc>
 800925c:	2340      	movs	r3, #64	; 0x40
 800925e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009262:	e17d      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009264:	2380      	movs	r3, #128	; 0x80
 8009266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800926a:	bf00      	nop
 800926c:	e178      	b.n	8009560 <UART_SetConfig+0x7dc>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a5d      	ldr	r2, [pc, #372]	; (80093e8 <UART_SetConfig+0x664>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d132      	bne.n	80092de <UART_SetConfig+0x55a>
 8009278:	4b59      	ldr	r3, [pc, #356]	; (80093e0 <UART_SetConfig+0x65c>)
 800927a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	2b05      	cmp	r3, #5
 8009282:	d827      	bhi.n	80092d4 <UART_SetConfig+0x550>
 8009284:	a201      	add	r2, pc, #4	; (adr r2, 800928c <UART_SetConfig+0x508>)
 8009286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928a:	bf00      	nop
 800928c:	080092a5 	.word	0x080092a5
 8009290:	080092ad 	.word	0x080092ad
 8009294:	080092b5 	.word	0x080092b5
 8009298:	080092bd 	.word	0x080092bd
 800929c:	080092c5 	.word	0x080092c5
 80092a0:	080092cd 	.word	0x080092cd
 80092a4:	2300      	movs	r3, #0
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092aa:	e159      	b.n	8009560 <UART_SetConfig+0x7dc>
 80092ac:	2304      	movs	r3, #4
 80092ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b2:	e155      	b.n	8009560 <UART_SetConfig+0x7dc>
 80092b4:	2308      	movs	r3, #8
 80092b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ba:	e151      	b.n	8009560 <UART_SetConfig+0x7dc>
 80092bc:	2310      	movs	r3, #16
 80092be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092c2:	e14d      	b.n	8009560 <UART_SetConfig+0x7dc>
 80092c4:	2320      	movs	r3, #32
 80092c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ca:	e149      	b.n	8009560 <UART_SetConfig+0x7dc>
 80092cc:	2340      	movs	r3, #64	; 0x40
 80092ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092d2:	e145      	b.n	8009560 <UART_SetConfig+0x7dc>
 80092d4:	2380      	movs	r3, #128	; 0x80
 80092d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092da:	bf00      	nop
 80092dc:	e140      	b.n	8009560 <UART_SetConfig+0x7dc>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a42      	ldr	r2, [pc, #264]	; (80093ec <UART_SetConfig+0x668>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	f040 8083 	bne.w	80093f0 <UART_SetConfig+0x66c>
 80092ea:	4b3d      	ldr	r3, [pc, #244]	; (80093e0 <UART_SetConfig+0x65c>)
 80092ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092f2:	2b28      	cmp	r3, #40	; 0x28
 80092f4:	d86c      	bhi.n	80093d0 <UART_SetConfig+0x64c>
 80092f6:	a201      	add	r2, pc, #4	; (adr r2, 80092fc <UART_SetConfig+0x578>)
 80092f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fc:	080093a1 	.word	0x080093a1
 8009300:	080093d1 	.word	0x080093d1
 8009304:	080093d1 	.word	0x080093d1
 8009308:	080093d1 	.word	0x080093d1
 800930c:	080093d1 	.word	0x080093d1
 8009310:	080093d1 	.word	0x080093d1
 8009314:	080093d1 	.word	0x080093d1
 8009318:	080093d1 	.word	0x080093d1
 800931c:	080093a9 	.word	0x080093a9
 8009320:	080093d1 	.word	0x080093d1
 8009324:	080093d1 	.word	0x080093d1
 8009328:	080093d1 	.word	0x080093d1
 800932c:	080093d1 	.word	0x080093d1
 8009330:	080093d1 	.word	0x080093d1
 8009334:	080093d1 	.word	0x080093d1
 8009338:	080093d1 	.word	0x080093d1
 800933c:	080093b1 	.word	0x080093b1
 8009340:	080093d1 	.word	0x080093d1
 8009344:	080093d1 	.word	0x080093d1
 8009348:	080093d1 	.word	0x080093d1
 800934c:	080093d1 	.word	0x080093d1
 8009350:	080093d1 	.word	0x080093d1
 8009354:	080093d1 	.word	0x080093d1
 8009358:	080093d1 	.word	0x080093d1
 800935c:	080093b9 	.word	0x080093b9
 8009360:	080093d1 	.word	0x080093d1
 8009364:	080093d1 	.word	0x080093d1
 8009368:	080093d1 	.word	0x080093d1
 800936c:	080093d1 	.word	0x080093d1
 8009370:	080093d1 	.word	0x080093d1
 8009374:	080093d1 	.word	0x080093d1
 8009378:	080093d1 	.word	0x080093d1
 800937c:	080093c1 	.word	0x080093c1
 8009380:	080093d1 	.word	0x080093d1
 8009384:	080093d1 	.word	0x080093d1
 8009388:	080093d1 	.word	0x080093d1
 800938c:	080093d1 	.word	0x080093d1
 8009390:	080093d1 	.word	0x080093d1
 8009394:	080093d1 	.word	0x080093d1
 8009398:	080093d1 	.word	0x080093d1
 800939c:	080093c9 	.word	0x080093c9
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093a6:	e0db      	b.n	8009560 <UART_SetConfig+0x7dc>
 80093a8:	2304      	movs	r3, #4
 80093aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ae:	e0d7      	b.n	8009560 <UART_SetConfig+0x7dc>
 80093b0:	2308      	movs	r3, #8
 80093b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093b6:	e0d3      	b.n	8009560 <UART_SetConfig+0x7dc>
 80093b8:	2310      	movs	r3, #16
 80093ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093be:	e0cf      	b.n	8009560 <UART_SetConfig+0x7dc>
 80093c0:	2320      	movs	r3, #32
 80093c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093c6:	e0cb      	b.n	8009560 <UART_SetConfig+0x7dc>
 80093c8:	2340      	movs	r3, #64	; 0x40
 80093ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ce:	e0c7      	b.n	8009560 <UART_SetConfig+0x7dc>
 80093d0:	2380      	movs	r3, #128	; 0x80
 80093d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d6:	bf00      	nop
 80093d8:	e0c2      	b.n	8009560 <UART_SetConfig+0x7dc>
 80093da:	bf00      	nop
 80093dc:	40011400 	.word	0x40011400
 80093e0:	58024400 	.word	0x58024400
 80093e4:	40007800 	.word	0x40007800
 80093e8:	40007c00 	.word	0x40007c00
 80093ec:	40011800 	.word	0x40011800
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4ab2      	ldr	r2, [pc, #712]	; (80096c0 <UART_SetConfig+0x93c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d177      	bne.n	80094ea <UART_SetConfig+0x766>
 80093fa:	4bb2      	ldr	r3, [pc, #712]	; (80096c4 <UART_SetConfig+0x940>)
 80093fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009402:	2b28      	cmp	r3, #40	; 0x28
 8009404:	d86c      	bhi.n	80094e0 <UART_SetConfig+0x75c>
 8009406:	a201      	add	r2, pc, #4	; (adr r2, 800940c <UART_SetConfig+0x688>)
 8009408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940c:	080094b1 	.word	0x080094b1
 8009410:	080094e1 	.word	0x080094e1
 8009414:	080094e1 	.word	0x080094e1
 8009418:	080094e1 	.word	0x080094e1
 800941c:	080094e1 	.word	0x080094e1
 8009420:	080094e1 	.word	0x080094e1
 8009424:	080094e1 	.word	0x080094e1
 8009428:	080094e1 	.word	0x080094e1
 800942c:	080094b9 	.word	0x080094b9
 8009430:	080094e1 	.word	0x080094e1
 8009434:	080094e1 	.word	0x080094e1
 8009438:	080094e1 	.word	0x080094e1
 800943c:	080094e1 	.word	0x080094e1
 8009440:	080094e1 	.word	0x080094e1
 8009444:	080094e1 	.word	0x080094e1
 8009448:	080094e1 	.word	0x080094e1
 800944c:	080094c1 	.word	0x080094c1
 8009450:	080094e1 	.word	0x080094e1
 8009454:	080094e1 	.word	0x080094e1
 8009458:	080094e1 	.word	0x080094e1
 800945c:	080094e1 	.word	0x080094e1
 8009460:	080094e1 	.word	0x080094e1
 8009464:	080094e1 	.word	0x080094e1
 8009468:	080094e1 	.word	0x080094e1
 800946c:	080094c9 	.word	0x080094c9
 8009470:	080094e1 	.word	0x080094e1
 8009474:	080094e1 	.word	0x080094e1
 8009478:	080094e1 	.word	0x080094e1
 800947c:	080094e1 	.word	0x080094e1
 8009480:	080094e1 	.word	0x080094e1
 8009484:	080094e1 	.word	0x080094e1
 8009488:	080094e1 	.word	0x080094e1
 800948c:	080094d1 	.word	0x080094d1
 8009490:	080094e1 	.word	0x080094e1
 8009494:	080094e1 	.word	0x080094e1
 8009498:	080094e1 	.word	0x080094e1
 800949c:	080094e1 	.word	0x080094e1
 80094a0:	080094e1 	.word	0x080094e1
 80094a4:	080094e1 	.word	0x080094e1
 80094a8:	080094e1 	.word	0x080094e1
 80094ac:	080094d9 	.word	0x080094d9
 80094b0:	2301      	movs	r3, #1
 80094b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b6:	e053      	b.n	8009560 <UART_SetConfig+0x7dc>
 80094b8:	2304      	movs	r3, #4
 80094ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094be:	e04f      	b.n	8009560 <UART_SetConfig+0x7dc>
 80094c0:	2308      	movs	r3, #8
 80094c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c6:	e04b      	b.n	8009560 <UART_SetConfig+0x7dc>
 80094c8:	2310      	movs	r3, #16
 80094ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ce:	e047      	b.n	8009560 <UART_SetConfig+0x7dc>
 80094d0:	2320      	movs	r3, #32
 80094d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d6:	e043      	b.n	8009560 <UART_SetConfig+0x7dc>
 80094d8:	2340      	movs	r3, #64	; 0x40
 80094da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094de:	e03f      	b.n	8009560 <UART_SetConfig+0x7dc>
 80094e0:	2380      	movs	r3, #128	; 0x80
 80094e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e6:	bf00      	nop
 80094e8:	e03a      	b.n	8009560 <UART_SetConfig+0x7dc>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a76      	ldr	r2, [pc, #472]	; (80096c8 <UART_SetConfig+0x944>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d132      	bne.n	800955a <UART_SetConfig+0x7d6>
 80094f4:	4b73      	ldr	r3, [pc, #460]	; (80096c4 <UART_SetConfig+0x940>)
 80094f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f8:	f003 0307 	and.w	r3, r3, #7
 80094fc:	2b05      	cmp	r3, #5
 80094fe:	d827      	bhi.n	8009550 <UART_SetConfig+0x7cc>
 8009500:	a201      	add	r2, pc, #4	; (adr r2, 8009508 <UART_SetConfig+0x784>)
 8009502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009506:	bf00      	nop
 8009508:	08009521 	.word	0x08009521
 800950c:	08009529 	.word	0x08009529
 8009510:	08009531 	.word	0x08009531
 8009514:	08009539 	.word	0x08009539
 8009518:	08009541 	.word	0x08009541
 800951c:	08009549 	.word	0x08009549
 8009520:	2302      	movs	r3, #2
 8009522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009526:	e01b      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009528:	2304      	movs	r3, #4
 800952a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800952e:	e017      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009530:	2308      	movs	r3, #8
 8009532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009536:	e013      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009538:	2310      	movs	r3, #16
 800953a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800953e:	e00f      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009540:	2320      	movs	r3, #32
 8009542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009546:	e00b      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009548:	2340      	movs	r3, #64	; 0x40
 800954a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800954e:	e007      	b.n	8009560 <UART_SetConfig+0x7dc>
 8009550:	2380      	movs	r3, #128	; 0x80
 8009552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009556:	bf00      	nop
 8009558:	e002      	b.n	8009560 <UART_SetConfig+0x7dc>
 800955a:	2380      	movs	r3, #128	; 0x80
 800955c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a58      	ldr	r2, [pc, #352]	; (80096c8 <UART_SetConfig+0x944>)
 8009566:	4293      	cmp	r3, r2
 8009568:	f040 80b6 	bne.w	80096d8 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800956c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009570:	2b08      	cmp	r3, #8
 8009572:	d019      	beq.n	80095a8 <UART_SetConfig+0x824>
 8009574:	2b08      	cmp	r3, #8
 8009576:	dc04      	bgt.n	8009582 <UART_SetConfig+0x7fe>
 8009578:	2b02      	cmp	r3, #2
 800957a:	d009      	beq.n	8009590 <UART_SetConfig+0x80c>
 800957c:	2b04      	cmp	r3, #4
 800957e:	d00b      	beq.n	8009598 <UART_SetConfig+0x814>
 8009580:	e034      	b.n	80095ec <UART_SetConfig+0x868>
 8009582:	2b20      	cmp	r3, #32
 8009584:	d02b      	beq.n	80095de <UART_SetConfig+0x85a>
 8009586:	2b40      	cmp	r3, #64	; 0x40
 8009588:	d02c      	beq.n	80095e4 <UART_SetConfig+0x860>
 800958a:	2b10      	cmp	r3, #16
 800958c:	d014      	beq.n	80095b8 <UART_SetConfig+0x834>
 800958e:	e02d      	b.n	80095ec <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009590:	f7fb fe8e 	bl	80052b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009594:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009596:	e02f      	b.n	80095f8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009598:	f107 0314 	add.w	r3, r7, #20
 800959c:	4618      	mov	r0, r3
 800959e:	f7fb fe9d 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095a6:	e027      	b.n	80095f8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095a8:	f107 0308 	add.w	r3, r7, #8
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fb ffe1 	bl	8005574 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095b6:	e01f      	b.n	80095f8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095b8:	4b42      	ldr	r3, [pc, #264]	; (80096c4 <UART_SetConfig+0x940>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d009      	beq.n	80095d8 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095c4:	4b3f      	ldr	r3, [pc, #252]	; (80096c4 <UART_SetConfig+0x940>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	08db      	lsrs	r3, r3, #3
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	4a3f      	ldr	r2, [pc, #252]	; (80096cc <UART_SetConfig+0x948>)
 80095d0:	fa22 f303 	lsr.w	r3, r2, r3
 80095d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095d6:	e00f      	b.n	80095f8 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 80095d8:	4b3c      	ldr	r3, [pc, #240]	; (80096cc <UART_SetConfig+0x948>)
 80095da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095dc:	e00c      	b.n	80095f8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095de:	4b3c      	ldr	r3, [pc, #240]	; (80096d0 <UART_SetConfig+0x94c>)
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095e2:	e009      	b.n	80095f8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095ea:	e005      	b.n	80095f8 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80095f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 8251 	beq.w	8009aa2 <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	4a33      	ldr	r2, [pc, #204]	; (80096d4 <UART_SetConfig+0x950>)
 8009606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800960a:	461a      	mov	r2, r3
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009612:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	4613      	mov	r3, r2
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	4413      	add	r3, r2
 800961e:	6a3a      	ldr	r2, [r7, #32]
 8009620:	429a      	cmp	r2, r3
 8009622:	d305      	bcc.n	8009630 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800962a:	6a3a      	ldr	r2, [r7, #32]
 800962c:	429a      	cmp	r2, r3
 800962e:	d903      	bls.n	8009638 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009636:	e234      	b.n	8009aa2 <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	4618      	mov	r0, r3
 800963c:	f04f 0100 	mov.w	r1, #0
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	4a23      	ldr	r2, [pc, #140]	; (80096d4 <UART_SetConfig+0x950>)
 8009646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800964a:	b29b      	uxth	r3, r3
 800964c:	f04f 0400 	mov.w	r4, #0
 8009650:	461a      	mov	r2, r3
 8009652:	4623      	mov	r3, r4
 8009654:	f7f6 fe5a 	bl	800030c <__aeabi_uldivmod>
 8009658:	4603      	mov	r3, r0
 800965a:	460c      	mov	r4, r1
 800965c:	4619      	mov	r1, r3
 800965e:	4622      	mov	r2, r4
 8009660:	f04f 0300 	mov.w	r3, #0
 8009664:	f04f 0400 	mov.w	r4, #0
 8009668:	0214      	lsls	r4, r2, #8
 800966a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800966e:	020b      	lsls	r3, r1, #8
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	6852      	ldr	r2, [r2, #4]
 8009674:	0852      	lsrs	r2, r2, #1
 8009676:	4611      	mov	r1, r2
 8009678:	f04f 0200 	mov.w	r2, #0
 800967c:	eb13 0b01 	adds.w	fp, r3, r1
 8009680:	eb44 0c02 	adc.w	ip, r4, r2
 8009684:	4658      	mov	r0, fp
 8009686:	4661      	mov	r1, ip
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f04f 0400 	mov.w	r4, #0
 8009690:	461a      	mov	r2, r3
 8009692:	4623      	mov	r3, r4
 8009694:	f7f6 fe3a 	bl	800030c <__aeabi_uldivmod>
 8009698:	4603      	mov	r3, r0
 800969a:	460c      	mov	r4, r1
 800969c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096a4:	d308      	bcc.n	80096b8 <UART_SetConfig+0x934>
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ac:	d204      	bcs.n	80096b8 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b4:	60da      	str	r2, [r3, #12]
 80096b6:	e1f4      	b.n	8009aa2 <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80096be:	e1f0      	b.n	8009aa2 <UART_SetConfig+0xd1e>
 80096c0:	40011c00 	.word	0x40011c00
 80096c4:	58024400 	.word	0x58024400
 80096c8:	58000c00 	.word	0x58000c00
 80096cc:	03d09000 	.word	0x03d09000
 80096d0:	003d0900 	.word	0x003d0900
 80096d4:	0800b238 	.word	0x0800b238
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e0:	f040 80f8 	bne.w	80098d4 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 80096e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80096e8:	2b40      	cmp	r3, #64	; 0x40
 80096ea:	f200 80b7 	bhi.w	800985c <UART_SetConfig+0xad8>
 80096ee:	a201      	add	r2, pc, #4	; (adr r2, 80096f4 <UART_SetConfig+0x970>)
 80096f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f4:	080097f9 	.word	0x080097f9
 80096f8:	08009801 	.word	0x08009801
 80096fc:	0800985d 	.word	0x0800985d
 8009700:	0800985d 	.word	0x0800985d
 8009704:	08009809 	.word	0x08009809
 8009708:	0800985d 	.word	0x0800985d
 800970c:	0800985d 	.word	0x0800985d
 8009710:	0800985d 	.word	0x0800985d
 8009714:	08009819 	.word	0x08009819
 8009718:	0800985d 	.word	0x0800985d
 800971c:	0800985d 	.word	0x0800985d
 8009720:	0800985d 	.word	0x0800985d
 8009724:	0800985d 	.word	0x0800985d
 8009728:	0800985d 	.word	0x0800985d
 800972c:	0800985d 	.word	0x0800985d
 8009730:	0800985d 	.word	0x0800985d
 8009734:	08009829 	.word	0x08009829
 8009738:	0800985d 	.word	0x0800985d
 800973c:	0800985d 	.word	0x0800985d
 8009740:	0800985d 	.word	0x0800985d
 8009744:	0800985d 	.word	0x0800985d
 8009748:	0800985d 	.word	0x0800985d
 800974c:	0800985d 	.word	0x0800985d
 8009750:	0800985d 	.word	0x0800985d
 8009754:	0800985d 	.word	0x0800985d
 8009758:	0800985d 	.word	0x0800985d
 800975c:	0800985d 	.word	0x0800985d
 8009760:	0800985d 	.word	0x0800985d
 8009764:	0800985d 	.word	0x0800985d
 8009768:	0800985d 	.word	0x0800985d
 800976c:	0800985d 	.word	0x0800985d
 8009770:	0800985d 	.word	0x0800985d
 8009774:	0800984f 	.word	0x0800984f
 8009778:	0800985d 	.word	0x0800985d
 800977c:	0800985d 	.word	0x0800985d
 8009780:	0800985d 	.word	0x0800985d
 8009784:	0800985d 	.word	0x0800985d
 8009788:	0800985d 	.word	0x0800985d
 800978c:	0800985d 	.word	0x0800985d
 8009790:	0800985d 	.word	0x0800985d
 8009794:	0800985d 	.word	0x0800985d
 8009798:	0800985d 	.word	0x0800985d
 800979c:	0800985d 	.word	0x0800985d
 80097a0:	0800985d 	.word	0x0800985d
 80097a4:	0800985d 	.word	0x0800985d
 80097a8:	0800985d 	.word	0x0800985d
 80097ac:	0800985d 	.word	0x0800985d
 80097b0:	0800985d 	.word	0x0800985d
 80097b4:	0800985d 	.word	0x0800985d
 80097b8:	0800985d 	.word	0x0800985d
 80097bc:	0800985d 	.word	0x0800985d
 80097c0:	0800985d 	.word	0x0800985d
 80097c4:	0800985d 	.word	0x0800985d
 80097c8:	0800985d 	.word	0x0800985d
 80097cc:	0800985d 	.word	0x0800985d
 80097d0:	0800985d 	.word	0x0800985d
 80097d4:	0800985d 	.word	0x0800985d
 80097d8:	0800985d 	.word	0x0800985d
 80097dc:	0800985d 	.word	0x0800985d
 80097e0:	0800985d 	.word	0x0800985d
 80097e4:	0800985d 	.word	0x0800985d
 80097e8:	0800985d 	.word	0x0800985d
 80097ec:	0800985d 	.word	0x0800985d
 80097f0:	0800985d 	.word	0x0800985d
 80097f4:	08009855 	.word	0x08009855
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097f8:	f7fa fc66 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 80097fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097fe:	e033      	b.n	8009868 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009800:	f7fa fc78 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
 8009804:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009806:	e02f      	b.n	8009868 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009808:	f107 0314 	add.w	r3, r7, #20
 800980c:	4618      	mov	r0, r3
 800980e:	f7fb fd65 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009816:	e027      	b.n	8009868 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009818:	f107 0308 	add.w	r3, r7, #8
 800981c:	4618      	mov	r0, r3
 800981e:	f7fb fea9 	bl	8005574 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009826:	e01f      	b.n	8009868 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009828:	4ba8      	ldr	r3, [pc, #672]	; (8009acc <UART_SetConfig+0xd48>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0320 	and.w	r3, r3, #32
 8009830:	2b00      	cmp	r3, #0
 8009832:	d009      	beq.n	8009848 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009834:	4ba5      	ldr	r3, [pc, #660]	; (8009acc <UART_SetConfig+0xd48>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	08db      	lsrs	r3, r3, #3
 800983a:	f003 0303 	and.w	r3, r3, #3
 800983e:	4aa4      	ldr	r2, [pc, #656]	; (8009ad0 <UART_SetConfig+0xd4c>)
 8009840:	fa22 f303 	lsr.w	r3, r2, r3
 8009844:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009846:	e00f      	b.n	8009868 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8009848:	4ba1      	ldr	r3, [pc, #644]	; (8009ad0 <UART_SetConfig+0xd4c>)
 800984a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800984c:	e00c      	b.n	8009868 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800984e:	4ba1      	ldr	r3, [pc, #644]	; (8009ad4 <UART_SetConfig+0xd50>)
 8009850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009852:	e009      	b.n	8009868 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009858:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800985a:	e005      	b.n	8009868 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009866:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 8119 	beq.w	8009aa2 <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	4a98      	ldr	r2, [pc, #608]	; (8009ad8 <UART_SetConfig+0xd54>)
 8009876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800987a:	461a      	mov	r2, r3
 800987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009882:	005a      	lsls	r2, r3, #1
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	085b      	lsrs	r3, r3, #1
 800988a:	441a      	add	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	fbb2 f3f3 	udiv	r3, r2, r3
 8009894:	b29b      	uxth	r3, r3
 8009896:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	2b0f      	cmp	r3, #15
 800989c:	d916      	bls.n	80098cc <UART_SetConfig+0xb48>
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098a4:	d212      	bcs.n	80098cc <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	f023 030f 	bic.w	r3, r3, #15
 80098ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	085b      	lsrs	r3, r3, #1
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098be:	4313      	orrs	r3, r2
 80098c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80098c8:	60da      	str	r2, [r3, #12]
 80098ca:	e0ea      	b.n	8009aa2 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80098d2:	e0e6      	b.n	8009aa2 <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	f200 80b7 	bhi.w	8009a4c <UART_SetConfig+0xcc8>
 80098de:	a201      	add	r2, pc, #4	; (adr r2, 80098e4 <UART_SetConfig+0xb60>)
 80098e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e4:	080099e9 	.word	0x080099e9
 80098e8:	080099f1 	.word	0x080099f1
 80098ec:	08009a4d 	.word	0x08009a4d
 80098f0:	08009a4d 	.word	0x08009a4d
 80098f4:	080099f9 	.word	0x080099f9
 80098f8:	08009a4d 	.word	0x08009a4d
 80098fc:	08009a4d 	.word	0x08009a4d
 8009900:	08009a4d 	.word	0x08009a4d
 8009904:	08009a09 	.word	0x08009a09
 8009908:	08009a4d 	.word	0x08009a4d
 800990c:	08009a4d 	.word	0x08009a4d
 8009910:	08009a4d 	.word	0x08009a4d
 8009914:	08009a4d 	.word	0x08009a4d
 8009918:	08009a4d 	.word	0x08009a4d
 800991c:	08009a4d 	.word	0x08009a4d
 8009920:	08009a4d 	.word	0x08009a4d
 8009924:	08009a19 	.word	0x08009a19
 8009928:	08009a4d 	.word	0x08009a4d
 800992c:	08009a4d 	.word	0x08009a4d
 8009930:	08009a4d 	.word	0x08009a4d
 8009934:	08009a4d 	.word	0x08009a4d
 8009938:	08009a4d 	.word	0x08009a4d
 800993c:	08009a4d 	.word	0x08009a4d
 8009940:	08009a4d 	.word	0x08009a4d
 8009944:	08009a4d 	.word	0x08009a4d
 8009948:	08009a4d 	.word	0x08009a4d
 800994c:	08009a4d 	.word	0x08009a4d
 8009950:	08009a4d 	.word	0x08009a4d
 8009954:	08009a4d 	.word	0x08009a4d
 8009958:	08009a4d 	.word	0x08009a4d
 800995c:	08009a4d 	.word	0x08009a4d
 8009960:	08009a4d 	.word	0x08009a4d
 8009964:	08009a3f 	.word	0x08009a3f
 8009968:	08009a4d 	.word	0x08009a4d
 800996c:	08009a4d 	.word	0x08009a4d
 8009970:	08009a4d 	.word	0x08009a4d
 8009974:	08009a4d 	.word	0x08009a4d
 8009978:	08009a4d 	.word	0x08009a4d
 800997c:	08009a4d 	.word	0x08009a4d
 8009980:	08009a4d 	.word	0x08009a4d
 8009984:	08009a4d 	.word	0x08009a4d
 8009988:	08009a4d 	.word	0x08009a4d
 800998c:	08009a4d 	.word	0x08009a4d
 8009990:	08009a4d 	.word	0x08009a4d
 8009994:	08009a4d 	.word	0x08009a4d
 8009998:	08009a4d 	.word	0x08009a4d
 800999c:	08009a4d 	.word	0x08009a4d
 80099a0:	08009a4d 	.word	0x08009a4d
 80099a4:	08009a4d 	.word	0x08009a4d
 80099a8:	08009a4d 	.word	0x08009a4d
 80099ac:	08009a4d 	.word	0x08009a4d
 80099b0:	08009a4d 	.word	0x08009a4d
 80099b4:	08009a4d 	.word	0x08009a4d
 80099b8:	08009a4d 	.word	0x08009a4d
 80099bc:	08009a4d 	.word	0x08009a4d
 80099c0:	08009a4d 	.word	0x08009a4d
 80099c4:	08009a4d 	.word	0x08009a4d
 80099c8:	08009a4d 	.word	0x08009a4d
 80099cc:	08009a4d 	.word	0x08009a4d
 80099d0:	08009a4d 	.word	0x08009a4d
 80099d4:	08009a4d 	.word	0x08009a4d
 80099d8:	08009a4d 	.word	0x08009a4d
 80099dc:	08009a4d 	.word	0x08009a4d
 80099e0:	08009a4d 	.word	0x08009a4d
 80099e4:	08009a45 	.word	0x08009a45
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099e8:	f7fa fb6e 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 80099ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80099ee:	e033      	b.n	8009a58 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099f0:	f7fa fb80 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
 80099f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80099f6:	e02f      	b.n	8009a58 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099f8:	f107 0314 	add.w	r3, r7, #20
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fb fc6d 	bl	80052dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a06:	e027      	b.n	8009a58 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fb fdb1 	bl	8005574 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a16:	e01f      	b.n	8009a58 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a18:	4b2c      	ldr	r3, [pc, #176]	; (8009acc <UART_SetConfig+0xd48>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d009      	beq.n	8009a38 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a24:	4b29      	ldr	r3, [pc, #164]	; (8009acc <UART_SetConfig+0xd48>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	08db      	lsrs	r3, r3, #3
 8009a2a:	f003 0303 	and.w	r3, r3, #3
 8009a2e:	4a28      	ldr	r2, [pc, #160]	; (8009ad0 <UART_SetConfig+0xd4c>)
 8009a30:	fa22 f303 	lsr.w	r3, r2, r3
 8009a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a36:	e00f      	b.n	8009a58 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009a38:	4b25      	ldr	r3, [pc, #148]	; (8009ad0 <UART_SetConfig+0xd4c>)
 8009a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a3c:	e00c      	b.n	8009a58 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a3e:	4b25      	ldr	r3, [pc, #148]	; (8009ad4 <UART_SetConfig+0xd50>)
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a42:	e009      	b.n	8009a58 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a4a:	e005      	b.n	8009a58 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009a56:	bf00      	nop
    }

    if (pclk != 0U)
 8009a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d021      	beq.n	8009aa2 <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	4a1d      	ldr	r2, [pc, #116]	; (8009ad8 <UART_SetConfig+0xd54>)
 8009a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	441a      	add	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	2b0f      	cmp	r3, #15
 8009a88:	d908      	bls.n	8009a9c <UART_SetConfig+0xd18>
 8009a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a90:	d204      	bcs.n	8009a9c <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a98:	60da      	str	r2, [r3, #12]
 8009a9a:	e002      	b.n	8009aa2 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009abe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3738      	adds	r7, #56	; 0x38
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009acc:	58024400 	.word	0x58024400
 8009ad0:	03d09000 	.word	0x03d09000
 8009ad4:	003d0900 	.word	0x003d0900
 8009ad8:	0800b238 	.word	0x0800b238

08009adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2c:	f003 0304 	and.w	r3, r3, #4
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00a      	beq.n	8009b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	f003 0308 	and.w	r3, r3, #8
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b70:	f003 0310 	and.w	r3, r3, #16
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	f003 0320 	and.w	r3, r3, #32
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d01a      	beq.n	8009bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bda:	d10a      	bne.n	8009bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00a      	beq.n	8009c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	430a      	orrs	r2, r1
 8009c12:	605a      	str	r2, [r3, #4]
  }
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009c30:	f7f8 f840 	bl	8001cb4 <HAL_GetTick>
 8009c34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0308 	and.w	r3, r3, #8
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d10e      	bne.n	8009c62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f82c 	bl	8009cb0 <UART_WaitOnFlagUntilTimeout>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e022      	b.n	8009ca8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0304 	and.w	r3, r3, #4
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d10e      	bne.n	8009c8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f816 	bl	8009cb0 <UART_WaitOnFlagUntilTimeout>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e00c      	b.n	8009ca8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2220      	movs	r2, #32
 8009c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cc0:	e062      	b.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cc8:	d05e      	beq.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cca:	f7f7 fff3 	bl	8001cb4 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	69ba      	ldr	r2, [r7, #24]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d302      	bcc.n	8009ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d11d      	bne.n	8009d1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009cee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689a      	ldr	r2, [r3, #8]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f022 0201 	bic.w	r2, r2, #1
 8009cfe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e045      	b.n	8009da8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0304 	and.w	r3, r3, #4
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d02e      	beq.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d38:	d126      	bne.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d52:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	689a      	ldr	r2, [r3, #8]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 0201 	bic.w	r2, r2, #1
 8009d62:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2220      	movs	r2, #32
 8009d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e00f      	b.n	8009da8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69da      	ldr	r2, [r3, #28]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4013      	ands	r3, r2
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	bf0c      	ite	eq
 8009d98:	2301      	moveq	r3, #1
 8009d9a:	2300      	movne	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d08d      	beq.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d101      	bne.n	8009dc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	e027      	b.n	8009e16 <HAL_UARTEx_DisableFifoMode+0x66>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2224      	movs	r2, #36	; 0x24
 8009dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f022 0201 	bic.w	r2, r2, #1
 8009dec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009df4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2220      	movs	r2, #32
 8009e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e02d      	b.n	8009e96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2224      	movs	r2, #36	; 0x24
 8009e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f022 0201 	bic.w	r2, r2, #1
 8009e60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f850 	bl	8009f1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2220      	movs	r2, #32
 8009e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d101      	bne.n	8009eb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	e02d      	b.n	8009f12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2224      	movs	r2, #36	; 0x24
 8009ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f022 0201 	bic.w	r2, r2, #1
 8009edc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f812 	bl	8009f1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2220      	movs	r2, #32
 8009f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
	...

08009f1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b089      	sub	sp, #36	; 0x24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009f24:	4a2f      	ldr	r2, [pc, #188]	; (8009fe4 <UARTEx_SetNbDataToProcess+0xc8>)
 8009f26:	f107 0314 	add.w	r3, r7, #20
 8009f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f2e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009f32:	4a2d      	ldr	r2, [pc, #180]	; (8009fe8 <UARTEx_SetNbDataToProcess+0xcc>)
 8009f34:	f107 030c 	add.w	r3, r7, #12
 8009f38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f3c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d108      	bne.n	8009f5a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f58:	e03d      	b.n	8009fd6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f5a:	2310      	movs	r3, #16
 8009f5c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f5e:	2310      	movs	r3, #16
 8009f60:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	0e5b      	lsrs	r3, r3, #25
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	f003 0307 	and.w	r3, r3, #7
 8009f70:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	0f5b      	lsrs	r3, r3, #29
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 0307 	and.w	r3, r3, #7
 8009f80:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009f82:	7fbb      	ldrb	r3, [r7, #30]
 8009f84:	7f3a      	ldrb	r2, [r7, #28]
 8009f86:	f107 0120 	add.w	r1, r7, #32
 8009f8a:	440a      	add	r2, r1
 8009f8c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009f90:	fb02 f303 	mul.w	r3, r2, r3
 8009f94:	7f3a      	ldrb	r2, [r7, #28]
 8009f96:	f107 0120 	add.w	r1, r7, #32
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009fa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009fac:	7ffb      	ldrb	r3, [r7, #31]
 8009fae:	7f7a      	ldrb	r2, [r7, #29]
 8009fb0:	f107 0120 	add.w	r1, r7, #32
 8009fb4:	440a      	add	r2, r1
 8009fb6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009fba:	fb02 f303 	mul.w	r3, r2, r3
 8009fbe:	7f7a      	ldrb	r2, [r7, #29]
 8009fc0:	f107 0120 	add.w	r1, r7, #32
 8009fc4:	440a      	add	r2, r1
 8009fc6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009fca:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009fd6:	bf00      	nop
 8009fd8:	3724      	adds	r7, #36	; 0x24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	0800b218 	.word	0x0800b218
 8009fe8:	0800b220 	.word	0x0800b220

08009fec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d121      	bne.n	800a042 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4b27      	ldr	r3, [pc, #156]	; (800a0a0 <FMC_SDRAM_Init+0xb4>)
 800a004:	4013      	ands	r3, r2
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	6851      	ldr	r1, [r2, #4]
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	6892      	ldr	r2, [r2, #8]
 800a00e:	4311      	orrs	r1, r2
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	68d2      	ldr	r2, [r2, #12]
 800a014:	4311      	orrs	r1, r2
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	6912      	ldr	r2, [r2, #16]
 800a01a:	4311      	orrs	r1, r2
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	6952      	ldr	r2, [r2, #20]
 800a020:	4311      	orrs	r1, r2
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	6992      	ldr	r2, [r2, #24]
 800a026:	4311      	orrs	r1, r2
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	69d2      	ldr	r2, [r2, #28]
 800a02c:	4311      	orrs	r1, r2
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	6a12      	ldr	r2, [r2, #32]
 800a032:	4311      	orrs	r1, r2
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a038:	430a      	orrs	r2, r1
 800a03a:	431a      	orrs	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	e026      	b.n	800a090 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	69d9      	ldr	r1, [r3, #28]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	4319      	orrs	r1, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	430b      	orrs	r3, r1
 800a05a:	431a      	orrs	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <FMC_SDRAM_Init+0xb4>)
 800a066:	4013      	ands	r3, r2
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	6851      	ldr	r1, [r2, #4]
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	6892      	ldr	r2, [r2, #8]
 800a070:	4311      	orrs	r1, r2
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	68d2      	ldr	r2, [r2, #12]
 800a076:	4311      	orrs	r1, r2
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	6912      	ldr	r2, [r2, #16]
 800a07c:	4311      	orrs	r1, r2
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	6952      	ldr	r2, [r2, #20]
 800a082:	4311      	orrs	r1, r2
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	6992      	ldr	r2, [r2, #24]
 800a088:	430a      	orrs	r2, r1
 800a08a:	431a      	orrs	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	ffff8000 	.word	0xffff8000

0800a0a4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d128      	bne.n	800a108 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	1e59      	subs	r1, r3, #1
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	4319      	orrs	r1, r3
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	021b      	lsls	r3, r3, #8
 800a0d6:	4319      	orrs	r1, r3
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	031b      	lsls	r3, r3, #12
 800a0e0:	4319      	orrs	r1, r3
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	041b      	lsls	r3, r3, #16
 800a0ea:	4319      	orrs	r1, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	051b      	lsls	r3, r3, #20
 800a0f4:	4319      	orrs	r1, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	061b      	lsls	r3, r3, #24
 800a0fe:	430b      	orrs	r3, r1
 800a100:	431a      	orrs	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	609a      	str	r2, [r3, #8]
 800a106:	e02d      	b.n	800a164 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	4b19      	ldr	r3, [pc, #100]	; (800a174 <FMC_SDRAM_Timing_Init+0xd0>)
 800a10e:	4013      	ands	r3, r2
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	68d2      	ldr	r2, [r2, #12]
 800a114:	3a01      	subs	r2, #1
 800a116:	0311      	lsls	r1, r2, #12
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	6952      	ldr	r2, [r2, #20]
 800a11c:	3a01      	subs	r2, #1
 800a11e:	0512      	lsls	r2, r2, #20
 800a120:	430a      	orrs	r2, r1
 800a122:	431a      	orrs	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	1e59      	subs	r1, r3, #1
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	011b      	lsls	r3, r3, #4
 800a13e:	4319      	orrs	r1, r3
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	3b01      	subs	r3, #1
 800a146:	021b      	lsls	r3, r3, #8
 800a148:	4319      	orrs	r1, r3
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	3b01      	subs	r3, #1
 800a150:	041b      	lsls	r3, r3, #16
 800a152:	4319      	orrs	r1, r3
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	3b01      	subs	r3, #1
 800a15a:	061b      	lsls	r3, r3, #24
 800a15c:	430b      	orrs	r3, r1
 800a15e:	431a      	orrs	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	ff0f0fff 	.word	0xff0f0fff

0800a178 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a178:	b084      	sub	sp, #16
 800a17a:	b480      	push	{r7}
 800a17c:	b085      	sub	sp, #20
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	f107 001c 	add.w	r0, r7, #28
 800a186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a18e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a190:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a192:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a196:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a19a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a19e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <SDMMC_Init+0x50>)
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	b004      	add	sp, #16
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	ffc02c00 	.word	0xffc02c00

0800a1cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f043 0203 	orr.w	r2, r3, #3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0303 	and.w	r3, r3, #3
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
	...

0800a248 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a266:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a26c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a272:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4313      	orrs	r3, r2
 800a278:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	4b06      	ldr	r3, [pc, #24]	; (800a298 <SDMMC_SendCommand+0x50>)
 800a280:	4013      	ands	r3, r2
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	431a      	orrs	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	fffee0c0 	.word	0xfffee0c0

0800a29c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	b2db      	uxtb	r3, r3
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3314      	adds	r3, #20
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a302:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a308:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a30e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	4313      	orrs	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	431a      	orrs	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a326:	2300      	movs	r3, #0

}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a342:	2310      	movs	r3, #16
 800a344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a34c:	2300      	movs	r3, #0
 800a34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a356:	f107 0308 	add.w	r3, r7, #8
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff ff73 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a362:	f241 3288 	movw	r2, #5000	; 0x1388
 800a366:	2110      	movs	r1, #16
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 faaf 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a36e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a370:	69fb      	ldr	r3, [r7, #28]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3720      	adds	r7, #32
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b088      	sub	sp, #32
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a388:	2311      	movs	r3, #17
 800a38a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a38c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a392:	2300      	movs	r3, #0
 800a394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a39a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a39c:	f107 0308 	add.w	r3, r7, #8
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff ff50 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a3a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ac:	2111      	movs	r1, #17
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fa8c 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a3b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3720      	adds	r7, #32
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a3ce:	2312      	movs	r3, #18
 800a3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3e2:	f107 0308 	add.w	r3, r7, #8
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff ff2d 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f2:	2112      	movs	r1, #18
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fa69 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a3fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3fc:	69fb      	ldr	r3, [r7, #28]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3720      	adds	r7, #32
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b088      	sub	sp, #32
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a414:	2318      	movs	r3, #24
 800a416:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a41e:	2300      	movs	r3, #0
 800a420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a426:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a428:	f107 0308 	add.w	r3, r7, #8
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff ff0a 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a434:	f241 3288 	movw	r2, #5000	; 0x1388
 800a438:	2118      	movs	r1, #24
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fa46 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a442:	69fb      	ldr	r3, [r7, #28]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3720      	adds	r7, #32
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a45a:	2319      	movs	r3, #25
 800a45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a45e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a464:	2300      	movs	r3, #0
 800a466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a46c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a46e:	f107 0308 	add.w	r3, r7, #8
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff fee7 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a47a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a47e:	2119      	movs	r1, #25
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fa23 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a488:	69fb      	ldr	r3, [r7, #28]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3720      	adds	r7, #32
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a4a0:	230c      	movs	r3, #12
 800a4a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4b2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4cc:	f107 0308 	add.w	r3, r7, #8
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff feb8 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a4d8:	4a0b      	ldr	r2, [pc, #44]	; (800a508 <SDMMC_CmdStopTransfer+0x74>)
 800a4da:	210c      	movs	r1, #12
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f9f5 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a4e2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4f6:	d101      	bne.n	800a4fc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3720      	adds	r7, #32
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	05f5e100 	.word	0x05f5e100

0800a50c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08a      	sub	sp, #40	; 0x28
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a51c:	2307      	movs	r3, #7
 800a51e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a520:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a524:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a526:	2300      	movs	r3, #0
 800a528:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a52a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a52e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a530:	f107 0310 	add.w	r3, r7, #16
 800a534:	4619      	mov	r1, r3
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fe86 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a53c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a540:	2107      	movs	r1, #7
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f9c2 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a548:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3728      	adds	r7, #40	; 0x28
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a560:	2300      	movs	r3, #0
 800a562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a564:	2300      	movs	r3, #0
 800a566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a568:	2300      	movs	r3, #0
 800a56a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a56c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a570:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a572:	f107 0308 	add.w	r3, r7, #8
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff fe65 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f976 	bl	800a870 <SDMMC_GetCmdError>
 800a584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a586:	69fb      	ldr	r3, [r7, #28]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3720      	adds	r7, #32
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a598:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a59c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a59e:	2308      	movs	r3, #8
 800a5a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5b2:	f107 0308 	add.w	r3, r7, #8
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff fe45 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fb78 	bl	800acb4 <SDMMC_GetCmdResp7>
 800a5c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3720      	adds	r7, #32
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b088      	sub	sp, #32
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a5de:	2337      	movs	r3, #55	; 0x37
 800a5e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5f2:	f107 0308 	add.w	r3, r7, #8
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff fe25 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a5fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a602:	2137      	movs	r1, #55	; 0x37
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f961 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a60a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a60c:	69fb      	ldr	r3, [r7, #28]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3720      	adds	r7, #32
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b088      	sub	sp, #32
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a624:	2329      	movs	r3, #41	; 0x29
 800a626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a62c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a636:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a638:	f107 0308 	add.w	r3, r7, #8
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff fe02 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fa7d 	bl	800ab44 <SDMMC_GetCmdResp3>
 800a64a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a64c:	69fb      	ldr	r3, [r7, #28]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3720      	adds	r7, #32
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b088      	sub	sp, #32
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a664:	2306      	movs	r3, #6
 800a666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a66c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a66e:	2300      	movs	r3, #0
 800a670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a678:	f107 0308 	add.w	r3, r7, #8
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7ff fde2 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a684:	f241 3288 	movw	r2, #5000	; 0x1388
 800a688:	2106      	movs	r1, #6
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f91e 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a692:	69fb      	ldr	r3, [r7, #28]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3720      	adds	r7, #32
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a6a8:	2333      	movs	r3, #51	; 0x33
 800a6aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6bc:	f107 0308 	add.w	r3, r7, #8
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7ff fdc0 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6cc:	2133      	movs	r1, #51	; 0x33
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f8fc 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a6d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6d6:	69fb      	ldr	r3, [r7, #28]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3720      	adds	r7, #32
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a6f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a6f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a700:	f107 0308 	add.w	r3, r7, #8
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff fd9e 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f9cf 	bl	800aab0 <SDMMC_GetCmdResp2>
 800a712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a714:	69fb      	ldr	r3, [r7, #28]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b088      	sub	sp, #32
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a72c:	2309      	movs	r3, #9
 800a72e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a730:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a736:	2300      	movs	r3, #0
 800a738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a73a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a73e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4619      	mov	r1, r3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7ff fd7e 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f9af 	bl	800aab0 <SDMMC_GetCmdResp2>
 800a752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a754:	69fb      	ldr	r3, [r7, #28]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3720      	adds	r7, #32
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b088      	sub	sp, #32
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a768:	2300      	movs	r3, #0
 800a76a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a76c:	2303      	movs	r3, #3
 800a76e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a776:	2300      	movs	r3, #0
 800a778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a77a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a77e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a780:	f107 0308 	add.w	r3, r7, #8
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f7ff fd5e 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	2103      	movs	r1, #3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fa17 	bl	800abc4 <SDMMC_GetCmdResp6>
 800a796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a798:	69fb      	ldr	r3, [r7, #28]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3720      	adds	r7, #32
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b088      	sub	sp, #32
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a7b0:	230d      	movs	r3, #13
 800a7b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7c4:	f107 0308 	add.w	r3, r7, #8
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7ff fd3c 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a7d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d4:	210d      	movs	r1, #13
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f878 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a7dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7de:	69fb      	ldr	r3, [r7, #28]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3720      	adds	r7, #32
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b088      	sub	sp, #32
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a7f4:	230d      	movs	r3, #13
 800a7f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7fe:	2300      	movs	r3, #0
 800a800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a808:	f107 0308 	add.w	r3, r7, #8
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7ff fd1a 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a814:	f241 3288 	movw	r2, #5000	; 0x1388
 800a818:	210d      	movs	r1, #13
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f856 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a822:	69fb      	ldr	r3, [r7, #28]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3720      	adds	r7, #32
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800a834:	2300      	movs	r3, #0
 800a836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800a838:	230b      	movs	r3, #11
 800a83a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a83c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a84a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a84c:	f107 0308 	add.w	r3, r7, #8
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff fcf8 	bl	800a248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a858:	f241 3288 	movw	r2, #5000	; 0x1388
 800a85c:	210b      	movs	r1, #11
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f834 	bl	800a8cc <SDMMC_GetCmdResp1>
 800a864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a866:	69fb      	ldr	r3, [r7, #28]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3720      	adds	r7, #32
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a878:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <SDMMC_GetCmdError+0x50>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a11      	ldr	r2, [pc, #68]	; (800a8c4 <SDMMC_GetCmdError+0x54>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	0a5b      	lsrs	r3, r3, #9
 800a884:	f241 3288 	movw	r2, #5000	; 0x1388
 800a888:	fb02 f303 	mul.w	r3, r2, r3
 800a88c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	1e5a      	subs	r2, r3, #1
 800a892:	60fa      	str	r2, [r7, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d102      	bne.n	800a89e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a89c:	e009      	b.n	800a8b2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d0f1      	beq.n	800a88e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a06      	ldr	r2, [pc, #24]	; (800a8c8 <SDMMC_GetCmdError+0x58>)
 800a8ae:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	24000000 	.word	0x24000000
 800a8c4:	10624dd3 	.word	0x10624dd3
 800a8c8:	002000c5 	.word	0x002000c5

0800a8cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b088      	sub	sp, #32
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	607a      	str	r2, [r7, #4]
 800a8d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a8da:	4b70      	ldr	r3, [pc, #448]	; (800aa9c <SDMMC_GetCmdResp1+0x1d0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a70      	ldr	r2, [pc, #448]	; (800aaa0 <SDMMC_GetCmdResp1+0x1d4>)
 800a8e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8e4:	0a5a      	lsrs	r2, r3, #9
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	1e5a      	subs	r2, r3, #1
 800a8f2:	61fa      	str	r2, [r7, #28]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8fc:	e0c9      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a902:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	4b67      	ldr	r3, [pc, #412]	; (800aaa4 <SDMMC_GetCmdResp1+0x1d8>)
 800a908:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0ef      	beq.n	800a8ee <SDMMC_GetCmdResp1+0x22>
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1ea      	bne.n	800a8ee <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b00      	cmp	r3, #0
 800a922:	d004      	beq.n	800a92e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2204      	movs	r2, #4
 800a928:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a92a:	2304      	movs	r3, #4
 800a92c:	e0b1      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a932:	f003 0301 	and.w	r3, r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	d004      	beq.n	800a944 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2201      	movs	r2, #1
 800a93e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a940:	2301      	movs	r3, #1
 800a942:	e0a6      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4a58      	ldr	r2, [pc, #352]	; (800aaa8 <SDMMC_GetCmdResp1+0x1dc>)
 800a948:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f7ff fca6 	bl	800a29c <SDMMC_GetCommandResponse>
 800a950:	4603      	mov	r3, r0
 800a952:	461a      	mov	r2, r3
 800a954:	7afb      	ldrb	r3, [r7, #11]
 800a956:	4293      	cmp	r3, r2
 800a958:	d001      	beq.n	800a95e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e099      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a95e:	2100      	movs	r1, #0
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7ff fca8 	bl	800a2b6 <SDMMC_GetResponse>
 800a966:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	4b50      	ldr	r3, [pc, #320]	; (800aaac <SDMMC_GetCmdResp1+0x1e0>)
 800a96c:	4013      	ands	r3, r2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a972:	2300      	movs	r3, #0
 800a974:	e08d      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	da02      	bge.n	800a982 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a97c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a980:	e087      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a98c:	2340      	movs	r3, #64	; 0x40
 800a98e:	e080      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d001      	beq.n	800a99e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a99a:	2380      	movs	r3, #128	; 0x80
 800a99c:	e079      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a9a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9ac:	e071      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a9b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9bc:	e069      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a9c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9cc:	e061      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a9d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9dc:	e059      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a9e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9ec:	e051      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9fc:	e049      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aa08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa0c:	e041      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aa18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa1c:	e039      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d002      	beq.n	800aa2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aa28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aa2c:	e031      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aa38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa3c:	e029      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aa48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa4c:	e021      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aa58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aa5c:	e019      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aa68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa6c:	e011      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aa78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa7c:	e009      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f003 0308 	and.w	r3, r3, #8
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aa88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aa8c:	e001      	b.n	800aa92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aa8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3720      	adds	r7, #32
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	24000000 	.word	0x24000000
 800aaa0:	10624dd3 	.word	0x10624dd3
 800aaa4:	00200045 	.word	0x00200045
 800aaa8:	002000c5 	.word	0x002000c5
 800aaac:	fdffe008 	.word	0xfdffe008

0800aab0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aab8:	4b1f      	ldr	r3, [pc, #124]	; (800ab38 <SDMMC_GetCmdResp2+0x88>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a1f      	ldr	r2, [pc, #124]	; (800ab3c <SDMMC_GetCmdResp2+0x8c>)
 800aabe:	fba2 2303 	umull	r2, r3, r2, r3
 800aac2:	0a5b      	lsrs	r3, r3, #9
 800aac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac8:	fb02 f303 	mul.w	r3, r2, r3
 800aacc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	1e5a      	subs	r2, r3, #1
 800aad2:	60fa      	str	r2, [r7, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d102      	bne.n	800aade <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aadc:	e026      	b.n	800ab2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d0ef      	beq.n	800aace <SDMMC_GetCmdResp2+0x1e>
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1ea      	bne.n	800aace <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d004      	beq.n	800ab0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2204      	movs	r2, #4
 800ab08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab0a:	2304      	movs	r3, #4
 800ab0c:	e00e      	b.n	800ab2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d004      	beq.n	800ab24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab20:	2301      	movs	r3, #1
 800ab22:	e003      	b.n	800ab2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a06      	ldr	r2, [pc, #24]	; (800ab40 <SDMMC_GetCmdResp2+0x90>)
 800ab28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	24000000 	.word	0x24000000
 800ab3c:	10624dd3 	.word	0x10624dd3
 800ab40:	002000c5 	.word	0x002000c5

0800ab44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab4c:	4b1a      	ldr	r3, [pc, #104]	; (800abb8 <SDMMC_GetCmdResp3+0x74>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a1a      	ldr	r2, [pc, #104]	; (800abbc <SDMMC_GetCmdResp3+0x78>)
 800ab52:	fba2 2303 	umull	r2, r3, r2, r3
 800ab56:	0a5b      	lsrs	r3, r3, #9
 800ab58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab5c:	fb02 f303 	mul.w	r3, r2, r3
 800ab60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	1e5a      	subs	r2, r3, #1
 800ab66:	60fa      	str	r2, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d102      	bne.n	800ab72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab70:	e01b      	b.n	800abaa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0ef      	beq.n	800ab62 <SDMMC_GetCmdResp3+0x1e>
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1ea      	bne.n	800ab62 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d004      	beq.n	800aba2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2204      	movs	r2, #4
 800ab9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab9e:	2304      	movs	r3, #4
 800aba0:	e003      	b.n	800abaa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a06      	ldr	r2, [pc, #24]	; (800abc0 <SDMMC_GetCmdResp3+0x7c>)
 800aba6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	24000000 	.word	0x24000000
 800abbc:	10624dd3 	.word	0x10624dd3
 800abc0:	002000c5 	.word	0x002000c5

0800abc4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	460b      	mov	r3, r1
 800abce:	607a      	str	r2, [r7, #4]
 800abd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abd2:	4b35      	ldr	r3, [pc, #212]	; (800aca8 <SDMMC_GetCmdResp6+0xe4>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a35      	ldr	r2, [pc, #212]	; (800acac <SDMMC_GetCmdResp6+0xe8>)
 800abd8:	fba2 2303 	umull	r2, r3, r2, r3
 800abdc:	0a5b      	lsrs	r3, r3, #9
 800abde:	f241 3288 	movw	r2, #5000	; 0x1388
 800abe2:	fb02 f303 	mul.w	r3, r2, r3
 800abe6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	1e5a      	subs	r2, r3, #1
 800abec:	61fa      	str	r2, [r7, #28]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d102      	bne.n	800abf8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abf6:	e052      	b.n	800ac9e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0ef      	beq.n	800abe8 <SDMMC_GetCmdResp6+0x24>
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1ea      	bne.n	800abe8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac16:	f003 0304 	and.w	r3, r3, #4
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d004      	beq.n	800ac28 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2204      	movs	r2, #4
 800ac22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac24:	2304      	movs	r3, #4
 800ac26:	e03a      	b.n	800ac9e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d004      	beq.n	800ac3e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2201      	movs	r2, #1
 800ac38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e02f      	b.n	800ac9e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7ff fb2c 	bl	800a29c <SDMMC_GetCommandResponse>
 800ac44:	4603      	mov	r3, r0
 800ac46:	461a      	mov	r2, r3
 800ac48:	7afb      	ldrb	r3, [r7, #11]
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d001      	beq.n	800ac52 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e025      	b.n	800ac9e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4a16      	ldr	r2, [pc, #88]	; (800acb0 <SDMMC_GetCmdResp6+0xec>)
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ac58:	2100      	movs	r1, #0
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff fb2b 	bl	800a2b6 <SDMMC_GetResponse>
 800ac60:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d106      	bne.n	800ac7a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	0c1b      	lsrs	r3, r3, #16
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	e011      	b.n	800ac9e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac88:	e009      	b.n	800ac9e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac98:	e001      	b.n	800ac9e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3720      	adds	r7, #32
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	24000000 	.word	0x24000000
 800acac:	10624dd3 	.word	0x10624dd3
 800acb0:	002000c5 	.word	0x002000c5

0800acb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acbc:	4b22      	ldr	r3, [pc, #136]	; (800ad48 <SDMMC_GetCmdResp7+0x94>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a22      	ldr	r2, [pc, #136]	; (800ad4c <SDMMC_GetCmdResp7+0x98>)
 800acc2:	fba2 2303 	umull	r2, r3, r2, r3
 800acc6:	0a5b      	lsrs	r3, r3, #9
 800acc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800accc:	fb02 f303 	mul.w	r3, r2, r3
 800acd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	1e5a      	subs	r2, r3, #1
 800acd6:	60fa      	str	r2, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ace0:	e02c      	b.n	800ad3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d0ef      	beq.n	800acd2 <SDMMC_GetCmdResp7+0x1e>
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1ea      	bne.n	800acd2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d004      	beq.n	800ad12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2204      	movs	r2, #4
 800ad0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad0e:	2304      	movs	r3, #4
 800ad10:	e014      	b.n	800ad3c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d004      	beq.n	800ad28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2201      	movs	r2, #1
 800ad22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e009      	b.n	800ad3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2240      	movs	r2, #64	; 0x40
 800ad38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad3a:	2300      	movs	r3, #0

}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	24000000 	.word	0x24000000
 800ad4c:	10624dd3 	.word	0x10624dd3

0800ad50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ad54:	4904      	ldr	r1, [pc, #16]	; (800ad68 <MX_FATFS_Init+0x18>)
 800ad56:	4805      	ldr	r0, [pc, #20]	; (800ad6c <MX_FATFS_Init+0x1c>)
 800ad58:	f000 f9e4 	bl	800b124 <FATFS_LinkDriver>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	461a      	mov	r2, r3
 800ad60:	4b03      	ldr	r3, [pc, #12]	; (800ad70 <MX_FATFS_Init+0x20>)
 800ad62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ad64:	bf00      	nop
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	2400042c 	.word	0x2400042c
 800ad6c:	0800b250 	.word	0x0800b250
 800ad70:	24000428 	.word	0x24000428

0800ad74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ad7e:	f000 f879 	bl	800ae74 <BSP_SD_IsDetected>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d001      	beq.n	800ad8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ad88:	2302      	movs	r3, #2
 800ad8a:	e012      	b.n	800adb2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800ad8c:	480b      	ldr	r0, [pc, #44]	; (800adbc <BSP_SD_Init+0x48>)
 800ad8e:	f7fa ffed 	bl	8005d6c <HAL_SD_Init>
 800ad92:	4603      	mov	r3, r0
 800ad94:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ad9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ada0:	4806      	ldr	r0, [pc, #24]	; (800adbc <BSP_SD_Init+0x48>)
 800ada2:	f7fb feb1 	bl	8006b08 <HAL_SD_ConfigWideBusOperation>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800adb0:	79fb      	ldrb	r3, [r7, #7]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	240001c0 	.word	0x240001c0

0800adc0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af02      	add	r7, sp, #8
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	68f9      	ldr	r1, [r7, #12]
 800addc:	4806      	ldr	r0, [pc, #24]	; (800adf8 <BSP_SD_ReadBlocks+0x38>)
 800adde:	f7fb f8e9 	bl	8005fb4 <HAL_SD_ReadBlocks>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	240001c0 	.word	0x240001c0

0800adfc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af02      	add	r7, sp, #8
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	68f9      	ldr	r1, [r7, #12]
 800ae18:	4806      	ldr	r0, [pc, #24]	; (800ae34 <BSP_SD_WriteBlocks+0x38>)
 800ae1a:	f7fb fa55 	bl	80062c8 <HAL_SD_WriteBlocks>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	240001c0 	.word	0x240001c0

0800ae38 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ae3c:	4805      	ldr	r0, [pc, #20]	; (800ae54 <BSP_SD_GetCardState+0x1c>)
 800ae3e:	f7fb ff0d 	bl	8006c5c <HAL_SD_GetCardState>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	bf14      	ite	ne
 800ae48:	2301      	movne	r3, #1
 800ae4a:	2300      	moveq	r3, #0
 800ae4c:	b2db      	uxtb	r3, r3
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	240001c0 	.word	0x240001c0

0800ae58 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800ae60:	6879      	ldr	r1, [r7, #4]
 800ae62:	4803      	ldr	r0, [pc, #12]	; (800ae70 <BSP_SD_GetCardInfo+0x18>)
 800ae64:	f7fb fe24 	bl	8006ab0 <HAL_SD_GetCardInfo>
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	240001c0 	.word	0x240001c0

0800ae74 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ae7e:	f000 f80b 	bl	800ae98 <BSP_PlatformIsDetected>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	b2db      	uxtb	r3, r3
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800aea2:	2102      	movs	r1, #2
 800aea4:	4806      	ldr	r0, [pc, #24]	; (800aec0 <BSP_PlatformIsDetected+0x28>)
 800aea6:	f7f8 f811 	bl	8002ecc <HAL_GPIO_ReadPin>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	58020000 	.word	0x58020000

0800aec4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800aece:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <SD_CheckStatus+0x38>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800aed4:	f7ff ffb0 	bl	800ae38 <BSP_SD_GetCardState>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d107      	bne.n	800aeee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800aede:	4b07      	ldr	r3, [pc, #28]	; (800aefc <SD_CheckStatus+0x38>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	f023 0301 	bic.w	r3, r3, #1
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	4b04      	ldr	r3, [pc, #16]	; (800aefc <SD_CheckStatus+0x38>)
 800aeec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800aeee:	4b03      	ldr	r3, [pc, #12]	; (800aefc <SD_CheckStatus+0x38>)
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	b2db      	uxtb	r3, r3
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	2400000d 	.word	0x2400000d

0800af00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800af0a:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <SD_initialize+0x38>)
 800af0c:	2201      	movs	r2, #1
 800af0e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800af10:	f7ff ff30 	bl	800ad74 <BSP_SD_Init>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d107      	bne.n	800af2a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff ffd1 	bl	800aec4 <SD_CheckStatus>
 800af22:	4603      	mov	r3, r0
 800af24:	461a      	mov	r2, r3
 800af26:	4b04      	ldr	r3, [pc, #16]	; (800af38 <SD_initialize+0x38>)
 800af28:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800af2a:	4b03      	ldr	r3, [pc, #12]	; (800af38 <SD_initialize+0x38>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	b2db      	uxtb	r3, r3
}
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	2400000d 	.word	0x2400000d

0800af3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff ffbb 	bl	800aec4 <SD_CheckStatus>
 800af4e:	4603      	mov	r3, r0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800af6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	6879      	ldr	r1, [r7, #4]
 800af74:	68b8      	ldr	r0, [r7, #8]
 800af76:	f7ff ff23 	bl	800adc0 <BSP_SD_ReadBlocks>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d107      	bne.n	800af90 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800af80:	bf00      	nop
 800af82:	f7ff ff59 	bl	800ae38 <BSP_SD_GetCardState>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1fa      	bne.n	800af82 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800af90:	7dfb      	ldrb	r3, [r7, #23]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b086      	sub	sp, #24
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
 800afa6:	4603      	mov	r3, r0
 800afa8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800afae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	68b8      	ldr	r0, [r7, #8]
 800afb8:	f7ff ff20 	bl	800adfc <BSP_SD_WriteBlocks>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d107      	bne.n	800afd2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800afc2:	bf00      	nop
 800afc4:	f7ff ff38 	bl	800ae38 <BSP_SD_GetCardState>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1fa      	bne.n	800afc4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b08c      	sub	sp, #48	; 0x30
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	603a      	str	r2, [r7, #0]
 800afe6:	71fb      	strb	r3, [r7, #7]
 800afe8:	460b      	mov	r3, r1
 800afea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aff2:	4b25      	ldr	r3, [pc, #148]	; (800b088 <SD_ioctl+0xac>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <SD_ioctl+0x28>
 800b000:	2303      	movs	r3, #3
 800b002:	e03c      	b.n	800b07e <SD_ioctl+0xa2>

  switch (cmd)
 800b004:	79bb      	ldrb	r3, [r7, #6]
 800b006:	2b03      	cmp	r3, #3
 800b008:	d834      	bhi.n	800b074 <SD_ioctl+0x98>
 800b00a:	a201      	add	r2, pc, #4	; (adr r2, 800b010 <SD_ioctl+0x34>)
 800b00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b010:	0800b021 	.word	0x0800b021
 800b014:	0800b029 	.word	0x0800b029
 800b018:	0800b041 	.word	0x0800b041
 800b01c:	0800b05b 	.word	0x0800b05b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b026:	e028      	b.n	800b07a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b028:	f107 0308 	add.w	r3, r7, #8
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7ff ff13 	bl	800ae58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b032:	6a3a      	ldr	r2, [r7, #32]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b03e:	e01c      	b.n	800b07a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff ff07 	bl	800ae58 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b058:	e00f      	b.n	800b07a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b05a:	f107 0308 	add.w	r3, r7, #8
 800b05e:	4618      	mov	r0, r3
 800b060:	f7ff fefa 	bl	800ae58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	0a5a      	lsrs	r2, r3, #9
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b072:	e002      	b.n	800b07a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b074:	2304      	movs	r3, #4
 800b076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b07a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3730      	adds	r7, #48	; 0x30
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	2400000d 	.word	0x2400000d

0800b08c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b087      	sub	sp, #28
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	4613      	mov	r3, r2
 800b098:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b09a:	2301      	movs	r3, #1
 800b09c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b0a2:	4b1f      	ldr	r3, [pc, #124]	; (800b120 <FATFS_LinkDriverEx+0x94>)
 800b0a4:	7a5b      	ldrb	r3, [r3, #9]
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d131      	bne.n	800b110 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0ac:	4b1c      	ldr	r3, [pc, #112]	; (800b120 <FATFS_LinkDriverEx+0x94>)
 800b0ae:	7a5b      	ldrb	r3, [r3, #9]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	4b1a      	ldr	r3, [pc, #104]	; (800b120 <FATFS_LinkDriverEx+0x94>)
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b0ba:	4b19      	ldr	r3, [pc, #100]	; (800b120 <FATFS_LinkDriverEx+0x94>)
 800b0bc:	7a5b      	ldrb	r3, [r3, #9]
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	4a17      	ldr	r2, [pc, #92]	; (800b120 <FATFS_LinkDriverEx+0x94>)
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4413      	add	r3, r2
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b0ca:	4b15      	ldr	r3, [pc, #84]	; (800b120 <FATFS_LinkDriverEx+0x94>)
 800b0cc:	7a5b      	ldrb	r3, [r3, #9]
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4b13      	ldr	r3, [pc, #76]	; (800b120 <FATFS_LinkDriverEx+0x94>)
 800b0d4:	4413      	add	r3, r2
 800b0d6:	79fa      	ldrb	r2, [r7, #7]
 800b0d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b0da:	4b11      	ldr	r3, [pc, #68]	; (800b120 <FATFS_LinkDriverEx+0x94>)
 800b0dc:	7a5b      	ldrb	r3, [r3, #9]
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	1c5a      	adds	r2, r3, #1
 800b0e2:	b2d1      	uxtb	r1, r2
 800b0e4:	4a0e      	ldr	r2, [pc, #56]	; (800b120 <FATFS_LinkDriverEx+0x94>)
 800b0e6:	7251      	strb	r1, [r2, #9]
 800b0e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b0ea:	7dbb      	ldrb	r3, [r7, #22]
 800b0ec:	3330      	adds	r3, #48	; 0x30
 800b0ee:	b2da      	uxtb	r2, r3
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	223a      	movs	r2, #58	; 0x3a
 800b0fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	3302      	adds	r3, #2
 800b100:	222f      	movs	r2, #47	; 0x2f
 800b102:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	3303      	adds	r3, #3
 800b108:	2200      	movs	r2, #0
 800b10a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
}
 800b112:	4618      	mov	r0, r3
 800b114:	371c      	adds	r7, #28
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	24000030 	.word	0x24000030

0800b124 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b12e:	2200      	movs	r2, #0
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7ff ffaa 	bl	800b08c <FATFS_LinkDriverEx>
 800b138:	4603      	mov	r3, r0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
	...

0800b144 <__libc_init_array>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	4e0d      	ldr	r6, [pc, #52]	; (800b17c <__libc_init_array+0x38>)
 800b148:	4c0d      	ldr	r4, [pc, #52]	; (800b180 <__libc_init_array+0x3c>)
 800b14a:	1ba4      	subs	r4, r4, r6
 800b14c:	10a4      	asrs	r4, r4, #2
 800b14e:	2500      	movs	r5, #0
 800b150:	42a5      	cmp	r5, r4
 800b152:	d109      	bne.n	800b168 <__libc_init_array+0x24>
 800b154:	4e0b      	ldr	r6, [pc, #44]	; (800b184 <__libc_init_array+0x40>)
 800b156:	4c0c      	ldr	r4, [pc, #48]	; (800b188 <__libc_init_array+0x44>)
 800b158:	f000 f82c 	bl	800b1b4 <_init>
 800b15c:	1ba4      	subs	r4, r4, r6
 800b15e:	10a4      	asrs	r4, r4, #2
 800b160:	2500      	movs	r5, #0
 800b162:	42a5      	cmp	r5, r4
 800b164:	d105      	bne.n	800b172 <__libc_init_array+0x2e>
 800b166:	bd70      	pop	{r4, r5, r6, pc}
 800b168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b16c:	4798      	blx	r3
 800b16e:	3501      	adds	r5, #1
 800b170:	e7ee      	b.n	800b150 <__libc_init_array+0xc>
 800b172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b176:	4798      	blx	r3
 800b178:	3501      	adds	r5, #1
 800b17a:	e7f2      	b.n	800b162 <__libc_init_array+0x1e>
 800b17c:	0800b26c 	.word	0x0800b26c
 800b180:	0800b26c 	.word	0x0800b26c
 800b184:	0800b26c 	.word	0x0800b26c
 800b188:	0800b270 	.word	0x0800b270

0800b18c <memcpy>:
 800b18c:	b510      	push	{r4, lr}
 800b18e:	1e43      	subs	r3, r0, #1
 800b190:	440a      	add	r2, r1
 800b192:	4291      	cmp	r1, r2
 800b194:	d100      	bne.n	800b198 <memcpy+0xc>
 800b196:	bd10      	pop	{r4, pc}
 800b198:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b19c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1a0:	e7f7      	b.n	800b192 <memcpy+0x6>

0800b1a2 <memset>:
 800b1a2:	4402      	add	r2, r0
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d100      	bne.n	800b1ac <memset+0xa>
 800b1aa:	4770      	bx	lr
 800b1ac:	f803 1b01 	strb.w	r1, [r3], #1
 800b1b0:	e7f9      	b.n	800b1a6 <memset+0x4>
	...

0800b1b4 <_init>:
 800b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b6:	bf00      	nop
 800b1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ba:	bc08      	pop	{r3}
 800b1bc:	469e      	mov	lr, r3
 800b1be:	4770      	bx	lr

0800b1c0 <_fini>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	bf00      	nop
 800b1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c6:	bc08      	pop	{r3}
 800b1c8:	469e      	mov	lr, r3
 800b1ca:	4770      	bx	lr
