
Controller_Modul_F446VCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  08011e3c  08011e3c  00021e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127e4  080127e4  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080127e4  080127e4  000227e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127ec  080127ec  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127ec  080127ec  000227ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127f0  080127f0  000227f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080127f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000061d0  200001e4  080129d8  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200063b4  080129d8  000363b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c82a  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000054d5  00000000  00000000  0005ca3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002180  00000000  00000000  00061f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f48  00000000  00000000  00064098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aaec  00000000  00000000  00065fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f064  00000000  00000000  00090acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e69e6  00000000  00000000  000afb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00196516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009324  00000000  00000000  00196594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011e24 	.word	0x08011e24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08011e24 	.word	0x08011e24

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <bufsize>:
char path[PATH_SIZE];  // buffer to store path

int i=0;

int bufsize (char *buf)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	int i=0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000dc8:	e002      	b.n	8000dd0 <bufsize+0x14>
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f6      	bne.n	8000dca <bufsize+0xe>
	return i;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <clear_buffer>:

void clear_buffer (void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e007      	b.n	8000e08 <clear_buffer+0x1c>
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <clear_buffer+0x30>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e0c:	ddf4      	ble.n	8000df8 <clear_buffer+0xc>
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200015c4 	.word	0x200015c4

08000e20 <clear_path>:

void clear_path (void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
	for (int i=0; i<PATH_SIZE; i++) path[i] = '\0';
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	e007      	b.n	8000e3c <clear_path+0x1c>
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <clear_path+0x30>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b1f      	cmp	r3, #31
 8000e40:	ddf4      	ble.n	8000e2c <clear_path+0xc>
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000044c 	.word	0x2000044c

08000e54 <send_uart>:

void send_uart (char *string)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
//	uint8_t len = strlen ((const char *) string);
//	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
	CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff f9e1 	bl	8000224 <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f00f ff36 	bl	8010cd8 <CDC_Transmit_FS>
	//Uart_sendstring(string);


	clear_buffer();
 8000e6c:	f7ff ffbe 	bl	8000dec <clear_buffer>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <cmdlength>:

int cmdlength (char *str)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	int i=0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
	while (*str++ != ' ') i++;
 8000e84:	e002      	b.n	8000e8c <cmdlength+0x14>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b20      	cmp	r3, #32
 8000e96:	d1f6      	bne.n	8000e86 <cmdlength+0xe>
	return i;
 8000e98:	68fb      	ldr	r3, [r7, #12]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <get_path>:
void get_path (void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
	int start = cmdlength(buffer)+1;
 8000eae:	4816      	ldr	r0, [pc, #88]	; (8000f08 <get_path+0x60>)
 8000eb0:	f7ff ffe2 	bl	8000e78 <cmdlength>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
	int end = bufsize(buffer)-2;
 8000eba:	4813      	ldr	r0, [pc, #76]	; (8000f08 <get_path+0x60>)
 8000ebc:	f7ff ff7e 	bl	8000dbc <bufsize>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	603b      	str	r3, [r7, #0]

	int j=0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
	for (int i=start; i<end; i++)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	e011      	b.n	8000ef4 <get_path+0x4c>
	{
		if (buffer[i] != ' ') path[j++] = buffer[i];
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <get_path+0x60>)
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b20      	cmp	r3, #32
 8000eda:	d010      	beq.n	8000efe <get_path+0x56>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60fa      	str	r2, [r7, #12]
 8000ee2:	4909      	ldr	r1, [pc, #36]	; (8000f08 <get_path+0x60>)
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	440a      	add	r2, r1
 8000ee8:	7811      	ldrb	r1, [r2, #0]
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <get_path+0x64>)
 8000eec:	54d1      	strb	r1, [r2, r3]
	for (int i=start; i<end; i++)
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbe9      	blt.n	8000ed0 <get_path+0x28>
		else break;
	}
}
 8000efc:	e000      	b.n	8000f00 <get_path+0x58>
		else break;
 8000efe:	bf00      	nop
}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200015c4 	.word	0x200015c4
 8000f0c:	2000044c 	.word	0x2000044c

08000f10 <mount_sd>:

void mount_sd (void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	490a      	ldr	r1, [pc, #40]	; (8000f40 <mount_sd+0x30>)
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <mount_sd+0x34>)
 8000f1a:	f00e fbb5 	bl	800f688 <f_mount>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <mount_sd+0x38>)
 8000f24:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) send_uart ("error in mounting SD CARD...\n");
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <mount_sd+0x38>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <mount_sd+0x26>
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <mount_sd+0x3c>)
 8000f30:	f7ff ff90 	bl	8000e54 <send_uart>
	else send_uart("SD CARD mounted successfully...\n");
}
 8000f34:	e002      	b.n	8000f3c <mount_sd+0x2c>
	else send_uart("SD CARD mounted successfully...\n");
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <mount_sd+0x40>)
 8000f38:	f7ff ff8c 	bl	8000e54 <send_uart>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	08011e3c 	.word	0x08011e3c
 8000f44:	20000584 	.word	0x20000584
 8000f48:	2000160c 	.word	0x2000160c
 8000f4c:	08011e40 	.word	0x08011e40
 8000f50:	08011e60 	.word	0x08011e60

08000f54 <scan_files>:
	else send_uart("error!!! in UNMOUNTING SD CARD\n");
}

/* Start node to be scanned (***also used as work area***) */
FRESULT scan_files (char* pat)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b096      	sub	sp, #88	; 0x58
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;

    char path[20];
    sprintf (path, "%s",pat);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f010 fc20 	bl	80117a8 <strcpy>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000f68:	f107 020c 	add.w	r2, r7, #12
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00f f935 	bl	80101e2 <f_opendir>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b36      	ldr	r3, [pc, #216]	; (8001058 <scan_files+0x104>)
 8000f7e:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <scan_files+0x104>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d15d      	bne.n	8001044 <scan_files+0xf0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	4933      	ldr	r1, [pc, #204]	; (800105c <scan_files+0x108>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00f f9c0 	bl	8010314 <f_readdir>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <scan_files+0x104>)
 8000f9a:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <scan_files+0x104>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d149      	bne.n	8001038 <scan_files+0xe4>
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	; (800105c <scan_files+0x108>)
 8000fa6:	7d9b      	ldrb	r3, [r3, #22]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d045      	beq.n	8001038 <scan_files+0xe4>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <scan_files+0x108>)
 8000fae:	7a1b      	ldrb	r3, [r3, #8]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d031      	beq.n	800101c <scan_files+0xc8>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000fb8:	4929      	ldr	r1, [pc, #164]	; (8001060 <scan_files+0x10c>)
 8000fba:	482a      	ldr	r0, [pc, #168]	; (8001064 <scan_files+0x110>)
 8000fbc:	f7ff f928 	bl	8000210 <strcmp>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d035      	beq.n	8001032 <scan_files+0xde>
            	sprintf (buffer, "Dir: %s\r\n", fno.fname);
 8000fc6:	4a26      	ldr	r2, [pc, #152]	; (8001060 <scan_files+0x10c>)
 8000fc8:	4927      	ldr	r1, [pc, #156]	; (8001068 <scan_files+0x114>)
 8000fca:	4828      	ldr	r0, [pc, #160]	; (800106c <scan_files+0x118>)
 8000fcc:	f010 fbcc 	bl	8011768 <siprintf>
            	send_uart(buffer);
 8000fd0:	4826      	ldr	r0, [pc, #152]	; (800106c <scan_files+0x118>)
 8000fd2:	f7ff ff3f 	bl	8000e54 <send_uart>
                i = strlen(path);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f922 	bl	8000224 <strlen>
 8000fe0:	6578      	str	r0, [r7, #84]	; 0x54
                sprintf(&path[i], "/%s", fno.fname);
 8000fe2:	f107 020c 	add.w	r2, r7, #12
 8000fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <scan_files+0x10c>)
 8000fec:	4920      	ldr	r1, [pc, #128]	; (8001070 <scan_files+0x11c>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f010 fbba 	bl	8011768 <siprintf>
                fresult = scan_files(path);                     /* Enter the directory */
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffab 	bl	8000f54 <scan_files>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <scan_files+0x104>)
 8001004:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <scan_files+0x104>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d113      	bne.n	8001036 <scan_files+0xe2>
                path[i] = 0;
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001014:	4413      	add	r3, r2
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e7b5      	b.n	8000f88 <scan_files+0x34>
            }
            else
            {                                       /* It is a file. */
               sprintf(buffer,"File: %s/%s\n", path, fno.fname);
 800101c:	f107 020c 	add.w	r2, r7, #12
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <scan_files+0x10c>)
 8001022:	4914      	ldr	r1, [pc, #80]	; (8001074 <scan_files+0x120>)
 8001024:	4811      	ldr	r0, [pc, #68]	; (800106c <scan_files+0x118>)
 8001026:	f010 fb9f 	bl	8011768 <siprintf>
               send_uart(buffer);
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <scan_files+0x118>)
 800102c:	f7ff ff12 	bl	8000e54 <send_uart>
 8001030:	e7aa      	b.n	8000f88 <scan_files+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001032:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001034:	e7a8      	b.n	8000f88 <scan_files+0x34>
                if (fresult != FR_OK) break;
 8001036:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f00f f943 	bl	80102c8 <f_closedir>
 8001042:	e002      	b.n	800104a <scan_files+0xf6>
    }else{
    	send_uart("error scan_files\n");
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <scan_files+0x124>)
 8001046:	f7ff ff05 	bl	8000e54 <send_uart>
    }
    return fresult;
 800104a:	4b03      	ldr	r3, [pc, #12]	; (8001058 <scan_files+0x104>)
 800104c:	781b      	ldrb	r3, [r3, #0]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3758      	adds	r7, #88	; 0x58
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000160c 	.word	0x2000160c
 800105c:	2000046c 	.word	0x2000046c
 8001060:	20000482 	.word	0x20000482
 8001064:	08011ec8 	.word	0x08011ec8
 8001068:	08011ed4 	.word	0x08011ed4
 800106c:	200015c4 	.word	0x200015c4
 8001070:	08011ee0 	.word	0x08011ee0
 8001074:	08011ee4 	.word	0x08011ee4
 8001078:	08011ef4 	.word	0x08011ef4

0800107c <write_file>:




void write_file (char *name)
{
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001084:	494b      	ldr	r1, [pc, #300]	; (80011b4 <write_file+0x138>)
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f00f f981 	bl	801038e <f_stat>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b49      	ldr	r3, [pc, #292]	; (80011b8 <write_file+0x13c>)
 8001092:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001094:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <write_file+0x13c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d008      	beq.n	80010ae <write_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4947      	ldr	r1, [pc, #284]	; (80011bc <write_file+0x140>)
 80010a0:	4847      	ldr	r0, [pc, #284]	; (80011c0 <write_file+0x144>)
 80010a2:	f010 fb61 	bl	8011768 <siprintf>
		send_uart (buffer);
 80010a6:	4846      	ldr	r0, [pc, #280]	; (80011c0 <write_file+0x144>)
 80010a8:	f7ff fed4 	bl	8000e54 <send_uart>
	    {
	    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
	    	send_uart(buffer);
	    }
	}
}
 80010ac:	e07d      	b.n	80011aa <write_file+0x12e>
	    fresult = f_open(&fil, name, FA_OPEN_EXISTING | FA_WRITE);
 80010ae:	2202      	movs	r2, #2
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4844      	ldr	r0, [pc, #272]	; (80011c4 <write_file+0x148>)
 80010b4:	f00e fb2e 	bl	800f714 <f_open>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b3e      	ldr	r3, [pc, #248]	; (80011b8 <write_file+0x13c>)
 80010be:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80010c0:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <write_file+0x13c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00b      	beq.n	80010e0 <write_file+0x64>
	    	sprintf (buffer, "error no %d in opening file *%s*\n", fresult, name);
 80010c8:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <write_file+0x13c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	493d      	ldr	r1, [pc, #244]	; (80011c8 <write_file+0x14c>)
 80010d2:	483b      	ldr	r0, [pc, #236]	; (80011c0 <write_file+0x144>)
 80010d4:	f010 fb48 	bl	8011768 <siprintf>
	    	send_uart(buffer);
 80010d8:	4839      	ldr	r0, [pc, #228]	; (80011c0 <write_file+0x144>)
 80010da:	f7ff febb 	bl	8000e54 <send_uart>
 80010de:	e007      	b.n	80010f0 <write_file+0x74>
	    	sprintf (buffer, "file *%s* is opened. Now enter the string you want to write\n", name);
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	493a      	ldr	r1, [pc, #232]	; (80011cc <write_file+0x150>)
 80010e4:	4836      	ldr	r0, [pc, #216]	; (80011c0 <write_file+0x144>)
 80010e6:	f010 fb3f 	bl	8011768 <siprintf>
	    	send_uart (buffer);
 80010ea:	4835      	ldr	r0, [pc, #212]	; (80011c0 <write_file+0x144>)
 80010ec:	f7ff feb2 	bl	8000e54 <send_uart>
	    while (!com_bytes_available);
 80010f0:	bf00      	nop
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <write_file+0x154>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0fb      	beq.n	80010f2 <write_file+0x76>
	    memcpy(&buffer,&com_buf, sizeof(com_buf));
 80010fa:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <write_file+0x144>)
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <write_file+0x158>)
 80010fe:	4610      	mov	r0, r2
 8001100:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001104:	4602      	mov	r2, r0
 8001106:	4619      	mov	r1, r3
 8001108:	f8d1 c000 	ldr.w	ip, [r1]
 800110c:	684e      	ldr	r6, [r1, #4]
 800110e:	688d      	ldr	r5, [r1, #8]
 8001110:	68c9      	ldr	r1, [r1, #12]
 8001112:	f8c2 c000 	str.w	ip, [r2]
 8001116:	6056      	str	r6, [r2, #4]
 8001118:	6095      	str	r5, [r2, #8]
 800111a:	60d1      	str	r1, [r2, #12]
 800111c:	3310      	adds	r3, #16
 800111e:	3010      	adds	r0, #16
 8001120:	42a3      	cmp	r3, r4
 8001122:	d1ef      	bne.n	8001104 <write_file+0x88>
	    com_bytes_available = 0;
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <write_file+0x154>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
	    fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800112a:	4825      	ldr	r0, [pc, #148]	; (80011c0 <write_file+0x144>)
 800112c:	f7ff fe46 	bl	8000dbc <bufsize>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <write_file+0x15c>)
 8001136:	4922      	ldr	r1, [pc, #136]	; (80011c0 <write_file+0x144>)
 8001138:	4822      	ldr	r0, [pc, #136]	; (80011c4 <write_file+0x148>)
 800113a:	f00e fe16 	bl	800fd6a <f_write>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <write_file+0x13c>)
 8001144:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <write_file+0x13c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00d      	beq.n	800116a <write_file+0xee>
	    	clear_buffer();
 800114e:	f7ff fe4d 	bl	8000dec <clear_buffer>
	    	sprintf (buffer, "error no %d in writing file *%s*\n", fresult, name);
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <write_file+0x13c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4920      	ldr	r1, [pc, #128]	; (80011dc <write_file+0x160>)
 800115c:	4818      	ldr	r0, [pc, #96]	; (80011c0 <write_file+0x144>)
 800115e:	f010 fb03 	bl	8011768 <siprintf>
	    	send_uart(buffer);
 8001162:	4817      	ldr	r0, [pc, #92]	; (80011c0 <write_file+0x144>)
 8001164:	f7ff fe76 	bl	8000e54 <send_uart>
 8001168:	e009      	b.n	800117e <write_file+0x102>
	    	clear_buffer();
 800116a:	f7ff fe3f 	bl	8000dec <clear_buffer>
	    	sprintf (buffer, "*%s* written successfully\n", name);
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	491b      	ldr	r1, [pc, #108]	; (80011e0 <write_file+0x164>)
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <write_file+0x144>)
 8001174:	f010 faf8 	bl	8011768 <siprintf>
	    	send_uart(buffer);
 8001178:	4811      	ldr	r0, [pc, #68]	; (80011c0 <write_file+0x144>)
 800117a:	f7ff fe6b 	bl	8000e54 <send_uart>
	    fresult = f_close(&fil);
 800117e:	4811      	ldr	r0, [pc, #68]	; (80011c4 <write_file+0x148>)
 8001180:	f00f f805 	bl	801018e <f_close>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <write_file+0x13c>)
 800118a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <write_file+0x13c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00a      	beq.n	80011aa <write_file+0x12e>
	    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <write_file+0x13c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4911      	ldr	r1, [pc, #68]	; (80011e4 <write_file+0x168>)
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <write_file+0x144>)
 80011a0:	f010 fae2 	bl	8011768 <siprintf>
	    	send_uart(buffer);
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <write_file+0x144>)
 80011a6:	f7ff fe55 	bl	8000e54 <send_uart>
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000046c 	.word	0x2000046c
 80011b8:	2000160c 	.word	0x2000160c
 80011bc:	08011f08 	.word	0x08011f08
 80011c0:	200015c4 	.word	0x200015c4
 80011c4:	20001614 	.word	0x20001614
 80011c8:	08011f20 	.word	0x08011f20
 80011cc:	08011f44 	.word	0x08011f44
 80011d0:	20000200 	.word	0x20000200
 80011d4:	200028e4 	.word	0x200028e4
 80011d8:	20001604 	.word	0x20001604
 80011dc:	08011f84 	.word	0x08011f84
 80011e0:	08011fa8 	.word	0x08011fa8
 80011e4:	08011fc4 	.word	0x08011fc4

080011e8 <read_file>:

void read_file (char *name)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80011f0:	4937      	ldr	r1, [pc, #220]	; (80012d0 <read_file+0xe8>)
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f00f f8cb 	bl	801038e <f_stat>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <read_file+0xec>)
 80011fe:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <read_file+0xec>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <read_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4933      	ldr	r1, [pc, #204]	; (80012d8 <read_file+0xf0>)
 800120c:	4833      	ldr	r0, [pc, #204]	; (80012dc <read_file+0xf4>)
 800120e:	f010 faab 	bl	8011768 <siprintf>
		send_uart (buffer);
 8001212:	4832      	ldr	r0, [pc, #200]	; (80012dc <read_file+0xf4>)
 8001214:	f7ff fe1e 	bl	8000e54 <send_uart>
		{
		   	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
		   	send_uart(buffer);
		}
	}
}
 8001218:	e055      	b.n	80012c6 <read_file+0xde>
		fresult = f_open(&fil, name, FA_READ);
 800121a:	2201      	movs	r2, #1
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4830      	ldr	r0, [pc, #192]	; (80012e0 <read_file+0xf8>)
 8001220:	f00e fa78 	bl	800f714 <f_open>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <read_file+0xec>)
 800122a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <read_file+0xec>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00a      	beq.n	800124a <read_file+0x62>
			sprintf (buffer, "error no %d in opening file *%s*\n", fresult, name);
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <read_file+0xec>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4929      	ldr	r1, [pc, #164]	; (80012e4 <read_file+0xfc>)
 800123e:	4827      	ldr	r0, [pc, #156]	; (80012dc <read_file+0xf4>)
 8001240:	f010 fa92 	bl	8011768 <siprintf>
		    	send_uart(buffer);
 8001244:	4825      	ldr	r0, [pc, #148]	; (80012dc <read_file+0xf4>)
 8001246:	f7ff fe05 	bl	8000e54 <send_uart>
		sprintf (buffer, "reading data from the file *%s*\n", name);
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	4926      	ldr	r1, [pc, #152]	; (80012e8 <read_file+0x100>)
 800124e:	4823      	ldr	r0, [pc, #140]	; (80012dc <read_file+0xf4>)
 8001250:	f010 fa8a 	bl	8011768 <siprintf>
		send_uart (buffer);
 8001254:	4821      	ldr	r0, [pc, #132]	; (80012dc <read_file+0xf4>)
 8001256:	f7ff fdfd 	bl	8000e54 <send_uart>
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <read_file+0xf8>)
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <read_file+0x104>)
 8001260:	491e      	ldr	r1, [pc, #120]	; (80012dc <read_file+0xf4>)
 8001262:	481f      	ldr	r0, [pc, #124]	; (80012e0 <read_file+0xf8>)
 8001264:	f00e fc22 	bl	800faac <f_read>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <read_file+0xec>)
 800126e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <read_file+0xec>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00d      	beq.n	8001294 <read_file+0xac>
		  	clear_buffer();
 8001278:	f7ff fdb8 	bl	8000dec <clear_buffer>
		 	sprintf (buffer, "error no %d in reading file *%s*\n", fresult, name);
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <read_file+0xec>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	491a      	ldr	r1, [pc, #104]	; (80012f0 <read_file+0x108>)
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <read_file+0xf4>)
 8001288:	f010 fa6e 	bl	8011768 <siprintf>
		  	send_uart(buffer);
 800128c:	4813      	ldr	r0, [pc, #76]	; (80012dc <read_file+0xf4>)
 800128e:	f7ff fde1 	bl	8000e54 <send_uart>
 8001292:	e002      	b.n	800129a <read_file+0xb2>
		else send_uart(buffer);
 8001294:	4811      	ldr	r0, [pc, #68]	; (80012dc <read_file+0xf4>)
 8001296:	f7ff fddd 	bl	8000e54 <send_uart>
		fresult = f_close(&fil);
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <read_file+0xf8>)
 800129c:	f00e ff77 	bl	801018e <f_close>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <read_file+0xec>)
 80012a6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <read_file+0xec>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00a      	beq.n	80012c6 <read_file+0xde>
		   	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <read_file+0xec>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <read_file+0x10c>)
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <read_file+0xf4>)
 80012bc:	f010 fa54 	bl	8011768 <siprintf>
		   	send_uart(buffer);
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <read_file+0xf4>)
 80012c2:	f7ff fdc7 	bl	8000e54 <send_uart>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000046c 	.word	0x2000046c
 80012d4:	2000160c 	.word	0x2000160c
 80012d8:	08011f08 	.word	0x08011f08
 80012dc:	200015c4 	.word	0x200015c4
 80012e0:	20001614 	.word	0x20001614
 80012e4:	08011f20 	.word	0x08011f20
 80012e8:	08011fe8 	.word	0x08011fe8
 80012ec:	200015bc 	.word	0x200015bc
 80012f0:	0801200c 	.word	0x0801200c
 80012f4:	08011fc4 	.word	0x08011fc4

080012f8 <create_file>:

void create_file (char *name)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001300:	4927      	ldr	r1, [pc, #156]	; (80013a0 <create_file+0xa8>)
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f00f f843 	bl	801038e <f_stat>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <create_file+0xac>)
 800130e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <create_file+0xac>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d108      	bne.n	800132a <create_file+0x32>
	{
		sprintf (buffer, "*%s* already exists!!!!\n",name);
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4923      	ldr	r1, [pc, #140]	; (80013a8 <create_file+0xb0>)
 800131c:	4823      	ldr	r0, [pc, #140]	; (80013ac <create_file+0xb4>)
 800131e:	f010 fa23 	bl	8011768 <siprintf>
		send_uart(buffer);
 8001322:	4822      	ldr	r0, [pc, #136]	; (80013ac <create_file+0xb4>)
 8001324:	f7ff fd96 	bl	8000e54 <send_uart>
    {
    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
    	send_uart(buffer);
    }
	}
}
 8001328:	e036      	b.n	8001398 <create_file+0xa0>
    fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800132a:	220b      	movs	r2, #11
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4820      	ldr	r0, [pc, #128]	; (80013b0 <create_file+0xb8>)
 8001330:	f00e f9f0 	bl	800f714 <f_open>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <create_file+0xac>)
 800133a:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK)
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <create_file+0xac>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <create_file+0x64>
    	sprintf (buffer, "error no %d in creating file *%s*\n", fresult, name);
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <create_file+0xac>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4919      	ldr	r1, [pc, #100]	; (80013b4 <create_file+0xbc>)
 800134e:	4817      	ldr	r0, [pc, #92]	; (80013ac <create_file+0xb4>)
 8001350:	f010 fa0a 	bl	8011768 <siprintf>
    	send_uart(buffer);
 8001354:	4815      	ldr	r0, [pc, #84]	; (80013ac <create_file+0xb4>)
 8001356:	f7ff fd7d 	bl	8000e54 <send_uart>
 800135a:	e007      	b.n	800136c <create_file+0x74>
    	sprintf (buffer, "*%s* created successfully\n",name);
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4916      	ldr	r1, [pc, #88]	; (80013b8 <create_file+0xc0>)
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <create_file+0xb4>)
 8001362:	f010 fa01 	bl	8011768 <siprintf>
    	send_uart(buffer);
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <create_file+0xb4>)
 8001368:	f7ff fd74 	bl	8000e54 <send_uart>
    fresult = f_close(&fil);
 800136c:	4810      	ldr	r0, [pc, #64]	; (80013b0 <create_file+0xb8>)
 800136e:	f00e ff0e 	bl	801018e <f_close>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <create_file+0xac>)
 8001378:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK)
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <create_file+0xac>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00a      	beq.n	8001398 <create_file+0xa0>
    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <create_file+0xac>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	490c      	ldr	r1, [pc, #48]	; (80013bc <create_file+0xc4>)
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <create_file+0xb4>)
 800138e:	f010 f9eb 	bl	8011768 <siprintf>
    	send_uart(buffer);
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <create_file+0xb4>)
 8001394:	f7ff fd5e 	bl	8000e54 <send_uart>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000046c 	.word	0x2000046c
 80013a4:	2000160c 	.word	0x2000160c
 80013a8:	08012030 	.word	0x08012030
 80013ac:	200015c4 	.word	0x200015c4
 80013b0:	20001614 	.word	0x20001614
 80013b4:	0801204c 	.word	0x0801204c
 80013b8:	08012070 	.word	0x08012070
 80013bc:	08011fc4 	.word	0x08011fc4

080013c0 <remove_file>:

void remove_file (char *name)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80013c8:	491a      	ldr	r1, [pc, #104]	; (8001434 <remove_file+0x74>)
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f00e ffdf 	bl	801038e <f_stat>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <remove_file+0x78>)
 80013d6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <remove_file+0x78>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <remove_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4916      	ldr	r1, [pc, #88]	; (800143c <remove_file+0x7c>)
 80013e4:	4816      	ldr	r0, [pc, #88]	; (8001440 <remove_file+0x80>)
 80013e6:	f010 f9bf 	bl	8011768 <siprintf>
		send_uart (buffer);
 80013ea:	4815      	ldr	r0, [pc, #84]	; (8001440 <remove_file+0x80>)
 80013ec:	f7ff fd32 	bl	8000e54 <send_uart>
		sprintf (buffer, "error in removing *%s*\n", name);
		send_uart (buffer);
	}
	}

}
 80013f0:	e01b      	b.n	800142a <remove_file+0x6a>
	fresult = f_unlink (name);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f00f f8b9 	bl	801056a <f_unlink>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <remove_file+0x78>)
 80013fe:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <remove_file+0x78>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d108      	bne.n	800141a <remove_file+0x5a>
		sprintf (buffer, "*%s* has been removed successfully\n", name);
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	490e      	ldr	r1, [pc, #56]	; (8001444 <remove_file+0x84>)
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <remove_file+0x80>)
 800140e:	f010 f9ab 	bl	8011768 <siprintf>
		send_uart (buffer);
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <remove_file+0x80>)
 8001414:	f7ff fd1e 	bl	8000e54 <send_uart>
}
 8001418:	e007      	b.n	800142a <remove_file+0x6a>
		sprintf (buffer, "error in removing *%s*\n", name);
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	490a      	ldr	r1, [pc, #40]	; (8001448 <remove_file+0x88>)
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <remove_file+0x80>)
 8001420:	f010 f9a2 	bl	8011768 <siprintf>
		send_uart (buffer);
 8001424:	4806      	ldr	r0, [pc, #24]	; (8001440 <remove_file+0x80>)
 8001426:	f7ff fd15 	bl	8000e54 <send_uart>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000046c 	.word	0x2000046c
 8001438:	2000160c 	.word	0x2000160c
 800143c:	08011f08 	.word	0x08011f08
 8001440:	200015c4 	.word	0x200015c4
 8001444:	0801208c 	.word	0x0801208c
 8001448:	080120b0 	.word	0x080120b0

0800144c <create_dir>:

void create_dir (char *name)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f00f f933 	bl	80106c0 <f_mkdir>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <create_dir+0x4c>)
 8001460:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <create_dir+0x4c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d108      	bne.n	800147c <create_dir+0x30>
    {
    	sprintf (buffer, "*%s* has been created successfully\n", name);
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	490b      	ldr	r1, [pc, #44]	; (800149c <create_dir+0x50>)
 800146e:	480c      	ldr	r0, [pc, #48]	; (80014a0 <create_dir+0x54>)
 8001470:	f010 f97a 	bl	8011768 <siprintf>
    	send_uart (buffer);
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <create_dir+0x54>)
 8001476:	f7ff fced 	bl	8000e54 <send_uart>
    else
    {
    	sprintf (buffer, "error no %d in creating directory\n", fresult);
    	send_uart(buffer);
    }
}
 800147a:	e009      	b.n	8001490 <create_dir+0x44>
    	sprintf (buffer, "error no %d in creating directory\n", fresult);
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <create_dir+0x4c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <create_dir+0x58>)
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <create_dir+0x54>)
 8001486:	f010 f96f 	bl	8011768 <siprintf>
    	send_uart(buffer);
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <create_dir+0x54>)
 800148c:	f7ff fce2 	bl	8000e54 <send_uart>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000160c 	.word	0x2000160c
 800149c:	080120c8 	.word	0x080120c8
 80014a0:	200015c4 	.word	0x200015c4
 80014a4:	080120ec 	.word	0x080120ec

080014a8 <check_sd>:

void check_sd (void)
{
 80014a8:	b598      	push	{r3, r4, r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pfs);
 80014ac:	4a26      	ldr	r2, [pc, #152]	; (8001548 <check_sd+0xa0>)
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <check_sd+0xa4>)
 80014b0:	4827      	ldr	r0, [pc, #156]	; (8001550 <check_sd+0xa8>)
 80014b2:	f00e ffa5 	bl	8010400 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <check_sd+0xa0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	3b02      	subs	r3, #2
 80014be:	4a22      	ldr	r2, [pc, #136]	; (8001548 <check_sd+0xa0>)
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	8952      	ldrh	r2, [r2, #10]
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f84b 	bl	8000564 <__aeabi_ui2d>
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <check_sd+0xac>)
 80014d4:	f7ff f8c0 	bl	8000658 <__aeabi_dmul>
 80014d8:	4603      	mov	r3, r0
 80014da:	460c      	mov	r4, r1
 80014dc:	4618      	mov	r0, r3
 80014de:	4621      	mov	r1, r4
 80014e0:	f7ff facc 	bl	8000a7c <__aeabi_d2uiz>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <check_sd+0xb0>)
 80014e8:	601a      	str	r2, [r3, #0]
    sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <check_sd+0xb0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	491a      	ldr	r1, [pc, #104]	; (800155c <check_sd+0xb4>)
 80014f2:	481b      	ldr	r0, [pc, #108]	; (8001560 <check_sd+0xb8>)
 80014f4:	f010 f938 	bl	8011768 <siprintf>
    send_uart(buffer);
 80014f8:	4819      	ldr	r0, [pc, #100]	; (8001560 <check_sd+0xb8>)
 80014fa:	f7ff fcab 	bl	8000e54 <send_uart>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <check_sd+0xa0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	895b      	ldrh	r3, [r3, #10]
 8001504:	461a      	mov	r2, r3
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <check_sd+0xa4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fb03 f302 	mul.w	r3, r3, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f828 	bl	8000564 <__aeabi_ui2d>
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <check_sd+0xac>)
 800151a:	f7ff f89d 	bl	8000658 <__aeabi_dmul>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	4618      	mov	r0, r3
 8001524:	4621      	mov	r1, r4
 8001526:	f7ff faa9 	bl	8000a7c <__aeabi_d2uiz>
 800152a:	4602      	mov	r2, r0
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <check_sd+0xbc>)
 800152e:	601a      	str	r2, [r3, #0]
    sprintf (buffer, "SD CARD Free Space: \t%lu\n",free_space);
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <check_sd+0xbc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	490c      	ldr	r1, [pc, #48]	; (8001568 <check_sd+0xc0>)
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <check_sd+0xb8>)
 800153a:	f010 f915 	bl	8011768 <siprintf>
    send_uart(buffer);
 800153e:	4808      	ldr	r0, [pc, #32]	; (8001560 <check_sd+0xb8>)
 8001540:	f7ff fc88 	bl	8000e54 <send_uart>
}
 8001544:	bf00      	nop
 8001546:	bd98      	pop	{r3, r4, r7, pc}
 8001548:	20001608 	.word	0x20001608
 800154c:	20000448 	.word	0x20000448
 8001550:	08012110 	.word	0x08012110
 8001554:	3fe00000 	.word	0x3fe00000
 8001558:	20001610 	.word	0x20001610
 800155c:	08012114 	.word	0x08012114
 8001560:	200015c4 	.word	0x200015c4
 8001564:	200015c0 	.word	0x200015c0
 8001568:	08012130 	.word	0x08012130

0800156c <check_file>:

void check_file (char *name)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b087      	sub	sp, #28
 8001570:	af04      	add	r7, sp, #16
 8001572:	6078      	str	r0, [r7, #4]
	  fresult = f_stat(name, &fno);
 8001574:	4948      	ldr	r1, [pc, #288]	; (8001698 <check_file+0x12c>)
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f00e ff09 	bl	801038e <f_stat>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b46      	ldr	r3, [pc, #280]	; (800169c <check_file+0x130>)
 8001582:	701a      	strb	r2, [r3, #0]
	  switch (fresult)
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <check_file+0x130>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <check_file+0x26>
 800158c:	2b04      	cmp	r3, #4
 800158e:	d06b      	beq.n	8001668 <check_file+0xfc>
 8001590:	e073      	b.n	800167a <check_file+0x10e>
	  {
	    case FR_OK:

	        sprintf(buffer,"Below are the details of the *%s* \nSize: %lu\n",name, fno.fsize);
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <check_file+0x12c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4941      	ldr	r1, [pc, #260]	; (80016a0 <check_file+0x134>)
 800159a:	4842      	ldr	r0, [pc, #264]	; (80016a4 <check_file+0x138>)
 800159c:	f010 f8e4 	bl	8011768 <siprintf>
	        send_uart (buffer);
 80015a0:	4840      	ldr	r0, [pc, #256]	; (80016a4 <check_file+0x138>)
 80015a2:	f7ff fc57 	bl	8000e54 <send_uart>
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
	               (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 80015a6:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <check_file+0x12c>)
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	0a5b      	lsrs	r3, r3, #9
 80015ac:	b29b      	uxth	r3, r3
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80015ae:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
	               (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 80015b2:	4b39      	ldr	r3, [pc, #228]	; (8001698 <check_file+0x12c>)
 80015b4:	889b      	ldrh	r3, [r3, #4]
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	f003 000f 	and.w	r0, r3, #15
	               (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 80015be:	4b36      	ldr	r3, [pc, #216]	; (8001698 <check_file+0x12c>)
 80015c0:	889b      	ldrh	r3, [r3, #4]
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80015c2:	f003 031f 	and.w	r3, r3, #31
	               fno.ftime >> 11, fno.ftime >> 5 & 63);
 80015c6:	4a34      	ldr	r2, [pc, #208]	; (8001698 <check_file+0x12c>)
 80015c8:	88d2      	ldrh	r2, [r2, #6]
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80015ca:	0ad2      	lsrs	r2, r2, #11
 80015cc:	b292      	uxth	r2, r2
 80015ce:	4614      	mov	r4, r2
	               fno.ftime >> 11, fno.ftime >> 5 & 63);
 80015d0:	4a31      	ldr	r2, [pc, #196]	; (8001698 <check_file+0x12c>)
 80015d2:	88d2      	ldrh	r2, [r2, #6]
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80015d4:	0952      	lsrs	r2, r2, #5
 80015d6:	b292      	uxth	r2, r2
 80015d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015dc:	9202      	str	r2, [sp, #8]
 80015de:	9401      	str	r4, [sp, #4]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4603      	mov	r3, r0
 80015e4:	460a      	mov	r2, r1
 80015e6:	4930      	ldr	r1, [pc, #192]	; (80016a8 <check_file+0x13c>)
 80015e8:	482e      	ldr	r0, [pc, #184]	; (80016a4 <check_file+0x138>)
 80015ea:	f010 f8bd 	bl	8011768 <siprintf>
	        send_uart (buffer);
 80015ee:	482d      	ldr	r0, [pc, #180]	; (80016a4 <check_file+0x138>)
 80015f0:	f7ff fc30 	bl	8000e54 <send_uart>
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
	               (fno.fattrib & AM_DIR) ? 'D' : '-',
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <check_file+0x12c>)
 80015f6:	7a1b      	ldrb	r3, [r3, #8]
 80015f8:	f003 0310 	and.w	r3, r3, #16
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <check_file+0x98>
 8001600:	2044      	movs	r0, #68	; 0x44
 8001602:	e000      	b.n	8001606 <check_file+0x9a>
 8001604:	202d      	movs	r0, #45	; 0x2d
	               (fno.fattrib & AM_RDO) ? 'R' : '-',
 8001606:	4b24      	ldr	r3, [pc, #144]	; (8001698 <check_file+0x12c>)
 8001608:	7a1b      	ldrb	r3, [r3, #8]
 800160a:	f003 0301 	and.w	r3, r3, #1
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <check_file+0xaa>
 8001612:	2452      	movs	r4, #82	; 0x52
 8001614:	e000      	b.n	8001618 <check_file+0xac>
 8001616:	242d      	movs	r4, #45	; 0x2d
	               (fno.fattrib & AM_HID) ? 'H' : '-',
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <check_file+0x12c>)
 800161a:	7a1b      	ldrb	r3, [r3, #8]
 800161c:	f003 0302 	and.w	r3, r3, #2
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <check_file+0xbc>
 8001624:	2348      	movs	r3, #72	; 0x48
 8001626:	e000      	b.n	800162a <check_file+0xbe>
 8001628:	232d      	movs	r3, #45	; 0x2d
	               (fno.fattrib & AM_SYS) ? 'S' : '-',
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <check_file+0x12c>)
 800162c:	7a12      	ldrb	r2, [r2, #8]
 800162e:	f002 0204 	and.w	r2, r2, #4
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 8001632:	2a00      	cmp	r2, #0
 8001634:	d001      	beq.n	800163a <check_file+0xce>
 8001636:	2253      	movs	r2, #83	; 0x53
 8001638:	e000      	b.n	800163c <check_file+0xd0>
 800163a:	222d      	movs	r2, #45	; 0x2d
	               (fno.fattrib & AM_ARC) ? 'A' : '-');
 800163c:	4916      	ldr	r1, [pc, #88]	; (8001698 <check_file+0x12c>)
 800163e:	7a09      	ldrb	r1, [r1, #8]
 8001640:	f001 0120 	and.w	r1, r1, #32
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 8001644:	2900      	cmp	r1, #0
 8001646:	d001      	beq.n	800164c <check_file+0xe0>
 8001648:	2141      	movs	r1, #65	; 0x41
 800164a:	e000      	b.n	800164e <check_file+0xe2>
 800164c:	212d      	movs	r1, #45	; 0x2d
 800164e:	9102      	str	r1, [sp, #8]
 8001650:	9201      	str	r2, [sp, #4]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4623      	mov	r3, r4
 8001656:	4602      	mov	r2, r0
 8001658:	4914      	ldr	r1, [pc, #80]	; (80016ac <check_file+0x140>)
 800165a:	4812      	ldr	r0, [pc, #72]	; (80016a4 <check_file+0x138>)
 800165c:	f010 f884 	bl	8011768 <siprintf>
	        send_uart (buffer);
 8001660:	4810      	ldr	r0, [pc, #64]	; (80016a4 <check_file+0x138>)
 8001662:	f7ff fbf7 	bl	8000e54 <send_uart>
	        break;
 8001666:	e012      	b.n	800168e <check_file+0x122>

	    case FR_NO_FILE:
	        sprintf(buffer,"*%s* does not exist.\n", name);
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4911      	ldr	r1, [pc, #68]	; (80016b0 <check_file+0x144>)
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <check_file+0x138>)
 800166e:	f010 f87b 	bl	8011768 <siprintf>
	        send_uart (buffer);
 8001672:	480c      	ldr	r0, [pc, #48]	; (80016a4 <check_file+0x138>)
 8001674:	f7ff fbee 	bl	8000e54 <send_uart>
	        break;
 8001678:	e009      	b.n	800168e <check_file+0x122>

	    default:
	        sprintf(buffer,"An error occurred. (%d)\n", fresult);
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <check_file+0x130>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <check_file+0x148>)
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <check_file+0x138>)
 8001684:	f010 f870 	bl	8011768 <siprintf>
	        send_uart (buffer);
 8001688:	4806      	ldr	r0, [pc, #24]	; (80016a4 <check_file+0x138>)
 800168a:	f7ff fbe3 	bl	8000e54 <send_uart>
	    }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	2000046c 	.word	0x2000046c
 800169c:	2000160c 	.word	0x2000160c
 80016a0:	0801214c 	.word	0x0801214c
 80016a4:	200015c4 	.word	0x200015c4
 80016a8:	0801217c 	.word	0x0801217c
 80016ac:	080121a0 	.word	0x080121a0
 80016b0:	080121b8 	.word	0x080121b8
 80016b4:	080121d0 	.word	0x080121d0

080016b8 <update_file>:

void update_file (char *name)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80016c0:	494b      	ldr	r1, [pc, #300]	; (80017f0 <update_file+0x138>)
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f00e fe63 	bl	801038e <f_stat>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <update_file+0x13c>)
 80016ce:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80016d0:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <update_file+0x13c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <update_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4947      	ldr	r1, [pc, #284]	; (80017f8 <update_file+0x140>)
 80016dc:	4847      	ldr	r0, [pc, #284]	; (80017fc <update_file+0x144>)
 80016de:	f010 f843 	bl	8011768 <siprintf>
		send_uart (buffer);
 80016e2:	4846      	ldr	r0, [pc, #280]	; (80017fc <update_file+0x144>)
 80016e4:	f7ff fbb6 	bl	8000e54 <send_uart>
			    {
			    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
			    	send_uart(buffer);
			    }
		}
}
 80016e8:	e07d      	b.n	80017e6 <update_file+0x12e>
			    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80016ea:	2232      	movs	r2, #50	; 0x32
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4844      	ldr	r0, [pc, #272]	; (8001800 <update_file+0x148>)
 80016f0:	f00e f810 	bl	800f714 <f_open>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <update_file+0x13c>)
 80016fa:	701a      	strb	r2, [r3, #0]
			    if (fresult != FR_OK)
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <update_file+0x13c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00b      	beq.n	800171c <update_file+0x64>
			    	sprintf (buffer, "error no %d in opening file *%s*\n", fresult, name);
 8001704:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <update_file+0x13c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	493d      	ldr	r1, [pc, #244]	; (8001804 <update_file+0x14c>)
 800170e:	483b      	ldr	r0, [pc, #236]	; (80017fc <update_file+0x144>)
 8001710:	f010 f82a 	bl	8011768 <siprintf>
			    	send_uart(buffer);
 8001714:	4839      	ldr	r0, [pc, #228]	; (80017fc <update_file+0x144>)
 8001716:	f7ff fb9d 	bl	8000e54 <send_uart>
 800171a:	e007      	b.n	800172c <update_file+0x74>
			    	sprintf (buffer, "file *%s* is opened. Now enter the string you want to update\n", name);
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	493a      	ldr	r1, [pc, #232]	; (8001808 <update_file+0x150>)
 8001720:	4836      	ldr	r0, [pc, #216]	; (80017fc <update_file+0x144>)
 8001722:	f010 f821 	bl	8011768 <siprintf>
			    	send_uart (buffer);
 8001726:	4835      	ldr	r0, [pc, #212]	; (80017fc <update_file+0x144>)
 8001728:	f7ff fb94 	bl	8000e54 <send_uart>
			    while (!com_bytes_available);
 800172c:	bf00      	nop
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <update_file+0x154>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0fb      	beq.n	800172e <update_file+0x76>
			    memcpy(&buffer,&com_buf, sizeof(com_buf));
 8001736:	4a31      	ldr	r2, [pc, #196]	; (80017fc <update_file+0x144>)
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <update_file+0x158>)
 800173a:	4610      	mov	r0, r2
 800173c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001740:	4602      	mov	r2, r0
 8001742:	4619      	mov	r1, r3
 8001744:	f8d1 c000 	ldr.w	ip, [r1]
 8001748:	684e      	ldr	r6, [r1, #4]
 800174a:	688d      	ldr	r5, [r1, #8]
 800174c:	68c9      	ldr	r1, [r1, #12]
 800174e:	f8c2 c000 	str.w	ip, [r2]
 8001752:	6056      	str	r6, [r2, #4]
 8001754:	6095      	str	r5, [r2, #8]
 8001756:	60d1      	str	r1, [r2, #12]
 8001758:	3310      	adds	r3, #16
 800175a:	3010      	adds	r0, #16
 800175c:	42a3      	cmp	r3, r4
 800175e:	d1ef      	bne.n	8001740 <update_file+0x88>
			    com_bytes_available = 0;
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <update_file+0x154>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
			    fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001766:	4825      	ldr	r0, [pc, #148]	; (80017fc <update_file+0x144>)
 8001768:	f7ff fb28 	bl	8000dbc <bufsize>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <update_file+0x15c>)
 8001772:	4922      	ldr	r1, [pc, #136]	; (80017fc <update_file+0x144>)
 8001774:	4822      	ldr	r0, [pc, #136]	; (8001800 <update_file+0x148>)
 8001776:	f00e faf8 	bl	800fd6a <f_write>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <update_file+0x13c>)
 8001780:	701a      	strb	r2, [r3, #0]
			    if (fresult != FR_OK)
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <update_file+0x13c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00d      	beq.n	80017a6 <update_file+0xee>
			    	clear_buffer();
 800178a:	f7ff fb2f 	bl	8000dec <clear_buffer>
			    	sprintf (buffer, "error no %d in writing file *%s*\n", fresult, name);
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <update_file+0x13c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4920      	ldr	r1, [pc, #128]	; (8001818 <update_file+0x160>)
 8001798:	4818      	ldr	r0, [pc, #96]	; (80017fc <update_file+0x144>)
 800179a:	f00f ffe5 	bl	8011768 <siprintf>
			    	send_uart(buffer);
 800179e:	4817      	ldr	r0, [pc, #92]	; (80017fc <update_file+0x144>)
 80017a0:	f7ff fb58 	bl	8000e54 <send_uart>
 80017a4:	e009      	b.n	80017ba <update_file+0x102>
			    	clear_buffer();
 80017a6:	f7ff fb21 	bl	8000dec <clear_buffer>
			    	sprintf (buffer, "*%s* written successfully\n", name);
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	491b      	ldr	r1, [pc, #108]	; (800181c <update_file+0x164>)
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <update_file+0x144>)
 80017b0:	f00f ffda 	bl	8011768 <siprintf>
			    	send_uart(buffer);
 80017b4:	4811      	ldr	r0, [pc, #68]	; (80017fc <update_file+0x144>)
 80017b6:	f7ff fb4d 	bl	8000e54 <send_uart>
			    fresult = f_close(&fil);
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <update_file+0x148>)
 80017bc:	f00e fce7 	bl	801018e <f_close>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <update_file+0x13c>)
 80017c6:	701a      	strb	r2, [r3, #0]
			    if (fresult != FR_OK)
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <update_file+0x13c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00a      	beq.n	80017e6 <update_file+0x12e>
			    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <update_file+0x13c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4911      	ldr	r1, [pc, #68]	; (8001820 <update_file+0x168>)
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <update_file+0x144>)
 80017dc:	f00f ffc4 	bl	8011768 <siprintf>
			    	send_uart(buffer);
 80017e0:	4806      	ldr	r0, [pc, #24]	; (80017fc <update_file+0x144>)
 80017e2:	f7ff fb37 	bl	8000e54 <send_uart>
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000046c 	.word	0x2000046c
 80017f4:	2000160c 	.word	0x2000160c
 80017f8:	08011f08 	.word	0x08011f08
 80017fc:	200015c4 	.word	0x200015c4
 8001800:	20001614 	.word	0x20001614
 8001804:	08011f20 	.word	0x08011f20
 8001808:	080121ec 	.word	0x080121ec
 800180c:	20000200 	.word	0x20000200
 8001810:	200028e4 	.word	0x200028e4
 8001814:	20001604 	.word	0x20001604
 8001818:	08011f84 	.word	0x08011f84
 800181c:	08011fa8 	.word	0x08011fa8
 8001820:	08011fc4 	.word	0x08011fc4

08001824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182a:	f001 fd65 	bl	80032f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182e:	f000 fa51 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001832:	f000 ff89 	bl	8002748 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001836:	f000 fb2b 	bl	8001e90 <MX_CAN1_Init>
  MX_I2C1_Init();
 800183a:	f000 fb5d 	bl	8001ef8 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800183e:	f000 fb89 	bl	8001f54 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001842:	f000 fba7 	bl	8001f94 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001846:	f000 fbdd 	bl	8002004 <MX_TIM1_Init>
  MX_TIM2_Init();
 800184a:	f000 fc7b 	bl	8002144 <MX_TIM2_Init>
  MX_TIM3_Init();
 800184e:	f000 fcef 	bl	8002230 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001852:	f000 fd63 	bl	800231c <MX_TIM4_Init>
  MX_UART4_Init();
 8001856:	f000 ff4d 	bl	80026f4 <MX_UART4_Init>
  MX_FATFS_Init();
 800185a:	f009 fd5d 	bl	800b318 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800185e:	f00f f95f 	bl	8010b20 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8001862:	f000 fdf3 	bl	800244c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001866:	f000 fe67 	bl	8002538 <MX_TIM8_Init>
  MX_TIM9_Init();
 800186a:	f000 febd 	bl	80025e8 <MX_TIM9_Init>
  MX_ADC1_Init();
 800186e:	f000 fabd 	bl	8001dec <MX_ADC1_Init>
  MX_TIM14_Init();
 8001872:	f000 ff1b 	bl	80026ac <MX_TIM14_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char cmd = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
  memset(&com_buf,0,sizeof(com_buf));
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	2100      	movs	r1, #0
 800187e:	48aa      	ldr	r0, [pc, #680]	; (8001b28 <main+0x304>)
 8001880:	f00f feb1 	bl	80115e6 <memset>
  HAL_TIM_Base_Start_IT(&htim14);
 8001884:	48a9      	ldr	r0, [pc, #676]	; (8001b2c <main+0x308>)
 8001886:	f006 f982 	bl	8007b8e <HAL_TIM_Base_Start_IT>

  mount_sd();
 800188a:	f7ff fb41 	bl	8000f10 <mount_sd>

  while (1)
  {
	  // test virtual com port
	  if(com_bytes_available){
 800188e:	4ba8      	ldr	r3, [pc, #672]	; (8001b30 <main+0x30c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8166 	beq.w	8001b64 <main+0x340>
		  com_bytes_available = 0;
 8001898:	4ba5      	ldr	r3, [pc, #660]	; (8001b30 <main+0x30c>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
		  */


  		  //Get_string(buffer);
  		  //int len = cmdlength(buffer);
		  int len = strlen(com_buf);
 800189e:	48a2      	ldr	r0, [pc, #648]	; (8001b28 <main+0x304>)
 80018a0:	f7fe fcc0 	bl	8000224 <strlen>
 80018a4:	4603      	mov	r3, r0
 80018a6:	607b      	str	r3, [r7, #4]
  		  get_path();
 80018a8:	f7ff fafe 	bl	8000ea8 <get_path>

  		  if (!(strncmp ("ls", com_buf,len))) cmd = 'l';
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	499d      	ldr	r1, [pc, #628]	; (8001b28 <main+0x304>)
 80018b2:	48a0      	ldr	r0, [pc, #640]	; (8001b34 <main+0x310>)
 80018b4:	f00f ff80 	bl	80117b8 <strncmp>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <main+0x9e>
 80018be:	236c      	movs	r3, #108	; 0x6c
 80018c0:	73fb      	strb	r3, [r7, #15]
  		  if (!(strncmp ("mkdir", com_buf,len))) cmd = 'm';
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4998      	ldr	r1, [pc, #608]	; (8001b28 <main+0x304>)
 80018c8:	489b      	ldr	r0, [pc, #620]	; (8001b38 <main+0x314>)
 80018ca:	f00f ff75 	bl	80117b8 <strncmp>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <main+0xb4>
 80018d4:	236d      	movs	r3, #109	; 0x6d
 80018d6:	73fb      	strb	r3, [r7, #15]
  		  if (!(strncmp ("mkfil", com_buf, len))) cmd = 'c';
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	461a      	mov	r2, r3
 80018dc:	4992      	ldr	r1, [pc, #584]	; (8001b28 <main+0x304>)
 80018de:	4897      	ldr	r0, [pc, #604]	; (8001b3c <main+0x318>)
 80018e0:	f00f ff6a 	bl	80117b8 <strncmp>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <main+0xca>
 80018ea:	2363      	movs	r3, #99	; 0x63
 80018ec:	73fb      	strb	r3, [r7, #15]
  		  if (!(strncmp ("read", com_buf, len))) cmd = 'r';
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	461a      	mov	r2, r3
 80018f2:	498d      	ldr	r1, [pc, #564]	; (8001b28 <main+0x304>)
 80018f4:	4892      	ldr	r0, [pc, #584]	; (8001b40 <main+0x31c>)
 80018f6:	f00f ff5f 	bl	80117b8 <strncmp>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <main+0xe0>
 8001900:	2372      	movs	r3, #114	; 0x72
 8001902:	73fb      	strb	r3, [r7, #15]
  		  if (!(strncmp ("write", com_buf, len))) cmd = 'w';
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	461a      	mov	r2, r3
 8001908:	4987      	ldr	r1, [pc, #540]	; (8001b28 <main+0x304>)
 800190a:	488e      	ldr	r0, [pc, #568]	; (8001b44 <main+0x320>)
 800190c:	f00f ff54 	bl	80117b8 <strncmp>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <main+0xf6>
 8001916:	2377      	movs	r3, #119	; 0x77
 8001918:	73fb      	strb	r3, [r7, #15]
  		  if (!(strncmp ("rm", com_buf, len))) cmd = 'd';
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	461a      	mov	r2, r3
 800191e:	4982      	ldr	r1, [pc, #520]	; (8001b28 <main+0x304>)
 8001920:	4889      	ldr	r0, [pc, #548]	; (8001b48 <main+0x324>)
 8001922:	f00f ff49 	bl	80117b8 <strncmp>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <main+0x10c>
 800192c:	2364      	movs	r3, #100	; 0x64
 800192e:	73fb      	strb	r3, [r7, #15]
  		  if (!(strncmp ("update", com_buf, len))) cmd = 'u';
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	461a      	mov	r2, r3
 8001934:	497c      	ldr	r1, [pc, #496]	; (8001b28 <main+0x304>)
 8001936:	4885      	ldr	r0, [pc, #532]	; (8001b4c <main+0x328>)
 8001938:	f00f ff3e 	bl	80117b8 <strncmp>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <main+0x122>
 8001942:	2375      	movs	r3, #117	; 0x75
 8001944:	73fb      	strb	r3, [r7, #15]
  		  if (!(strncmp ("checkfile", com_buf, len))) cmd = 'f';
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	461a      	mov	r2, r3
 800194a:	4977      	ldr	r1, [pc, #476]	; (8001b28 <main+0x304>)
 800194c:	4880      	ldr	r0, [pc, #512]	; (8001b50 <main+0x32c>)
 800194e:	f00f ff33 	bl	80117b8 <strncmp>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <main+0x138>
 8001958:	2366      	movs	r3, #102	; 0x66
 800195a:	73fb      	strb	r3, [r7, #15]
  		  if (!(strncmp ("checksd", com_buf, len))) cmd = 's';
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	461a      	mov	r2, r3
 8001960:	4971      	ldr	r1, [pc, #452]	; (8001b28 <main+0x304>)
 8001962:	487c      	ldr	r0, [pc, #496]	; (8001b54 <main+0x330>)
 8001964:	f00f ff28 	bl	80117b8 <strncmp>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <main+0x14e>
 800196e:	2373      	movs	r3, #115	; 0x73
 8001970:	73fb      	strb	r3, [r7, #15]


  		  switch (cmd)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	3b63      	subs	r3, #99	; 0x63
 8001976:	2b14      	cmp	r3, #20
 8001978:	f200 80d1 	bhi.w	8001b1e <main+0x2fa>
 800197c:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <main+0x160>)
 800197e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001982:	bf00      	nop
 8001984:	08001a39 	.word	0x08001a39
 8001988:	08001ad1 	.word	0x08001ad1
 800198c:	08001b1f 	.word	0x08001b1f
 8001990:	08001b01 	.word	0x08001b01
 8001994:	08001b1f 	.word	0x08001b1f
 8001998:	08001b1f 	.word	0x08001b1f
 800199c:	08001b1f 	.word	0x08001b1f
 80019a0:	08001b1f 	.word	0x08001b1f
 80019a4:	08001b1f 	.word	0x08001b1f
 80019a8:	080019d9 	.word	0x080019d9
 80019ac:	080019ed 	.word	0x080019ed
 80019b0:	08001b1f 	.word	0x08001b1f
 80019b4:	08001b1f 	.word	0x08001b1f
 80019b8:	08001b1f 	.word	0x08001b1f
 80019bc:	08001b1f 	.word	0x08001b1f
 80019c0:	08001a85 	.word	0x08001a85
 80019c4:	08001b11 	.word	0x08001b11
 80019c8:	08001b1f 	.word	0x08001b1f
 80019cc:	08001af1 	.word	0x08001af1
 80019d0:	08001b1f 	.word	0x08001b1f
 80019d4:	08001ae1 	.word	0x08001ae1
  		  {
  		  	  case ('l'):
				scan_files(path);
 80019d8:	485f      	ldr	r0, [pc, #380]	; (8001b58 <main+0x334>)
 80019da:	f7ff fabb 	bl	8000f54 <scan_files>
				cmd =0;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
				clear_buffer();
 80019e2:	f7ff fa03 	bl	8000dec <clear_buffer>
				clear_path();
 80019e6:	f7ff fa1b 	bl	8000e20 <clear_path>
				break;
 80019ea:	e0bc      	b.n	8001b66 <main+0x342>
  			  case ('m'):
				CDC_Transmit_FS("enter dir name\n", strlen("enter dir name\n"));
 80019ec:	210f      	movs	r1, #15
 80019ee:	485b      	ldr	r0, [pc, #364]	; (8001b5c <main+0x338>)
 80019f0:	f00f f972 	bl	8010cd8 <CDC_Transmit_FS>
				while (!com_bytes_available);
 80019f4:	bf00      	nop
 80019f6:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <main+0x30c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0fb      	beq.n	80019f6 <main+0x1d2>
				memcpy(&path,&com_buf, sizeof(path));
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <main+0x334>)
 8001a00:	4a49      	ldr	r2, [pc, #292]	; (8001b28 <main+0x304>)
 8001a02:	6815      	ldr	r5, [r2, #0]
 8001a04:	6854      	ldr	r4, [r2, #4]
 8001a06:	6890      	ldr	r0, [r2, #8]
 8001a08:	68d1      	ldr	r1, [r2, #12]
 8001a0a:	601d      	str	r5, [r3, #0]
 8001a0c:	605c      	str	r4, [r3, #4]
 8001a0e:	6098      	str	r0, [r3, #8]
 8001a10:	60d9      	str	r1, [r3, #12]
 8001a12:	6915      	ldr	r5, [r2, #16]
 8001a14:	6954      	ldr	r4, [r2, #20]
 8001a16:	6990      	ldr	r0, [r2, #24]
 8001a18:	69d1      	ldr	r1, [r2, #28]
 8001a1a:	611d      	str	r5, [r3, #16]
 8001a1c:	615c      	str	r4, [r3, #20]
 8001a1e:	6198      	str	r0, [r3, #24]
 8001a20:	61d9      	str	r1, [r3, #28]
				com_bytes_available = 0;
 8001a22:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <main+0x30c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
				create_dir (path);
 8001a28:	484b      	ldr	r0, [pc, #300]	; (8001b58 <main+0x334>)
 8001a2a:	f7ff fd0f 	bl	800144c <create_dir>
				cmd=0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]
				clear_path();
 8001a32:	f7ff f9f5 	bl	8000e20 <clear_path>
				break;
 8001a36:	e096      	b.n	8001b66 <main+0x342>
  			  case ('c'):
				CDC_Transmit_FS("enter file name\n", strlen("enter file name\n"));
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4849      	ldr	r0, [pc, #292]	; (8001b60 <main+0x33c>)
 8001a3c:	f00f f94c 	bl	8010cd8 <CDC_Transmit_FS>
				while (!com_bytes_available);
 8001a40:	bf00      	nop
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <main+0x30c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0fb      	beq.n	8001a42 <main+0x21e>
				memcpy(&path,&com_buf, sizeof(path));
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <main+0x334>)
 8001a4c:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <main+0x304>)
 8001a4e:	6815      	ldr	r5, [r2, #0]
 8001a50:	6854      	ldr	r4, [r2, #4]
 8001a52:	6890      	ldr	r0, [r2, #8]
 8001a54:	68d1      	ldr	r1, [r2, #12]
 8001a56:	601d      	str	r5, [r3, #0]
 8001a58:	605c      	str	r4, [r3, #4]
 8001a5a:	6098      	str	r0, [r3, #8]
 8001a5c:	60d9      	str	r1, [r3, #12]
 8001a5e:	6915      	ldr	r5, [r2, #16]
 8001a60:	6954      	ldr	r4, [r2, #20]
 8001a62:	6990      	ldr	r0, [r2, #24]
 8001a64:	69d1      	ldr	r1, [r2, #28]
 8001a66:	611d      	str	r5, [r3, #16]
 8001a68:	615c      	str	r4, [r3, #20]
 8001a6a:	6198      	str	r0, [r3, #24]
 8001a6c:	61d9      	str	r1, [r3, #28]
				com_bytes_available = 0;
 8001a6e:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <main+0x30c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
				create_file(path);
 8001a74:	4838      	ldr	r0, [pc, #224]	; (8001b58 <main+0x334>)
 8001a76:	f7ff fc3f 	bl	80012f8 <create_file>
				cmd = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
				clear_path();
 8001a7e:	f7ff f9cf 	bl	8000e20 <clear_path>
				break;
 8001a82:	e070      	b.n	8001b66 <main+0x342>
  			  case ('r'):
				CDC_Transmit_FS("enter file name\n", strlen("enter file name\n"));
 8001a84:	2110      	movs	r1, #16
 8001a86:	4836      	ldr	r0, [pc, #216]	; (8001b60 <main+0x33c>)
 8001a88:	f00f f926 	bl	8010cd8 <CDC_Transmit_FS>
				while (!com_bytes_available);
 8001a8c:	bf00      	nop
 8001a8e:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <main+0x30c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0fb      	beq.n	8001a8e <main+0x26a>
				memcpy(&path,&com_buf, sizeof(path));
 8001a96:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <main+0x334>)
 8001a98:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <main+0x304>)
 8001a9a:	6815      	ldr	r5, [r2, #0]
 8001a9c:	6854      	ldr	r4, [r2, #4]
 8001a9e:	6890      	ldr	r0, [r2, #8]
 8001aa0:	68d1      	ldr	r1, [r2, #12]
 8001aa2:	601d      	str	r5, [r3, #0]
 8001aa4:	605c      	str	r4, [r3, #4]
 8001aa6:	6098      	str	r0, [r3, #8]
 8001aa8:	60d9      	str	r1, [r3, #12]
 8001aaa:	6915      	ldr	r5, [r2, #16]
 8001aac:	6954      	ldr	r4, [r2, #20]
 8001aae:	6990      	ldr	r0, [r2, #24]
 8001ab0:	69d1      	ldr	r1, [r2, #28]
 8001ab2:	611d      	str	r5, [r3, #16]
 8001ab4:	615c      	str	r4, [r3, #20]
 8001ab6:	6198      	str	r0, [r3, #24]
 8001ab8:	61d9      	str	r1, [r3, #28]
				com_bytes_available = 0;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <main+0x30c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
				read_file (path);
 8001ac0:	4825      	ldr	r0, [pc, #148]	; (8001b58 <main+0x334>)
 8001ac2:	f7ff fb91 	bl	80011e8 <read_file>
				cmd = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
				clear_path();
 8001aca:	f7ff f9a9 	bl	8000e20 <clear_path>
				break;
 8001ace:	e04a      	b.n	8001b66 <main+0x342>
  			  case ('d'):
				remove_file(path);
 8001ad0:	4821      	ldr	r0, [pc, #132]	; (8001b58 <main+0x334>)
 8001ad2:	f7ff fc75 	bl	80013c0 <remove_file>
				cmd = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
				clear_path();
 8001ada:	f7ff f9a1 	bl	8000e20 <clear_path>
				break;
 8001ade:	e042      	b.n	8001b66 <main+0x342>
  			  case ('w'):
				write_file (path);
 8001ae0:	481d      	ldr	r0, [pc, #116]	; (8001b58 <main+0x334>)
 8001ae2:	f7ff facb 	bl	800107c <write_file>
				cmd = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
				clear_path();
 8001aea:	f7ff f999 	bl	8000e20 <clear_path>
				break;
 8001aee:	e03a      	b.n	8001b66 <main+0x342>
  			  case ('u'):
				update_file (path);
 8001af0:	4819      	ldr	r0, [pc, #100]	; (8001b58 <main+0x334>)
 8001af2:	f7ff fde1 	bl	80016b8 <update_file>
				cmd = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
				clear_path();
 8001afa:	f7ff f991 	bl	8000e20 <clear_path>
				break;
 8001afe:	e032      	b.n	8001b66 <main+0x342>
  			  case ('f'):
				check_file(path);
 8001b00:	4815      	ldr	r0, [pc, #84]	; (8001b58 <main+0x334>)
 8001b02:	f7ff fd33 	bl	800156c <check_file>
				cmd = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
				clear_path();
 8001b0a:	f7ff f989 	bl	8000e20 <clear_path>
				break;
 8001b0e:	e02a      	b.n	8001b66 <main+0x342>
			  case ('s'):
				check_sd();
 8001b10:	f7ff fcca 	bl	80014a8 <check_sd>
				cmd = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
				clear_path();
 8001b18:	f7ff f982 	bl	8000e20 <clear_path>
				break;
 8001b1c:	e023      	b.n	8001b66 <main+0x342>
			  default :
				clear_buffer();
 8001b1e:	f7ff f965 	bl	8000dec <clear_buffer>
				clear_path();
 8001b22:	f7ff f97d 	bl	8000e20 <clear_path>
				break;
 8001b26:	e01e      	b.n	8001b66 <main+0x342>
 8001b28:	200028e4 	.word	0x200028e4
 8001b2c:	20002a24 	.word	0x20002a24
 8001b30:	20000200 	.word	0x20000200
 8001b34:	08012254 	.word	0x08012254
 8001b38:	08012258 	.word	0x08012258
 8001b3c:	08012260 	.word	0x08012260
 8001b40:	08012268 	.word	0x08012268
 8001b44:	08012270 	.word	0x08012270
 8001b48:	08012278 	.word	0x08012278
 8001b4c:	0801227c 	.word	0x0801227c
 8001b50:	08012284 	.word	0x08012284
 8001b54:	08012290 	.word	0x08012290
 8001b58:	2000044c 	.word	0x2000044c
 8001b5c:	08012298 	.word	0x08012298
 8001b60:	080122a8 	.word	0x080122a8
  		  }

	  }
 8001b64:	bf00      	nop

	  HAL_Delay(100);
 8001b66:	2064      	movs	r0, #100	; 0x64
 8001b68:	f001 fc38 	bl	80033dc <HAL_Delay>


	  // OUTPUTS test:outputs funktionieren
	  HAL_GPIO_WritePin(VENTIL1_GPIO_Port, VENTIL1_Pin, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b72:	4853      	ldr	r0, [pc, #332]	; (8001cc0 <main+0x49c>)
 8001b74:	f002 fa7e 	bl	8004074 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(VENTIL2_GPIO_Port, VENTIL2_Pin, 1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7e:	4850      	ldr	r0, [pc, #320]	; (8001cc0 <main+0x49c>)
 8001b80:	f002 fa78 	bl	8004074 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(VACUUM_PUMP_GPIO_Port, VACUUM_PUMP_Pin, 1);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b8a:	484d      	ldr	r0, [pc, #308]	; (8001cc0 <main+0x49c>)
 8001b8c:	f002 fa72 	bl	8004074 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES1_GPIO_Port, OUTPUT_RES1_Pin, 1);
 8001b90:	2201      	movs	r2, #1
 8001b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b96:	484a      	ldr	r0, [pc, #296]	; (8001cc0 <main+0x49c>)
 8001b98:	f002 fa6c 	bl	8004074 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES2_GPIO_Port, OUTPUT_RES2_Pin, 1);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba2:	4848      	ldr	r0, [pc, #288]	; (8001cc4 <main+0x4a0>)
 8001ba4:	f002 fa66 	bl	8004074 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES3_GPIO_Port, OUTPUT_RES3_Pin, 1);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bae:	4845      	ldr	r0, [pc, #276]	; (8001cc4 <main+0x4a0>)
 8001bb0:	f002 fa60 	bl	8004074 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES4_GPIO_Port, OUTPUT_RES4_Pin, 1);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bba:	4843      	ldr	r0, [pc, #268]	; (8001cc8 <main+0x4a4>)
 8001bbc:	f002 fa5a 	bl	8004074 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES5_GPIO_Port, OUTPUT_RES5_Pin, 1);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc6:	4840      	ldr	r0, [pc, #256]	; (8001cc8 <main+0x4a4>)
 8001bc8:	f002 fa54 	bl	8004074 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES6_GPIO_Port, OUTPUT_RES6_Pin, 1);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd2:	483d      	ldr	r0, [pc, #244]	; (8001cc8 <main+0x4a4>)
 8001bd4:	f002 fa4e 	bl	8004074 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_RES7_GPIO_Port, OUTPUT_RES7_Pin, 1);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bde:	4839      	ldr	r0, [pc, #228]	; (8001cc4 <main+0x4a0>)
 8001be0:	f002 fa48 	bl	8004074 <HAL_GPIO_WritePin>

	  // TEST inputs: inputs funktionieren
	  int input = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_X1_GPIO_Port, ENDSTOP_X1_Pin))
 8001be8:	2140      	movs	r1, #64	; 0x40
 8001bea:	4838      	ldr	r0, [pc, #224]	; (8001ccc <main+0x4a8>)
 8001bec:	f002 fa2a 	bl	8004044 <HAL_GPIO_ReadPin>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <main+0x3d8>
		  input++;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_X2_GPIO_Port, ENDSTOP_X2_Pin))
 8001bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c00:	4833      	ldr	r0, [pc, #204]	; (8001cd0 <main+0x4ac>)
 8001c02:	f002 fa1f 	bl	8004044 <HAL_GPIO_ReadPin>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <main+0x3ee>
		  input++;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_Y1_GPIO_Port, ENDSTOP_Y1_Pin))
 8001c12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c16:	482e      	ldr	r0, [pc, #184]	; (8001cd0 <main+0x4ac>)
 8001c18:	f002 fa14 	bl	8004044 <HAL_GPIO_ReadPin>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <main+0x404>
		  input++;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_Y2_GPIO_Port, ENDSTOP_Y2_Pin))
 8001c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c2c:	4828      	ldr	r0, [pc, #160]	; (8001cd0 <main+0x4ac>)
 8001c2e:	f002 fa09 	bl	8004044 <HAL_GPIO_ReadPin>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <main+0x41a>
		  input++;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_Z1_GPIO_Port, ENDSTOP_Z1_Pin))
 8001c3e:	2102      	movs	r1, #2
 8001c40:	4822      	ldr	r0, [pc, #136]	; (8001ccc <main+0x4a8>)
 8001c42:	f002 f9ff 	bl	8004044 <HAL_GPIO_ReadPin>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <main+0x42e>
		  input++;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_Z2_GPIO_Port, ENDSTOP_Z2_Pin))
 8001c52:	2101      	movs	r1, #1
 8001c54:	481d      	ldr	r0, [pc, #116]	; (8001ccc <main+0x4a8>)
 8001c56:	f002 f9f5 	bl	8004044 <HAL_GPIO_ReadPin>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <main+0x442>
		  input++;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	3301      	adds	r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_ROT1_GPIO_Port, ENDSTOP_ROT1_Pin))
 8001c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6a:	4816      	ldr	r0, [pc, #88]	; (8001cc4 <main+0x4a0>)
 8001c6c:	f002 f9ea 	bl	8004044 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <main+0x458>
		  input++;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(ENDSTOP_ROT2_GPIO_Port, ENDSTOP_ROT2_Pin))
 8001c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c80:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <main+0x4a0>)
 8001c82:	f002 f9df 	bl	8004044 <HAL_GPIO_ReadPin>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <main+0x46e>
		  input++;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(INPUT_RES1_GPIO_Port, INPUT_RES1_Pin))
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	480a      	ldr	r0, [pc, #40]	; (8001cc0 <main+0x49c>)
 8001c96:	f002 f9d5 	bl	8004044 <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <main+0x482>
		  input++;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]
	  if(!HAL_GPIO_ReadPin(INPUT_RES2_GPIO_Port, INPUT_RES2_Pin))
 8001ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001caa:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <main+0x4ac>)
 8001cac:	f002 f9ca 	bl	8004044 <HAL_GPIO_ReadPin>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f adeb 	bne.w	800188e <main+0x6a>
		  input++;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
  {
 8001cbe:	e5e6      	b.n	800188e <main+0x6a>
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40020800 	.word	0x40020800

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0ac      	sub	sp, #176	; 0xb0
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cde:	2234      	movs	r2, #52	; 0x34
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f00f fc7f 	bl	80115e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	225c      	movs	r2, #92	; 0x5c
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00f fc70 	bl	80115e6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <SystemClock_Config+0x110>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a35      	ldr	r2, [pc, #212]	; (8001de4 <SystemClock_Config+0x110>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <SystemClock_Config+0x110>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <SystemClock_Config+0x114>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <SystemClock_Config+0x114>)
 8001d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <SystemClock_Config+0x114>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d5e:	23a8      	movs	r3, #168	; 0xa8
 8001d60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d76:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 faa6 	bl	80062cc <HAL_RCC_OscConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d86:	f000 fde9 	bl	800295c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d92:	2300      	movs	r3, #0
 8001d94:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d9a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da0:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001da2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da6:	2105      	movs	r1, #5
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fcab 	bl	8005704 <HAL_RCC_ClockConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001db4:	f000 fdd2 	bl	800295c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001db8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dbc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fdb4 	bl	8005938 <HAL_RCCEx_PeriphCLKConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001dd6:	f000 fdc1 	bl	800295c <Error_Handler>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	37b0      	adds	r7, #176	; 0xb0
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40007000 	.word	0x40007000

08001dec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <MX_ADC1_Init+0x9c>)
 8001e02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e2e:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <MX_ADC1_Init+0xa0>)
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e4e:	f001 fae7 	bl	8003420 <HAL_ADC_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e58:	f000 fd80 	bl	800295c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e6e:	f001 fb1b 	bl	80034a8 <HAL_ADC_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e78:	f000 fd70 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20002798 	.word	0x20002798
 8001e88:	40012000 	.word	0x40012000
 8001e8c:	0f000001 	.word	0x0f000001

08001e90 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001e96:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <MX_CAN1_Init+0x64>)
 8001e98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <MX_CAN1_Init+0x60>)
 8001ede:	f001 fd11 	bl	8003904 <HAL_CAN_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001ee8:	f000 fd38 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200029fc 	.word	0x200029fc
 8001ef4:	40006400 	.word	0x40006400

08001ef8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001efe:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <MX_I2C1_Init+0x54>)
 8001f00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <MX_I2C1_Init+0x58>)
 8001f06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001f16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_I2C1_Init+0x50>)
 8001f36:	f002 f8d1 	bl	80040dc <HAL_I2C_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f40:	f000 fd0c 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200026c4 	.word	0x200026c4
 8001f4c:	40005400 	.word	0x40005400
 8001f50:	000186a0 	.word	0x000186a0

08001f54 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <MX_SDIO_SD_Init+0x3c>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <MX_SDIO_SD_Init+0x38>)
 8001f7e:	2204      	movs	r2, #4
 8001f80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	20002860 	.word	0x20002860
 8001f90:	40012c00 	.word	0x40012c00

08001f94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001f9a:	4a19      	ldr	r2, [pc, #100]	; (8002000 <MX_SPI1_Init+0x6c>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fe2:	220a      	movs	r2, #10
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001fe8:	f005 fd42 	bl	8007a70 <HAL_SPI_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001ff2:	f000 fcb3 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20002964 	.word	0x20002964
 8002000:	40013000 	.word	0x40013000

08002004 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b096      	sub	sp, #88	; 0x58
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	615a      	str	r2, [r3, #20]
 8002034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2220      	movs	r2, #32
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f00f fad2 	bl	80115e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <MX_TIM1_Init+0x138>)
 8002044:	4a3e      	ldr	r2, [pc, #248]	; (8002140 <MX_TIM1_Init+0x13c>)
 8002046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002048:	4b3c      	ldr	r3, [pc, #240]	; (800213c <MX_TIM1_Init+0x138>)
 800204a:	2200      	movs	r2, #0
 800204c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <MX_TIM1_Init+0x138>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <MX_TIM1_Init+0x138>)
 8002056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800205a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <MX_TIM1_Init+0x138>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002062:	4b36      	ldr	r3, [pc, #216]	; (800213c <MX_TIM1_Init+0x138>)
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <MX_TIM1_Init+0x138>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800206e:	4833      	ldr	r0, [pc, #204]	; (800213c <MX_TIM1_Init+0x138>)
 8002070:	f005 fd62 	bl	8007b38 <HAL_TIM_Base_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800207a:	f000 fc6f 	bl	800295c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002084:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002088:	4619      	mov	r1, r3
 800208a:	482c      	ldr	r0, [pc, #176]	; (800213c <MX_TIM1_Init+0x138>)
 800208c:	f006 f838 	bl	8008100 <HAL_TIM_ConfigClockSource>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002096:	f000 fc61 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800209a:	4828      	ldr	r0, [pc, #160]	; (800213c <MX_TIM1_Init+0x138>)
 800209c:	f005 fd9b 	bl	8007bd6 <HAL_TIM_PWM_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020a6:	f000 fc59 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020b6:	4619      	mov	r1, r3
 80020b8:	4820      	ldr	r0, [pc, #128]	; (800213c <MX_TIM1_Init+0x138>)
 80020ba:	f006 fbf5 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80020c4:	f000 fc4a 	bl	800295c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c8:	2360      	movs	r3, #96	; 0x60
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020d4:	2300      	movs	r3, #0
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4813      	ldr	r0, [pc, #76]	; (800213c <MX_TIM1_Init+0x138>)
 80020ee:	f005 ff41 	bl	8007f74 <HAL_TIM_PWM_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80020f8:	f000 fc30 	bl	800295c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002114:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	4619      	mov	r1, r3
 800211e:	4807      	ldr	r0, [pc, #28]	; (800213c <MX_TIM1_Init+0x138>)
 8002120:	f006 fc3e 	bl	80089a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800212a:	f000 fc17 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <MX_TIM1_Init+0x138>)
 8002130:	f000 fede 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 8002134:	bf00      	nop
 8002136:	3758      	adds	r7, #88	; 0x58
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200027e0 	.word	0x200027e0
 8002140:	40010000 	.word	0x40010000

08002144 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	; 0x38
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002158:	f107 0320 	add.w	r3, r7, #32
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
 8002170:	615a      	str	r2, [r3, #20]
 8002172:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <MX_TIM2_Init+0xe8>)
 8002176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800217a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800217c:	4b2b      	ldr	r3, [pc, #172]	; (800222c <MX_TIM2_Init+0xe8>)
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <MX_TIM2_Init+0xe8>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <MX_TIM2_Init+0xe8>)
 800218a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800218e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <MX_TIM2_Init+0xe8>)
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <MX_TIM2_Init+0xe8>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800219c:	4823      	ldr	r0, [pc, #140]	; (800222c <MX_TIM2_Init+0xe8>)
 800219e:	f005 fccb 	bl	8007b38 <HAL_TIM_Base_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021a8:	f000 fbd8 	bl	800295c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b6:	4619      	mov	r1, r3
 80021b8:	481c      	ldr	r0, [pc, #112]	; (800222c <MX_TIM2_Init+0xe8>)
 80021ba:	f005 ffa1 	bl	8008100 <HAL_TIM_ConfigClockSource>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021c4:	f000 fbca 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021c8:	4818      	ldr	r0, [pc, #96]	; (800222c <MX_TIM2_Init+0xe8>)
 80021ca:	f005 fd04 	bl	8007bd6 <HAL_TIM_PWM_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80021d4:	f000 fbc2 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021e0:	f107 0320 	add.w	r3, r7, #32
 80021e4:	4619      	mov	r1, r3
 80021e6:	4811      	ldr	r0, [pc, #68]	; (800222c <MX_TIM2_Init+0xe8>)
 80021e8:	f006 fb5e 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80021f2:	f000 fbb3 	bl	800295c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f6:	2360      	movs	r3, #96	; 0x60
 80021f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2200      	movs	r2, #0
 800220a:	4619      	mov	r1, r3
 800220c:	4807      	ldr	r0, [pc, #28]	; (800222c <MX_TIM2_Init+0xe8>)
 800220e:	f005 feb1 	bl	8007f74 <HAL_TIM_PWM_ConfigChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002218:	f000 fba0 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800221c:	4803      	ldr	r0, [pc, #12]	; (800222c <MX_TIM2_Init+0xe8>)
 800221e:	f000 fe67 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 8002222:	bf00      	nop
 8002224:	3738      	adds	r7, #56	; 0x38
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200029bc 	.word	0x200029bc

08002230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08e      	sub	sp, #56	; 0x38
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002244:	f107 0320 	add.w	r3, r7, #32
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
 800225c:	615a      	str	r2, [r3, #20]
 800225e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002260:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <MX_TIM3_Init+0xe4>)
 8002262:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <MX_TIM3_Init+0xe8>)
 8002264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <MX_TIM3_Init+0xe4>)
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <MX_TIM3_Init+0xe4>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <MX_TIM3_Init+0xe4>)
 8002274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002278:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <MX_TIM3_Init+0xe4>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <MX_TIM3_Init+0xe4>)
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002286:	4823      	ldr	r0, [pc, #140]	; (8002314 <MX_TIM3_Init+0xe4>)
 8002288:	f005 fc56 	bl	8007b38 <HAL_TIM_Base_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002292:	f000 fb63 	bl	800295c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800229c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a0:	4619      	mov	r1, r3
 80022a2:	481c      	ldr	r0, [pc, #112]	; (8002314 <MX_TIM3_Init+0xe4>)
 80022a4:	f005 ff2c 	bl	8008100 <HAL_TIM_ConfigClockSource>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022ae:	f000 fb55 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022b2:	4818      	ldr	r0, [pc, #96]	; (8002314 <MX_TIM3_Init+0xe4>)
 80022b4:	f005 fc8f 	bl	8007bd6 <HAL_TIM_PWM_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022be:	f000 fb4d 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ca:	f107 0320 	add.w	r3, r7, #32
 80022ce:	4619      	mov	r1, r3
 80022d0:	4810      	ldr	r0, [pc, #64]	; (8002314 <MX_TIM3_Init+0xe4>)
 80022d2:	f006 fae9 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022dc:	f000 fb3e 	bl	800295c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e0:	2360      	movs	r3, #96	; 0x60
 80022e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	4619      	mov	r1, r3
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <MX_TIM3_Init+0xe4>)
 80022f8:	f005 fe3c 	bl	8007f74 <HAL_TIM_PWM_ConfigChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002302:	f000 fb2b 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002306:	4803      	ldr	r0, [pc, #12]	; (8002314 <MX_TIM3_Init+0xe4>)
 8002308:	f000 fdf2 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 800230c:	bf00      	nop
 800230e:	3738      	adds	r7, #56	; 0x38
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20002758 	.word	0x20002758
 8002318:	40000400 	.word	0x40000400

0800231c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08e      	sub	sp, #56	; 0x38
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002330:	f107 0320 	add.w	r3, r7, #32
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	615a      	str	r2, [r3, #20]
 800234a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <MX_TIM4_Init+0x128>)
 800234e:	4a3e      	ldr	r2, [pc, #248]	; (8002448 <MX_TIM4_Init+0x12c>)
 8002350:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002352:	4b3c      	ldr	r3, [pc, #240]	; (8002444 <MX_TIM4_Init+0x128>)
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002358:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <MX_TIM4_Init+0x128>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <MX_TIM4_Init+0x128>)
 8002360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002364:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	4b37      	ldr	r3, [pc, #220]	; (8002444 <MX_TIM4_Init+0x128>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <MX_TIM4_Init+0x128>)
 800236e:	2200      	movs	r2, #0
 8002370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002372:	4834      	ldr	r0, [pc, #208]	; (8002444 <MX_TIM4_Init+0x128>)
 8002374:	f005 fbe0 	bl	8007b38 <HAL_TIM_Base_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800237e:	f000 faed 	bl	800295c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800238c:	4619      	mov	r1, r3
 800238e:	482d      	ldr	r0, [pc, #180]	; (8002444 <MX_TIM4_Init+0x128>)
 8002390:	f005 feb6 	bl	8008100 <HAL_TIM_ConfigClockSource>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800239a:	f000 fadf 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800239e:	4829      	ldr	r0, [pc, #164]	; (8002444 <MX_TIM4_Init+0x128>)
 80023a0:	f005 fc19 	bl	8007bd6 <HAL_TIM_PWM_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80023aa:	f000 fad7 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023b6:	f107 0320 	add.w	r3, r7, #32
 80023ba:	4619      	mov	r1, r3
 80023bc:	4821      	ldr	r0, [pc, #132]	; (8002444 <MX_TIM4_Init+0x128>)
 80023be:	f006 fa73 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80023c8:	f000 fac8 	bl	800295c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023cc:	2360      	movs	r3, #96	; 0x60
 80023ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	2200      	movs	r2, #0
 80023e0:	4619      	mov	r1, r3
 80023e2:	4818      	ldr	r0, [pc, #96]	; (8002444 <MX_TIM4_Init+0x128>)
 80023e4:	f005 fdc6 	bl	8007f74 <HAL_TIM_PWM_ConfigChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80023ee:	f000 fab5 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2204      	movs	r2, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4812      	ldr	r0, [pc, #72]	; (8002444 <MX_TIM4_Init+0x128>)
 80023fa:	f005 fdbb 	bl	8007f74 <HAL_TIM_PWM_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002404:	f000 faaa 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	2208      	movs	r2, #8
 800240c:	4619      	mov	r1, r3
 800240e:	480d      	ldr	r0, [pc, #52]	; (8002444 <MX_TIM4_Init+0x128>)
 8002410:	f005 fdb0 	bl	8007f74 <HAL_TIM_PWM_ConfigChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800241a:	f000 fa9f 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	220c      	movs	r2, #12
 8002422:	4619      	mov	r1, r3
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <MX_TIM4_Init+0x128>)
 8002426:	f005 fda5 	bl	8007f74 <HAL_TIM_PWM_ConfigChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002430:	f000 fa94 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <MX_TIM4_Init+0x128>)
 8002436:	f000 fd5b 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 800243a:	bf00      	nop
 800243c:	3738      	adds	r7, #56	; 0x38
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20002684 	.word	0x20002684
 8002448:	40000800 	.word	0x40000800

0800244c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08e      	sub	sp, #56	; 0x38
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002460:	f107 0320 	add.w	r3, r7, #32
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
 8002478:	615a      	str	r2, [r3, #20]
 800247a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <MX_TIM5_Init+0xe4>)
 800247e:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <MX_TIM5_Init+0xe8>)
 8002480:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <MX_TIM5_Init+0xe4>)
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <MX_TIM5_Init+0xe4>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <MX_TIM5_Init+0xe4>)
 8002490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002494:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <MX_TIM5_Init+0xe4>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <MX_TIM5_Init+0xe4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024a2:	4823      	ldr	r0, [pc, #140]	; (8002530 <MX_TIM5_Init+0xe4>)
 80024a4:	f005 fb48 	bl	8007b38 <HAL_TIM_Base_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80024ae:	f000 fa55 	bl	800295c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024bc:	4619      	mov	r1, r3
 80024be:	481c      	ldr	r0, [pc, #112]	; (8002530 <MX_TIM5_Init+0xe4>)
 80024c0:	f005 fe1e 	bl	8008100 <HAL_TIM_ConfigClockSource>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80024ca:	f000 fa47 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024ce:	4818      	ldr	r0, [pc, #96]	; (8002530 <MX_TIM5_Init+0xe4>)
 80024d0:	f005 fb81 	bl	8007bd6 <HAL_TIM_PWM_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80024da:	f000 fa3f 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024e6:	f107 0320 	add.w	r3, r7, #32
 80024ea:	4619      	mov	r1, r3
 80024ec:	4810      	ldr	r0, [pc, #64]	; (8002530 <MX_TIM5_Init+0xe4>)
 80024ee:	f006 f9db 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80024f8:	f000 fa30 	bl	800295c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fc:	2360      	movs	r3, #96	; 0x60
 80024fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2200      	movs	r2, #0
 8002510:	4619      	mov	r1, r3
 8002512:	4807      	ldr	r0, [pc, #28]	; (8002530 <MX_TIM5_Init+0xe4>)
 8002514:	f005 fd2e 	bl	8007f74 <HAL_TIM_PWM_ConfigChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800251e:	f000 fa1d 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002522:	4803      	ldr	r0, [pc, #12]	; (8002530 <MX_TIM5_Init+0xe4>)
 8002524:	f000 fce4 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 8002528:	bf00      	nop
 800252a:	3738      	adds	r7, #56	; 0x38
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20002718 	.word	0x20002718
 8002534:	40000c00 	.word	0x40000c00

08002538 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f00f f84d 	bl	80115e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <MX_TIM8_Init+0xa8>)
 8002556:	4a23      	ldr	r2, [pc, #140]	; (80025e4 <MX_TIM8_Init+0xac>)
 8002558:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <MX_TIM8_Init+0xa8>)
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <MX_TIM8_Init+0xa8>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002566:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <MX_TIM8_Init+0xa8>)
 8002568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800256c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <MX_TIM8_Init+0xa8>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <MX_TIM8_Init+0xa8>)
 8002576:	2200      	movs	r2, #0
 8002578:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <MX_TIM8_Init+0xa8>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002580:	2301      	movs	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002588:	2301      	movs	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002598:	2301      	movs	r3, #1
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800259c:	2300      	movs	r3, #0
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	4619      	mov	r1, r3
 80025aa:	480d      	ldr	r0, [pc, #52]	; (80025e0 <MX_TIM8_Init+0xa8>)
 80025ac:	f005 fb48 	bl	8007c40 <HAL_TIM_Encoder_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80025b6:	f000 f9d1 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4806      	ldr	r0, [pc, #24]	; (80025e0 <MX_TIM8_Init+0xa8>)
 80025c8:	f006 f96e 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80025d2:	f000 f9c3 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	3730      	adds	r7, #48	; 0x30
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20002644 	.word	0x20002644
 80025e4:	40010400 	.word	0x40010400

080025e8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	; 0x30
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ee:	f107 0320 	add.w	r3, r7, #32
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]
 800260a:	615a      	str	r2, [r3, #20]
 800260c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800260e:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <MX_TIM9_Init+0xbc>)
 8002610:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <MX_TIM9_Init+0xc0>)
 8002612:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <MX_TIM9_Init+0xbc>)
 8002616:	2200      	movs	r2, #0
 8002618:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <MX_TIM9_Init+0xbc>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <MX_TIM9_Init+0xbc>)
 8002622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002626:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <MX_TIM9_Init+0xbc>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <MX_TIM9_Init+0xbc>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002634:	481b      	ldr	r0, [pc, #108]	; (80026a4 <MX_TIM9_Init+0xbc>)
 8002636:	f005 fa7f 	bl	8007b38 <HAL_TIM_Base_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002640:	f000 f98c 	bl	800295c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002648:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800264a:	f107 0320 	add.w	r3, r7, #32
 800264e:	4619      	mov	r1, r3
 8002650:	4814      	ldr	r0, [pc, #80]	; (80026a4 <MX_TIM9_Init+0xbc>)
 8002652:	f005 fd55 	bl	8008100 <HAL_TIM_ConfigClockSource>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800265c:	f000 f97e 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002660:	4810      	ldr	r0, [pc, #64]	; (80026a4 <MX_TIM9_Init+0xbc>)
 8002662:	f005 fab8 	bl	8007bd6 <HAL_TIM_PWM_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800266c:	f000 f976 	bl	800295c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002670:	2360      	movs	r3, #96	; 0x60
 8002672:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	2200      	movs	r2, #0
 8002684:	4619      	mov	r1, r3
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <MX_TIM9_Init+0xbc>)
 8002688:	f005 fc74 	bl	8007f74 <HAL_TIM_PWM_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002692:	f000 f963 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002696:	4803      	ldr	r0, [pc, #12]	; (80026a4 <MX_TIM9_Init+0xbc>)
 8002698:	f000 fc2a 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 800269c:	bf00      	nop
 800269e:	3730      	adds	r7, #48	; 0x30
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20002820 	.word	0x20002820
 80026a8:	40014000 	.word	0x40014000

080026ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <MX_TIM14_Init+0x40>)
 80026b2:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <MX_TIM14_Init+0x44>)
 80026b4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <MX_TIM14_Init+0x40>)
 80026b8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80026bc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <MX_TIM14_Init+0x40>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <MX_TIM14_Init+0x40>)
 80026c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026ca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <MX_TIM14_Init+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <MX_TIM14_Init+0x40>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80026d8:	4804      	ldr	r0, [pc, #16]	; (80026ec <MX_TIM14_Init+0x40>)
 80026da:	f005 fa2d 	bl	8007b38 <HAL_TIM_Base_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80026e4:	f000 f93a 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20002a24 	.word	0x20002a24
 80026f0:	40002000 	.word	0x40002000

080026f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <MX_UART4_Init+0x4c>)
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <MX_UART4_Init+0x50>)
 80026fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <MX_UART4_Init+0x4c>)
 8002700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002704:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <MX_UART4_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <MX_UART4_Init+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <MX_UART4_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <MX_UART4_Init+0x4c>)
 800271a:	220c      	movs	r2, #12
 800271c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <MX_UART4_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <MX_UART4_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800272a:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_UART4_Init+0x4c>)
 800272c:	f006 f99e 	bl	8008a6c <HAL_HalfDuplex_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002736:	f000 f911 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20002924 	.word	0x20002924
 8002744:	40004c00 	.word	0x40004c00

08002748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	; 0x30
 800274c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	4b78      	ldr	r3, [pc, #480]	; (8002944 <MX_GPIO_Init+0x1fc>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a77      	ldr	r2, [pc, #476]	; (8002944 <MX_GPIO_Init+0x1fc>)
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b75      	ldr	r3, [pc, #468]	; (8002944 <MX_GPIO_Init+0x1fc>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	4b71      	ldr	r3, [pc, #452]	; (8002944 <MX_GPIO_Init+0x1fc>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a70      	ldr	r2, [pc, #448]	; (8002944 <MX_GPIO_Init+0x1fc>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b6e      	ldr	r3, [pc, #440]	; (8002944 <MX_GPIO_Init+0x1fc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <MX_GPIO_Init+0x1fc>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a69      	ldr	r2, [pc, #420]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a62      	ldr	r2, [pc, #392]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b60      	ldr	r3, [pc, #384]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b59      	ldr	r3, [pc, #356]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	4b55      	ldr	r3, [pc, #340]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a54      	ldr	r2, [pc, #336]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027f4:	f043 0308 	orr.w	r3, r3, #8
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b52      	ldr	r3, [pc, #328]	; (8002944 <MX_GPIO_Init+0x1fc>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_Z_Pin|DIR_Z_Pin|GPIO_PIN_10|DIR_X_Pin, GPIO_PIN_RESET);
 8002806:	2200      	movs	r2, #0
 8002808:	f242 4124 	movw	r1, #9252	; 0x2424
 800280c:	484e      	ldr	r0, [pc, #312]	; (8002948 <MX_GPIO_Init+0x200>)
 800280e:	f001 fc31 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_ROT_Pin|DIR_ROT_Pin|SPI_DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	2139      	movs	r1, #57	; 0x39
 8002816:	484d      	ldr	r0, [pc, #308]	; (800294c <MX_GPIO_Init+0x204>)
 8002818:	f001 fc2c 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_RESET_Pin|LED_Status_Pin|OUTPUT_RES6_Pin|OUTPUT_RES5_Pin
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8002822:	484b      	ldr	r0, [pc, #300]	; (8002950 <MX_GPIO_Init+0x208>)
 8002824:	f001 fc26 	bl	8004074 <HAL_GPIO_WritePin>
                          |OUTPUT_RES4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_RES7_Pin|OUTPUT_RES3_Pin|OUTPUT_RES2_Pin, GPIO_PIN_RESET);
 8002828:	2200      	movs	r2, #0
 800282a:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800282e:	4849      	ldr	r0, [pc, #292]	; (8002954 <MX_GPIO_Init+0x20c>)
 8002830:	f001 fc20 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT_RES1_Pin|VACUUM_PUMP_Pin|VENTIL2_Pin|VENTIL1_Pin
 8002834:	2200      	movs	r2, #0
 8002836:	f640 7148 	movw	r1, #3912	; 0xf48
 800283a:	4847      	ldr	r0, [pc, #284]	; (8002958 <MX_GPIO_Init+0x210>)
 800283c:	f001 fc1a 	bl	8004074 <HAL_GPIO_WritePin>
                          |EN_Y_Pin|DIR_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_Z_Pin DIR_Z_Pin PE10 DIR_X_Pin */
  GPIO_InitStruct.Pin = EN_Z_Pin|DIR_Z_Pin|GPIO_PIN_10|DIR_X_Pin;
 8002840:	f242 4324 	movw	r3, #9252	; 0x2424
 8002844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002846:	2301      	movs	r3, #1
 8002848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	483b      	ldr	r0, [pc, #236]	; (8002948 <MX_GPIO_Init+0x200>)
 800285a:	f001 fa61 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIAG_Z_Pin INDEX_Z_Pin ENDSTOP_X1_Pin SDIO_CD_Pin
                           DIAG_X_Pin INDEX_X_Pin ENDSTOP_Z2_Pin ENDSTOP_Z1_Pin */
  GPIO_InitStruct.Pin = DIAG_Z_Pin|INDEX_Z_Pin|ENDSTOP_X1_Pin|SDIO_CD_Pin
 800285e:	f641 03db 	movw	r3, #6363	; 0x18db
 8002862:	61fb      	str	r3, [r7, #28]
                          |DIAG_X_Pin|INDEX_X_Pin|ENDSTOP_Z2_Pin|ENDSTOP_Z1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	4619      	mov	r1, r3
 8002872:	4835      	ldr	r0, [pc, #212]	; (8002948 <MX_GPIO_Init+0x200>)
 8002874:	f001 fa54 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENDSTOP_X2_Pin ENDSTOP_Y1_Pin ENDSTOP_Y2_Pin DIAG_ROT_Pin
                           INDEX_ROT_Pin ENC_BTN_Pin INPUT_RES2_Pin */
  GPIO_InitStruct.Pin = ENDSTOP_X2_Pin|ENDSTOP_Y1_Pin|ENDSTOP_Y2_Pin|DIAG_ROT_Pin
 8002878:	f24f 2306 	movw	r3, #61958	; 0xf206
 800287c:	61fb      	str	r3, [r7, #28]
                          |INDEX_ROT_Pin|ENC_BTN_Pin|INPUT_RES2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	482f      	ldr	r0, [pc, #188]	; (800294c <MX_GPIO_Init+0x204>)
 800288e:	f001 fa47 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_ROT_Pin DIR_ROT_Pin SPI_DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = EN_ROT_Pin|DIR_ROT_Pin|SPI_DC_Pin|SPI_CS_Pin;
 8002892:	2339      	movs	r3, #57	; 0x39
 8002894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4828      	ldr	r0, [pc, #160]	; (800294c <MX_GPIO_Init+0x204>)
 80028aa:	f001 fa39 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RESET_Pin LED_Status_Pin OUTPUT_RES6_Pin OUTPUT_RES5_Pin
                           OUTPUT_RES4_Pin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin|LED_Status_Pin|OUTPUT_RES6_Pin|OUTPUT_RES5_Pin
 80028ae:	f44f 63f2 	mov.w	r3, #1936	; 0x790
 80028b2:	61fb      	str	r3, [r7, #28]
                          |OUTPUT_RES4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	4822      	ldr	r0, [pc, #136]	; (8002950 <MX_GPIO_Init+0x208>)
 80028c8:	f001 fa2a 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_RES7_Pin OUTPUT_RES3_Pin OUTPUT_RES2_Pin */
  GPIO_InitStruct.Pin = OUTPUT_RES7_Pin|OUTPUT_RES3_Pin|OUTPUT_RES2_Pin;
 80028cc:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80028d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d2:	2301      	movs	r3, #1
 80028d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	481b      	ldr	r0, [pc, #108]	; (8002954 <MX_GPIO_Init+0x20c>)
 80028e6:	f001 fa1b 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_RES1_Pin VACUUM_PUMP_Pin VENTIL2_Pin VENTIL1_Pin
                           EN_Y_Pin DIR_Y_Pin */
  GPIO_InitStruct.Pin = OUTPUT_RES1_Pin|VACUUM_PUMP_Pin|VENTIL2_Pin|VENTIL1_Pin
 80028ea:	f640 7348 	movw	r3, #3912	; 0xf48
 80028ee:	61fb      	str	r3, [r7, #28]
                          |EN_Y_Pin|DIR_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f0:	2301      	movs	r3, #1
 80028f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	4815      	ldr	r0, [pc, #84]	; (8002958 <MX_GPIO_Init+0x210>)
 8002904:	f001 fa0c 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 INDEX_Y_Pin INPUT_RES1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|INDEX_Y_Pin|INPUT_RES1_Pin;
 8002908:	23b0      	movs	r3, #176	; 0xb0
 800290a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	4619      	mov	r1, r3
 800291a:	480f      	ldr	r0, [pc, #60]	; (8002958 <MX_GPIO_Init+0x210>)
 800291c:	f001 fa00 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENDSTOP_ROT2_Pin ENDSTOP_ROT1_Pin */
  GPIO_InitStruct.Pin = ENDSTOP_ROT2_Pin|ENDSTOP_ROT1_Pin;
 8002920:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	4807      	ldr	r0, [pc, #28]	; (8002954 <MX_GPIO_Init+0x20c>)
 8002936:	f001 f9f3 	bl	8003d20 <HAL_GPIO_Init>

}
 800293a:	bf00      	nop
 800293c:	3730      	adds	r7, #48	; 0x30
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40021000 	.word	0x40021000
 800294c:	40020800 	.word	0x40020800
 8002950:	40020000 	.word	0x40020000
 8002954:	40020400 	.word	0x40020400
 8002958:	40020c00 	.word	0x40020c00

0800295c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002960:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002962:	e7fe      	b.n	8002962 <Error_Handler+0x6>

08002964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_MspInit+0x4c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <HAL_MspInit+0x4c>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_MspInit+0x4c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_MspInit+0x4c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <HAL_MspInit+0x4c>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_MspInit+0x4c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_ADC_MspInit+0x7c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d127      	bne.n	8002a26 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_ADC_MspInit+0x80>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a15      	ldr	r2, [pc, #84]	; (8002a34 <HAL_ADC_MspInit+0x80>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_ADC_MspInit+0x80>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_ADC_MspInit+0x80>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <HAL_ADC_MspInit+0x80>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_ADC_MspInit+0x80>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8002a0e:	236a      	movs	r3, #106	; 0x6a
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a12:	2303      	movs	r3, #3
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4805      	ldr	r0, [pc, #20]	; (8002a38 <HAL_ADC_MspInit+0x84>)
 8002a22:	f001 f97d 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a26:	bf00      	nop
 8002a28:	3728      	adds	r7, #40	; 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40012000 	.word	0x40012000
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020000 	.word	0x40020000

08002a3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_CAN_MspInit+0x84>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d12b      	bne.n	8002ab6 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_CAN_MspInit+0x88>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <HAL_CAN_MspInit+0x88>)
 8002a68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_CAN_MspInit+0x88>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_CAN_MspInit+0x88>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a10      	ldr	r2, [pc, #64]	; (8002ac4 <HAL_CAN_MspInit+0x88>)
 8002a84:	f043 0308 	orr.w	r3, r3, #8
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <HAL_CAN_MspInit+0x88>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a96:	2303      	movs	r3, #3
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002aa6:	2309      	movs	r3, #9
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <HAL_CAN_MspInit+0x8c>)
 8002ab2:	f001 f935 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002ab6:	bf00      	nop
 8002ab8:	3728      	adds	r7, #40	; 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40006400 	.word	0x40006400
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020c00 	.word	0x40020c00

08002acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <HAL_I2C_MspInit+0x84>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d12b      	bne.n	8002b46 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b0a:	23c0      	movs	r3, #192	; 0xc0
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b0e:	2312      	movs	r3, #18
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b12:	2301      	movs	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	480c      	ldr	r0, [pc, #48]	; (8002b58 <HAL_I2C_MspInit+0x8c>)
 8002b26:	f001 f8fb 	bl	8003d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40005400 	.word	0x40005400
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020400 	.word	0x40020400

08002b5c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a37      	ldr	r2, [pc, #220]	; (8002c58 <HAL_SD_MspInit+0xfc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d168      	bne.n	8002c50 <HAL_SD_MspInit+0xf4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	4a35      	ldr	r2, [pc, #212]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	4b2f      	ldr	r3, [pc, #188]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a2e      	ldr	r2, [pc, #184]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <HAL_SD_MspInit+0x100>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002bee:	2307      	movs	r3, #7
 8002bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002bfe:	230c      	movs	r3, #12
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	4619      	mov	r1, r3
 8002c08:	4815      	ldr	r0, [pc, #84]	; (8002c60 <HAL_SD_MspInit+0x104>)
 8002c0a:	f001 f889 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002c0e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c20:	230c      	movs	r3, #12
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	4619      	mov	r1, r3
 8002c2a:	480e      	ldr	r0, [pc, #56]	; (8002c64 <HAL_SD_MspInit+0x108>)
 8002c2c:	f001 f878 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c30:	2304      	movs	r3, #4
 8002c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c40:	230c      	movs	r3, #12
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4807      	ldr	r0, [pc, #28]	; (8002c68 <HAL_SD_MspInit+0x10c>)
 8002c4c:	f001 f868 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002c50:	bf00      	nop
 8002c52:	3730      	adds	r7, #48	; 0x30
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020c00 	.word	0x40020c00

08002c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	; 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_SPI_MspInit+0x84>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d12b      	bne.n	8002ce6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002cc6:	2328      	movs	r3, #40	; 0x28
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <HAL_SPI_MspInit+0x8c>)
 8002ce2:	f001 f81d 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ce6:	bf00      	nop
 8002ce8:	3728      	adds	r7, #40	; 0x28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40013000 	.word	0x40013000
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020400 	.word	0x40020400

08002cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a4a      	ldr	r2, [pc, #296]	; (8002e34 <HAL_TIM_Base_MspInit+0x138>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a48      	ldr	r2, [pc, #288]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002d2a:	e07e      	b.n	8002e2a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d10e      	bne.n	8002d54 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a3e      	ldr	r2, [pc, #248]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b3c      	ldr	r3, [pc, #240]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	6a3b      	ldr	r3, [r7, #32]
}
 8002d52:	e06a      	b.n	8002e2a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a38      	ldr	r2, [pc, #224]	; (8002e3c <HAL_TIM_Base_MspInit+0x140>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4a34      	ldr	r2, [pc, #208]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6e:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
}
 8002d7a:	e056      	b.n	8002e2a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM4)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2f      	ldr	r2, [pc, #188]	; (8002e40 <HAL_TIM_Base_MspInit+0x144>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	69bb      	ldr	r3, [r7, #24]
}
 8002da2:	e042      	b.n	8002e2a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM5)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <HAL_TIM_Base_MspInit+0x148>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10e      	bne.n	8002dcc <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a20      	ldr	r2, [pc, #128]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]
}
 8002dca:	e02e      	b.n	8002e2a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_TIM_Base_MspInit+0x14c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10e      	bne.n	8002df4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	4a16      	ldr	r2, [pc, #88]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
}
 8002df2:	e01a      	b.n	8002e2a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <HAL_TIM_Base_MspInit+0x150>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d115      	bne.n	8002e2a <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_TIM_Base_MspInit+0x13c>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	202d      	movs	r0, #45	; 0x2d
 8002e20:	f000 ff47 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e24:	202d      	movs	r0, #45	; 0x2d
 8002e26:	f000 ff60 	bl	8003cea <HAL_NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	40002000 	.word	0x40002000

08002e50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d133      	bne.n	8002eda <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ee8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eaa:	23c0      	movs	r3, #192	; 0xc0
 8002eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4809      	ldr	r0, [pc, #36]	; (8002eec <HAL_TIM_Encoder_MspInit+0x9c>)
 8002ec6:	f000 ff2b 	bl	8003d20 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	202d      	movs	r0, #45	; 0x2d
 8002ed0:	f000 feef 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ed4:	202d      	movs	r0, #45	; 0x2d
 8002ed6:	f000 ff08 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002eda:	bf00      	nop
 8002edc:	3728      	adds	r7, #40	; 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40010400 	.word	0x40010400
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40020800 	.word	0x40020800

08002ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08e      	sub	sp, #56	; 0x38
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6d      	ldr	r2, [pc, #436]	; (80030c4 <HAL_TIM_MspPostInit+0x1d4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d11f      	bne.n	8002f52 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	4b6c      	ldr	r3, [pc, #432]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a6b      	ldr	r2, [pc, #428]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002f1c:	f043 0310 	orr.w	r3, r3, #16
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b69      	ldr	r3, [pc, #420]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Z_Pin;
 8002f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f40:	2301      	movs	r3, #1
 8002f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM1_CH1_Z_GPIO_Port, &GPIO_InitStruct);
 8002f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4860      	ldr	r0, [pc, #384]	; (80030cc <HAL_TIM_MspPostInit+0x1dc>)
 8002f4c:	f000 fee8 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002f50:	e0b4      	b.n	80030bc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM2)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d11f      	bne.n	8002f9c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	4a58      	ldr	r2, [pc, #352]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6c:	4b56      	ldr	r3, [pc, #344]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM2_CH1_X_Pin;
 8002f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	2300      	movs	r3, #0
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH1_X_GPIO_Port, &GPIO_InitStruct);
 8002f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f92:	4619      	mov	r1, r3
 8002f94:	484e      	ldr	r0, [pc, #312]	; (80030d0 <HAL_TIM_MspPostInit+0x1e0>)
 8002f96:	f000 fec3 	bl	8003d20 <HAL_GPIO_Init>
}
 8002f9a:	e08f      	b.n	80030bc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM3)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a4c      	ldr	r2, [pc, #304]	; (80030d4 <HAL_TIM_MspPostInit+0x1e4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d11e      	bne.n	8002fe4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a46      	ldr	r2, [pc, #280]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM3_CH1_ROT_Pin;
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM3_CH1_ROT_GPIO_Port, &GPIO_InitStruct);
 8002fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fda:	4619      	mov	r1, r3
 8002fdc:	483e      	ldr	r0, [pc, #248]	; (80030d8 <HAL_TIM_MspPostInit+0x1e8>)
 8002fde:	f000 fe9f 	bl	8003d20 <HAL_GPIO_Init>
}
 8002fe2:	e06b      	b.n	80030bc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM4)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3c      	ldr	r2, [pc, #240]	; (80030dc <HAL_TIM_MspPostInit+0x1ec>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d11f      	bne.n	800302e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4a34      	ldr	r2, [pc, #208]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800300a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800301c:	2302      	movs	r3, #2
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003024:	4619      	mov	r1, r3
 8003026:	482e      	ldr	r0, [pc, #184]	; (80030e0 <HAL_TIM_MspPostInit+0x1f0>)
 8003028:	f000 fe7a 	bl	8003d20 <HAL_GPIO_Init>
}
 800302c:	e046      	b.n	80030bc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM5)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <HAL_TIM_MspPostInit+0x1f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d11e      	bne.n	8003076 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6313      	str	r3, [r2, #48]	; 0x30
 8003048:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_Y_Pin;
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003064:	2302      	movs	r3, #2
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM5_CH1_Y_GPIO_Port, &GPIO_InitStruct);
 8003068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306c:	4619      	mov	r1, r3
 800306e:	4818      	ldr	r0, [pc, #96]	; (80030d0 <HAL_TIM_MspPostInit+0x1e0>)
 8003070:	f000 fe56 	bl	8003d20 <HAL_GPIO_Init>
}
 8003074:	e022      	b.n	80030bc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM9)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_TIM_MspPostInit+0x1f8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d11d      	bne.n	80030bc <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6313      	str	r3, [r2, #48]	; 0x30
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_TIM_MspPostInit+0x1d8>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800309c:	2304      	movs	r3, #4
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a8:	2300      	movs	r3, #0
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80030ac:	2303      	movs	r3, #3
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b4:	4619      	mov	r1, r3
 80030b6:	4806      	ldr	r0, [pc, #24]	; (80030d0 <HAL_TIM_MspPostInit+0x1e0>)
 80030b8:	f000 fe32 	bl	8003d20 <HAL_GPIO_Init>
}
 80030bc:	bf00      	nop
 80030be:	3738      	adds	r7, #56	; 0x38
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40020400 	.word	0x40020400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40020c00 	.word	0x40020c00
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40014000 	.word	0x40014000

080030ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_UART_MspInit+0x84>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d12c      	bne.n	8003168 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a17      	ldr	r2, [pc, #92]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003134:	f043 0304 	orr.w	r3, r3, #4
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_UART_MspInit+0x88>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800314a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800314c:	2312      	movs	r3, #18
 800314e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003150:	2301      	movs	r3, #1
 8003152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003158:	2308      	movs	r3, #8
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4619      	mov	r1, r3
 8003162:	4805      	ldr	r0, [pc, #20]	; (8003178 <HAL_UART_MspInit+0x8c>)
 8003164:	f000 fddc 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003168:	bf00      	nop
 800316a:	3728      	adds	r7, #40	; 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40004c00 	.word	0x40004c00
 8003174:	40023800 	.word	0x40023800
 8003178:	40020800 	.word	0x40020800

0800317c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <NMI_Handler+0x4>

08003182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003186:	e7fe      	b.n	8003186 <HardFault_Handler+0x4>

08003188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <MemManage_Handler+0x4>

0800318e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003192:	e7fe      	b.n	8003192 <BusFault_Handler+0x4>

08003194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003198:	e7fe      	b.n	8003198 <UsageFault_Handler+0x4>

0800319a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031c8:	f000 f8e8 	bl	800339c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80031d4:	4805      	ldr	r0, [pc, #20]	; (80031ec <TIM8_TRG_COM_TIM14_IRQHandler+0x1c>)
 80031d6:	f004 fdc5 	bl	8007d64 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80031da:	4805      	ldr	r0, [pc, #20]	; (80031f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x20>)
 80031dc:	f004 fdc2 	bl	8007d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
  HAL_GPIO_TogglePin(LED_Status_GPIO_Port, LED_Status_Pin);
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	4804      	ldr	r0, [pc, #16]	; (80031f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x24>)
 80031e4:	f000 ff5f 	bl	80040a6 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20002644 	.word	0x20002644
 80031f0:	20002a24 	.word	0x20002a24
 80031f4:	40020000 	.word	0x40020000

080031f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <OTG_FS_IRQHandler+0x10>)
 80031fe:	f001 f9fc 	bl	80045fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20005fa8 	.word	0x20005fa8

0800320c <_sbrk>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <_sbrk+0x5c>)
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <_sbrk+0x60>)
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <_sbrk+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <_sbrk+0x22>
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <_sbrk+0x64>)
 800322a:	4a12      	ldr	r2, [pc, #72]	; (8003274 <_sbrk+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <_sbrk+0x64>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	429a      	cmp	r2, r3
 800323a:	d207      	bcs.n	800324c <_sbrk+0x40>
 800323c:	f00e f98e 	bl	801155c <__errno>
 8003240:	4602      	mov	r2, r0
 8003242:	230c      	movs	r3, #12
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800324a:	e009      	b.n	8003260 <_sbrk+0x54>
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <_sbrk+0x64>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	4a05      	ldr	r2, [pc, #20]	; (8003270 <_sbrk+0x64>)
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20020000 	.word	0x20020000
 800326c:	00000400 	.word	0x00000400
 8003270:	20000204 	.word	0x20000204
 8003274:	200063b8 	.word	0x200063b8

08003278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <SystemInit+0x28>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <SystemInit+0x28>)
 8003284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <SystemInit+0x28>)
 800328e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003292:	609a      	str	r2, [r3, #8]
#endif
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <Reset_Handler>:
 80032a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032dc <LoopFillZerobss+0x14>
 80032a8:	2100      	movs	r1, #0
 80032aa:	e003      	b.n	80032b4 <LoopCopyDataInit>

080032ac <CopyDataInit>:
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <LoopFillZerobss+0x18>)
 80032ae:	585b      	ldr	r3, [r3, r1]
 80032b0:	5043      	str	r3, [r0, r1]
 80032b2:	3104      	adds	r1, #4

080032b4 <LoopCopyDataInit>:
 80032b4:	480b      	ldr	r0, [pc, #44]	; (80032e4 <LoopFillZerobss+0x1c>)
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <LoopFillZerobss+0x20>)
 80032b8:	1842      	adds	r2, r0, r1
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d3f6      	bcc.n	80032ac <CopyDataInit>
 80032be:	4a0b      	ldr	r2, [pc, #44]	; (80032ec <LoopFillZerobss+0x24>)
 80032c0:	e002      	b.n	80032c8 <LoopFillZerobss>

080032c2 <FillZerobss>:
 80032c2:	2300      	movs	r3, #0
 80032c4:	f842 3b04 	str.w	r3, [r2], #4

080032c8 <LoopFillZerobss>:
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <LoopFillZerobss+0x28>)
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d3f9      	bcc.n	80032c2 <FillZerobss>
 80032ce:	f7ff ffd3 	bl	8003278 <SystemInit>
 80032d2:	f00e f949 	bl	8011568 <__libc_init_array>
 80032d6:	f7fe faa5 	bl	8001824 <main>
 80032da:	4770      	bx	lr
 80032dc:	20020000 	.word	0x20020000
 80032e0:	080127f4 	.word	0x080127f4
 80032e4:	20000000 	.word	0x20000000
 80032e8:	200001e4 	.word	0x200001e4
 80032ec:	200001e4 	.word	0x200001e4
 80032f0:	200063b4 	.word	0x200063b4

080032f4 <ADC_IRQHandler>:
 80032f4:	e7fe      	b.n	80032f4 <ADC_IRQHandler>
	...

080032f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_Init+0x40>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <HAL_Init+0x40>)
 8003302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_Init+0x40>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <HAL_Init+0x40>)
 800330e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_Init+0x40>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a07      	ldr	r2, [pc, #28]	; (8003338 <HAL_Init+0x40>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003320:	2003      	movs	r0, #3
 8003322:	f000 fcbb 	bl	8003c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003326:	2000      	movs	r0, #0
 8003328:	f000 f808 	bl	800333c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800332c:	f7ff fb1a 	bl	8002964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023c00 	.word	0x40023c00

0800333c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_InitTick+0x54>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_InitTick+0x58>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4619      	mov	r1, r3
 800334e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003352:	fbb3 f3f1 	udiv	r3, r3, r1
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fcd3 	bl	8003d06 <HAL_SYSTICK_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e00e      	b.n	8003388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b0f      	cmp	r3, #15
 800336e:	d80a      	bhi.n	8003386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003370:	2200      	movs	r2, #0
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003378:	f000 fc9b 	bl	8003cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800337c:	4a06      	ldr	r2, [pc, #24]	; (8003398 <HAL_InitTick+0x5c>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000000 	.word	0x20000000
 8003394:	20000008 	.word	0x20000008
 8003398:	20000004 	.word	0x20000004

0800339c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_IncTick+0x20>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_IncTick+0x24>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <HAL_IncTick+0x24>)
 80033ae:	6013      	str	r3, [r2, #0]
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000008 	.word	0x20000008
 80033c0:	20002a64 	.word	0x20002a64

080033c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return uwTick;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_GetTick+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20002a64 	.word	0x20002a64

080033dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e4:	f7ff ffee 	bl	80033c4 <HAL_GetTick>
 80033e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f4:	d005      	beq.n	8003402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_Delay+0x40>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003402:	bf00      	nop
 8003404:	f7ff ffde 	bl	80033c4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	429a      	cmp	r2, r3
 8003412:	d8f7      	bhi.n	8003404 <HAL_Delay+0x28>
  {
  }
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000008 	.word	0x20000008

08003420 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e033      	b.n	800349e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fab8 	bl	80029b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003466:	f023 0302 	bic.w	r3, r3, #2
 800346a:	f043 0202 	orr.w	r2, r3, #2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f94a 	bl	800370c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
 800348e:	e001      	b.n	8003494 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x1c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e113      	b.n	80036ec <HAL_ADC_ConfigChannel+0x244>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	d925      	bls.n	8003520 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68d9      	ldr	r1, [r3, #12]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	3b1e      	subs	r3, #30
 80034ea:	2207      	movs	r2, #7
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43da      	mvns	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	400a      	ands	r2, r1
 80034f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68d9      	ldr	r1, [r3, #12]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	4618      	mov	r0, r3
 800350c:	4603      	mov	r3, r0
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4403      	add	r3, r0
 8003512:	3b1e      	subs	r3, #30
 8003514:	409a      	lsls	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	e022      	b.n	8003566 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6919      	ldr	r1, [r3, #16]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	2207      	movs	r2, #7
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	400a      	ands	r2, r1
 8003542:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	4618      	mov	r0, r3
 8003556:	4603      	mov	r3, r0
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4403      	add	r3, r0
 800355c:	409a      	lsls	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b06      	cmp	r3, #6
 800356c:	d824      	bhi.n	80035b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	3b05      	subs	r3, #5
 8003580:	221f      	movs	r2, #31
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43da      	mvns	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	400a      	ands	r2, r1
 800358e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	3b05      	subs	r3, #5
 80035aa:	fa00 f203 	lsl.w	r2, r0, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	635a      	str	r2, [r3, #52]	; 0x34
 80035b6:	e04c      	b.n	8003652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b0c      	cmp	r3, #12
 80035be:	d824      	bhi.n	800360a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	3b23      	subs	r3, #35	; 0x23
 80035d2:	221f      	movs	r2, #31
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43da      	mvns	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	400a      	ands	r2, r1
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	4618      	mov	r0, r3
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	3b23      	subs	r3, #35	; 0x23
 80035fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
 8003608:	e023      	b.n	8003652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	3b41      	subs	r3, #65	; 0x41
 800361c:	221f      	movs	r2, #31
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	400a      	ands	r2, r1
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	4618      	mov	r0, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	3b41      	subs	r3, #65	; 0x41
 8003646:	fa00 f203 	lsl.w	r2, r0, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003652:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <HAL_ADC_ConfigChannel+0x250>)
 8003654:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a28      	ldr	r2, [pc, #160]	; (80036fc <HAL_ADC_ConfigChannel+0x254>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d10f      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x1d8>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b12      	cmp	r3, #18
 8003666:	d10b      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_ADC_ConfigChannel+0x254>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d12b      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x23a>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <HAL_ADC_ConfigChannel+0x1f4>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b11      	cmp	r3, #17
 800369a:	d122      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a11      	ldr	r2, [pc, #68]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d111      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_ADC_ConfigChannel+0x25c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a11      	ldr	r2, [pc, #68]	; (8003708 <HAL_ADC_ConfigChannel+0x260>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	0c9a      	lsrs	r2, r3, #18
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036d4:	e002      	b.n	80036dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	3b01      	subs	r3, #1
 80036da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f9      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40012300 	.word	0x40012300
 80036fc:	40012000 	.word	0x40012000
 8003700:	10000012 	.word	0x10000012
 8003704:	20000000 	.word	0x20000000
 8003708:	431bde83 	.word	0x431bde83

0800370c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003714:	4b79      	ldr	r3, [pc, #484]	; (80038fc <ADC_Init+0x1f0>)
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	021a      	lsls	r2, r3, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6899      	ldr	r1, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	4a58      	ldr	r2, [pc, #352]	; (8003900 <ADC_Init+0x1f4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	e00f      	b.n	800380a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003808:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0202 	bic.w	r2, r2, #2
 8003818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7e1b      	ldrb	r3, [r3, #24]
 8003824:	005a      	lsls	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003846:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003856:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	3b01      	subs	r3, #1
 8003864:	035a      	lsls	r2, r3, #13
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	e007      	b.n	8003880 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800387e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	3b01      	subs	r3, #1
 800389c:	051a      	lsls	r2, r3, #20
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6899      	ldr	r1, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038c2:	025a      	lsls	r2, r3, #9
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6899      	ldr	r1, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	029a      	lsls	r2, r3, #10
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40012300 	.word	0x40012300
 8003900:	0f000001 	.word	0x0f000001

08003904 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0ed      	b.n	8003af2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff f88a 	bl	8002a3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0202 	bic.w	r2, r2, #2
 8003936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003938:	f7ff fd44 	bl	80033c4 <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800393e:	e012      	b.n	8003966 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003940:	f7ff fd40 	bl	80033c4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b0a      	cmp	r3, #10
 800394c:	d90b      	bls.n	8003966 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2205      	movs	r2, #5
 800395e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0c5      	b.n	8003af2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e5      	bne.n	8003940 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003984:	f7ff fd1e 	bl	80033c4 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800398a:	e012      	b.n	80039b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800398c:	f7ff fd1a 	bl	80033c4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b0a      	cmp	r3, #10
 8003998:	d90b      	bls.n	80039b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2205      	movs	r2, #5
 80039aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e09f      	b.n	8003af2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0e5      	beq.n	800398c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7e1b      	ldrb	r3, [r3, #24]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d108      	bne.n	80039da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e007      	b.n	80039ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	7e5b      	ldrb	r3, [r3, #25]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d108      	bne.n	8003a04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e007      	b.n	8003a14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7e9b      	ldrb	r3, [r3, #26]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d108      	bne.n	8003a2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0220 	orr.w	r2, r2, #32
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e007      	b.n	8003a3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0220 	bic.w	r2, r2, #32
 8003a3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	7edb      	ldrb	r3, [r3, #27]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d108      	bne.n	8003a58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0210 	bic.w	r2, r2, #16
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e007      	b.n	8003a68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0210 	orr.w	r2, r2, #16
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	7f1b      	ldrb	r3, [r3, #28]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d108      	bne.n	8003a82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e007      	b.n	8003a92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0208 	bic.w	r2, r2, #8
 8003a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7f5b      	ldrb	r3, [r3, #29]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d108      	bne.n	8003aac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0204 	orr.w	r2, r2, #4
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e007      	b.n	8003abc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0204 	bic.w	r2, r2, #4
 8003aba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	ea42 0103 	orr.w	r1, r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	1e5a      	subs	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <__NVIC_SetPriorityGrouping+0x44>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2e:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <__NVIC_SetPriorityGrouping+0x44>)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	60d3      	str	r3, [r2, #12]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <__NVIC_GetPriorityGrouping+0x18>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	f003 0307 	and.w	r3, r3, #7
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	db0b      	blt.n	8003b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	f003 021f 	and.w	r2, r3, #31
 8003b78:	4907      	ldr	r1, [pc, #28]	; (8003b98 <__NVIC_EnableIRQ+0x38>)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2001      	movs	r0, #1
 8003b82:	fa00 f202 	lsl.w	r2, r0, r2
 8003b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000e100 	.word	0xe000e100

08003b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	db0a      	blt.n	8003bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	490c      	ldr	r1, [pc, #48]	; (8003be8 <__NVIC_SetPriority+0x4c>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	0112      	lsls	r2, r2, #4
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc4:	e00a      	b.n	8003bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4908      	ldr	r1, [pc, #32]	; (8003bec <__NVIC_SetPriority+0x50>)
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	3b04      	subs	r3, #4
 8003bd4:	0112      	lsls	r2, r2, #4
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	440b      	add	r3, r1
 8003bda:	761a      	strb	r2, [r3, #24]
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000e100 	.word	0xe000e100
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	; 0x24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f1c3 0307 	rsb	r3, r3, #7
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	bf28      	it	cs
 8003c0e:	2304      	movcs	r3, #4
 8003c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d902      	bls.n	8003c20 <NVIC_EncodePriority+0x30>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3b03      	subs	r3, #3
 8003c1e:	e000      	b.n	8003c22 <NVIC_EncodePriority+0x32>
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	401a      	ands	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	43d9      	mvns	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	4313      	orrs	r3, r2
         );
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3724      	adds	r7, #36	; 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c68:	d301      	bcc.n	8003c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e00f      	b.n	8003c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <SysTick_Config+0x40>)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c76:	210f      	movs	r1, #15
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c7c:	f7ff ff8e 	bl	8003b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <SysTick_Config+0x40>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c86:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <SysTick_Config+0x40>)
 8003c88:	2207      	movs	r2, #7
 8003c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	e000e010 	.word	0xe000e010

08003c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff29 	bl	8003afc <__NVIC_SetPriorityGrouping>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	4603      	mov	r3, r0
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc4:	f7ff ff3e 	bl	8003b44 <__NVIC_GetPriorityGrouping>
 8003cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	6978      	ldr	r0, [r7, #20]
 8003cd0:	f7ff ff8e 	bl	8003bf0 <NVIC_EncodePriority>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff5d 	bl	8003b9c <__NVIC_SetPriority>
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff31 	bl	8003b60 <__NVIC_EnableIRQ>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ffa2 	bl	8003c58 <SysTick_Config>
 8003d14:	4603      	mov	r3, r0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	e165      	b.n	8004008 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	f040 8154 	bne.w	8004002 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d00b      	beq.n	8003d7a <HAL_GPIO_Init+0x5a>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d007      	beq.n	8003d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d6e:	2b11      	cmp	r3, #17
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b12      	cmp	r3, #18
 8003d78:	d130      	bne.n	8003ddc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	2203      	movs	r2, #3
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db0:	2201      	movs	r2, #1
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 0201 	and.w	r2, r3, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0xfc>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b12      	cmp	r3, #18
 8003e1a:	d123      	bne.n	8003e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	08da      	lsrs	r2, r3, #3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3208      	adds	r2, #8
 8003e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	220f      	movs	r2, #15
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	08da      	lsrs	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3208      	adds	r2, #8
 8003e5e:	69b9      	ldr	r1, [r7, #24]
 8003e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	2203      	movs	r2, #3
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0203 	and.w	r2, r3, #3
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80ae 	beq.w	8004002 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	4b5c      	ldr	r3, [pc, #368]	; (800401c <HAL_GPIO_Init+0x2fc>)
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	4a5b      	ldr	r2, [pc, #364]	; (800401c <HAL_GPIO_Init+0x2fc>)
 8003eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb6:	4b59      	ldr	r3, [pc, #356]	; (800401c <HAL_GPIO_Init+0x2fc>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec2:	4a57      	ldr	r2, [pc, #348]	; (8004020 <HAL_GPIO_Init+0x300>)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	3302      	adds	r3, #2
 8003eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	220f      	movs	r2, #15
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a4e      	ldr	r2, [pc, #312]	; (8004024 <HAL_GPIO_Init+0x304>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d025      	beq.n	8003f3a <HAL_GPIO_Init+0x21a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4d      	ldr	r2, [pc, #308]	; (8004028 <HAL_GPIO_Init+0x308>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01f      	beq.n	8003f36 <HAL_GPIO_Init+0x216>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4c      	ldr	r2, [pc, #304]	; (800402c <HAL_GPIO_Init+0x30c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d019      	beq.n	8003f32 <HAL_GPIO_Init+0x212>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a4b      	ldr	r2, [pc, #300]	; (8004030 <HAL_GPIO_Init+0x310>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_GPIO_Init+0x20e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4a      	ldr	r2, [pc, #296]	; (8004034 <HAL_GPIO_Init+0x314>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00d      	beq.n	8003f2a <HAL_GPIO_Init+0x20a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a49      	ldr	r2, [pc, #292]	; (8004038 <HAL_GPIO_Init+0x318>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <HAL_GPIO_Init+0x206>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_GPIO_Init+0x31c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_GPIO_Init+0x202>
 8003f1e:	2306      	movs	r3, #6
 8003f20:	e00c      	b.n	8003f3c <HAL_GPIO_Init+0x21c>
 8003f22:	2307      	movs	r3, #7
 8003f24:	e00a      	b.n	8003f3c <HAL_GPIO_Init+0x21c>
 8003f26:	2305      	movs	r3, #5
 8003f28:	e008      	b.n	8003f3c <HAL_GPIO_Init+0x21c>
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	e006      	b.n	8003f3c <HAL_GPIO_Init+0x21c>
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e004      	b.n	8003f3c <HAL_GPIO_Init+0x21c>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e002      	b.n	8003f3c <HAL_GPIO_Init+0x21c>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <HAL_GPIO_Init+0x21c>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	f002 0203 	and.w	r2, r2, #3
 8003f42:	0092      	lsls	r2, r2, #2
 8003f44:	4093      	lsls	r3, r2
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f4c:	4934      	ldr	r1, [pc, #208]	; (8004020 <HAL_GPIO_Init+0x300>)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	3302      	adds	r3, #2
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f5a:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f7e:	4a30      	ldr	r2, [pc, #192]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f84:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fae:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ffc:	4a10      	ldr	r2, [pc, #64]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3301      	adds	r3, #1
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	f67f ae96 	bls.w	8003d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004010:	bf00      	nop
 8004012:	3724      	adds	r7, #36	; 0x24
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40023800 	.word	0x40023800
 8004020:	40013800 	.word	0x40013800
 8004024:	40020000 	.word	0x40020000
 8004028:	40020400 	.word	0x40020400
 800402c:	40020800 	.word	0x40020800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40021000 	.word	0x40021000
 8004038:	40021400 	.word	0x40021400
 800403c:	40021800 	.word	0x40021800
 8004040:	40013c00 	.word	0x40013c00

08004044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e001      	b.n	8004066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
 8004080:	4613      	mov	r3, r2
 8004082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004084:	787b      	ldrb	r3, [r7, #1]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004090:	e003      	b.n	800409a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004092:	887b      	ldrh	r3, [r7, #2]
 8004094:	041a      	lsls	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	619a      	str	r2, [r3, #24]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	887b      	ldrh	r3, [r7, #2]
 80040b8:	401a      	ands	r2, r3
 80040ba:	887b      	ldrh	r3, [r7, #2]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d104      	bne.n	80040ca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040c0:	887b      	ldrh	r3, [r7, #2]
 80040c2:	041a      	lsls	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80040c8:	e002      	b.n	80040d0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e11f      	b.n	800432e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe fce2 	bl	8002acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800412e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800413e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004140:	f001 fbd2 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8004144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4a7b      	ldr	r2, [pc, #492]	; (8004338 <HAL_I2C_Init+0x25c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d807      	bhi.n	8004160 <HAL_I2C_Init+0x84>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a7a      	ldr	r2, [pc, #488]	; (800433c <HAL_I2C_Init+0x260>)
 8004154:	4293      	cmp	r3, r2
 8004156:	bf94      	ite	ls
 8004158:	2301      	movls	r3, #1
 800415a:	2300      	movhi	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e006      	b.n	800416e <HAL_I2C_Init+0x92>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a77      	ldr	r2, [pc, #476]	; (8004340 <HAL_I2C_Init+0x264>)
 8004164:	4293      	cmp	r3, r2
 8004166:	bf94      	ite	ls
 8004168:	2301      	movls	r3, #1
 800416a:	2300      	movhi	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0db      	b.n	800432e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a72      	ldr	r2, [pc, #456]	; (8004344 <HAL_I2C_Init+0x268>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0c9b      	lsrs	r3, r3, #18
 8004180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a64      	ldr	r2, [pc, #400]	; (8004338 <HAL_I2C_Init+0x25c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d802      	bhi.n	80041b0 <HAL_I2C_Init+0xd4>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	3301      	adds	r3, #1
 80041ae:	e009      	b.n	80041c4 <HAL_I2C_Init+0xe8>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	4a63      	ldr	r2, [pc, #396]	; (8004348 <HAL_I2C_Init+0x26c>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	3301      	adds	r3, #1
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4956      	ldr	r1, [pc, #344]	; (8004338 <HAL_I2C_Init+0x25c>)
 80041e0:	428b      	cmp	r3, r1
 80041e2:	d80d      	bhi.n	8004200 <HAL_I2C_Init+0x124>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e59      	subs	r1, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	bf38      	it	cc
 80041fc:	2304      	movcc	r3, #4
 80041fe:	e04f      	b.n	80042a0 <HAL_I2C_Init+0x1c4>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d111      	bne.n	800422c <HAL_I2C_Init+0x150>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1e58      	subs	r0, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	440b      	add	r3, r1
 8004216:	fbb0 f3f3 	udiv	r3, r0, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e012      	b.n	8004252 <HAL_I2C_Init+0x176>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e58      	subs	r0, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	0099      	lsls	r1, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004242:	3301      	adds	r3, #1
 8004244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Init+0x17e>
 8004256:	2301      	movs	r3, #1
 8004258:	e022      	b.n	80042a0 <HAL_I2C_Init+0x1c4>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10e      	bne.n	8004280 <HAL_I2C_Init+0x1a4>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1e58      	subs	r0, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6859      	ldr	r1, [r3, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	440b      	add	r3, r1
 8004270:	fbb0 f3f3 	udiv	r3, r0, r3
 8004274:	3301      	adds	r3, #1
 8004276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427e:	e00f      	b.n	80042a0 <HAL_I2C_Init+0x1c4>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e58      	subs	r0, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	0099      	lsls	r1, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	fbb0 f3f3 	udiv	r3, r0, r3
 8004296:	3301      	adds	r3, #1
 8004298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	6809      	ldr	r1, [r1, #0]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6911      	ldr	r1, [r2, #16]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68d2      	ldr	r2, [r2, #12]
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	000186a0 	.word	0x000186a0
 800433c:	001e847f 	.word	0x001e847f
 8004340:	003d08ff 	.word	0x003d08ff
 8004344:	431bde83 	.word	0x431bde83
 8004348:	10624dd3 	.word	0x10624dd3

0800434c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800434c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800434e:	b08f      	sub	sp, #60	; 0x3c
 8004350:	af0a      	add	r7, sp, #40	; 0x28
 8004352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e116      	b.n	800458c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f00c fdf3 	bl	8010f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2203      	movs	r2, #3
 8004382:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f005 fdb0 	bl	8009f02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	687e      	ldr	r6, [r7, #4]
 80043aa:	466d      	mov	r5, sp
 80043ac:	f106 0410 	add.w	r4, r6, #16
 80043b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80043c0:	1d33      	adds	r3, r6, #4
 80043c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043c4:	6838      	ldr	r0, [r7, #0]
 80043c6:	f005 fc87 	bl	8009cd8 <USB_CoreInit>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0d7      	b.n	800458c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f005 fd9e 	bl	8009f24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	e04a      	b.n	8004484 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	333d      	adds	r3, #61	; 0x3d
 80043fe:	2201      	movs	r2, #1
 8004400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	333c      	adds	r3, #60	; 0x3c
 8004412:	7bfa      	ldrb	r2, [r7, #15]
 8004414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004416:	7bfa      	ldrb	r2, [r7, #15]
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	b298      	uxth	r0, r3
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	3342      	adds	r3, #66	; 0x42
 800442a:	4602      	mov	r2, r0
 800442c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	333f      	adds	r3, #63	; 0x3f
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004442:	7bfa      	ldrb	r2, [r7, #15]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3344      	adds	r3, #68	; 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	3348      	adds	r3, #72	; 0x48
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800446a:	7bfa      	ldrb	r2, [r7, #15]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	3350      	adds	r3, #80	; 0x50
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	3301      	adds	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	d3af      	bcc.n	80043ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448e:	2300      	movs	r3, #0
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	e044      	b.n	800451e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	3301      	adds	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	7bfa      	ldrb	r2, [r7, #15]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	429a      	cmp	r2, r3
 8004526:	d3b5      	bcc.n	8004494 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	687e      	ldr	r6, [r7, #4]
 8004530:	466d      	mov	r5, sp
 8004532:	f106 0410 	add.w	r4, r6, #16
 8004536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800453a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800453c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800453e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004542:	e885 0003 	stmia.w	r5, {r0, r1}
 8004546:	1d33      	adds	r3, r6, #4
 8004548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800454a:	6838      	ldr	r0, [r7, #0]
 800454c:	f005 fd14 	bl	8009f78 <USB_DevInit>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e014      	b.n	800458c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	2b01      	cmp	r3, #1
 8004578:	d102      	bne.n	8004580 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f001 f892 	bl	80056a4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f006 fd4f 	bl	800b028 <USB_DevDisconnect>

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004594 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_PCD_Start+0x1c>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e020      	b.n	80045f2 <HAL_PCD_Start+0x5e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d109      	bne.n	80045d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d005      	beq.n	80045d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f005 fc81 	bl	8009ee0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f006 fcff 	bl	800afe6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045fa:	b590      	push	{r4, r7, lr}
 80045fc:	b08d      	sub	sp, #52	; 0x34
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f006 fdbd 	bl	800b190 <USB_GetMode>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 83ca 	bne.w	8004db2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f006 fd21 	bl	800b06a <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 83c0 	beq.w	8004db0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f006 fd18 	bl	800b06a <USB_ReadInterrupts>
 800463a:	4603      	mov	r3, r0
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d107      	bne.n	8004654 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f002 0202 	and.w	r2, r2, #2
 8004652:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f006 fd06 	bl	800b06a <USB_ReadInterrupts>
 800465e:	4603      	mov	r3, r0
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b10      	cmp	r3, #16
 8004666:	d161      	bne.n	800472c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0210 	bic.w	r2, r2, #16
 8004676:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f003 020f 	and.w	r2, r3, #15
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	3304      	adds	r3, #4
 8004696:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	0c5b      	lsrs	r3, r3, #17
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d124      	bne.n	80046ee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d035      	beq.n	800471c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046be:	b29b      	uxth	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	6a38      	ldr	r0, [r7, #32]
 80046c4:	f006 fb6c 	bl	800ada0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046d4:	441a      	add	r2, r3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046e6:	441a      	add	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	619a      	str	r2, [r3, #24]
 80046ec:	e016      	b.n	800471c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	0c5b      	lsrs	r3, r3, #17
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d110      	bne.n	800471c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004700:	2208      	movs	r2, #8
 8004702:	4619      	mov	r1, r3
 8004704:	6a38      	ldr	r0, [r7, #32]
 8004706:	f006 fb4b 	bl	800ada0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004716:	441a      	add	r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0210 	orr.w	r2, r2, #16
 800472a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f006 fc9a 	bl	800b06a <USB_ReadInterrupts>
 8004736:	4603      	mov	r3, r0
 8004738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004740:	d16e      	bne.n	8004820 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f006 fca0 	bl	800b090 <USB_ReadDevAllOutEpInterrupt>
 8004750:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004752:	e062      	b.n	800481a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d057      	beq.n	800480e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f006 fcc5 	bl	800b0f8 <USB_ReadDevOutEPInterrupt>
 800476e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00c      	beq.n	8004794 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	461a      	mov	r2, r3
 8004788:	2301      	movs	r3, #1
 800478a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800478c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fdde 	bl	8005350 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047aa:	461a      	mov	r2, r3
 80047ac:	2308      	movs	r3, #8
 80047ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80047b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fed8 	bl	8005568 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	461a      	mov	r2, r3
 80047d0:	2310      	movs	r3, #16
 80047d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	461a      	mov	r2, r3
 80047ec:	2320      	movs	r3, #32
 80047ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004806:	461a      	mov	r2, r3
 8004808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800480c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	3301      	adds	r3, #1
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d199      	bne.n	8004754 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f006 fc20 	bl	800b06a <USB_ReadInterrupts>
 800482a:	4603      	mov	r3, r0
 800482c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004834:	f040 80c0 	bne.w	80049b8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f006 fc41 	bl	800b0c4 <USB_ReadDevAllInEpInterrupt>
 8004842:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004848:	e0b2      	b.n	80049b0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80a7 	beq.w	80049a4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	4611      	mov	r1, r2
 8004860:	4618      	mov	r0, r3
 8004862:	f006 fc67 	bl	800b134 <USB_ReadDevInEPInterrupt>
 8004866:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d057      	beq.n	8004922 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	2201      	movs	r2, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	43db      	mvns	r3, r3
 800488c:	69f9      	ldr	r1, [r7, #28]
 800488e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004892:	4013      	ands	r3, r2
 8004894:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	461a      	mov	r2, r3
 80048a4:	2301      	movs	r3, #1
 80048a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d132      	bne.n	8004916 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b4:	4613      	mov	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	3348      	adds	r3, #72	; 0x48
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4403      	add	r3, r0
 80048d0:	3344      	adds	r3, #68	; 0x44
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4419      	add	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4403      	add	r3, r0
 80048e4:	3348      	adds	r3, #72	; 0x48
 80048e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d113      	bne.n	8004916 <HAL_PCD_IRQHandler+0x31c>
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	4613      	mov	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3350      	adds	r3, #80	; 0x50
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800490e:	461a      	mov	r2, r3
 8004910:	2101      	movs	r1, #1
 8004912:	f006 fc6f 	bl	800b1f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	b2db      	uxtb	r3, r3
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f00c fba2 	bl	8011066 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	461a      	mov	r2, r3
 800493a:	2308      	movs	r3, #8
 800493c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	461a      	mov	r2, r3
 8004956:	2310      	movs	r3, #16
 8004958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	461a      	mov	r2, r3
 8004972:	2340      	movs	r3, #64	; 0x40
 8004974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	461a      	mov	r2, r3
 800498e:	2302      	movs	r3, #2
 8004990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800499c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fc48 	bl	8005234 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	3301      	adds	r3, #1
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f47f af49 	bne.w	800484a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f006 fb54 	bl	800b06a <USB_ReadInterrupts>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049cc:	d122      	bne.n	8004a14 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d108      	bne.n	80049fe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80049f4:	2100      	movs	r1, #0
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fe78 	bl	80056ec <HAL_PCDEx_LPM_Callback>
 80049fc:	e002      	b.n	8004a04 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f00c fba8 	bl	8011154 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f006 fb26 	bl	800b06a <USB_ReadInterrupts>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a28:	d112      	bne.n	8004a50 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d102      	bne.n	8004a40 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f00c fb64 	bl	8011108 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004a4e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f006 fb08 	bl	800b06a <USB_ReadInterrupts>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a64:	d121      	bne.n	8004aaa <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004a74:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d111      	bne.n	8004aa4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	089b      	lsrs	r3, r3, #2
 8004a90:	f003 020f 	and.w	r2, r3, #15
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fe25 	bl	80056ec <HAL_PCDEx_LPM_Callback>
 8004aa2:	e002      	b.n	8004aaa <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f00c fb2f 	bl	8011108 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f006 fadb 	bl	800b06a <USB_ReadInterrupts>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	f040 80c7 	bne.w	8004c50 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2110      	movs	r1, #16
 8004adc:	4618      	mov	r0, r3
 8004ade:	f005 fba9 	bl	800a234 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae6:	e056      	b.n	8004b96 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	461a      	mov	r2, r3
 8004af6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004afa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b1a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b80:	0151      	lsls	r1, r2, #5
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	440a      	add	r2, r1
 8004b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	3301      	adds	r3, #1
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d3a3      	bcc.n	8004ae8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004bb2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d016      	beq.n	8004bea <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bcc:	f043 030b 	orr.w	r3, r3, #11
 8004bd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be2:	f043 030b 	orr.w	r3, r3, #11
 8004be6:	6453      	str	r3, [r2, #68]	; 0x44
 8004be8:	e015      	b.n	8004c16 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bfc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004c00:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c10:	f043 030b 	orr.w	r3, r3, #11
 8004c14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f006 fada 	bl	800b1f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f006 fa08 	bl	800b06a <USB_ReadInterrupts>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c64:	d124      	bne.n	8004cb0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f006 fa9e 	bl	800b1ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f005 fb3e 	bl	800a2f6 <USB_GetDevSpeed>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681c      	ldr	r4, [r3, #0]
 8004c86:	f000 fe23 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 8004c8a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	4620      	mov	r0, r4
 8004c96:	f005 f881 	bl	8009d9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f00c fa0b 	bl	80110b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f006 f9d8 	bl	800b06a <USB_ReadInterrupts>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d10a      	bne.n	8004cda <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f00c f9e8 	bl	801109a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f002 0208 	and.w	r2, r2, #8
 8004cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f006 f9c3 	bl	800b06a <USB_ReadInterrupts>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cee:	d10f      	bne.n	8004d10 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f00c fa4a 	bl	8011194 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f006 f9a8 	bl	800b06a <USB_ReadInterrupts>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d24:	d10f      	bne.n	8004d46 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f00c fa1d 	bl	8011170 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f006 f98d 	bl	800b06a <USB_ReadInterrupts>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d10a      	bne.n	8004d72 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f00c fa2b 	bl	80111b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f006 f977 	bl	800b06a <USB_ReadInterrupts>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d115      	bne.n	8004db2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f00c fa1b 	bl	80111d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
 8004dae:	e000      	b.n	8004db2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004db0:	bf00      	nop
    }
  }
}
 8004db2:	3734      	adds	r7, #52	; 0x34
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd90      	pop	{r4, r7, pc}

08004db8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_PCD_SetAddress+0x1a>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e013      	b.n	8004dfa <HAL_PCD_SetAddress+0x42>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f006 f8d5 	bl	800af9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4603      	mov	r3, r0
 8004e12:	70fb      	strb	r3, [r7, #3]
 8004e14:	460b      	mov	r3, r1
 8004e16:	803b      	strh	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	da0f      	bge.n	8004e48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	f003 020f 	and.w	r2, r3, #15
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	3338      	adds	r3, #56	; 0x38
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	705a      	strb	r2, [r3, #1]
 8004e46:	e00f      	b.n	8004e68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	4613      	mov	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3304      	adds	r3, #4
 8004e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e74:	883a      	ldrh	r2, [r7, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	78ba      	ldrb	r2, [r7, #2]
 8004e7e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d004      	beq.n	8004e92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e92:	78bb      	ldrb	r3, [r7, #2]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d102      	bne.n	8004e9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_PCD_EP_Open+0xaa>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e00e      	b.n	8004eca <HAL_PCD_EP_Open+0xc8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f005 fa40 	bl	800a340 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	460b      	mov	r3, r1
 8004edc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	da0f      	bge.n	8004f06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	f003 020f 	and.w	r2, r3, #15
 8004eec:	4613      	mov	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	3338      	adds	r3, #56	; 0x38
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4413      	add	r3, r2
 8004efa:	3304      	adds	r3, #4
 8004efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	705a      	strb	r2, [r3, #1]
 8004f04:	e00f      	b.n	8004f26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_PCD_EP_Close+0x6e>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e00e      	b.n	8004f5e <HAL_PCD_EP_Close+0x8c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68f9      	ldr	r1, [r7, #12]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f005 fa7e 	bl	800a450 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	460b      	mov	r3, r1
 8004f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f76:	7afb      	ldrb	r3, [r7, #11]
 8004f78:	f003 020f 	and.w	r2, r3, #15
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fa8:	7afb      	ldrb	r3, [r7, #11]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d102      	bne.n	8004fc2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fc2:	7afb      	ldrb	r3, [r7, #11]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6979      	ldr	r1, [r7, #20]
 8004fda:	f005 fd59 	bl	800aa90 <USB_EP0StartXfer>
 8004fde:	e008      	b.n	8004ff2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	6979      	ldr	r1, [r7, #20]
 8004fee:	f005 fb0b 	bl	800a608 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	f003 020f 	and.w	r2, r3, #15
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800501e:	681b      	ldr	r3, [r3, #0]
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	460b      	mov	r3, r1
 800503a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800503c:	7afb      	ldrb	r3, [r7, #11]
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	3338      	adds	r3, #56	; 0x38
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	3304      	adds	r3, #4
 8005052:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2200      	movs	r2, #0
 8005064:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2201      	movs	r2, #1
 800506a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800506c:	7afb      	ldrb	r3, [r7, #11]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	b2da      	uxtb	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d102      	bne.n	8005086 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2b00      	cmp	r3, #0
 800508e:	d109      	bne.n	80050a4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	6979      	ldr	r1, [r7, #20]
 800509e:	f005 fcf7 	bl	800aa90 <USB_EP0StartXfer>
 80050a2:	e008      	b.n	80050b6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	f005 faa9 	bl	800a608 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 020f 	and.w	r2, r3, #15
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d901      	bls.n	80050de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e050      	b.n	8005180 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	da0f      	bge.n	8005106 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	f003 020f 	and.w	r2, r3, #15
 80050ec:	4613      	mov	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	3338      	adds	r3, #56	; 0x38
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	3304      	adds	r3, #4
 80050fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	705a      	strb	r2, [r3, #1]
 8005104:	e00d      	b.n	8005122 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4413      	add	r3, r2
 8005118:	3304      	adds	r3, #4
 800511a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	b2da      	uxtb	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_PCD_EP_SetStall+0x82>
 800513e:	2302      	movs	r3, #2
 8005140:	e01e      	b.n	8005180 <HAL_PCD_EP_SetStall+0xc0>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	4618      	mov	r0, r3
 8005152:	f005 fe4e 	bl	800adf2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	b2d9      	uxtb	r1, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005170:	461a      	mov	r2, r3
 8005172:	f006 f83f 	bl	800b1f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d901      	bls.n	80051a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e042      	b.n	800522c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	da0f      	bge.n	80051ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	3338      	adds	r3, #56	; 0x38
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	4413      	add	r3, r2
 80051c2:	3304      	adds	r3, #4
 80051c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	705a      	strb	r2, [r3, #1]
 80051cc:	e00f      	b.n	80051ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	3304      	adds	r3, #4
 80051e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_PCD_EP_ClrStall+0x86>
 800520a:	2302      	movs	r3, #2
 800520c:	e00e      	b.n	800522c <HAL_PCD_EP_ClrStall+0xa4>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	4618      	mov	r0, r3
 800521e:	f005 fe56 	bl	800aece <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08a      	sub	sp, #40	; 0x28
 8005238:	af02      	add	r7, sp, #8
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	4613      	mov	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	3338      	adds	r3, #56	; 0x38
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	4413      	add	r3, r2
 8005258:	3304      	adds	r3, #4
 800525a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	429a      	cmp	r2, r3
 8005266:	d901      	bls.n	800526c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e06c      	b.n	8005346 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	429a      	cmp	r2, r3
 8005280:	d902      	bls.n	8005288 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3303      	adds	r3, #3
 800528c:	089b      	lsrs	r3, r3, #2
 800528e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005290:	e02b      	b.n	80052ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d902      	bls.n	80052ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3303      	adds	r3, #3
 80052b2:	089b      	lsrs	r3, r3, #2
 80052b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68d9      	ldr	r1, [r3, #12]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	4603      	mov	r3, r0
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f005 fd32 	bl	800ad36 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	441a      	add	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	441a      	add	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d809      	bhi.n	8005314 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005308:	429a      	cmp	r2, r3
 800530a:	d203      	bcs.n	8005314 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1be      	bne.n	8005292 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	695a      	ldr	r2, [r3, #20]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	429a      	cmp	r2, r3
 800531e:	d811      	bhi.n	8005344 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	2201      	movs	r2, #1
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	43db      	mvns	r3, r3
 800533a:	6939      	ldr	r1, [r7, #16]
 800533c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005340:	4013      	ands	r3, r2
 8005342:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	333c      	adds	r3, #60	; 0x3c
 8005368:	3304      	adds	r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b01      	cmp	r3, #1
 8005384:	f040 80a0 	bne.w	80054c8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d015      	beq.n	80053be <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a72      	ldr	r2, [pc, #456]	; (8005560 <PCD_EP_OutXfrComplete_int+0x210>)
 8005396:	4293      	cmp	r3, r2
 8005398:	f240 80dd 	bls.w	8005556 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 80d7 	beq.w	8005556 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	461a      	mov	r2, r3
 80053b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ba:	6093      	str	r3, [r2, #8]
 80053bc:	e0cb      	b.n	8005556 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d009      	beq.n	80053dc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d4:	461a      	mov	r2, r3
 80053d6:	2320      	movs	r3, #32
 80053d8:	6093      	str	r3, [r2, #8]
 80053da:	e0bc      	b.n	8005556 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 80b7 	bne.w	8005556 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a5d      	ldr	r2, [pc, #372]	; (8005560 <PCD_EP_OutXfrComplete_int+0x210>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d90f      	bls.n	8005410 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	461a      	mov	r2, r3
 8005408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540c:	6093      	str	r3, [r2, #8]
 800540e:	e0a2      	b.n	8005556 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005422:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	0159      	lsls	r1, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	440b      	add	r3, r1
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005436:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4403      	add	r3, r0
 8005446:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800544a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	4613      	mov	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4403      	add	r3, r0
 800546e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4419      	add	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	4613      	mov	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4403      	add	r3, r0
 8005484:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005488:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d114      	bne.n	80054ba <PCD_EP_OutXfrComplete_int+0x16a>
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d108      	bne.n	80054ba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054b2:	461a      	mov	r2, r3
 80054b4:	2101      	movs	r1, #1
 80054b6:	f005 fe9d 	bl	800b1f4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f00b fdb5 	bl	8011030 <HAL_PCD_DataOutStageCallback>
 80054c6:	e046      	b.n	8005556 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a26      	ldr	r2, [pc, #152]	; (8005564 <PCD_EP_OutXfrComplete_int+0x214>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d124      	bne.n	800551a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	461a      	mov	r2, r3
 80054e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ec:	6093      	str	r3, [r2, #8]
 80054ee:	e032      	b.n	8005556 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	2320      	movs	r3, #32
 800550a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f00b fd8c 	bl	8011030 <HAL_PCD_DataOutStageCallback>
 8005518:	e01d      	b.n	8005556 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d114      	bne.n	800554a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d108      	bne.n	800554a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005542:	461a      	mov	r2, r3
 8005544:	2100      	movs	r1, #0
 8005546:	f005 fe55 	bl	800b1f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	4619      	mov	r1, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f00b fd6d 	bl	8011030 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	4f54300a 	.word	0x4f54300a
 8005564:	4f54310a 	.word	0x4f54310a

08005568 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	333c      	adds	r3, #60	; 0x3c
 8005580:	3304      	adds	r3, #4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d90e      	bls.n	80055bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d009      	beq.n	80055bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	461a      	mov	r2, r3
 80055b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f00b fd25 	bl	801100c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d90c      	bls.n	80055e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d108      	bne.n	80055e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055dc:	461a      	mov	r2, r3
 80055de:	2101      	movs	r1, #1
 80055e0:	f005 fe08 	bl	800b1f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	4f54300a 	.word	0x4f54300a

080055f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
 8005600:	4613      	mov	r3, r2
 8005602:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d107      	bne.n	8005622 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005612:	883b      	ldrh	r3, [r7, #0]
 8005614:	0419      	lsls	r1, r3, #16
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	430a      	orrs	r2, r1
 800561e:	629a      	str	r2, [r3, #40]	; 0x28
 8005620:	e028      	b.n	8005674 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005630:	2300      	movs	r3, #0
 8005632:	73fb      	strb	r3, [r7, #15]
 8005634:	e00d      	b.n	8005652 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	3340      	adds	r3, #64	; 0x40
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	4413      	add	r3, r2
 800564a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	3301      	adds	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
 8005652:	7bfa      	ldrb	r2, [r7, #15]
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	3b01      	subs	r3, #1
 8005658:	429a      	cmp	r2, r3
 800565a:	d3ec      	bcc.n	8005636 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800565c:	883b      	ldrh	r3, [r7, #0]
 800565e:	0418      	lsls	r0, r3, #16
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	3b01      	subs	r3, #1
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	4302      	orrs	r2, r0
 800566c:	3340      	adds	r3, #64	; 0x40
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	887a      	ldrh	r2, [r7, #2]
 8005694:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d6:	f043 0303 	orr.w	r3, r3, #3
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0cc      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005718:	4b68      	ldr	r3, [pc, #416]	; (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d90c      	bls.n	8005740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b65      	ldr	r3, [pc, #404]	; (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800572e:	4b63      	ldr	r3, [pc, #396]	; (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d001      	beq.n	8005740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e0b8      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d020      	beq.n	800578e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005758:	4b59      	ldr	r3, [pc, #356]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	4a58      	ldr	r2, [pc, #352]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005770:	4b53      	ldr	r3, [pc, #332]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4a52      	ldr	r2, [pc, #328]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800577a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800577c:	4b50      	ldr	r3, [pc, #320]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	494d      	ldr	r1, [pc, #308]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	4313      	orrs	r3, r2
 800578c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d044      	beq.n	8005824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d107      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a2:	4b47      	ldr	r3, [pc, #284]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d119      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e07f      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d003      	beq.n	80057c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d107      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c2:	4b3f      	ldr	r3, [pc, #252]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e06f      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d2:	4b3b      	ldr	r3, [pc, #236]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e067      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e2:	4b37      	ldr	r3, [pc, #220]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 0203 	bic.w	r2, r3, #3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4934      	ldr	r1, [pc, #208]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f4:	f7fd fde6 	bl	80033c4 <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	e00a      	b.n	8005812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fc:	f7fd fde2 	bl	80033c4 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f241 3288 	movw	r2, #5000	; 0x1388
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e04f      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005812:	4b2b      	ldr	r3, [pc, #172]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 020c 	and.w	r2, r3, #12
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	429a      	cmp	r2, r3
 8005822:	d1eb      	bne.n	80057fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005824:	4b25      	ldr	r3, [pc, #148]	; (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d20c      	bcs.n	800584c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b22      	ldr	r3, [pc, #136]	; (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b20      	ldr	r3, [pc, #128]	; (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e032      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005858:	4b19      	ldr	r3, [pc, #100]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4916      	ldr	r1, [pc, #88]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	490e      	ldr	r1, [pc, #56]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800588a:	f000 fb7f 	bl	8005f8c <HAL_RCC_GetSysClockFreq>
 800588e:	4601      	mov	r1, r0
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 800589c:	5cd3      	ldrb	r3, [r2, r3]
 800589e:	fa21 f303 	lsr.w	r3, r1, r3
 80058a2:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 80058a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058a6:	4b09      	ldr	r3, [pc, #36]	; (80058cc <HAL_RCC_ClockConfig+0x1c8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd fd46 	bl	800333c <HAL_InitTick>

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40023c00 	.word	0x40023c00
 80058c0:	40023800 	.word	0x40023800
 80058c4:	08012344 	.word	0x08012344
 80058c8:	20000000 	.word	0x20000000
 80058cc:	20000004 	.word	0x20000004

080058d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058d4:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058d6:	681b      	ldr	r3, [r3, #0]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20000000 	.word	0x20000000

080058e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058ec:	f7ff fff0 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 80058f0:	4601      	mov	r1, r0
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0a9b      	lsrs	r3, r3, #10
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4a03      	ldr	r2, [pc, #12]	; (800590c <HAL_RCC_GetPCLK1Freq+0x24>)
 80058fe:	5cd3      	ldrb	r3, [r2, r3]
 8005900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	08012354 	.word	0x08012354

08005910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005914:	f7ff ffdc 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 8005918:	4601      	mov	r1, r0
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	0b5b      	lsrs	r3, r3, #13
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	4a03      	ldr	r2, [pc, #12]	; (8005934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005926:	5cd3      	ldrb	r3, [r2, r3]
 8005928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800592c:	4618      	mov	r0, r3
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40023800 	.word	0x40023800
 8005934:	08012354 	.word	0x08012354

08005938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08c      	sub	sp, #48	; 0x30
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d010      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005970:	4b6f      	ldr	r3, [pc, #444]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005976:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	496c      	ldr	r1, [pc, #432]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800598e:	2301      	movs	r3, #1
 8005990:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d010      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800599e:	4b64      	ldr	r3, [pc, #400]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ac:	4960      	ldr	r1, [pc, #384]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80059bc:	2301      	movs	r3, #1
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d017      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059cc:	4b58      	ldr	r3, [pc, #352]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	4955      	ldr	r1, [pc, #340]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ea:	d101      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80059ec:	2301      	movs	r3, #1
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80059f8:	2301      	movs	r3, #1
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d017      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a08:	4b49      	ldr	r3, [pc, #292]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	4946      	ldr	r1, [pc, #280]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a26:	d101      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005a34:	2301      	movs	r3, #1
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 808a 	beq.w	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	4a38      	ldr	r2, [pc, #224]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a54:	6413      	str	r3, [r2, #64]	; 0x40
 8005a56:	4b36      	ldr	r3, [pc, #216]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	60bb      	str	r3, [r7, #8]
 8005a60:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a62:	4b34      	ldr	r3, [pc, #208]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a33      	ldr	r2, [pc, #204]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a6e:	f7fd fca9 	bl	80033c4 <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a74:	e008      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a76:	f7fd fca5 	bl	80033c4 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e278      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a88:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a94:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d02f      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aac:	6a3a      	ldr	r2, [r7, #32]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d028      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ab2:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005abc:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ac8:	4a19      	ldr	r2, [pc, #100]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ace:	4b18      	ldr	r3, [pc, #96]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d114      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ada:	f7fd fc73 	bl	80033c4 <HAL_GetTick>
 8005ade:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae0:	e00a      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae2:	f7fd fc6f 	bl	80033c4 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e240      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af8:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0ee      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b10:	d114      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005b12:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b26:	4902      	ldr	r1, [pc, #8]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	608b      	str	r3, [r1, #8]
 8005b2c:	e00c      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005b2e:	bf00      	nop
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40007000 	.word	0x40007000
 8005b38:	42470e40 	.word	0x42470e40
 8005b3c:	4b4a      	ldr	r3, [pc, #296]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	4a49      	ldr	r2, [pc, #292]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b46:	6093      	str	r3, [r2, #8]
 8005b48:	4b47      	ldr	r3, [pc, #284]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b54:	4944      	ldr	r1, [pc, #272]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005b6c:	4b3f      	ldr	r3, [pc, #252]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005b6e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005b7c:	4b3a      	ldr	r3, [pc, #232]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8a:	4937      	ldr	r1, [pc, #220]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b9e:	4b32      	ldr	r3, [pc, #200]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bac:	492e      	ldr	r1, [pc, #184]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d011      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bc0:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	4926      	ldr	r1, [pc, #152]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bde:	d101      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005be0:	2301      	movs	r3, #1
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	491a      	ldr	r1, [pc, #104]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d011      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c18:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c20:	4911      	ldr	r1, [pc, #68]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c30:	d101      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005c32:	2301      	movs	r3, #1
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c44:	f040 80ff 	bne.w	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c48:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c4e:	f7fd fbb9 	bl	80033c4 <HAL_GetTick>
 8005c52:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c54:	e00e      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c56:	f7fd fbb5 	bl	80033c4 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d907      	bls.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e188      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	424711e0 	.word	0x424711e0
 8005c70:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c74:	4b7e      	ldr	r3, [pc, #504]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ea      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d009      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d028      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d124      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005ca8:	4b71      	ldr	r3, [pc, #452]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cae:	0c1b      	lsrs	r3, r3, #16
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cba:	4b6d      	ldr	r3, [pc, #436]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc0:	0e1b      	lsrs	r3, r3, #24
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	019b      	lsls	r3, r3, #6
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	041b      	lsls	r3, r3, #16
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	061b      	lsls	r3, r3, #24
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	071b      	lsls	r3, r3, #28
 8005cea:	4961      	ldr	r1, [pc, #388]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d06:	d00a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d035      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d1c:	d130      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005d1e:	4b54      	ldr	r3, [pc, #336]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d30:	4b4f      	ldr	r3, [pc, #316]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d36:	0f1b      	lsrs	r3, r3, #28
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	019b      	lsls	r3, r3, #6
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	061b      	lsls	r3, r3, #24
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	071b      	lsls	r3, r3, #28
 8005d60:	4943      	ldr	r1, [pc, #268]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d68:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d6e:	f023 021f 	bic.w	r2, r3, #31
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	3b01      	subs	r3, #1
 8005d78:	493d      	ldr	r1, [pc, #244]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d029      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d94:	d124      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005d96:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	3301      	adds	r3, #1
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005da8:	4b31      	ldr	r3, [pc, #196]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dae:	0f1b      	lsrs	r3, r3, #28
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	019b      	lsls	r3, r3, #6
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	041b      	lsls	r3, r3, #16
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	061b      	lsls	r3, r3, #24
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	071b      	lsls	r3, r3, #28
 8005dd8:	4925      	ldr	r1, [pc, #148]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d016      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	019b      	lsls	r3, r3, #6
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	041b      	lsls	r3, r3, #16
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	061b      	lsls	r3, r3, #24
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	071b      	lsls	r3, r3, #28
 8005e12:	4917      	ldr	r1, [pc, #92]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e1a:	4b16      	ldr	r3, [pc, #88]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e20:	f7fd fad0 	bl	80033c4 <HAL_GetTick>
 8005e24:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e28:	f7fd facc 	bl	80033c4 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e09f      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	f040 8095 	bne.w	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e54:	f7fd fab6 	bl	80033c4 <HAL_GetTick>
 8005e58:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e5a:	e00f      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e5c:	f7fd fab2 	bl	80033c4 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d908      	bls.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e085      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005e6e:	bf00      	nop
 8005e70:	40023800 	.word	0x40023800
 8005e74:	42470068 	.word	0x42470068
 8005e78:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e7c:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e88:	d0e8      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d02b      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d127      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005eb2:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	041b      	lsls	r3, r3, #16
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	061b      	lsls	r3, r3, #24
 8005ee0:	4928      	ldr	r1, [pc, #160]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ee8:	4b26      	ldr	r3, [pc, #152]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	4922      	ldr	r1, [pc, #136]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01d      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f16:	d118      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f18:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	0e1b      	lsrs	r3, r3, #24
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	019b      	lsls	r3, r3, #6
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	085b      	lsrs	r3, r3, #1
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	041b      	lsls	r3, r3, #16
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	061b      	lsls	r3, r3, #24
 8005f42:	4910      	ldr	r1, [pc, #64]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f50:	f7fd fa38 	bl	80033c4 <HAL_GetTick>
 8005f54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f58:	f7fd fa34 	bl	80033c4 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e007      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f76:	d1ef      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3730      	adds	r7, #48	; 0x30
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800
 8005f88:	42470070 	.word	0x42470070

08005f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fa6:	4bc6      	ldr	r3, [pc, #792]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	2b0c      	cmp	r3, #12
 8005fb0:	f200 817e 	bhi.w	80062b0 <HAL_RCC_GetSysClockFreq+0x324>
 8005fb4:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <HAL_RCC_GetSysClockFreq+0x30>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	08005ff1 	.word	0x08005ff1
 8005fc0:	080062b1 	.word	0x080062b1
 8005fc4:	080062b1 	.word	0x080062b1
 8005fc8:	080062b1 	.word	0x080062b1
 8005fcc:	08005ff7 	.word	0x08005ff7
 8005fd0:	080062b1 	.word	0x080062b1
 8005fd4:	080062b1 	.word	0x080062b1
 8005fd8:	080062b1 	.word	0x080062b1
 8005fdc:	08005ffd 	.word	0x08005ffd
 8005fe0:	080062b1 	.word	0x080062b1
 8005fe4:	080062b1 	.word	0x080062b1
 8005fe8:	080062b1 	.word	0x080062b1
 8005fec:	08006159 	.word	0x08006159
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ff0:	4bb4      	ldr	r3, [pc, #720]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x338>)
 8005ff2:	613b      	str	r3, [r7, #16]
       break;
 8005ff4:	e15f      	b.n	80062b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ff6:	4bb4      	ldr	r3, [pc, #720]	; (80062c8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005ff8:	613b      	str	r3, [r7, #16]
      break;
 8005ffa:	e15c      	b.n	80062b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ffc:	4bb0      	ldr	r3, [pc, #704]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006004:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006006:	4bae      	ldr	r3, [pc, #696]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d04a      	beq.n	80060a8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006012:	4bab      	ldr	r3, [pc, #684]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	f04f 0400 	mov.w	r4, #0
 800601c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	ea03 0501 	and.w	r5, r3, r1
 8006028:	ea04 0602 	and.w	r6, r4, r2
 800602c:	4629      	mov	r1, r5
 800602e:	4632      	mov	r2, r6
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	f04f 0400 	mov.w	r4, #0
 8006038:	0154      	lsls	r4, r2, #5
 800603a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800603e:	014b      	lsls	r3, r1, #5
 8006040:	4619      	mov	r1, r3
 8006042:	4622      	mov	r2, r4
 8006044:	1b49      	subs	r1, r1, r5
 8006046:	eb62 0206 	sbc.w	r2, r2, r6
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	f04f 0400 	mov.w	r4, #0
 8006052:	0194      	lsls	r4, r2, #6
 8006054:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006058:	018b      	lsls	r3, r1, #6
 800605a:	1a5b      	subs	r3, r3, r1
 800605c:	eb64 0402 	sbc.w	r4, r4, r2
 8006060:	f04f 0100 	mov.w	r1, #0
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	00e2      	lsls	r2, r4, #3
 800606a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800606e:	00d9      	lsls	r1, r3, #3
 8006070:	460b      	mov	r3, r1
 8006072:	4614      	mov	r4, r2
 8006074:	195b      	adds	r3, r3, r5
 8006076:	eb44 0406 	adc.w	r4, r4, r6
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	0262      	lsls	r2, r4, #9
 8006084:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006088:	0259      	lsls	r1, r3, #9
 800608a:	460b      	mov	r3, r1
 800608c:	4614      	mov	r4, r2
 800608e:	4618      	mov	r0, r3
 8006090:	4621      	mov	r1, r4
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f04f 0400 	mov.w	r4, #0
 8006098:	461a      	mov	r2, r3
 800609a:	4623      	mov	r3, r4
 800609c:	f7fa fd0e 	bl	8000abc <__aeabi_uldivmod>
 80060a0:	4603      	mov	r3, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	e049      	b.n	800613c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a8:	4b85      	ldr	r3, [pc, #532]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	099b      	lsrs	r3, r3, #6
 80060ae:	f04f 0400 	mov.w	r4, #0
 80060b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	ea03 0501 	and.w	r5, r3, r1
 80060be:	ea04 0602 	and.w	r6, r4, r2
 80060c2:	4629      	mov	r1, r5
 80060c4:	4632      	mov	r2, r6
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	f04f 0400 	mov.w	r4, #0
 80060ce:	0154      	lsls	r4, r2, #5
 80060d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060d4:	014b      	lsls	r3, r1, #5
 80060d6:	4619      	mov	r1, r3
 80060d8:	4622      	mov	r2, r4
 80060da:	1b49      	subs	r1, r1, r5
 80060dc:	eb62 0206 	sbc.w	r2, r2, r6
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	f04f 0400 	mov.w	r4, #0
 80060e8:	0194      	lsls	r4, r2, #6
 80060ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060ee:	018b      	lsls	r3, r1, #6
 80060f0:	1a5b      	subs	r3, r3, r1
 80060f2:	eb64 0402 	sbc.w	r4, r4, r2
 80060f6:	f04f 0100 	mov.w	r1, #0
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	00e2      	lsls	r2, r4, #3
 8006100:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006104:	00d9      	lsls	r1, r3, #3
 8006106:	460b      	mov	r3, r1
 8006108:	4614      	mov	r4, r2
 800610a:	195b      	adds	r3, r3, r5
 800610c:	eb44 0406 	adc.w	r4, r4, r6
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	02a2      	lsls	r2, r4, #10
 800611a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800611e:	0299      	lsls	r1, r3, #10
 8006120:	460b      	mov	r3, r1
 8006122:	4614      	mov	r4, r2
 8006124:	4618      	mov	r0, r3
 8006126:	4621      	mov	r1, r4
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f04f 0400 	mov.w	r4, #0
 800612e:	461a      	mov	r2, r3
 8006130:	4623      	mov	r3, r4
 8006132:	f7fa fcc3 	bl	8000abc <__aeabi_uldivmod>
 8006136:	4603      	mov	r3, r0
 8006138:	460c      	mov	r4, r1
 800613a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800613c:	4b60      	ldr	r3, [pc, #384]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	3301      	adds	r3, #1
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	613b      	str	r3, [r7, #16]
      break;
 8006156:	e0ae      	b.n	80062b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006158:	4b59      	ldr	r3, [pc, #356]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006160:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006162:	4b57      	ldr	r3, [pc, #348]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d04a      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800616e:	4b54      	ldr	r3, [pc, #336]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	099b      	lsrs	r3, r3, #6
 8006174:	f04f 0400 	mov.w	r4, #0
 8006178:	f240 11ff 	movw	r1, #511	; 0x1ff
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	ea03 0501 	and.w	r5, r3, r1
 8006184:	ea04 0602 	and.w	r6, r4, r2
 8006188:	4629      	mov	r1, r5
 800618a:	4632      	mov	r2, r6
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	f04f 0400 	mov.w	r4, #0
 8006194:	0154      	lsls	r4, r2, #5
 8006196:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800619a:	014b      	lsls	r3, r1, #5
 800619c:	4619      	mov	r1, r3
 800619e:	4622      	mov	r2, r4
 80061a0:	1b49      	subs	r1, r1, r5
 80061a2:	eb62 0206 	sbc.w	r2, r2, r6
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	f04f 0400 	mov.w	r4, #0
 80061ae:	0194      	lsls	r4, r2, #6
 80061b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80061b4:	018b      	lsls	r3, r1, #6
 80061b6:	1a5b      	subs	r3, r3, r1
 80061b8:	eb64 0402 	sbc.w	r4, r4, r2
 80061bc:	f04f 0100 	mov.w	r1, #0
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	00e2      	lsls	r2, r4, #3
 80061c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80061ca:	00d9      	lsls	r1, r3, #3
 80061cc:	460b      	mov	r3, r1
 80061ce:	4614      	mov	r4, r2
 80061d0:	195b      	adds	r3, r3, r5
 80061d2:	eb44 0406 	adc.w	r4, r4, r6
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	0262      	lsls	r2, r4, #9
 80061e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80061e4:	0259      	lsls	r1, r3, #9
 80061e6:	460b      	mov	r3, r1
 80061e8:	4614      	mov	r4, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	4621      	mov	r1, r4
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f04f 0400 	mov.w	r4, #0
 80061f4:	461a      	mov	r2, r3
 80061f6:	4623      	mov	r3, r4
 80061f8:	f7fa fc60 	bl	8000abc <__aeabi_uldivmod>
 80061fc:	4603      	mov	r3, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	e049      	b.n	8006298 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006204:	4b2e      	ldr	r3, [pc, #184]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	099b      	lsrs	r3, r3, #6
 800620a:	f04f 0400 	mov.w	r4, #0
 800620e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	ea03 0501 	and.w	r5, r3, r1
 800621a:	ea04 0602 	and.w	r6, r4, r2
 800621e:	4629      	mov	r1, r5
 8006220:	4632      	mov	r2, r6
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	f04f 0400 	mov.w	r4, #0
 800622a:	0154      	lsls	r4, r2, #5
 800622c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006230:	014b      	lsls	r3, r1, #5
 8006232:	4619      	mov	r1, r3
 8006234:	4622      	mov	r2, r4
 8006236:	1b49      	subs	r1, r1, r5
 8006238:	eb62 0206 	sbc.w	r2, r2, r6
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	f04f 0400 	mov.w	r4, #0
 8006244:	0194      	lsls	r4, r2, #6
 8006246:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800624a:	018b      	lsls	r3, r1, #6
 800624c:	1a5b      	subs	r3, r3, r1
 800624e:	eb64 0402 	sbc.w	r4, r4, r2
 8006252:	f04f 0100 	mov.w	r1, #0
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	00e2      	lsls	r2, r4, #3
 800625c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006260:	00d9      	lsls	r1, r3, #3
 8006262:	460b      	mov	r3, r1
 8006264:	4614      	mov	r4, r2
 8006266:	195b      	adds	r3, r3, r5
 8006268:	eb44 0406 	adc.w	r4, r4, r6
 800626c:	f04f 0100 	mov.w	r1, #0
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	02a2      	lsls	r2, r4, #10
 8006276:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800627a:	0299      	lsls	r1, r3, #10
 800627c:	460b      	mov	r3, r1
 800627e:	4614      	mov	r4, r2
 8006280:	4618      	mov	r0, r3
 8006282:	4621      	mov	r1, r4
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f04f 0400 	mov.w	r4, #0
 800628a:	461a      	mov	r2, r3
 800628c:	4623      	mov	r3, r4
 800628e:	f7fa fc15 	bl	8000abc <__aeabi_uldivmod>
 8006292:	4603      	mov	r3, r0
 8006294:	460c      	mov	r4, r1
 8006296:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	0f1b      	lsrs	r3, r3, #28
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	613b      	str	r3, [r7, #16]
      break;
 80062ae:	e002      	b.n	80062b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80062b2:	613b      	str	r3, [r7, #16]
      break;
 80062b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062b6:	693b      	ldr	r3, [r7, #16]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c0:	40023800 	.word	0x40023800
 80062c4:	00f42400 	.word	0x00f42400
 80062c8:	007a1200 	.word	0x007a1200

080062cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8083 	beq.w	80063ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062e6:	4b95      	ldr	r3, [pc, #596]	; (800653c <HAL_RCC_OscConfig+0x270>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d019      	beq.n	8006326 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062f2:	4b92      	ldr	r3, [pc, #584]	; (800653c <HAL_RCC_OscConfig+0x270>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d106      	bne.n	800630c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062fe:	4b8f      	ldr	r3, [pc, #572]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800630a:	d00c      	beq.n	8006326 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800630c:	4b8b      	ldr	r3, [pc, #556]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006314:	2b0c      	cmp	r3, #12
 8006316:	d112      	bne.n	800633e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006318:	4b88      	ldr	r3, [pc, #544]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006324:	d10b      	bne.n	800633e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006326:	4b85      	ldr	r3, [pc, #532]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d05b      	beq.n	80063ea <HAL_RCC_OscConfig+0x11e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d157      	bne.n	80063ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e216      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006346:	d106      	bne.n	8006356 <HAL_RCC_OscConfig+0x8a>
 8006348:	4b7c      	ldr	r3, [pc, #496]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a7b      	ldr	r2, [pc, #492]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800634e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	e01d      	b.n	8006392 <HAL_RCC_OscConfig+0xc6>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800635e:	d10c      	bne.n	800637a <HAL_RCC_OscConfig+0xae>
 8006360:	4b76      	ldr	r3, [pc, #472]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a75      	ldr	r2, [pc, #468]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	4b73      	ldr	r3, [pc, #460]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a72      	ldr	r2, [pc, #456]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e00b      	b.n	8006392 <HAL_RCC_OscConfig+0xc6>
 800637a:	4b70      	ldr	r3, [pc, #448]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a6f      	ldr	r2, [pc, #444]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	4b6d      	ldr	r3, [pc, #436]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a6c      	ldr	r2, [pc, #432]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800638c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006390:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d013      	beq.n	80063c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639a:	f7fd f813 	bl	80033c4 <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063a2:	f7fd f80f 	bl	80033c4 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b64      	cmp	r3, #100	; 0x64
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e1db      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b4:	4b61      	ldr	r3, [pc, #388]	; (800653c <HAL_RCC_OscConfig+0x270>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCC_OscConfig+0xd6>
 80063c0:	e014      	b.n	80063ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c2:	f7fc ffff 	bl	80033c4 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063ca:	f7fc fffb 	bl	80033c4 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b64      	cmp	r3, #100	; 0x64
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e1c7      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063dc:	4b57      	ldr	r3, [pc, #348]	; (800653c <HAL_RCC_OscConfig+0x270>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f0      	bne.n	80063ca <HAL_RCC_OscConfig+0xfe>
 80063e8:	e000      	b.n	80063ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d06f      	beq.n	80064d8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063f8:	4b50      	ldr	r3, [pc, #320]	; (800653c <HAL_RCC_OscConfig+0x270>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 030c 	and.w	r3, r3, #12
 8006400:	2b00      	cmp	r3, #0
 8006402:	d017      	beq.n	8006434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006404:	4b4d      	ldr	r3, [pc, #308]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800640c:	2b08      	cmp	r3, #8
 800640e:	d105      	bne.n	800641c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006410:	4b4a      	ldr	r3, [pc, #296]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800641c:	4b47      	ldr	r3, [pc, #284]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006424:	2b0c      	cmp	r3, #12
 8006426:	d11c      	bne.n	8006462 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006428:	4b44      	ldr	r3, [pc, #272]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d116      	bne.n	8006462 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006434:	4b41      	ldr	r3, [pc, #260]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <HAL_RCC_OscConfig+0x180>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d001      	beq.n	800644c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e18f      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644c:	4b3b      	ldr	r3, [pc, #236]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	4938      	ldr	r1, [pc, #224]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800645c:	4313      	orrs	r3, r2
 800645e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006460:	e03a      	b.n	80064d8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d020      	beq.n	80064ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800646a:	4b35      	ldr	r3, [pc, #212]	; (8006540 <HAL_RCC_OscConfig+0x274>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fc ffa8 	bl	80033c4 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006478:	f7fc ffa4 	bl	80033c4 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e170      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648a:	4b2c      	ldr	r3, [pc, #176]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006496:	4b29      	ldr	r3, [pc, #164]	; (800653c <HAL_RCC_OscConfig+0x270>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4925      	ldr	r1, [pc, #148]	; (800653c <HAL_RCC_OscConfig+0x270>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	600b      	str	r3, [r1, #0]
 80064aa:	e015      	b.n	80064d8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ac:	4b24      	ldr	r3, [pc, #144]	; (8006540 <HAL_RCC_OscConfig+0x274>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b2:	f7fc ff87 	bl	80033c4 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ba:	f7fc ff83 	bl	80033c4 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e14f      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064cc:	4b1b      	ldr	r3, [pc, #108]	; (800653c <HAL_RCC_OscConfig+0x270>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f0      	bne.n	80064ba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d037      	beq.n	8006554 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d016      	beq.n	800651a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ec:	4b15      	ldr	r3, [pc, #84]	; (8006544 <HAL_RCC_OscConfig+0x278>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f2:	f7fc ff67 	bl	80033c4 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064fa:	f7fc ff63 	bl	80033c4 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e12f      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_RCC_OscConfig+0x270>)
 800650e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCC_OscConfig+0x22e>
 8006518:	e01c      	b.n	8006554 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800651a:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <HAL_RCC_OscConfig+0x278>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006520:	f7fc ff50 	bl	80033c4 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006526:	e00f      	b.n	8006548 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006528:	f7fc ff4c 	bl	80033c4 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d908      	bls.n	8006548 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e118      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
 800653a:	bf00      	nop
 800653c:	40023800 	.word	0x40023800
 8006540:	42470000 	.word	0x42470000
 8006544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006548:	4b8a      	ldr	r3, [pc, #552]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 800654a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e9      	bne.n	8006528 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8097 	beq.w	8006690 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006562:	2300      	movs	r3, #0
 8006564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006566:	4b83      	ldr	r3, [pc, #524]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10f      	bne.n	8006592 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	4b7f      	ldr	r3, [pc, #508]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	4a7e      	ldr	r2, [pc, #504]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 800657c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006580:	6413      	str	r3, [r2, #64]	; 0x40
 8006582:	4b7c      	ldr	r3, [pc, #496]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800658e:	2301      	movs	r3, #1
 8006590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006592:	4b79      	ldr	r3, [pc, #484]	; (8006778 <HAL_RCC_OscConfig+0x4ac>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d118      	bne.n	80065d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800659e:	4b76      	ldr	r3, [pc, #472]	; (8006778 <HAL_RCC_OscConfig+0x4ac>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a75      	ldr	r2, [pc, #468]	; (8006778 <HAL_RCC_OscConfig+0x4ac>)
 80065a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065aa:	f7fc ff0b 	bl	80033c4 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b2:	f7fc ff07 	bl	80033c4 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e0d3      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c4:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <HAL_RCC_OscConfig+0x4ac>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d106      	bne.n	80065e6 <HAL_RCC_OscConfig+0x31a>
 80065d8:	4b66      	ldr	r3, [pc, #408]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	4a65      	ldr	r2, [pc, #404]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	6713      	str	r3, [r2, #112]	; 0x70
 80065e4:	e01c      	b.n	8006620 <HAL_RCC_OscConfig+0x354>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2b05      	cmp	r3, #5
 80065ec:	d10c      	bne.n	8006608 <HAL_RCC_OscConfig+0x33c>
 80065ee:	4b61      	ldr	r3, [pc, #388]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 80065f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f2:	4a60      	ldr	r2, [pc, #384]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 80065f4:	f043 0304 	orr.w	r3, r3, #4
 80065f8:	6713      	str	r3, [r2, #112]	; 0x70
 80065fa:	4b5e      	ldr	r3, [pc, #376]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 80065fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fe:	4a5d      	ldr	r2, [pc, #372]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	6713      	str	r3, [r2, #112]	; 0x70
 8006606:	e00b      	b.n	8006620 <HAL_RCC_OscConfig+0x354>
 8006608:	4b5a      	ldr	r3, [pc, #360]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	4a59      	ldr	r2, [pc, #356]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 800660e:	f023 0301 	bic.w	r3, r3, #1
 8006612:	6713      	str	r3, [r2, #112]	; 0x70
 8006614:	4b57      	ldr	r3, [pc, #348]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	4a56      	ldr	r2, [pc, #344]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 800661a:	f023 0304 	bic.w	r3, r3, #4
 800661e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d015      	beq.n	8006654 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006628:	f7fc fecc 	bl	80033c4 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800662e:	e00a      	b.n	8006646 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006630:	f7fc fec8 	bl	80033c4 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	f241 3288 	movw	r2, #5000	; 0x1388
 800663e:	4293      	cmp	r3, r2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e092      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006646:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0ee      	beq.n	8006630 <HAL_RCC_OscConfig+0x364>
 8006652:	e014      	b.n	800667e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006654:	f7fc feb6 	bl	80033c4 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800665a:	e00a      	b.n	8006672 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800665c:	f7fc feb2 	bl	80033c4 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	f241 3288 	movw	r2, #5000	; 0x1388
 800666a:	4293      	cmp	r3, r2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e07c      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006672:	4b40      	ldr	r3, [pc, #256]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1ee      	bne.n	800665c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d105      	bne.n	8006690 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006684:	4b3b      	ldr	r3, [pc, #236]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	4a3a      	ldr	r2, [pc, #232]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 800668a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800668e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d068      	beq.n	800676a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006698:	4b36      	ldr	r3, [pc, #216]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 030c 	and.w	r3, r3, #12
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d060      	beq.n	8006766 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d145      	bne.n	8006738 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ac:	4b33      	ldr	r3, [pc, #204]	; (800677c <HAL_RCC_OscConfig+0x4b0>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fc fe87 	bl	80033c4 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ba:	f7fc fe83 	bl	80033c4 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e04f      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066cc:	4b29      	ldr	r3, [pc, #164]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	019b      	lsls	r3, r3, #6
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	3b01      	subs	r3, #1
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	061b      	lsls	r3, r3, #24
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	071b      	lsls	r3, r3, #28
 8006704:	491b      	ldr	r1, [pc, #108]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 8006706:	4313      	orrs	r3, r2
 8006708:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800670a:	4b1c      	ldr	r3, [pc, #112]	; (800677c <HAL_RCC_OscConfig+0x4b0>)
 800670c:	2201      	movs	r2, #1
 800670e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7fc fe58 	bl	80033c4 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006718:	f7fc fe54 	bl	80033c4 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e020      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672a:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0x44c>
 8006736:	e018      	b.n	800676a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006738:	4b10      	ldr	r3, [pc, #64]	; (800677c <HAL_RCC_OscConfig+0x4b0>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673e:	f7fc fe41 	bl	80033c4 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006746:	f7fc fe3d 	bl	80033c4 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e009      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <HAL_RCC_OscConfig+0x4a8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1f0      	bne.n	8006746 <HAL_RCC_OscConfig+0x47a>
 8006764:	e001      	b.n	800676a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40023800 	.word	0x40023800
 8006778:	40007000 	.word	0x40007000
 800677c:	42470060 	.word	0x42470060

08006780 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e022      	b.n	80067d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d105      	bne.n	80067aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fc f9d9 	bl	8002b5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2203      	movs	r2, #3
 80067ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f814 	bl	80067e0 <HAL_SD_InitCard>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e00a      	b.n	80067d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067e0:	b5b0      	push	{r4, r5, r7, lr}
 80067e2:	b08e      	sub	sp, #56	; 0x38
 80067e4:	af04      	add	r7, sp, #16
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80067fc:	2376      	movs	r3, #118	; 0x76
 80067fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681d      	ldr	r5, [r3, #0]
 8006804:	466c      	mov	r4, sp
 8006806:	f107 0314 	add.w	r3, r7, #20
 800680a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800680e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006812:	f107 0308 	add.w	r3, r7, #8
 8006816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006818:	4628      	mov	r0, r5
 800681a:	f002 fcf9 	bl	8009210 <SDIO_Init>
 800681e:	4603      	mov	r3, r0
 8006820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e031      	b.n	8006894 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006830:	4b1a      	ldr	r3, [pc, #104]	; (800689c <HAL_SD_InitCard+0xbc>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f002 fd31 	bl	80092a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006840:	4b16      	ldr	r3, [pc, #88]	; (800689c <HAL_SD_InitCard+0xbc>)
 8006842:	2201      	movs	r2, #1
 8006844:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fefc 	bl	8007644 <SD_PowerON>
 800684c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e013      	b.n	8006894 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fe1b 	bl	80074a8 <SD_InitCard>
 8006872:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3728      	adds	r7, #40	; 0x28
 8006898:	46bd      	mov	sp, r7
 800689a:	bdb0      	pop	{r4, r5, r7, pc}
 800689c:	422580a0 	.word	0x422580a0

080068a0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b092      	sub	sp, #72	; 0x48
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80068ae:	f7fc fd89 	bl	80033c4 <HAL_GetTick>
 80068b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d107      	bne.n	80068d2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e1d7      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b01      	cmp	r3, #1
 80068dc:	f040 81ca 	bne.w	8006c74 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	441a      	add	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d907      	bls.n	8006904 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e1be      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2203      	movs	r2, #3
 8006908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2200      	movs	r2, #0
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006918:	2b01      	cmp	r3, #1
 800691a:	d002      	beq.n	8006922 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	025b      	lsls	r3, r3, #9
 8006920:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800692a:	4618      	mov	r0, r3
 800692c:	f002 fd4c 	bl	80093c8 <SDMMC_CmdBlockLength>
 8006930:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8006932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00f      	beq.n	8006958 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a9a      	ldr	r2, [pc, #616]	; (8006ba8 <HAL_SD_ReadBlocks+0x308>)
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006946:	431a      	orrs	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e194      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800695c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	025b      	lsls	r3, r3, #9
 8006962:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006964:	2390      	movs	r3, #144	; 0x90
 8006966:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006968:	2302      	movs	r3, #2
 800696a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800696c:	2300      	movs	r3, #0
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006970:	2301      	movs	r3, #1
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f107 0214 	add.w	r2, r7, #20
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f002 fcf6 	bl	8009370 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d90a      	bls.n	80069a0 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2202      	movs	r2, #2
 800698e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006996:	4618      	mov	r0, r3
 8006998:	f002 fd5a 	bl	8009450 <SDMMC_CmdReadMultiBlock>
 800699c:	6478      	str	r0, [r7, #68]	; 0x44
 800699e:	e009      	b.n	80069b4 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 fd2d 	bl	800940c <SDMMC_CmdReadSingleBlock>
 80069b2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80069b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d012      	beq.n	80069e0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a7a      	ldr	r2, [pc, #488]	; (8006ba8 <HAL_SD_ReadBlocks+0x308>)
 80069c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e150      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80069e4:	e061      	b.n	8006aaa <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d03c      	beq.n	8006a6e <HAL_SD_ReadBlocks+0x1ce>
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d039      	beq.n	8006a6e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80069fa:	2300      	movs	r3, #0
 80069fc:	643b      	str	r3, [r7, #64]	; 0x40
 80069fe:	e033      	b.n	8006a68 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f002 fc2e 	bl	8009266 <SDIO_ReadFIFO>
 8006a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a12:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	3301      	adds	r3, #1
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a28:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a32:	3b01      	subs	r3, #1
 8006a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	0c1b      	lsrs	r3, r3, #16
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a42:	3301      	adds	r3, #1
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	0e1b      	lsrs	r3, r3, #24
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	3301      	adds	r3, #1
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a64:	3301      	adds	r3, #1
 8006a66:	643b      	str	r3, [r7, #64]	; 0x40
 8006a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	d9c8      	bls.n	8006a00 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a6e:	f7fc fca9 	bl	80033c4 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d902      	bls.n	8006a84 <HAL_SD_ReadBlocks+0x1e4>
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d112      	bne.n	8006aaa <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a47      	ldr	r2, [pc, #284]	; (8006ba8 <HAL_SD_ReadBlocks+0x308>)
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e0eb      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d096      	beq.n	80069e6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d022      	beq.n	8006b0c <HAL_SD_ReadBlocks+0x26c>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d91f      	bls.n	8006b0c <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d01b      	beq.n	8006b0c <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f002 fd1f 	bl	800951c <SDMMC_CmdStopTransfer>
 8006ade:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d012      	beq.n	8006b0c <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2f      	ldr	r2, [pc, #188]	; (8006ba8 <HAL_SD_ReadBlocks+0x308>)
 8006aec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0ba      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d012      	beq.n	8006b40 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a22      	ldr	r2, [pc, #136]	; (8006ba8 <HAL_SD_ReadBlocks+0x308>)
 8006b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	f043 0208 	orr.w	r2, r3, #8
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0a0      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d012      	beq.n	8006b74 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <HAL_SD_ReadBlocks+0x308>)
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	f043 0202 	orr.w	r2, r3, #2
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e086      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d063      	beq.n	8006c4a <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <HAL_SD_ReadBlocks+0x308>)
 8006b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f043 0220 	orr.w	r2, r3, #32
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e06c      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
 8006ba8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f002 fb58 	bl	8009266 <SDIO_ReadFIFO>
 8006bb6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	0a1b      	lsrs	r3, r3, #8
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd8:	3301      	adds	r3, #1
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bde:	3b01      	subs	r3, #1
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bee:	3301      	adds	r3, #1
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	0e1b      	lsrs	r3, r3, #24
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	3301      	adds	r3, #1
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c0e:	f7fc fbd9 	bl	80033c4 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d902      	bls.n	8006c24 <HAL_SD_ReadBlocks+0x384>
 8006c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d112      	bne.n	8006c4a <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a18      	ldr	r2, [pc, #96]	; (8006c8c <HAL_SD_ReadBlocks+0x3ec>)
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e01b      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <HAL_SD_ReadBlocks+0x3be>
 8006c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1a6      	bne.n	8006bac <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e006      	b.n	8006c82 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
  }
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3748      	adds	r7, #72	; 0x48
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	004005ff 	.word	0x004005ff

08006c90 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b092      	sub	sp, #72	; 0x48
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c9e:	f7fc fb91 	bl	80033c4 <HAL_GetTick>
 8006ca2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d107      	bne.n	8006cc2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e182      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	f040 8175 	bne.w	8006fba <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	441a      	add	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d907      	bls.n	8006cf4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e169      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2200      	movs	r2, #0
 8006d02:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d002      	beq.n	8006d12 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	025b      	lsls	r3, r3, #9
 8006d10:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f002 fb54 	bl	80093c8 <SDMMC_CmdBlockLength>
 8006d20:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00f      	beq.n	8006d48 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a9c      	ldr	r2, [pc, #624]	; (8006fa0 <HAL_SD_WriteBlocks+0x310>)
 8006d2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d36:	431a      	orrs	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e13f      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d4c:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	025b      	lsls	r3, r3, #9
 8006d52:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006d54:	2390      	movs	r3, #144	; 0x90
 8006d56:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006d60:	2301      	movs	r3, #1
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f107 0218 	add.w	r2, r7, #24
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f002 fafe 	bl	8009370 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d90a      	bls.n	8006d90 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d86:	4618      	mov	r0, r3
 8006d88:	f002 fba6 	bl	80094d8 <SDMMC_CmdWriteMultiBlock>
 8006d8c:	6478      	str	r0, [r7, #68]	; 0x44
 8006d8e:	e009      	b.n	8006da4 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2210      	movs	r2, #16
 8006d94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f002 fb79 	bl	8009494 <SDMMC_CmdWriteSingleBlock>
 8006da2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d012      	beq.n	8006dd0 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a7c      	ldr	r2, [pc, #496]	; (8006fa0 <HAL_SD_WriteBlocks+0x310>)
 8006db0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db8:	431a      	orrs	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0fb      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8006dd4:	e065      	b.n	8006ea2 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d040      	beq.n	8006e66 <HAL_SD_WriteBlocks+0x1d6>
 8006de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d03d      	beq.n	8006e66 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006dea:	2300      	movs	r3, #0
 8006dec:	643b      	str	r3, [r7, #64]	; 0x40
 8006dee:	e037      	b.n	8006e60 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	3301      	adds	r3, #1
 8006dfa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	021a      	lsls	r2, r3, #8
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	3301      	adds	r3, #1
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e16:	3b01      	subs	r3, #1
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	041a      	lsls	r2, r3, #16
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e28:	3301      	adds	r3, #1
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	061a      	lsls	r2, r3, #24
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e40:	3301      	adds	r3, #1
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e46:	3b01      	subs	r3, #1
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f107 0214 	add.w	r2, r7, #20
 8006e52:	4611      	mov	r1, r2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f002 fa13 	bl	8009280 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e62:	2b07      	cmp	r3, #7
 8006e64:	d9c4      	bls.n	8006df0 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e66:	f7fc faad 	bl	80033c4 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d902      	bls.n	8006e7c <HAL_SD_WriteBlocks+0x1ec>
 8006e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d112      	bne.n	8006ea2 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a47      	ldr	r2, [pc, #284]	; (8006fa0 <HAL_SD_WriteBlocks+0x310>)
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e092      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d092      	beq.n	8006dd6 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d022      	beq.n	8006f04 <HAL_SD_WriteBlocks+0x274>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d91f      	bls.n	8006f04 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d01b      	beq.n	8006f04 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f002 fb23 	bl	800951c <SDMMC_CmdStopTransfer>
 8006ed6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d012      	beq.n	8006f04 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2f      	ldr	r2, [pc, #188]	; (8006fa0 <HAL_SD_WriteBlocks+0x310>)
 8006ee4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eec:	431a      	orrs	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e061      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d012      	beq.n	8006f38 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a22      	ldr	r2, [pc, #136]	; (8006fa0 <HAL_SD_WriteBlocks+0x310>)
 8006f18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	f043 0208 	orr.w	r2, r3, #8
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e047      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d012      	beq.n	8006f6c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <HAL_SD_WriteBlocks+0x310>)
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	f043 0202 	orr.w	r2, r3, #2
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e02d      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d014      	beq.n	8006fa4 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a08      	ldr	r2, [pc, #32]	; (8006fa0 <HAL_SD_WriteBlocks+0x310>)
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	f043 0210 	orr.w	r2, r3, #16
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e013      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
 8006fa0:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f240 523a 	movw	r2, #1338	; 0x53a
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e006      	b.n	8006fc8 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3748      	adds	r7, #72	; 0x48
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fde:	0f9b      	lsrs	r3, r3, #30
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fea:	0e9b      	lsrs	r3, r3, #26
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ffc:	0e1b      	lsrs	r3, r3, #24
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	b2da      	uxtb	r2, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	b2da      	uxtb	r2, r3
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800701a:	0a1b      	lsrs	r3, r3, #8
 800701c:	b2da      	uxtb	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007026:	b2da      	uxtb	r2, r3
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007030:	0d1b      	lsrs	r3, r3, #20
 8007032:	b29a      	uxth	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800703c:	0c1b      	lsrs	r3, r3, #16
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	b2da      	uxtb	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800704e:	0bdb      	lsrs	r3, r3, #15
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	b2da      	uxtb	r2, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007060:	0b9b      	lsrs	r3, r3, #14
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007072:	0b5b      	lsrs	r3, r3, #13
 8007074:	b2db      	uxtb	r3, r3
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	b2da      	uxtb	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007084:	0b1b      	lsrs	r3, r3, #12
 8007086:	b2db      	uxtb	r3, r3
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	b2da      	uxtb	r2, r3
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2200      	movs	r2, #0
 8007096:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	2b00      	cmp	r3, #0
 800709e:	d163      	bne.n	8007168 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070a4:	009a      	lsls	r2, r3, #2
 80070a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070aa:	4013      	ands	r3, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80070b0:	0f92      	lsrs	r2, r2, #30
 80070b2:	431a      	orrs	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070bc:	0edb      	lsrs	r3, r3, #27
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ce:	0e1b      	lsrs	r3, r3, #24
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e0:	0d5b      	lsrs	r3, r3, #21
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f2:	0c9b      	lsrs	r3, r3, #18
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007104:	0bdb      	lsrs	r3, r3, #15
 8007106:	b2db      	uxtb	r3, r3
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	b2da      	uxtb	r2, r3
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	7e1b      	ldrb	r3, [r3, #24]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	3302      	adds	r3, #2
 8007128:	2201      	movs	r2, #1
 800712a:	fa02 f303 	lsl.w	r3, r2, r3
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007132:	fb02 f203 	mul.w	r2, r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	7a1b      	ldrb	r3, [r3, #8]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	2201      	movs	r2, #1
 8007146:	409a      	lsls	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007154:	0a52      	lsrs	r2, r2, #9
 8007156:	fb02 f203 	mul.w	r2, r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007164:	661a      	str	r2, [r3, #96]	; 0x60
 8007166:	e031      	b.n	80071cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716c:	2b01      	cmp	r3, #1
 800716e:	d11d      	bne.n	80071ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	431a      	orrs	r2, r3
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	3301      	adds	r3, #1
 800718c:	029a      	lsls	r2, r3, #10
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	661a      	str	r2, [r3, #96]	; 0x60
 80071aa:	e00f      	b.n	80071cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a58      	ldr	r2, [pc, #352]	; (8007314 <HAL_SD_GetCardCSD+0x344>)
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e09d      	b.n	8007308 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d0:	0b9b      	lsrs	r3, r3, #14
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e2:	09db      	lsrs	r3, r3, #7
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007204:	0fdb      	lsrs	r3, r3, #31
 8007206:	b2da      	uxtb	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007210:	0f5b      	lsrs	r3, r3, #29
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 0303 	and.w	r3, r3, #3
 8007218:	b2da      	uxtb	r2, r3
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	0e9b      	lsrs	r3, r3, #26
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	b2da      	uxtb	r2, r3
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007234:	0d9b      	lsrs	r3, r3, #22
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	b2da      	uxtb	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	0d5b      	lsrs	r3, r3, #21
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	0c1b      	lsrs	r3, r3, #16
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	b2da      	uxtb	r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007276:	0bdb      	lsrs	r3, r3, #15
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	b2da      	uxtb	r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728a:	0b9b      	lsrs	r3, r3, #14
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	0b5b      	lsrs	r3, r3, #13
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	0b1b      	lsrs	r3, r3, #12
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	0a9b      	lsrs	r3, r3, #10
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	004005ff 	.word	0x004005ff

08007318 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007370:	b5b0      	push	{r4, r5, r7, lr}
 8007372:	b08e      	sub	sp, #56	; 0x38
 8007374:	af04      	add	r7, sp, #16
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2203      	movs	r2, #3
 800737e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007386:	2b03      	cmp	r3, #3
 8007388:	d02e      	beq.n	80073e8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007390:	d106      	bne.n	80073a0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	639a      	str	r2, [r3, #56]	; 0x38
 800739e:	e029      	b.n	80073f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a6:	d10a      	bne.n	80073be <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa01 	bl	80077b0 <SD_WideBus_Enable>
 80073ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38
 80073bc:	e01a      	b.n	80073f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa3e 	bl	8007846 <SD_WideBus_Disable>
 80073ca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38
 80073d8:	e00c      	b.n	80073f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	639a      	str	r2, [r3, #56]	; 0x38
 80073e6:	e005      	b.n	80073f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d009      	beq.n	8007410 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a18      	ldr	r2, [pc, #96]	; (8007464 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007402:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e024      	b.n	800745a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681d      	ldr	r5, [r3, #0]
 8007436:	466c      	mov	r4, sp
 8007438:	f107 0318 	add.w	r3, r7, #24
 800743c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007440:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007444:	f107 030c 	add.w	r3, r7, #12
 8007448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800744a:	4628      	mov	r0, r5
 800744c:	f001 fee0 	bl	8009210 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3728      	adds	r7, #40	; 0x28
 800745e:	46bd      	mov	sp, r7
 8007460:	bdb0      	pop	{r4, r5, r7, pc}
 8007462:	bf00      	nop
 8007464:	004005ff 	.word	0x004005ff

08007468 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007474:	f107 030c 	add.w	r3, r7, #12
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f970 	bl	8007760 <SD_SendStatus>
 8007480:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	0a5b      	lsrs	r3, r3, #9
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800749e:	693b      	ldr	r3, [r7, #16]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074a8:	b5b0      	push	{r4, r5, r7, lr}
 80074aa:	b094      	sub	sp, #80	; 0x50
 80074ac:	af04      	add	r7, sp, #16
 80074ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80074b0:	2301      	movs	r3, #1
 80074b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 ff01 	bl	80092c0 <SDIO_GetPowerState>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d102      	bne.n	80074ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80074c8:	e0b7      	b.n	800763a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d02f      	beq.n	8007532 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f002 f92a 	bl	8009730 <SDMMC_CmdSendCID>
 80074dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80074e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e6:	e0a8      	b.n	800763a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2100      	movs	r1, #0
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 ff2b 	bl	800934a <SDIO_GetResponse>
 80074f4:	4602      	mov	r2, r0
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2104      	movs	r1, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f001 ff22 	bl	800934a <SDIO_GetResponse>
 8007506:	4602      	mov	r2, r0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2108      	movs	r1, #8
 8007512:	4618      	mov	r0, r3
 8007514:	f001 ff19 	bl	800934a <SDIO_GetResponse>
 8007518:	4602      	mov	r2, r0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	210c      	movs	r1, #12
 8007524:	4618      	mov	r0, r3
 8007526:	f001 ff10 	bl	800934a <SDIO_GetResponse>
 800752a:	4602      	mov	r2, r0
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	2b03      	cmp	r3, #3
 8007538:	d00d      	beq.n	8007556 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f107 020e 	add.w	r2, r7, #14
 8007542:	4611      	mov	r1, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f002 f930 	bl	80097aa <SDMMC_CmdSetRelAdd>
 800754a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <SD_InitCard+0xae>
    {
      return errorstate;
 8007552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007554:	e071      	b.n	800763a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755a:	2b03      	cmp	r3, #3
 800755c:	d036      	beq.n	80075cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800755e:	89fb      	ldrh	r3, [r7, #14]
 8007560:	461a      	mov	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	041b      	lsls	r3, r3, #16
 8007570:	4619      	mov	r1, r3
 8007572:	4610      	mov	r0, r2
 8007574:	f002 f8fa 	bl	800976c <SDMMC_CmdSendCSD>
 8007578:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800757a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007582:	e05a      	b.n	800763a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2100      	movs	r1, #0
 800758a:	4618      	mov	r0, r3
 800758c:	f001 fedd 	bl	800934a <SDIO_GetResponse>
 8007590:	4602      	mov	r2, r0
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2104      	movs	r1, #4
 800759c:	4618      	mov	r0, r3
 800759e:	f001 fed4 	bl	800934a <SDIO_GetResponse>
 80075a2:	4602      	mov	r2, r0
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2108      	movs	r1, #8
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 fecb 	bl	800934a <SDIO_GetResponse>
 80075b4:	4602      	mov	r2, r0
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	210c      	movs	r1, #12
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 fec2 	bl	800934a <SDIO_GetResponse>
 80075c6:	4602      	mov	r2, r0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2104      	movs	r1, #4
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 feb9 	bl	800934a <SDIO_GetResponse>
 80075d8:	4603      	mov	r3, r0
 80075da:	0d1a      	lsrs	r2, r3, #20
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80075e0:	f107 0310 	add.w	r3, r7, #16
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fcf2 	bl	8006fd0 <HAL_SD_GetCardCSD>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075f6:	e020      	b.n	800763a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6819      	ldr	r1, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	f04f 0400 	mov.w	r4, #0
 8007606:	461a      	mov	r2, r3
 8007608:	4623      	mov	r3, r4
 800760a:	4608      	mov	r0, r1
 800760c:	f001 ffa8 	bl	8009560 <SDMMC_CmdSelDesel>
 8007610:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <SD_InitCard+0x174>
  {
    return errorstate;
 8007618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761a:	e00e      	b.n	800763a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681d      	ldr	r5, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	466c      	mov	r4, sp
 8007624:	f103 0210 	add.w	r2, r3, #16
 8007628:	ca07      	ldmia	r2, {r0, r1, r2}
 800762a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800762e:	3304      	adds	r3, #4
 8007630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007632:	4628      	mov	r0, r5
 8007634:	f001 fdec 	bl	8009210 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3740      	adds	r7, #64	; 0x40
 800763e:	46bd      	mov	sp, r7
 8007640:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007644 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f001 ffa2 	bl	80095a6 <SDMMC_CmdGoIdleState>
 8007662:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <SD_PowerON+0x2a>
  {
    return errorstate;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	e072      	b.n	8007754 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f001 ffb5 	bl	80095e2 <SDMMC_CmdOperCond>
 8007678:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00d      	beq.n	800769c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f001 ff8b 	bl	80095a6 <SDMMC_CmdGoIdleState>
 8007690:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	e05b      	b.n	8007754 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d137      	bne.n	800771a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2100      	movs	r1, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 ffb5 	bl	8009620 <SDMMC_CmdAppCommand>
 80076b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d02d      	beq.n	800771a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076c2:	e047      	b.n	8007754 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2100      	movs	r1, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 ffa8 	bl	8009620 <SDMMC_CmdAppCommand>
 80076d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <SD_PowerON+0x98>
    {
      return errorstate;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	e03b      	b.n	8007754 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	491e      	ldr	r1, [pc, #120]	; (800775c <SD_PowerON+0x118>)
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 ffbe 	bl	8009664 <SDMMC_CmdAppOperCommand>
 80076e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076f4:	e02e      	b.n	8007754 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fe24 	bl	800934a <SDIO_GetResponse>
 8007702:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	0fdb      	lsrs	r3, r3, #31
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <SD_PowerON+0xcc>
 800770c:	2301      	movs	r3, #1
 800770e:	e000      	b.n	8007712 <SD_PowerON+0xce>
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]

    count++;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	3301      	adds	r3, #1
 8007718:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007720:	4293      	cmp	r3, r2
 8007722:	d802      	bhi.n	800772a <SD_PowerON+0xe6>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0cc      	beq.n	80076c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007730:	4293      	cmp	r3, r2
 8007732:	d902      	bls.n	800773a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007738:	e00c      	b.n	8007754 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	645a      	str	r2, [r3, #68]	; 0x44
 800774a:	e002      	b.n	8007752 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	c1100000 	.word	0xc1100000

08007760 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007774:	e018      	b.n	80077a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777e:	041b      	lsls	r3, r3, #16
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f002 f832 	bl	80097ec <SDMMC_CmdSendStatus>
 8007788:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	e009      	b.n	80077a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2100      	movs	r1, #0
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fdd5 	bl	800934a <SDIO_GetResponse>
 80077a0:	4602      	mov	r2, r0
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 fdbf 	bl	800934a <SDIO_GetResponse>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077d6:	d102      	bne.n	80077de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077dc:	e02f      	b.n	800783e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80077de:	f107 030c 	add.w	r3, r7, #12
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f879 	bl	80078dc <SD_FindSCR>
 80077ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	e023      	b.n	800783e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01c      	beq.n	800783a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007808:	041b      	lsls	r3, r3, #16
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f001 ff07 	bl	8009620 <SDMMC_CmdAppCommand>
 8007812:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	e00f      	b.n	800783e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2102      	movs	r1, #2
 8007824:	4618      	mov	r0, r3
 8007826:	f001 ff40 	bl	80096aa <SDMMC_CmdBusWidth>
 800782a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	e003      	b.n	800783e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007836:	2300      	movs	r3, #0
 8007838:	e001      	b.n	800783e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800783a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	2300      	movs	r3, #0
 8007854:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2100      	movs	r1, #0
 800785c:	4618      	mov	r0, r3
 800785e:	f001 fd74 	bl	800934a <SDIO_GetResponse>
 8007862:	4603      	mov	r3, r0
 8007864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800786c:	d102      	bne.n	8007874 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800786e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007872:	e02f      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007874:	f107 030c 	add.w	r3, r7, #12
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f82e 	bl	80078dc <SD_FindSCR>
 8007880:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	e023      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d01c      	beq.n	80078d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789e:	041b      	lsls	r3, r3, #16
 80078a0:	4619      	mov	r1, r3
 80078a2:	4610      	mov	r0, r2
 80078a4:	f001 febc 	bl	8009620 <SDMMC_CmdAppCommand>
 80078a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	e00f      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f001 fef5 	bl	80096aa <SDMMC_CmdBusWidth>
 80078c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	e003      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e001      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80078dc:	b590      	push	{r4, r7, lr}
 80078de:	b08f      	sub	sp, #60	; 0x3c
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80078e6:	f7fb fd6d 	bl	80033c4 <HAL_GetTick>
 80078ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80078f0:	2300      	movs	r3, #0
 80078f2:	60bb      	str	r3, [r7, #8]
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2108      	movs	r1, #8
 8007902:	4618      	mov	r0, r3
 8007904:	f001 fd60 	bl	80093c8 <SDMMC_CmdBlockLength>
 8007908:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	e0a9      	b.n	8007a68 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791c:	041b      	lsls	r3, r3, #16
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f001 fe7d 	bl	8009620 <SDMMC_CmdAppCommand>
 8007926:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <SD_FindSCR+0x56>
  {
    return errorstate;
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	e09a      	b.n	8007a68 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007936:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007938:	2308      	movs	r3, #8
 800793a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800793c:	2330      	movs	r3, #48	; 0x30
 800793e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007940:	2302      	movs	r3, #2
 8007942:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007944:	2300      	movs	r3, #0
 8007946:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007948:	2301      	movs	r3, #1
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f107 0210 	add.w	r2, r7, #16
 8007954:	4611      	mov	r1, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fd0a 	bl	8009370 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f001 fec4 	bl	80096ee <SDMMC_CmdSendSCR>
 8007966:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	2b00      	cmp	r3, #0
 800796c:	d022      	beq.n	80079b4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	e07a      	b.n	8007a68 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00e      	beq.n	800799e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6819      	ldr	r1, [r3, #0]
 8007984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	f107 0208 	add.w	r2, r7, #8
 800798c:	18d4      	adds	r4, r2, r3
 800798e:	4608      	mov	r0, r1
 8007990:	f001 fc69 	bl	8009266 <SDIO_ReadFIFO>
 8007994:	4603      	mov	r3, r0
 8007996:	6023      	str	r3, [r4, #0]
      index++;
 8007998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799a:	3301      	adds	r3, #1
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800799e:	f7fb fd11 	bl	80033c4 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ac:	d102      	bne.n	80079b4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80079ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079b2:	e059      	b.n	8007a68 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ba:	f240 432a 	movw	r3, #1066	; 0x42a
 80079be:	4013      	ands	r3, r2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0d6      	beq.n	8007972 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d005      	beq.n	80079de <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2208      	movs	r2, #8
 80079d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80079da:	2308      	movs	r3, #8
 80079dc:	e044      	b.n	8007a68 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2202      	movs	r2, #2
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80079f4:	2302      	movs	r3, #2
 80079f6:	e037      	b.n	8007a68 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007a0e:	2320      	movs	r3, #32
 8007a10:	e02a      	b.n	8007a68 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a1a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	061a      	lsls	r2, r3, #24
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a28:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	0a1b      	lsrs	r3, r3, #8
 8007a2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007a32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	0e1b      	lsrs	r3, r3, #24
 8007a38:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	601a      	str	r2, [r3, #0]
    scr++;
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	3304      	adds	r3, #4
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	061a      	lsls	r2, r3, #24
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	021b      	lsls	r3, r3, #8
 8007a4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a50:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	0a1b      	lsrs	r3, r3, #8
 8007a56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007a5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	0e1b      	lsrs	r3, r3, #24
 8007a60:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	373c      	adds	r7, #60	; 0x3c
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd90      	pop	{r4, r7, pc}

08007a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e056      	b.n	8007b30 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fb f8e5 	bl	8002c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ab8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	ea42 0103 	orr.w	r1, r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	0c1b      	lsrs	r3, r3, #16
 8007b00:	f003 0104 	and.w	r1, r3, #4
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69da      	ldr	r2, [r3, #28]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e01d      	b.n	8007b86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fb f8cc 	bl	8002cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f000 fbac 	bl	80082d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f042 0201 	orr.w	r2, r2, #1
 8007ba4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b06      	cmp	r3, #6
 8007bb6:	d007      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0201 	orr.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e01d      	b.n	8007c24 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f815 	bl	8007c2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4619      	mov	r1, r3
 8007c14:	4610      	mov	r0, r2
 8007c16:	f000 fb5d 	bl	80082d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e083      	b.n	8007d5c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d106      	bne.n	8007c6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7fb f8f1 	bl	8002e50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2202      	movs	r2, #2
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6812      	ldr	r2, [r2, #0]
 8007c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c84:	f023 0307 	bic.w	r3, r3, #7
 8007c88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	3304      	adds	r3, #4
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f000 fb1d 	bl	80082d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007ce0:	f023 030c 	bic.w	r3, r3, #12
 8007ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	011a      	lsls	r2, r3, #4
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	031b      	lsls	r3, r3, #12
 8007d10:	4313      	orrs	r3, r2
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007d26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	4313      	orrs	r3, r2
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d122      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d11b      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0202 	mvn.w	r2, #2
 8007d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa75 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007dac:	e005      	b.n	8007dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa67 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa78 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f003 0304 	and.w	r3, r3, #4
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d122      	bne.n	8007e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d11b      	bne.n	8007e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0204 	mvn.w	r2, #4
 8007de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2202      	movs	r2, #2
 8007dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa4b 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007e00:	e005      	b.n	8007e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa3d 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fa4e 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b08      	cmp	r3, #8
 8007e20:	d122      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d11b      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0208 	mvn.w	r2, #8
 8007e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa21 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007e54:	e005      	b.n	8007e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa13 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fa24 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0310 	and.w	r3, r3, #16
 8007e72:	2b10      	cmp	r3, #16
 8007e74:	d122      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d11b      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0210 	mvn.w	r2, #16
 8007e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2208      	movs	r2, #8
 8007e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f9f7 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007ea8:	e005      	b.n	8007eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f9e9 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f9fa 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d10e      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d107      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0201 	mvn.w	r2, #1
 8007ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f9c3 	bl	800826e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef2:	2b80      	cmp	r3, #128	; 0x80
 8007ef4:	d10e      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f00:	2b80      	cmp	r3, #128	; 0x80
 8007f02:	d107      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fda2 	bl	8008a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1e:	2b40      	cmp	r3, #64	; 0x40
 8007f20:	d10e      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	d107      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f9bf 	bl	80082be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d10e      	bne.n	8007f6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d107      	bne.n	8007f6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0220 	mvn.w	r2, #32
 8007f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fd6c 	bl	8008a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e0b4      	b.n	80080f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b0c      	cmp	r3, #12
 8007fa2:	f200 809f 	bhi.w	80080e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007fa6:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	08007fe1 	.word	0x08007fe1
 8007fb0:	080080e5 	.word	0x080080e5
 8007fb4:	080080e5 	.word	0x080080e5
 8007fb8:	080080e5 	.word	0x080080e5
 8007fbc:	08008021 	.word	0x08008021
 8007fc0:	080080e5 	.word	0x080080e5
 8007fc4:	080080e5 	.word	0x080080e5
 8007fc8:	080080e5 	.word	0x080080e5
 8007fcc:	08008063 	.word	0x08008063
 8007fd0:	080080e5 	.word	0x080080e5
 8007fd4:	080080e5 	.word	0x080080e5
 8007fd8:	080080e5 	.word	0x080080e5
 8007fdc:	080080a3 	.word	0x080080a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fa14 	bl	8008414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	699a      	ldr	r2, [r3, #24]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0208 	orr.w	r2, r2, #8
 8007ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699a      	ldr	r2, [r3, #24]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0204 	bic.w	r2, r2, #4
 800800a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6999      	ldr	r1, [r3, #24]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	619a      	str	r2, [r3, #24]
      break;
 800801e:	e062      	b.n	80080e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fa64 	bl	80084f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800803a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699a      	ldr	r2, [r3, #24]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800804a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6999      	ldr	r1, [r3, #24]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	021a      	lsls	r2, r3, #8
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	619a      	str	r2, [r3, #24]
      break;
 8008060:	e041      	b.n	80080e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68b9      	ldr	r1, [r7, #8]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 fab9 	bl	80085e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69da      	ldr	r2, [r3, #28]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0208 	orr.w	r2, r2, #8
 800807c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69da      	ldr	r2, [r3, #28]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0204 	bic.w	r2, r2, #4
 800808c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69d9      	ldr	r1, [r3, #28]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	61da      	str	r2, [r3, #28]
      break;
 80080a0:	e021      	b.n	80080e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fb0d 	bl	80086c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	69da      	ldr	r2, [r3, #28]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69da      	ldr	r2, [r3, #28]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69d9      	ldr	r1, [r3, #28]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	021a      	lsls	r2, r3, #8
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	61da      	str	r2, [r3, #28]
      break;
 80080e2:	e000      	b.n	80080e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80080e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_TIM_ConfigClockSource+0x18>
 8008114:	2302      	movs	r3, #2
 8008116:	e0a6      	b.n	8008266 <HAL_TIM_ConfigClockSource+0x166>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008136:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800813e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d067      	beq.n	8008220 <HAL_TIM_ConfigClockSource+0x120>
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	d80b      	bhi.n	800816c <HAL_TIM_ConfigClockSource+0x6c>
 8008154:	2b10      	cmp	r3, #16
 8008156:	d073      	beq.n	8008240 <HAL_TIM_ConfigClockSource+0x140>
 8008158:	2b10      	cmp	r3, #16
 800815a:	d802      	bhi.n	8008162 <HAL_TIM_ConfigClockSource+0x62>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d06f      	beq.n	8008240 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008160:	e078      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008162:	2b20      	cmp	r3, #32
 8008164:	d06c      	beq.n	8008240 <HAL_TIM_ConfigClockSource+0x140>
 8008166:	2b30      	cmp	r3, #48	; 0x30
 8008168:	d06a      	beq.n	8008240 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800816a:	e073      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800816c:	2b70      	cmp	r3, #112	; 0x70
 800816e:	d00d      	beq.n	800818c <HAL_TIM_ConfigClockSource+0x8c>
 8008170:	2b70      	cmp	r3, #112	; 0x70
 8008172:	d804      	bhi.n	800817e <HAL_TIM_ConfigClockSource+0x7e>
 8008174:	2b50      	cmp	r3, #80	; 0x50
 8008176:	d033      	beq.n	80081e0 <HAL_TIM_ConfigClockSource+0xe0>
 8008178:	2b60      	cmp	r3, #96	; 0x60
 800817a:	d041      	beq.n	8008200 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800817c:	e06a      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800817e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008182:	d066      	beq.n	8008252 <HAL_TIM_ConfigClockSource+0x152>
 8008184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008188:	d017      	beq.n	80081ba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800818a:	e063      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6818      	ldr	r0, [r3, #0]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	6899      	ldr	r1, [r3, #8]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f000 fb64 	bl	8008868 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	609a      	str	r2, [r3, #8]
      break;
 80081b8:	e04c      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6899      	ldr	r1, [r3, #8]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f000 fb4d 	bl	8008868 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081dc:	609a      	str	r2, [r3, #8]
      break;
 80081de:	e039      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	6859      	ldr	r1, [r3, #4]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	461a      	mov	r2, r3
 80081ee:	f000 fac1 	bl	8008774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2150      	movs	r1, #80	; 0x50
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fb1a 	bl	8008832 <TIM_ITRx_SetConfig>
      break;
 80081fe:	e029      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6859      	ldr	r1, [r3, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	461a      	mov	r2, r3
 800820e:	f000 fae0 	bl	80087d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2160      	movs	r1, #96	; 0x60
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fb0a 	bl	8008832 <TIM_ITRx_SetConfig>
      break;
 800821e:	e019      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6818      	ldr	r0, [r3, #0]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	6859      	ldr	r1, [r3, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	461a      	mov	r2, r3
 800822e:	f000 faa1 	bl	8008774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2140      	movs	r1, #64	; 0x40
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fafa 	bl	8008832 <TIM_ITRx_SetConfig>
      break;
 800823e:	e009      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4619      	mov	r1, r3
 800824a:	4610      	mov	r0, r2
 800824c:	f000 faf1 	bl	8008832 <TIM_ITRx_SetConfig>
      break;
 8008250:	e000      	b.n	8008254 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800829e:	bf00      	nop
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a40      	ldr	r2, [pc, #256]	; (80083e8 <TIM_Base_SetConfig+0x114>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d013      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f2:	d00f      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a3d      	ldr	r2, [pc, #244]	; (80083ec <TIM_Base_SetConfig+0x118>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00b      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a3c      	ldr	r2, [pc, #240]	; (80083f0 <TIM_Base_SetConfig+0x11c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d007      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a3b      	ldr	r2, [pc, #236]	; (80083f4 <TIM_Base_SetConfig+0x120>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a3a      	ldr	r2, [pc, #232]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d108      	bne.n	8008326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a2f      	ldr	r2, [pc, #188]	; (80083e8 <TIM_Base_SetConfig+0x114>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d02b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008334:	d027      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a2c      	ldr	r2, [pc, #176]	; (80083ec <TIM_Base_SetConfig+0x118>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d023      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <TIM_Base_SetConfig+0x11c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01f      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a2a      	ldr	r2, [pc, #168]	; (80083f4 <TIM_Base_SetConfig+0x120>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d01b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a29      	ldr	r2, [pc, #164]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d017      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a28      	ldr	r2, [pc, #160]	; (80083fc <TIM_Base_SetConfig+0x128>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d013      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a27      	ldr	r2, [pc, #156]	; (8008400 <TIM_Base_SetConfig+0x12c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00f      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a26      	ldr	r2, [pc, #152]	; (8008404 <TIM_Base_SetConfig+0x130>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a25      	ldr	r2, [pc, #148]	; (8008408 <TIM_Base_SetConfig+0x134>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d007      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a24      	ldr	r2, [pc, #144]	; (800840c <TIM_Base_SetConfig+0x138>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d003      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a23      	ldr	r2, [pc, #140]	; (8008410 <TIM_Base_SetConfig+0x13c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d108      	bne.n	8008398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800838c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a0a      	ldr	r2, [pc, #40]	; (80083e8 <TIM_Base_SetConfig+0x114>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_Base_SetConfig+0xf8>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a0c      	ldr	r2, [pc, #48]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d103      	bne.n	80083d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	615a      	str	r2, [r3, #20]
}
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40010400 	.word	0x40010400
 80083fc:	40014000 	.word	0x40014000
 8008400:	40014400 	.word	0x40014400
 8008404:	40014800 	.word	0x40014800
 8008408:	40001800 	.word	0x40001800
 800840c:	40001c00 	.word	0x40001c00
 8008410:	40002000 	.word	0x40002000

08008414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f023 0201 	bic.w	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f023 0302 	bic.w	r3, r3, #2
 800845c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a20      	ldr	r2, [pc, #128]	; (80084ec <TIM_OC1_SetConfig+0xd8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_OC1_SetConfig+0x64>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <TIM_OC1_SetConfig+0xdc>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d10c      	bne.n	8008492 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f023 0308 	bic.w	r3, r3, #8
 800847e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f023 0304 	bic.w	r3, r3, #4
 8008490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a15      	ldr	r2, [pc, #84]	; (80084ec <TIM_OC1_SetConfig+0xd8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d003      	beq.n	80084a2 <TIM_OC1_SetConfig+0x8e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a14      	ldr	r2, [pc, #80]	; (80084f0 <TIM_OC1_SetConfig+0xdc>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d111      	bne.n	80084c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	621a      	str	r2, [r3, #32]
}
 80084e0:	bf00      	nop
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	40010000 	.word	0x40010000
 80084f0:	40010400 	.word	0x40010400

080084f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f023 0210 	bic.w	r2, r3, #16
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800852a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f023 0320 	bic.w	r3, r3, #32
 800853e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a22      	ldr	r2, [pc, #136]	; (80085d8 <TIM_OC2_SetConfig+0xe4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d003      	beq.n	800855c <TIM_OC2_SetConfig+0x68>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a21      	ldr	r2, [pc, #132]	; (80085dc <TIM_OC2_SetConfig+0xe8>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d10d      	bne.n	8008578 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a17      	ldr	r2, [pc, #92]	; (80085d8 <TIM_OC2_SetConfig+0xe4>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_OC2_SetConfig+0x94>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a16      	ldr	r2, [pc, #88]	; (80085dc <TIM_OC2_SetConfig+0xe8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d113      	bne.n	80085b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800858e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	621a      	str	r2, [r3, #32]
}
 80085ca:	bf00      	nop
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40010000 	.word	0x40010000
 80085dc:	40010400 	.word	0x40010400

080085e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 0303 	bic.w	r3, r3, #3
 8008616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a21      	ldr	r2, [pc, #132]	; (80086c0 <TIM_OC3_SetConfig+0xe0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d003      	beq.n	8008646 <TIM_OC3_SetConfig+0x66>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a20      	ldr	r2, [pc, #128]	; (80086c4 <TIM_OC3_SetConfig+0xe4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d10d      	bne.n	8008662 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800864c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a16      	ldr	r2, [pc, #88]	; (80086c0 <TIM_OC3_SetConfig+0xe0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d003      	beq.n	8008672 <TIM_OC3_SetConfig+0x92>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a15      	ldr	r2, [pc, #84]	; (80086c4 <TIM_OC3_SetConfig+0xe4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d113      	bne.n	800869a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	621a      	str	r2, [r3, #32]
}
 80086b4:	bf00      	nop
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40010400 	.word	0x40010400

080086c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	031b      	lsls	r3, r3, #12
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a12      	ldr	r2, [pc, #72]	; (800876c <TIM_OC4_SetConfig+0xa4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_OC4_SetConfig+0x68>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a11      	ldr	r2, [pc, #68]	; (8008770 <TIM_OC4_SetConfig+0xa8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d109      	bne.n	8008744 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	019b      	lsls	r3, r3, #6
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4313      	orrs	r3, r2
 8008742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	621a      	str	r2, [r3, #32]
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40010000 	.word	0x40010000
 8008770:	40010400 	.word	0x40010400

08008774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f023 0201 	bic.w	r2, r3, #1
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800879e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f023 030a 	bic.w	r3, r3, #10
 80087b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	621a      	str	r2, [r3, #32]
}
 80087c6:	bf00      	nop
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b087      	sub	sp, #28
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	f023 0210 	bic.w	r2, r3, #16
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	031b      	lsls	r3, r3, #12
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	4313      	orrs	r3, r2
 8008806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800880e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	621a      	str	r2, [r3, #32]
}
 8008826:	bf00      	nop
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4313      	orrs	r3, r2
 8008850:	f043 0307 	orr.w	r3, r3, #7
 8008854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	609a      	str	r2, [r3, #8]
}
 800885c:	bf00      	nop
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	021a      	lsls	r2, r3, #8
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	431a      	orrs	r2, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4313      	orrs	r3, r2
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	4313      	orrs	r3, r2
 8008894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	609a      	str	r2, [r3, #8]
}
 800889c:	bf00      	nop
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088bc:	2302      	movs	r3, #2
 80088be:	e05a      	b.n	8008976 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a21      	ldr	r2, [pc, #132]	; (8008984 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d022      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800890c:	d01d      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1d      	ldr	r2, [pc, #116]	; (8008988 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d018      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a1b      	ldr	r2, [pc, #108]	; (800898c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d013      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a1a      	ldr	r2, [pc, #104]	; (8008990 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00e      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a18      	ldr	r2, [pc, #96]	; (8008994 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d009      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a17      	ldr	r2, [pc, #92]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d004      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a15      	ldr	r2, [pc, #84]	; (800899c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d10c      	bne.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	4313      	orrs	r3, r2
 800895a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	40010000 	.word	0x40010000
 8008988:	40000400 	.word	0x40000400
 800898c:	40000800 	.word	0x40000800
 8008990:	40000c00 	.word	0x40000c00
 8008994:	40010400 	.word	0x40010400
 8008998:	40014000 	.word	0x40014000
 800899c:	40001800 	.word	0x40001800

080089a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e03d      	b.n	8008a38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e047      	b.n	8008b0e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7fa fb2a 	bl	80030ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2224      	movs	r2, #36	; 0x24
 8008a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f831 	bl	8008b18 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	695a      	ldr	r2, [r3, #20]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008ad4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	695a      	ldr	r2, [r3, #20]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0208 	orr.w	r2, r2, #8
 8008ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
	...

08008b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008b5a:	f023 030c 	bic.w	r3, r3, #12
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6812      	ldr	r2, [r2, #0]
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	430b      	orrs	r3, r1
 8008b66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b86:	f040 818b 	bne.w	8008ea0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4ac1      	ldr	r2, [pc, #772]	; (8008e94 <UART_SetConfig+0x37c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d005      	beq.n	8008ba0 <UART_SetConfig+0x88>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4abf      	ldr	r2, [pc, #764]	; (8008e98 <UART_SetConfig+0x380>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	f040 80bd 	bne.w	8008d1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ba0:	f7fc feb6 	bl	8005910 <HAL_RCC_GetPCLK2Freq>
 8008ba4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	461d      	mov	r5, r3
 8008baa:	f04f 0600 	mov.w	r6, #0
 8008bae:	46a8      	mov	r8, r5
 8008bb0:	46b1      	mov	r9, r6
 8008bb2:	eb18 0308 	adds.w	r3, r8, r8
 8008bb6:	eb49 0409 	adc.w	r4, r9, r9
 8008bba:	4698      	mov	r8, r3
 8008bbc:	46a1      	mov	r9, r4
 8008bbe:	eb18 0805 	adds.w	r8, r8, r5
 8008bc2:	eb49 0906 	adc.w	r9, r9, r6
 8008bc6:	f04f 0100 	mov.w	r1, #0
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008bd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008bd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008bda:	4688      	mov	r8, r1
 8008bdc:	4691      	mov	r9, r2
 8008bde:	eb18 0005 	adds.w	r0, r8, r5
 8008be2:	eb49 0106 	adc.w	r1, r9, r6
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	461d      	mov	r5, r3
 8008bec:	f04f 0600 	mov.w	r6, #0
 8008bf0:	196b      	adds	r3, r5, r5
 8008bf2:	eb46 0406 	adc.w	r4, r6, r6
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	4623      	mov	r3, r4
 8008bfa:	f7f7 ff5f 	bl	8000abc <__aeabi_uldivmod>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	460c      	mov	r4, r1
 8008c02:	461a      	mov	r2, r3
 8008c04:	4ba5      	ldr	r3, [pc, #660]	; (8008e9c <UART_SetConfig+0x384>)
 8008c06:	fba3 2302 	umull	r2, r3, r3, r2
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	461d      	mov	r5, r3
 8008c14:	f04f 0600 	mov.w	r6, #0
 8008c18:	46a9      	mov	r9, r5
 8008c1a:	46b2      	mov	sl, r6
 8008c1c:	eb19 0309 	adds.w	r3, r9, r9
 8008c20:	eb4a 040a 	adc.w	r4, sl, sl
 8008c24:	4699      	mov	r9, r3
 8008c26:	46a2      	mov	sl, r4
 8008c28:	eb19 0905 	adds.w	r9, r9, r5
 8008c2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c30:	f04f 0100 	mov.w	r1, #0
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c44:	4689      	mov	r9, r1
 8008c46:	4692      	mov	sl, r2
 8008c48:	eb19 0005 	adds.w	r0, r9, r5
 8008c4c:	eb4a 0106 	adc.w	r1, sl, r6
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	461d      	mov	r5, r3
 8008c56:	f04f 0600 	mov.w	r6, #0
 8008c5a:	196b      	adds	r3, r5, r5
 8008c5c:	eb46 0406 	adc.w	r4, r6, r6
 8008c60:	461a      	mov	r2, r3
 8008c62:	4623      	mov	r3, r4
 8008c64:	f7f7 ff2a 	bl	8000abc <__aeabi_uldivmod>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4b8b      	ldr	r3, [pc, #556]	; (8008e9c <UART_SetConfig+0x384>)
 8008c70:	fba3 1302 	umull	r1, r3, r3, r2
 8008c74:	095b      	lsrs	r3, r3, #5
 8008c76:	2164      	movs	r1, #100	; 0x64
 8008c78:	fb01 f303 	mul.w	r3, r1, r3
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	3332      	adds	r3, #50	; 0x32
 8008c82:	4a86      	ldr	r2, [pc, #536]	; (8008e9c <UART_SetConfig+0x384>)
 8008c84:	fba2 2303 	umull	r2, r3, r2, r3
 8008c88:	095b      	lsrs	r3, r3, #5
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c90:	4498      	add	r8, r3
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	461d      	mov	r5, r3
 8008c96:	f04f 0600 	mov.w	r6, #0
 8008c9a:	46a9      	mov	r9, r5
 8008c9c:	46b2      	mov	sl, r6
 8008c9e:	eb19 0309 	adds.w	r3, r9, r9
 8008ca2:	eb4a 040a 	adc.w	r4, sl, sl
 8008ca6:	4699      	mov	r9, r3
 8008ca8:	46a2      	mov	sl, r4
 8008caa:	eb19 0905 	adds.w	r9, r9, r5
 8008cae:	eb4a 0a06 	adc.w	sl, sl, r6
 8008cb2:	f04f 0100 	mov.w	r1, #0
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008cc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008cc6:	4689      	mov	r9, r1
 8008cc8:	4692      	mov	sl, r2
 8008cca:	eb19 0005 	adds.w	r0, r9, r5
 8008cce:	eb4a 0106 	adc.w	r1, sl, r6
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	461d      	mov	r5, r3
 8008cd8:	f04f 0600 	mov.w	r6, #0
 8008cdc:	196b      	adds	r3, r5, r5
 8008cde:	eb46 0406 	adc.w	r4, r6, r6
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	f7f7 fee9 	bl	8000abc <__aeabi_uldivmod>
 8008cea:	4603      	mov	r3, r0
 8008cec:	460c      	mov	r4, r1
 8008cee:	461a      	mov	r2, r3
 8008cf0:	4b6a      	ldr	r3, [pc, #424]	; (8008e9c <UART_SetConfig+0x384>)
 8008cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	2164      	movs	r1, #100	; 0x64
 8008cfa:	fb01 f303 	mul.w	r3, r1, r3
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	3332      	adds	r3, #50	; 0x32
 8008d04:	4a65      	ldr	r2, [pc, #404]	; (8008e9c <UART_SetConfig+0x384>)
 8008d06:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0a:	095b      	lsrs	r3, r3, #5
 8008d0c:	f003 0207 	and.w	r2, r3, #7
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4442      	add	r2, r8
 8008d16:	609a      	str	r2, [r3, #8]
 8008d18:	e26f      	b.n	80091fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d1a:	f7fc fde5 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8008d1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	461d      	mov	r5, r3
 8008d24:	f04f 0600 	mov.w	r6, #0
 8008d28:	46a8      	mov	r8, r5
 8008d2a:	46b1      	mov	r9, r6
 8008d2c:	eb18 0308 	adds.w	r3, r8, r8
 8008d30:	eb49 0409 	adc.w	r4, r9, r9
 8008d34:	4698      	mov	r8, r3
 8008d36:	46a1      	mov	r9, r4
 8008d38:	eb18 0805 	adds.w	r8, r8, r5
 8008d3c:	eb49 0906 	adc.w	r9, r9, r6
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d54:	4688      	mov	r8, r1
 8008d56:	4691      	mov	r9, r2
 8008d58:	eb18 0005 	adds.w	r0, r8, r5
 8008d5c:	eb49 0106 	adc.w	r1, r9, r6
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	461d      	mov	r5, r3
 8008d66:	f04f 0600 	mov.w	r6, #0
 8008d6a:	196b      	adds	r3, r5, r5
 8008d6c:	eb46 0406 	adc.w	r4, r6, r6
 8008d70:	461a      	mov	r2, r3
 8008d72:	4623      	mov	r3, r4
 8008d74:	f7f7 fea2 	bl	8000abc <__aeabi_uldivmod>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4b47      	ldr	r3, [pc, #284]	; (8008e9c <UART_SetConfig+0x384>)
 8008d80:	fba3 2302 	umull	r2, r3, r3, r2
 8008d84:	095b      	lsrs	r3, r3, #5
 8008d86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	461d      	mov	r5, r3
 8008d8e:	f04f 0600 	mov.w	r6, #0
 8008d92:	46a9      	mov	r9, r5
 8008d94:	46b2      	mov	sl, r6
 8008d96:	eb19 0309 	adds.w	r3, r9, r9
 8008d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8008d9e:	4699      	mov	r9, r3
 8008da0:	46a2      	mov	sl, r4
 8008da2:	eb19 0905 	adds.w	r9, r9, r5
 8008da6:	eb4a 0a06 	adc.w	sl, sl, r6
 8008daa:	f04f 0100 	mov.w	r1, #0
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dbe:	4689      	mov	r9, r1
 8008dc0:	4692      	mov	sl, r2
 8008dc2:	eb19 0005 	adds.w	r0, r9, r5
 8008dc6:	eb4a 0106 	adc.w	r1, sl, r6
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	461d      	mov	r5, r3
 8008dd0:	f04f 0600 	mov.w	r6, #0
 8008dd4:	196b      	adds	r3, r5, r5
 8008dd6:	eb46 0406 	adc.w	r4, r6, r6
 8008dda:	461a      	mov	r2, r3
 8008ddc:	4623      	mov	r3, r4
 8008dde:	f7f7 fe6d 	bl	8000abc <__aeabi_uldivmod>
 8008de2:	4603      	mov	r3, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	461a      	mov	r2, r3
 8008de8:	4b2c      	ldr	r3, [pc, #176]	; (8008e9c <UART_SetConfig+0x384>)
 8008dea:	fba3 1302 	umull	r1, r3, r3, r2
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	2164      	movs	r1, #100	; 0x64
 8008df2:	fb01 f303 	mul.w	r3, r1, r3
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	3332      	adds	r3, #50	; 0x32
 8008dfc:	4a27      	ldr	r2, [pc, #156]	; (8008e9c <UART_SetConfig+0x384>)
 8008dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e0a:	4498      	add	r8, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	461d      	mov	r5, r3
 8008e10:	f04f 0600 	mov.w	r6, #0
 8008e14:	46a9      	mov	r9, r5
 8008e16:	46b2      	mov	sl, r6
 8008e18:	eb19 0309 	adds.w	r3, r9, r9
 8008e1c:	eb4a 040a 	adc.w	r4, sl, sl
 8008e20:	4699      	mov	r9, r3
 8008e22:	46a2      	mov	sl, r4
 8008e24:	eb19 0905 	adds.w	r9, r9, r5
 8008e28:	eb4a 0a06 	adc.w	sl, sl, r6
 8008e2c:	f04f 0100 	mov.w	r1, #0
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e40:	4689      	mov	r9, r1
 8008e42:	4692      	mov	sl, r2
 8008e44:	eb19 0005 	adds.w	r0, r9, r5
 8008e48:	eb4a 0106 	adc.w	r1, sl, r6
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	461d      	mov	r5, r3
 8008e52:	f04f 0600 	mov.w	r6, #0
 8008e56:	196b      	adds	r3, r5, r5
 8008e58:	eb46 0406 	adc.w	r4, r6, r6
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4623      	mov	r3, r4
 8008e60:	f7f7 fe2c 	bl	8000abc <__aeabi_uldivmod>
 8008e64:	4603      	mov	r3, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <UART_SetConfig+0x384>)
 8008e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e70:	095b      	lsrs	r3, r3, #5
 8008e72:	2164      	movs	r1, #100	; 0x64
 8008e74:	fb01 f303 	mul.w	r3, r1, r3
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	3332      	adds	r3, #50	; 0x32
 8008e7e:	4a07      	ldr	r2, [pc, #28]	; (8008e9c <UART_SetConfig+0x384>)
 8008e80:	fba2 2303 	umull	r2, r3, r2, r3
 8008e84:	095b      	lsrs	r3, r3, #5
 8008e86:	f003 0207 	and.w	r2, r3, #7
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4442      	add	r2, r8
 8008e90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008e92:	e1b2      	b.n	80091fa <UART_SetConfig+0x6e2>
 8008e94:	40011000 	.word	0x40011000
 8008e98:	40011400 	.word	0x40011400
 8008e9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4ad7      	ldr	r2, [pc, #860]	; (8009204 <UART_SetConfig+0x6ec>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d005      	beq.n	8008eb6 <UART_SetConfig+0x39e>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4ad6      	ldr	r2, [pc, #856]	; (8009208 <UART_SetConfig+0x6f0>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	f040 80d1 	bne.w	8009058 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008eb6:	f7fc fd2b 	bl	8005910 <HAL_RCC_GetPCLK2Freq>
 8008eba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	469a      	mov	sl, r3
 8008ec0:	f04f 0b00 	mov.w	fp, #0
 8008ec4:	46d0      	mov	r8, sl
 8008ec6:	46d9      	mov	r9, fp
 8008ec8:	eb18 0308 	adds.w	r3, r8, r8
 8008ecc:	eb49 0409 	adc.w	r4, r9, r9
 8008ed0:	4698      	mov	r8, r3
 8008ed2:	46a1      	mov	r9, r4
 8008ed4:	eb18 080a 	adds.w	r8, r8, sl
 8008ed8:	eb49 090b 	adc.w	r9, r9, fp
 8008edc:	f04f 0100 	mov.w	r1, #0
 8008ee0:	f04f 0200 	mov.w	r2, #0
 8008ee4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ee8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008eec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ef0:	4688      	mov	r8, r1
 8008ef2:	4691      	mov	r9, r2
 8008ef4:	eb1a 0508 	adds.w	r5, sl, r8
 8008ef8:	eb4b 0609 	adc.w	r6, fp, r9
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	4619      	mov	r1, r3
 8008f02:	f04f 0200 	mov.w	r2, #0
 8008f06:	f04f 0300 	mov.w	r3, #0
 8008f0a:	f04f 0400 	mov.w	r4, #0
 8008f0e:	0094      	lsls	r4, r2, #2
 8008f10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f14:	008b      	lsls	r3, r1, #2
 8008f16:	461a      	mov	r2, r3
 8008f18:	4623      	mov	r3, r4
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	f7f7 fdcd 	bl	8000abc <__aeabi_uldivmod>
 8008f22:	4603      	mov	r3, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	461a      	mov	r2, r3
 8008f28:	4bb8      	ldr	r3, [pc, #736]	; (800920c <UART_SetConfig+0x6f4>)
 8008f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f2e:	095b      	lsrs	r3, r3, #5
 8008f30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	469b      	mov	fp, r3
 8008f38:	f04f 0c00 	mov.w	ip, #0
 8008f3c:	46d9      	mov	r9, fp
 8008f3e:	46e2      	mov	sl, ip
 8008f40:	eb19 0309 	adds.w	r3, r9, r9
 8008f44:	eb4a 040a 	adc.w	r4, sl, sl
 8008f48:	4699      	mov	r9, r3
 8008f4a:	46a2      	mov	sl, r4
 8008f4c:	eb19 090b 	adds.w	r9, r9, fp
 8008f50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f54:	f04f 0100 	mov.w	r1, #0
 8008f58:	f04f 0200 	mov.w	r2, #0
 8008f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f68:	4689      	mov	r9, r1
 8008f6a:	4692      	mov	sl, r2
 8008f6c:	eb1b 0509 	adds.w	r5, fp, r9
 8008f70:	eb4c 060a 	adc.w	r6, ip, sl
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f04f 0200 	mov.w	r2, #0
 8008f7e:	f04f 0300 	mov.w	r3, #0
 8008f82:	f04f 0400 	mov.w	r4, #0
 8008f86:	0094      	lsls	r4, r2, #2
 8008f88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f8c:	008b      	lsls	r3, r1, #2
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4623      	mov	r3, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	4631      	mov	r1, r6
 8008f96:	f7f7 fd91 	bl	8000abc <__aeabi_uldivmod>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	4b9a      	ldr	r3, [pc, #616]	; (800920c <UART_SetConfig+0x6f4>)
 8008fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8008fa6:	095b      	lsrs	r3, r3, #5
 8008fa8:	2164      	movs	r1, #100	; 0x64
 8008faa:	fb01 f303 	mul.w	r3, r1, r3
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	3332      	adds	r3, #50	; 0x32
 8008fb4:	4a95      	ldr	r2, [pc, #596]	; (800920c <UART_SetConfig+0x6f4>)
 8008fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fba:	095b      	lsrs	r3, r3, #5
 8008fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fc0:	4498      	add	r8, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	469b      	mov	fp, r3
 8008fc6:	f04f 0c00 	mov.w	ip, #0
 8008fca:	46d9      	mov	r9, fp
 8008fcc:	46e2      	mov	sl, ip
 8008fce:	eb19 0309 	adds.w	r3, r9, r9
 8008fd2:	eb4a 040a 	adc.w	r4, sl, sl
 8008fd6:	4699      	mov	r9, r3
 8008fd8:	46a2      	mov	sl, r4
 8008fda:	eb19 090b 	adds.w	r9, r9, fp
 8008fde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008fe2:	f04f 0100 	mov.w	r1, #0
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ff2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ff6:	4689      	mov	r9, r1
 8008ff8:	4692      	mov	sl, r2
 8008ffa:	eb1b 0509 	adds.w	r5, fp, r9
 8008ffe:	eb4c 060a 	adc.w	r6, ip, sl
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	4619      	mov	r1, r3
 8009008:	f04f 0200 	mov.w	r2, #0
 800900c:	f04f 0300 	mov.w	r3, #0
 8009010:	f04f 0400 	mov.w	r4, #0
 8009014:	0094      	lsls	r4, r2, #2
 8009016:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800901a:	008b      	lsls	r3, r1, #2
 800901c:	461a      	mov	r2, r3
 800901e:	4623      	mov	r3, r4
 8009020:	4628      	mov	r0, r5
 8009022:	4631      	mov	r1, r6
 8009024:	f7f7 fd4a 	bl	8000abc <__aeabi_uldivmod>
 8009028:	4603      	mov	r3, r0
 800902a:	460c      	mov	r4, r1
 800902c:	461a      	mov	r2, r3
 800902e:	4b77      	ldr	r3, [pc, #476]	; (800920c <UART_SetConfig+0x6f4>)
 8009030:	fba3 1302 	umull	r1, r3, r3, r2
 8009034:	095b      	lsrs	r3, r3, #5
 8009036:	2164      	movs	r1, #100	; 0x64
 8009038:	fb01 f303 	mul.w	r3, r1, r3
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	3332      	adds	r3, #50	; 0x32
 8009042:	4a72      	ldr	r2, [pc, #456]	; (800920c <UART_SetConfig+0x6f4>)
 8009044:	fba2 2303 	umull	r2, r3, r2, r3
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	f003 020f 	and.w	r2, r3, #15
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4442      	add	r2, r8
 8009054:	609a      	str	r2, [r3, #8]
 8009056:	e0d0      	b.n	80091fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009058:	f7fc fc46 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 800905c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	469a      	mov	sl, r3
 8009062:	f04f 0b00 	mov.w	fp, #0
 8009066:	46d0      	mov	r8, sl
 8009068:	46d9      	mov	r9, fp
 800906a:	eb18 0308 	adds.w	r3, r8, r8
 800906e:	eb49 0409 	adc.w	r4, r9, r9
 8009072:	4698      	mov	r8, r3
 8009074:	46a1      	mov	r9, r4
 8009076:	eb18 080a 	adds.w	r8, r8, sl
 800907a:	eb49 090b 	adc.w	r9, r9, fp
 800907e:	f04f 0100 	mov.w	r1, #0
 8009082:	f04f 0200 	mov.w	r2, #0
 8009086:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800908a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800908e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009092:	4688      	mov	r8, r1
 8009094:	4691      	mov	r9, r2
 8009096:	eb1a 0508 	adds.w	r5, sl, r8
 800909a:	eb4b 0609 	adc.w	r6, fp, r9
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	4619      	mov	r1, r3
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	f04f 0400 	mov.w	r4, #0
 80090b0:	0094      	lsls	r4, r2, #2
 80090b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090b6:	008b      	lsls	r3, r1, #2
 80090b8:	461a      	mov	r2, r3
 80090ba:	4623      	mov	r3, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	4631      	mov	r1, r6
 80090c0:	f7f7 fcfc 	bl	8000abc <__aeabi_uldivmod>
 80090c4:	4603      	mov	r3, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b50      	ldr	r3, [pc, #320]	; (800920c <UART_SetConfig+0x6f4>)
 80090cc:	fba3 2302 	umull	r2, r3, r3, r2
 80090d0:	095b      	lsrs	r3, r3, #5
 80090d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	469b      	mov	fp, r3
 80090da:	f04f 0c00 	mov.w	ip, #0
 80090de:	46d9      	mov	r9, fp
 80090e0:	46e2      	mov	sl, ip
 80090e2:	eb19 0309 	adds.w	r3, r9, r9
 80090e6:	eb4a 040a 	adc.w	r4, sl, sl
 80090ea:	4699      	mov	r9, r3
 80090ec:	46a2      	mov	sl, r4
 80090ee:	eb19 090b 	adds.w	r9, r9, fp
 80090f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80090f6:	f04f 0100 	mov.w	r1, #0
 80090fa:	f04f 0200 	mov.w	r2, #0
 80090fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009102:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009106:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800910a:	4689      	mov	r9, r1
 800910c:	4692      	mov	sl, r2
 800910e:	eb1b 0509 	adds.w	r5, fp, r9
 8009112:	eb4c 060a 	adc.w	r6, ip, sl
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	4619      	mov	r1, r3
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	f04f 0300 	mov.w	r3, #0
 8009124:	f04f 0400 	mov.w	r4, #0
 8009128:	0094      	lsls	r4, r2, #2
 800912a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800912e:	008b      	lsls	r3, r1, #2
 8009130:	461a      	mov	r2, r3
 8009132:	4623      	mov	r3, r4
 8009134:	4628      	mov	r0, r5
 8009136:	4631      	mov	r1, r6
 8009138:	f7f7 fcc0 	bl	8000abc <__aeabi_uldivmod>
 800913c:	4603      	mov	r3, r0
 800913e:	460c      	mov	r4, r1
 8009140:	461a      	mov	r2, r3
 8009142:	4b32      	ldr	r3, [pc, #200]	; (800920c <UART_SetConfig+0x6f4>)
 8009144:	fba3 1302 	umull	r1, r3, r3, r2
 8009148:	095b      	lsrs	r3, r3, #5
 800914a:	2164      	movs	r1, #100	; 0x64
 800914c:	fb01 f303 	mul.w	r3, r1, r3
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	011b      	lsls	r3, r3, #4
 8009154:	3332      	adds	r3, #50	; 0x32
 8009156:	4a2d      	ldr	r2, [pc, #180]	; (800920c <UART_SetConfig+0x6f4>)
 8009158:	fba2 2303 	umull	r2, r3, r2, r3
 800915c:	095b      	lsrs	r3, r3, #5
 800915e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009162:	4498      	add	r8, r3
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	469b      	mov	fp, r3
 8009168:	f04f 0c00 	mov.w	ip, #0
 800916c:	46d9      	mov	r9, fp
 800916e:	46e2      	mov	sl, ip
 8009170:	eb19 0309 	adds.w	r3, r9, r9
 8009174:	eb4a 040a 	adc.w	r4, sl, sl
 8009178:	4699      	mov	r9, r3
 800917a:	46a2      	mov	sl, r4
 800917c:	eb19 090b 	adds.w	r9, r9, fp
 8009180:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009184:	f04f 0100 	mov.w	r1, #0
 8009188:	f04f 0200 	mov.w	r2, #0
 800918c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009198:	4689      	mov	r9, r1
 800919a:	4692      	mov	sl, r2
 800919c:	eb1b 0509 	adds.w	r5, fp, r9
 80091a0:	eb4c 060a 	adc.w	r6, ip, sl
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	4619      	mov	r1, r3
 80091aa:	f04f 0200 	mov.w	r2, #0
 80091ae:	f04f 0300 	mov.w	r3, #0
 80091b2:	f04f 0400 	mov.w	r4, #0
 80091b6:	0094      	lsls	r4, r2, #2
 80091b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091bc:	008b      	lsls	r3, r1, #2
 80091be:	461a      	mov	r2, r3
 80091c0:	4623      	mov	r3, r4
 80091c2:	4628      	mov	r0, r5
 80091c4:	4631      	mov	r1, r6
 80091c6:	f7f7 fc79 	bl	8000abc <__aeabi_uldivmod>
 80091ca:	4603      	mov	r3, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	461a      	mov	r2, r3
 80091d0:	4b0e      	ldr	r3, [pc, #56]	; (800920c <UART_SetConfig+0x6f4>)
 80091d2:	fba3 1302 	umull	r1, r3, r3, r2
 80091d6:	095b      	lsrs	r3, r3, #5
 80091d8:	2164      	movs	r1, #100	; 0x64
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	3332      	adds	r3, #50	; 0x32
 80091e4:	4a09      	ldr	r2, [pc, #36]	; (800920c <UART_SetConfig+0x6f4>)
 80091e6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ea:	095b      	lsrs	r3, r3, #5
 80091ec:	f003 020f 	and.w	r2, r3, #15
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4442      	add	r2, r8
 80091f6:	609a      	str	r2, [r3, #8]
}
 80091f8:	e7ff      	b.n	80091fa <UART_SetConfig+0x6e2>
 80091fa:	bf00      	nop
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	40011000 	.word	0x40011000
 8009208:	40011400 	.word	0x40011400
 800920c:	51eb851f 	.word	0x51eb851f

08009210 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009210:	b084      	sub	sp, #16
 8009212:	b480      	push	{r7}
 8009214:	b085      	sub	sp, #20
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	f107 001c 	add.w	r0, r7, #28
 800921e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009226:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009228:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800922a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800922e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009232:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009236:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800923a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800924a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	431a      	orrs	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	b004      	add	sp, #16
 8009264:	4770      	bx	lr

08009266 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2203      	movs	r2, #3
 80092ae:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80092b0:	2002      	movs	r0, #2
 80092b2:	f7fa f893 	bl	80033dc <HAL_Delay>
  
  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0303 	and.w	r3, r3, #3
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80092fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009300:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009306:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009316:	f023 030f 	bic.w	r3, r3, #15
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	b2db      	uxtb	r3, r3
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3314      	adds	r3, #20
 8009358:	461a      	mov	r2, r3
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	4413      	add	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
}  
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009396:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800939c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80093a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ae:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	431a      	orrs	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0

}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b088      	sub	sp, #32
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80093d6:	2310      	movs	r3, #16
 80093d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093da:	2340      	movs	r3, #64	; 0x40
 80093dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093e8:	f107 0308 	add.w	r3, r7, #8
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7ff ff74 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80093f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f8:	2110      	movs	r1, #16
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa40 	bl	8009880 <SDMMC_GetCmdResp1>
 8009400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009402:	69fb      	ldr	r3, [r7, #28]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3720      	adds	r7, #32
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800941a:	2311      	movs	r3, #17
 800941c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800941e:	2340      	movs	r3, #64	; 0x40
 8009420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800942a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800942c:	f107 0308 	add.w	r3, r7, #8
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff ff52 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009438:	f241 3288 	movw	r2, #5000	; 0x1388
 800943c:	2111      	movs	r1, #17
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa1e 	bl	8009880 <SDMMC_GetCmdResp1>
 8009444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009446:	69fb      	ldr	r3, [r7, #28]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3720      	adds	r7, #32
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800945e:	2312      	movs	r3, #18
 8009460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009462:	2340      	movs	r3, #64	; 0x40
 8009464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009466:	2300      	movs	r3, #0
 8009468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800946a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800946e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009470:	f107 0308 	add.w	r3, r7, #8
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7ff ff30 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800947c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009480:	2112      	movs	r1, #18
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f9fc 	bl	8009880 <SDMMC_GetCmdResp1>
 8009488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800948a:	69fb      	ldr	r3, [r7, #28]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3720      	adds	r7, #32
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80094a2:	2318      	movs	r3, #24
 80094a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094a6:	2340      	movs	r3, #64	; 0x40
 80094a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094aa:	2300      	movs	r3, #0
 80094ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094b4:	f107 0308 	add.w	r3, r7, #8
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff ff0e 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80094c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c4:	2118      	movs	r1, #24
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f9da 	bl	8009880 <SDMMC_GetCmdResp1>
 80094cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ce:	69fb      	ldr	r3, [r7, #28]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3720      	adds	r7, #32
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80094e6:	2319      	movs	r3, #25
 80094e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094ea:	2340      	movs	r3, #64	; 0x40
 80094ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094ee:	2300      	movs	r3, #0
 80094f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094f8:	f107 0308 	add.w	r3, r7, #8
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7ff feec 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009504:	f241 3288 	movw	r2, #5000	; 0x1388
 8009508:	2119      	movs	r1, #25
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f9b8 	bl	8009880 <SDMMC_GetCmdResp1>
 8009510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009512:	69fb      	ldr	r3, [r7, #28]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3720      	adds	r7, #32
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009528:	230c      	movs	r3, #12
 800952a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800952c:	2340      	movs	r3, #64	; 0x40
 800952e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009538:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800953a:	f107 0308 	add.w	r3, r7, #8
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7ff fecb 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009546:	4a05      	ldr	r2, [pc, #20]	; (800955c <SDMMC_CmdStopTransfer+0x40>)
 8009548:	210c      	movs	r1, #12
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f998 	bl	8009880 <SDMMC_GetCmdResp1>
 8009550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009552:	69fb      	ldr	r3, [r7, #28]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3720      	adds	r7, #32
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	05f5e100 	.word	0x05f5e100

08009560 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08a      	sub	sp, #40	; 0x28
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009570:	2307      	movs	r3, #7
 8009572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009574:	2340      	movs	r3, #64	; 0x40
 8009576:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009578:	2300      	movs	r3, #0
 800957a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800957c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009580:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009582:	f107 0310 	add.w	r3, r7, #16
 8009586:	4619      	mov	r1, r3
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7ff fea7 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800958e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009592:	2107      	movs	r1, #7
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 f973 	bl	8009880 <SDMMC_GetCmdResp1>
 800959a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3728      	adds	r7, #40	; 0x28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b088      	sub	sp, #32
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80095b6:	2300      	movs	r3, #0
 80095b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095ba:	2300      	movs	r3, #0
 80095bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095c4:	f107 0308 	add.w	r3, r7, #8
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fe86 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f92d 	bl	8009830 <SDMMC_GetCmdError>
 80095d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095d8:	69fb      	ldr	r3, [r7, #28]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3720      	adds	r7, #32
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b088      	sub	sp, #32
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80095ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80095ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80095f0:	2308      	movs	r3, #8
 80095f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095f4:	2340      	movs	r3, #64	; 0x40
 80095f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009600:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009602:	f107 0308 	add.w	r3, r7, #8
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff fe67 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fb16 	bl	8009c40 <SDMMC_GetCmdResp7>
 8009614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009616:	69fb      	ldr	r3, [r7, #28]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800962e:	2337      	movs	r3, #55	; 0x37
 8009630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009632:	2340      	movs	r3, #64	; 0x40
 8009634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800963a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800963e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009640:	f107 0308 	add.w	r3, r7, #8
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff fe48 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800964c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009650:	2137      	movs	r1, #55	; 0x37
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f914 	bl	8009880 <SDMMC_GetCmdResp1>
 8009658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800965a:	69fb      	ldr	r3, [r7, #28]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3720      	adds	r7, #32
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800967a:	2329      	movs	r3, #41	; 0x29
 800967c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800968a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800968c:	f107 0308 	add.w	r3, r7, #8
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff fe22 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fa23 	bl	8009ae4 <SDMMC_GetCmdResp3>
 800969e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096a0:	69fb      	ldr	r3, [r7, #28]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b088      	sub	sp, #32
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80096b8:	2306      	movs	r3, #6
 80096ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096bc:	2340      	movs	r3, #64	; 0x40
 80096be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096c0:	2300      	movs	r3, #0
 80096c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096ca:	f107 0308 	add.w	r3, r7, #8
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff fe03 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80096d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096da:	2106      	movs	r1, #6
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f8cf 	bl	8009880 <SDMMC_GetCmdResp1>
 80096e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096e4:	69fb      	ldr	r3, [r7, #28]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3720      	adds	r7, #32
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b088      	sub	sp, #32
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80096fa:	2333      	movs	r3, #51	; 0x33
 80096fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096fe:	2340      	movs	r3, #64	; 0x40
 8009700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009702:	2300      	movs	r3, #0
 8009704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800970a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800970c:	f107 0308 	add.w	r3, r7, #8
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff fde2 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009718:	f241 3288 	movw	r2, #5000	; 0x1388
 800971c:	2133      	movs	r1, #51	; 0x33
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f8ae 	bl	8009880 <SDMMC_GetCmdResp1>
 8009724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009726:	69fb      	ldr	r3, [r7, #28]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3720      	adds	r7, #32
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800973c:	2302      	movs	r3, #2
 800973e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009740:	23c0      	movs	r3, #192	; 0xc0
 8009742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009744:	2300      	movs	r3, #0
 8009746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800974c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800974e:	f107 0308 	add.w	r3, r7, #8
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7ff fdc1 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f97c 	bl	8009a58 <SDMMC_GetCmdResp2>
 8009760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009762:	69fb      	ldr	r3, [r7, #28]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800977a:	2309      	movs	r3, #9
 800977c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800977e:	23c0      	movs	r3, #192	; 0xc0
 8009780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009782:	2300      	movs	r3, #0
 8009784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800978a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800978c:	f107 0308 	add.w	r3, r7, #8
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff fda2 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f95d 	bl	8009a58 <SDMMC_GetCmdResp2>
 800979e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097a0:	69fb      	ldr	r3, [r7, #28]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3720      	adds	r7, #32
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b088      	sub	sp, #32
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80097b8:	2303      	movs	r3, #3
 80097ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097bc:	2340      	movs	r3, #64	; 0x40
 80097be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097c0:	2300      	movs	r3, #0
 80097c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097ca:	f107 0308 	add.w	r3, r7, #8
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff fd83 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	2103      	movs	r1, #3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9bc 	bl	8009b58 <SDMMC_GetCmdResp6>
 80097e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097e2:	69fb      	ldr	r3, [r7, #28]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3720      	adds	r7, #32
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80097fa:	230d      	movs	r3, #13
 80097fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097fe:	2340      	movs	r3, #64	; 0x40
 8009800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009802:	2300      	movs	r3, #0
 8009804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff fd62 	bl	80092dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009818:	f241 3288 	movw	r2, #5000	; 0x1388
 800981c:	210d      	movs	r1, #13
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f82e 	bl	8009880 <SDMMC_GetCmdResp1>
 8009824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009826:	69fb      	ldr	r3, [r7, #28]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3720      	adds	r7, #32
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009830:	b490      	push	{r4, r7}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009838:	4b0f      	ldr	r3, [pc, #60]	; (8009878 <SDMMC_GetCmdError+0x48>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a0f      	ldr	r2, [pc, #60]	; (800987c <SDMMC_GetCmdError+0x4c>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	0a5b      	lsrs	r3, r3, #9
 8009844:	f241 3288 	movw	r2, #5000	; 0x1388
 8009848:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800984c:	4623      	mov	r3, r4
 800984e:	1e5c      	subs	r4, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009858:	e009      	b.n	800986e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0f2      	beq.n	800984c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	22c5      	movs	r2, #197	; 0xc5
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bc90      	pop	{r4, r7}
 8009876:	4770      	bx	lr
 8009878:	20000000 	.word	0x20000000
 800987c:	10624dd3 	.word	0x10624dd3

08009880 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	460b      	mov	r3, r1
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800988e:	4b6f      	ldr	r3, [pc, #444]	; (8009a4c <SDMMC_GetCmdResp1+0x1cc>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a6f      	ldr	r2, [pc, #444]	; (8009a50 <SDMMC_GetCmdResp1+0x1d0>)
 8009894:	fba2 2303 	umull	r2, r3, r2, r3
 8009898:	0a5b      	lsrs	r3, r3, #9
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80098a0:	4623      	mov	r3, r4
 80098a2:	1e5c      	subs	r4, r3, #1
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d102      	bne.n	80098ae <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098ac:	e0c9      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0f0      	beq.n	80098a0 <SDMMC_GetCmdResp1+0x20>
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1eb      	bne.n	80098a0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098cc:	f003 0304 	and.w	r3, r3, #4
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d004      	beq.n	80098de <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2204      	movs	r2, #4
 80098d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098da:	2304      	movs	r3, #4
 80098dc:	e0b1      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d004      	beq.n	80098f4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2201      	movs	r2, #1
 80098ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e0a6      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	22c5      	movs	r2, #197	; 0xc5
 80098f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f7ff fd18 	bl	8009330 <SDIO_GetCommandResponse>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	7afb      	ldrb	r3, [r7, #11]
 8009906:	4293      	cmp	r3, r2
 8009908:	d001      	beq.n	800990e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800990a:	2301      	movs	r3, #1
 800990c:	e099      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800990e:	2100      	movs	r1, #0
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7ff fd1a 	bl	800934a <SDIO_GetResponse>
 8009916:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	4b4e      	ldr	r3, [pc, #312]	; (8009a54 <SDMMC_GetCmdResp1+0x1d4>)
 800991c:	4013      	ands	r3, r2
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009922:	2300      	movs	r3, #0
 8009924:	e08d      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	da02      	bge.n	8009932 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800992c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009930:	e087      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800993c:	2340      	movs	r3, #64	; 0x40
 800993e:	e080      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800994a:	2380      	movs	r3, #128	; 0x80
 800994c:	e079      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800995c:	e071      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800996c:	e069      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800997c:	e061      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800998c:	e059      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800999c:	e051      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80099a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099ac:	e049      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80099b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099bc:	e041      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80099c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099cc:	e039      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80099d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80099dc:	e031      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80099e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099ec:	e029      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80099f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099fc:	e021      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009a08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a0c:	e019      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009a18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009a1c:	e011      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009a28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a2c:	e009      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f003 0308 	and.w	r3, r3, #8
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009a38:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009a3c:	e001      	b.n	8009a42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd90      	pop	{r4, r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000000 	.word	0x20000000
 8009a50:	10624dd3 	.word	0x10624dd3
 8009a54:	fdffe008 	.word	0xfdffe008

08009a58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009a58:	b490      	push	{r4, r7}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a60:	4b1e      	ldr	r3, [pc, #120]	; (8009adc <SDMMC_GetCmdResp2+0x84>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a1e      	ldr	r2, [pc, #120]	; (8009ae0 <SDMMC_GetCmdResp2+0x88>)
 8009a66:	fba2 2303 	umull	r2, r3, r2, r3
 8009a6a:	0a5b      	lsrs	r3, r3, #9
 8009a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009a74:	4623      	mov	r3, r4
 8009a76:	1e5c      	subs	r4, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a80:	e026      	b.n	8009ad0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0f0      	beq.n	8009a74 <SDMMC_GetCmdResp2+0x1c>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1eb      	bne.n	8009a74 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d004      	beq.n	8009ab2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009aae:	2304      	movs	r3, #4
 8009ab0:	e00e      	b.n	8009ad0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e003      	b.n	8009ad0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	22c5      	movs	r2, #197	; 0xc5
 8009acc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bc90      	pop	{r4, r7}
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	20000000 	.word	0x20000000
 8009ae0:	10624dd3 	.word	0x10624dd3

08009ae4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009ae4:	b490      	push	{r4, r7}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009aec:	4b18      	ldr	r3, [pc, #96]	; (8009b50 <SDMMC_GetCmdResp3+0x6c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a18      	ldr	r2, [pc, #96]	; (8009b54 <SDMMC_GetCmdResp3+0x70>)
 8009af2:	fba2 2303 	umull	r2, r3, r2, r3
 8009af6:	0a5b      	lsrs	r3, r3, #9
 8009af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009afc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b00:	4623      	mov	r3, r4
 8009b02:	1e5c      	subs	r4, r3, #1
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d102      	bne.n	8009b0e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b0c:	e01b      	b.n	8009b46 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0f0      	beq.n	8009b00 <SDMMC_GetCmdResp3+0x1c>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1eb      	bne.n	8009b00 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2c:	f003 0304 	and.w	r3, r3, #4
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d004      	beq.n	8009b3e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2204      	movs	r2, #4
 8009b38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b3a:	2304      	movs	r3, #4
 8009b3c:	e003      	b.n	8009b46 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	22c5      	movs	r2, #197	; 0xc5
 8009b42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bc90      	pop	{r4, r7}
 8009b4e:	4770      	bx	lr
 8009b50:	20000000 	.word	0x20000000
 8009b54:	10624dd3 	.word	0x10624dd3

08009b58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009b58:	b590      	push	{r4, r7, lr}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	460b      	mov	r3, r1
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b66:	4b34      	ldr	r3, [pc, #208]	; (8009c38 <SDMMC_GetCmdResp6+0xe0>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a34      	ldr	r2, [pc, #208]	; (8009c3c <SDMMC_GetCmdResp6+0xe4>)
 8009b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b70:	0a5b      	lsrs	r3, r3, #9
 8009b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b76:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b7a:	4623      	mov	r3, r4
 8009b7c:	1e5c      	subs	r4, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b86:	e052      	b.n	8009c2e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b8c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d0f0      	beq.n	8009b7a <SDMMC_GetCmdResp6+0x22>
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1eb      	bne.n	8009b7a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d004      	beq.n	8009bb8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2204      	movs	r2, #4
 8009bb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	e03a      	b.n	8009c2e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d004      	beq.n	8009bce <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e02f      	b.n	8009c2e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7ff fbae 	bl	8009330 <SDIO_GetCommandResponse>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	7afb      	ldrb	r3, [r7, #11]
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d001      	beq.n	8009be2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e025      	b.n	8009c2e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	22c5      	movs	r2, #197	; 0xc5
 8009be6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009be8:	2100      	movs	r1, #0
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f7ff fbad 	bl	800934a <SDIO_GetResponse>
 8009bf0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d106      	bne.n	8009c0a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	0c1b      	lsrs	r3, r3, #16
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e011      	b.n	8009c2e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c18:	e009      	b.n	8009c2e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c28:	e001      	b.n	8009c2e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	371c      	adds	r7, #28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd90      	pop	{r4, r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20000000 	.word	0x20000000
 8009c3c:	10624dd3 	.word	0x10624dd3

08009c40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009c40:	b490      	push	{r4, r7}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c48:	4b21      	ldr	r3, [pc, #132]	; (8009cd0 <SDMMC_GetCmdResp7+0x90>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a21      	ldr	r2, [pc, #132]	; (8009cd4 <SDMMC_GetCmdResp7+0x94>)
 8009c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c52:	0a5b      	lsrs	r3, r3, #9
 8009c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c58:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	1e5c      	subs	r4, r3, #1
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c68:	e02c      	b.n	8009cc4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c6e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d0f0      	beq.n	8009c5c <SDMMC_GetCmdResp7+0x1c>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1eb      	bne.n	8009c5c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c88:	f003 0304 	and.w	r3, r3, #4
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2204      	movs	r2, #4
 8009c94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c96:	2304      	movs	r3, #4
 8009c98:	e014      	b.n	8009cc4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d004      	beq.n	8009cb0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e009      	b.n	8009cc4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2240      	movs	r2, #64	; 0x40
 8009cc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009cc2:	2300      	movs	r3, #0
  
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bc90      	pop	{r4, r7}
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	20000000 	.word	0x20000000
 8009cd4:	10624dd3 	.word	0x10624dd3

08009cd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cd8:	b084      	sub	sp, #16
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	f107 001c 	add.w	r0, r7, #28
 8009ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d122      	bne.n	8009d36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d105      	bne.n	8009d2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 fac0 	bl	800b2b0 <USB_CoreReset>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73fb      	strb	r3, [r7, #15]
 8009d34:	e01a      	b.n	8009d6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f001 fab4 	bl	800b2b0 <USB_CoreReset>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8009d5e:	e005      	b.n	8009d6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d10b      	bne.n	8009d8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f043 0206 	orr.w	r2, r3, #6
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f043 0220 	orr.w	r2, r3, #32
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d96:	b004      	add	sp, #16
 8009d98:	4770      	bx	lr
	...

08009d9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d165      	bne.n	8009e7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	4a41      	ldr	r2, [pc, #260]	; (8009eb8 <USB_SetTurnaroundTime+0x11c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d906      	bls.n	8009dc6 <USB_SetTurnaroundTime+0x2a>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	4a40      	ldr	r2, [pc, #256]	; (8009ebc <USB_SetTurnaroundTime+0x120>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d802      	bhi.n	8009dc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009dc0:	230f      	movs	r3, #15
 8009dc2:	617b      	str	r3, [r7, #20]
 8009dc4:	e062      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	4a3c      	ldr	r2, [pc, #240]	; (8009ebc <USB_SetTurnaroundTime+0x120>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d906      	bls.n	8009ddc <USB_SetTurnaroundTime+0x40>
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4a3b      	ldr	r2, [pc, #236]	; (8009ec0 <USB_SetTurnaroundTime+0x124>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d802      	bhi.n	8009ddc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009dd6:	230e      	movs	r3, #14
 8009dd8:	617b      	str	r3, [r7, #20]
 8009dda:	e057      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4a38      	ldr	r2, [pc, #224]	; (8009ec0 <USB_SetTurnaroundTime+0x124>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d906      	bls.n	8009df2 <USB_SetTurnaroundTime+0x56>
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	4a37      	ldr	r2, [pc, #220]	; (8009ec4 <USB_SetTurnaroundTime+0x128>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d802      	bhi.n	8009df2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009dec:	230d      	movs	r3, #13
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	e04c      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	4a33      	ldr	r2, [pc, #204]	; (8009ec4 <USB_SetTurnaroundTime+0x128>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d906      	bls.n	8009e08 <USB_SetTurnaroundTime+0x6c>
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	4a32      	ldr	r2, [pc, #200]	; (8009ec8 <USB_SetTurnaroundTime+0x12c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d802      	bhi.n	8009e08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009e02:	230c      	movs	r3, #12
 8009e04:	617b      	str	r3, [r7, #20]
 8009e06:	e041      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4a2f      	ldr	r2, [pc, #188]	; (8009ec8 <USB_SetTurnaroundTime+0x12c>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d906      	bls.n	8009e1e <USB_SetTurnaroundTime+0x82>
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	4a2e      	ldr	r2, [pc, #184]	; (8009ecc <USB_SetTurnaroundTime+0x130>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d802      	bhi.n	8009e1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009e18:	230b      	movs	r3, #11
 8009e1a:	617b      	str	r3, [r7, #20]
 8009e1c:	e036      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	4a2a      	ldr	r2, [pc, #168]	; (8009ecc <USB_SetTurnaroundTime+0x130>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d906      	bls.n	8009e34 <USB_SetTurnaroundTime+0x98>
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	4a29      	ldr	r2, [pc, #164]	; (8009ed0 <USB_SetTurnaroundTime+0x134>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d802      	bhi.n	8009e34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009e2e:	230a      	movs	r3, #10
 8009e30:	617b      	str	r3, [r7, #20]
 8009e32:	e02b      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4a26      	ldr	r2, [pc, #152]	; (8009ed0 <USB_SetTurnaroundTime+0x134>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d906      	bls.n	8009e4a <USB_SetTurnaroundTime+0xae>
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	4a25      	ldr	r2, [pc, #148]	; (8009ed4 <USB_SetTurnaroundTime+0x138>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d802      	bhi.n	8009e4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009e44:	2309      	movs	r3, #9
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	e020      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	4a21      	ldr	r2, [pc, #132]	; (8009ed4 <USB_SetTurnaroundTime+0x138>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d906      	bls.n	8009e60 <USB_SetTurnaroundTime+0xc4>
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	4a20      	ldr	r2, [pc, #128]	; (8009ed8 <USB_SetTurnaroundTime+0x13c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d802      	bhi.n	8009e60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009e5a:	2308      	movs	r3, #8
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	e015      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	4a1d      	ldr	r2, [pc, #116]	; (8009ed8 <USB_SetTurnaroundTime+0x13c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d906      	bls.n	8009e76 <USB_SetTurnaroundTime+0xda>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	4a1c      	ldr	r2, [pc, #112]	; (8009edc <USB_SetTurnaroundTime+0x140>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d802      	bhi.n	8009e76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009e70:	2307      	movs	r3, #7
 8009e72:	617b      	str	r3, [r7, #20]
 8009e74:	e00a      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009e76:	2306      	movs	r3, #6
 8009e78:	617b      	str	r3, [r7, #20]
 8009e7a:	e007      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d102      	bne.n	8009e88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009e82:	2309      	movs	r3, #9
 8009e84:	617b      	str	r3, [r7, #20]
 8009e86:	e001      	b.n	8009e8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009e88:	2309      	movs	r3, #9
 8009e8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	68da      	ldr	r2, [r3, #12]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	029b      	lsls	r3, r3, #10
 8009ea0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	371c      	adds	r7, #28
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	00d8acbf 	.word	0x00d8acbf
 8009ebc:	00e4e1bf 	.word	0x00e4e1bf
 8009ec0:	00f423ff 	.word	0x00f423ff
 8009ec4:	0106737f 	.word	0x0106737f
 8009ec8:	011a499f 	.word	0x011a499f
 8009ecc:	01312cff 	.word	0x01312cff
 8009ed0:	014ca43f 	.word	0x014ca43f
 8009ed4:	016e35ff 	.word	0x016e35ff
 8009ed8:	01a6ab1f 	.word	0x01a6ab1f
 8009edc:	01e847ff 	.word	0x01e847ff

08009ee0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f043 0201 	orr.w	r2, r3, #1
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f023 0201 	bic.w	r2, r3, #1
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f3c:	78fb      	ldrb	r3, [r7, #3]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d106      	bne.n	8009f50 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60da      	str	r2, [r3, #12]
 8009f4e:	e00b      	b.n	8009f68 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d106      	bne.n	8009f64 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	60da      	str	r2, [r3, #12]
 8009f62:	e001      	b.n	8009f68 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e003      	b.n	8009f70 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009f68:	2032      	movs	r0, #50	; 0x32
 8009f6a:	f7f9 fa37 	bl	80033dc <HAL_Delay>

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f78:	b084      	sub	sp, #16
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b086      	sub	sp, #24
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f92:	2300      	movs	r3, #0
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	e009      	b.n	8009fac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	3340      	adds	r3, #64	; 0x40
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	613b      	str	r3, [r7, #16]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	2b0e      	cmp	r3, #14
 8009fb0:	d9f2      	bls.n	8009f98 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d11c      	bne.n	8009ff2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fc6:	f043 0302 	orr.w	r3, r3, #2
 8009fca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	e005      	b.n	8009ffe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a004:	461a      	mov	r2, r3
 800a006:	2300      	movs	r3, #0
 800a008:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a010:	4619      	mov	r1, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a018:	461a      	mov	r2, r3
 800a01a:	680b      	ldr	r3, [r1, #0]
 800a01c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a020:	2b01      	cmp	r3, #1
 800a022:	d10c      	bne.n	800a03e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a02a:	2100      	movs	r1, #0
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f949 	bl	800a2c4 <USB_SetDevSpeed>
 800a032:	e008      	b.n	800a046 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a034:	2101      	movs	r1, #1
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f944 	bl	800a2c4 <USB_SetDevSpeed>
 800a03c:	e003      	b.n	800a046 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a03e:	2103      	movs	r1, #3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f93f 	bl	800a2c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a046:	2110      	movs	r1, #16
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f8f3 	bl	800a234 <USB_FlushTxFifo>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f911 	bl	800a280 <USB_FlushRxFifo>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06e:	461a      	mov	r2, r3
 800a070:	2300      	movs	r3, #0
 800a072:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07a:	461a      	mov	r2, r3
 800a07c:	2300      	movs	r3, #0
 800a07e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a086:	461a      	mov	r2, r3
 800a088:	2300      	movs	r3, #0
 800a08a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a08c:	2300      	movs	r3, #0
 800a08e:	613b      	str	r3, [r7, #16]
 800a090:	e043      	b.n	800a11a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0a8:	d118      	bne.n	800a0dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10a      	bne.n	800a0c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	e013      	b.n	800a0ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	e008      	b.n	800a0ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	015a      	lsls	r2, r3, #5
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10c:	461a      	mov	r2, r3
 800a10e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a112:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	3301      	adds	r3, #1
 800a118:	613b      	str	r3, [r7, #16]
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d3b7      	bcc.n	800a092 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a122:	2300      	movs	r3, #0
 800a124:	613b      	str	r3, [r7, #16]
 800a126:	e043      	b.n	800a1b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	015a      	lsls	r2, r3, #5
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4413      	add	r3, r2
 800a130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a13a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a13e:	d118      	bne.n	800a172 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10a      	bne.n	800a15c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a152:	461a      	mov	r2, r3
 800a154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	e013      	b.n	800a184 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a168:	461a      	mov	r2, r3
 800a16a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	e008      	b.n	800a184 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17e:	461a      	mov	r2, r3
 800a180:	2300      	movs	r3, #0
 800a182:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	015a      	lsls	r2, r3, #5
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a190:	461a      	mov	r2, r3
 800a192:	2300      	movs	r3, #0
 800a194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	613b      	str	r3, [r7, #16]
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d3b7      	bcc.n	800a128 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a1d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d105      	bne.n	800a1ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	f043 0210 	orr.w	r2, r3, #16
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	699a      	ldr	r2, [r3, #24]
 800a1f0:	4b0f      	ldr	r3, [pc, #60]	; (800a230 <USB_DevInit+0x2b8>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	f043 0208 	orr.w	r2, r3, #8
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d107      	bne.n	800a220 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a218:	f043 0304 	orr.w	r3, r3, #4
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a220:	7dfb      	ldrb	r3, [r7, #23]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a22c:	b004      	add	sp, #16
 800a22e:	4770      	bx	lr
 800a230:	803c3800 	.word	0x803c3800

0800a234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	019b      	lsls	r3, r3, #6
 800a246:	f043 0220 	orr.w	r2, r3, #32
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4a09      	ldr	r2, [pc, #36]	; (800a27c <USB_FlushTxFifo+0x48>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d901      	bls.n	800a260 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e006      	b.n	800a26e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	f003 0320 	and.w	r3, r3, #32
 800a268:	2b20      	cmp	r3, #32
 800a26a:	d0f0      	beq.n	800a24e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	00030d40 	.word	0x00030d40

0800a280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2210      	movs	r2, #16
 800a290:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	3301      	adds	r3, #1
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4a09      	ldr	r2, [pc, #36]	; (800a2c0 <USB_FlushRxFifo+0x40>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d901      	bls.n	800a2a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e006      	b.n	800a2b2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	f003 0310 	and.w	r3, r3, #16
 800a2ac:	2b10      	cmp	r3, #16
 800a2ae:	d0f0      	beq.n	800a292 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	00030d40 	.word	0x00030d40

0800a2c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b087      	sub	sp, #28
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	f003 0306 	and.w	r3, r3, #6
 800a30e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d102      	bne.n	800a31c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a316:	2300      	movs	r3, #0
 800a318:	75fb      	strb	r3, [r7, #23]
 800a31a:	e00a      	b.n	800a332 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d002      	beq.n	800a328 <USB_GetDevSpeed+0x32>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b06      	cmp	r3, #6
 800a326:	d102      	bne.n	800a32e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a328:	2302      	movs	r3, #2
 800a32a:	75fb      	strb	r3, [r7, #23]
 800a32c:	e001      	b.n	800a332 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a32e:	230f      	movs	r3, #15
 800a330:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a332:	7dfb      	ldrb	r3, [r7, #23]
}
 800a334:	4618      	mov	r0, r3
 800a336:	371c      	adds	r7, #28
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	785b      	ldrb	r3, [r3, #1]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d13a      	bne.n	800a3d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	2101      	movs	r1, #1
 800a36e:	fa01 f303 	lsl.w	r3, r1, r3
 800a372:	b29b      	uxth	r3, r3
 800a374:	68f9      	ldr	r1, [r7, #12]
 800a376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a37a:	4313      	orrs	r3, r2
 800a37c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4413      	add	r3, r2
 800a386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d155      	bne.n	800a440 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	78db      	ldrb	r3, [r3, #3]
 800a3ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	059b      	lsls	r3, r3, #22
 800a3b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	0151      	lsls	r1, r2, #5
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	440a      	add	r2, r1
 800a3c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	e036      	b.n	800a440 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d8:	69da      	ldr	r2, [r3, #28]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	f003 030f 	and.w	r3, r3, #15
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e8:	041b      	lsls	r3, r3, #16
 800a3ea:	68f9      	ldr	r1, [r7, #12]
 800a3ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d11a      	bne.n	800a440 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	78db      	ldrb	r3, [r3, #3]
 800a424:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a426:	430b      	orrs	r3, r1
 800a428:	4313      	orrs	r3, r2
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	0151      	lsls	r1, r2, #5
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	440a      	add	r2, r1
 800a432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a43a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a43e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
	...

0800a450 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d161      	bne.n	800a530 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	015a      	lsls	r2, r3, #5
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4413      	add	r3, r2
 800a474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a47e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a482:	d11f      	bne.n	800a4c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	0151      	lsls	r1, r2, #5
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	440a      	add	r2, r1
 800a49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a49e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	0151      	lsls	r1, r2, #5
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	440a      	add	r2, r1
 800a4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	43db      	mvns	r3, r3
 800a4de:	68f9      	ldr	r1, [r7, #12]
 800a4e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ee:	69da      	ldr	r2, [r3, #28]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	f003 030f 	and.w	r3, r3, #15
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	43db      	mvns	r3, r3
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a508:	4013      	ands	r3, r2
 800a50a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	0159      	lsls	r1, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	440b      	add	r3, r1
 800a522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a526:	4619      	mov	r1, r3
 800a528:	4b35      	ldr	r3, [pc, #212]	; (800a600 <USB_DeactivateEndpoint+0x1b0>)
 800a52a:	4013      	ands	r3, r2
 800a52c:	600b      	str	r3, [r1, #0]
 800a52e:	e060      	b.n	800a5f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a546:	d11f      	bne.n	800a588 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	0151      	lsls	r1, r2, #5
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	440a      	add	r2, r1
 800a55e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a562:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a566:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	0151      	lsls	r1, r2, #5
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	440a      	add	r2, r1
 800a57e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a586:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a58e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	2101      	movs	r1, #1
 800a59a:	fa01 f303 	lsl.w	r3, r1, r3
 800a59e:	041b      	lsls	r3, r3, #16
 800a5a0:	43db      	mvns	r3, r3
 800a5a2:	68f9      	ldr	r1, [r7, #12]
 800a5a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b2:	69da      	ldr	r2, [r3, #28]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	f003 030f 	and.w	r3, r3, #15
 800a5bc:	2101      	movs	r1, #1
 800a5be:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c2:	041b      	lsls	r3, r3, #16
 800a5c4:	43db      	mvns	r3, r3
 800a5c6:	68f9      	ldr	r1, [r7, #12]
 800a5c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	0159      	lsls	r1, r3, #5
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	440b      	add	r3, r1
 800a5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4b05      	ldr	r3, [pc, #20]	; (800a604 <USB_DeactivateEndpoint+0x1b4>)
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	ec337800 	.word	0xec337800
 800a604:	eff37800 	.word	0xeff37800

0800a608 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08a      	sub	sp, #40	; 0x28
 800a60c:	af02      	add	r7, sp, #8
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	4613      	mov	r3, r2
 800a614:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	785b      	ldrb	r3, [r3, #1]
 800a624:	2b01      	cmp	r3, #1
 800a626:	f040 815c 	bne.w	800a8e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d132      	bne.n	800a698 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	0151      	lsls	r1, r2, #5
 800a644:	69fa      	ldr	r2, [r7, #28]
 800a646:	440a      	add	r2, r1
 800a648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a64c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a650:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a654:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	0151      	lsls	r1, r2, #5
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	440a      	add	r2, r1
 800a66c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a674:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	0151      	lsls	r1, r2, #5
 800a688:	69fa      	ldr	r2, [r7, #28]
 800a68a:	440a      	add	r2, r1
 800a68c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a690:	0cdb      	lsrs	r3, r3, #19
 800a692:	04db      	lsls	r3, r3, #19
 800a694:	6113      	str	r3, [r2, #16]
 800a696:	e074      	b.n	800a782 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	0151      	lsls	r1, r2, #5
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	440a      	add	r2, r1
 800a6ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6b2:	0cdb      	lsrs	r3, r3, #19
 800a6b4:	04db      	lsls	r3, r3, #19
 800a6b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	69ba      	ldr	r2, [r7, #24]
 800a6c8:	0151      	lsls	r1, r2, #5
 800a6ca:	69fa      	ldr	r2, [r7, #28]
 800a6cc:	440a      	add	r2, r1
 800a6ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e8:	691a      	ldr	r2, [r3, #16]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	6959      	ldr	r1, [r3, #20]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	440b      	add	r3, r1
 800a6f4:	1e59      	subs	r1, r3, #1
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a6fe:	04d9      	lsls	r1, r3, #19
 800a700:	4b9d      	ldr	r3, [pc, #628]	; (800a978 <USB_EPStartXfer+0x370>)
 800a702:	400b      	ands	r3, r1
 800a704:	69b9      	ldr	r1, [r7, #24]
 800a706:	0148      	lsls	r0, r1, #5
 800a708:	69f9      	ldr	r1, [r7, #28]
 800a70a:	4401      	add	r1, r0
 800a70c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a710:	4313      	orrs	r3, r2
 800a712:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a720:	691a      	ldr	r2, [r3, #16]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a72a:	69b9      	ldr	r1, [r7, #24]
 800a72c:	0148      	lsls	r0, r1, #5
 800a72e:	69f9      	ldr	r1, [r7, #28]
 800a730:	4401      	add	r1, r0
 800a732:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a736:	4313      	orrs	r3, r2
 800a738:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	78db      	ldrb	r3, [r3, #3]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d11f      	bne.n	800a782 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	69ba      	ldr	r2, [r7, #24]
 800a752:	0151      	lsls	r1, r2, #5
 800a754:	69fa      	ldr	r2, [r7, #28]
 800a756:	440a      	add	r2, r1
 800a758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a75c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a760:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	0151      	lsls	r1, r2, #5
 800a774:	69fa      	ldr	r2, [r7, #28]
 800a776:	440a      	add	r2, r1
 800a778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a77c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a780:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a782:	79fb      	ldrb	r3, [r7, #7]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d14b      	bne.n	800a820 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d009      	beq.n	800a7a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	461a      	mov	r2, r3
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	78db      	ldrb	r3, [r3, #3]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d128      	bne.n	800a7fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d110      	bne.n	800a7de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	69fa      	ldr	r2, [r7, #28]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	e00f      	b.n	800a7fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	69ba      	ldr	r2, [r7, #24]
 800a7ee:	0151      	lsls	r1, r2, #5
 800a7f0:	69fa      	ldr	r2, [r7, #28]
 800a7f2:	440a      	add	r2, r1
 800a7f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	0151      	lsls	r1, r2, #5
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	440a      	add	r2, r1
 800a814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a818:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	e12f      	b.n	800aa80 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	0151      	lsls	r1, r2, #5
 800a832:	69fa      	ldr	r2, [r7, #28]
 800a834:	440a      	add	r2, r1
 800a836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a83a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a83e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	78db      	ldrb	r3, [r3, #3]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d015      	beq.n	800a874 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f000 8117 	beq.w	800aa80 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	2101      	movs	r1, #1
 800a864:	fa01 f303 	lsl.w	r3, r1, r3
 800a868:	69f9      	ldr	r1, [r7, #28]
 800a86a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a86e:	4313      	orrs	r3, r2
 800a870:	634b      	str	r3, [r1, #52]	; 0x34
 800a872:	e105      	b.n	800aa80 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a880:	2b00      	cmp	r3, #0
 800a882:	d110      	bne.n	800a8a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69ba      	ldr	r2, [r7, #24]
 800a894:	0151      	lsls	r1, r2, #5
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	440a      	add	r2, r1
 800a89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a89e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	e00f      	b.n	800a8c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69ba      	ldr	r2, [r7, #24]
 800a8b6:	0151      	lsls	r1, r2, #5
 800a8b8:	69fa      	ldr	r2, [r7, #28]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	68d9      	ldr	r1, [r3, #12]
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	781a      	ldrb	r2, [r3, #0]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	b298      	uxth	r0, r3
 800a8d4:	79fb      	ldrb	r3, [r7, #7]
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	4603      	mov	r3, r0
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 fa2b 	bl	800ad36 <USB_WritePacket>
 800a8e0:	e0ce      	b.n	800aa80 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	0151      	lsls	r1, r2, #5
 800a8f4:	69fa      	ldr	r2, [r7, #28]
 800a8f6:	440a      	add	r2, r1
 800a8f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8fc:	0cdb      	lsrs	r3, r3, #19
 800a8fe:	04db      	lsls	r3, r3, #19
 800a900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	0151      	lsls	r1, r2, #5
 800a914:	69fa      	ldr	r2, [r7, #28]
 800a916:	440a      	add	r2, r1
 800a918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a91c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a920:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a924:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d126      	bne.n	800a97c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	4413      	add	r3, r2
 800a936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93a:	691a      	ldr	r2, [r3, #16]
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a944:	69b9      	ldr	r1, [r7, #24]
 800a946:	0148      	lsls	r0, r1, #5
 800a948:	69f9      	ldr	r1, [r7, #28]
 800a94a:	4401      	add	r1, r0
 800a94c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a950:	4313      	orrs	r3, r2
 800a952:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	4413      	add	r3, r2
 800a95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	69ba      	ldr	r2, [r7, #24]
 800a964:	0151      	lsls	r1, r2, #5
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	440a      	add	r2, r1
 800a96a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a96e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a972:	6113      	str	r3, [r2, #16]
 800a974:	e036      	b.n	800a9e4 <USB_EPStartXfer+0x3dc>
 800a976:	bf00      	nop
 800a978:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	695a      	ldr	r2, [r3, #20]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	4413      	add	r3, r2
 800a986:	1e5a      	subs	r2, r3, #1
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a990:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99e:	691a      	ldr	r2, [r3, #16]
 800a9a0:	8afb      	ldrh	r3, [r7, #22]
 800a9a2:	04d9      	lsls	r1, r3, #19
 800a9a4:	4b39      	ldr	r3, [pc, #228]	; (800aa8c <USB_EPStartXfer+0x484>)
 800a9a6:	400b      	ands	r3, r1
 800a9a8:	69b9      	ldr	r1, [r7, #24]
 800a9aa:	0148      	lsls	r0, r1, #5
 800a9ac:	69f9      	ldr	r1, [r7, #28]
 800a9ae:	4401      	add	r1, r0
 800a9b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c4:	691a      	ldr	r2, [r3, #16]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	8af9      	ldrh	r1, [r7, #22]
 800a9cc:	fb01 f303 	mul.w	r3, r1, r3
 800a9d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9d4:	69b9      	ldr	r1, [r7, #24]
 800a9d6:	0148      	lsls	r0, r1, #5
 800a9d8:	69f9      	ldr	r1, [r7, #28]
 800a9da:	4401      	add	r1, r0
 800a9dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d10d      	bne.n	800aa06 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d009      	beq.n	800aa06 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	68d9      	ldr	r1, [r3, #12]
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	015a      	lsls	r2, r3, #5
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa02:	460a      	mov	r2, r1
 800aa04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	78db      	ldrb	r3, [r3, #3]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d128      	bne.n	800aa60 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d110      	bne.n	800aa40 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	0151      	lsls	r1, r2, #5
 800aa30:	69fa      	ldr	r2, [r7, #28]
 800aa32:	440a      	add	r2, r1
 800aa34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa3c:	6013      	str	r3, [r2, #0]
 800aa3e:	e00f      	b.n	800aa60 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	69ba      	ldr	r2, [r7, #24]
 800aa50:	0151      	lsls	r1, r2, #5
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	440a      	add	r2, r1
 800aa56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	69ba      	ldr	r2, [r7, #24]
 800aa70:	0151      	lsls	r1, r2, #5
 800aa72:	69fa      	ldr	r2, [r7, #28]
 800aa74:	440a      	add	r2, r1
 800aa76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3720      	adds	r7, #32
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	1ff80000 	.word	0x1ff80000

0800aa90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	785b      	ldrb	r3, [r3, #1]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	f040 80cd 	bne.w	800ac4c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d132      	bne.n	800ab20 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	0151      	lsls	r1, r2, #5
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	440a      	add	r2, r1
 800aad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aad8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aadc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	0151      	lsls	r1, r2, #5
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	440a      	add	r2, r1
 800aaf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aafc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	0151      	lsls	r1, r2, #5
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	440a      	add	r2, r1
 800ab14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab18:	0cdb      	lsrs	r3, r3, #19
 800ab1a:	04db      	lsls	r3, r3, #19
 800ab1c:	6113      	str	r3, [r2, #16]
 800ab1e:	e04e      	b.n	800abbe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	0151      	lsls	r1, r2, #5
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	440a      	add	r2, r1
 800ab36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab3a:	0cdb      	lsrs	r3, r3, #19
 800ab3c:	04db      	lsls	r3, r3, #19
 800ab3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	0151      	lsls	r1, r2, #5
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	440a      	add	r2, r1
 800ab56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab62:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	695a      	ldr	r2, [r3, #20]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d903      	bls.n	800ab78 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	689a      	ldr	r2, [r3, #8]
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba4:	691a      	ldr	r2, [r3, #16]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abae:	6939      	ldr	r1, [r7, #16]
 800abb0:	0148      	lsls	r0, r1, #5
 800abb2:	6979      	ldr	r1, [r7, #20]
 800abb4:	4401      	add	r1, r0
 800abb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800abba:	4313      	orrs	r3, r2
 800abbc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d11e      	bne.n	800ac02 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d009      	beq.n	800abe0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd8:	461a      	mov	r2, r3
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	0151      	lsls	r1, r2, #5
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	440a      	add	r2, r1
 800abf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	e092      	b.n	800ad28 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac20:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d07e      	beq.n	800ad28 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	f003 030f 	and.w	r3, r3, #15
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac40:	6979      	ldr	r1, [r7, #20]
 800ac42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac46:	4313      	orrs	r3, r2
 800ac48:	634b      	str	r3, [r1, #52]	; 0x34
 800ac4a:	e06d      	b.n	800ad28 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	0151      	lsls	r1, r2, #5
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	440a      	add	r2, r1
 800ac62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac66:	0cdb      	lsrs	r3, r3, #19
 800ac68:	04db      	lsls	r3, r3, #19
 800ac6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	0151      	lsls	r1, r2, #5
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	440a      	add	r2, r1
 800ac82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac8e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d003      	beq.n	800aca0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	689a      	ldr	r2, [r3, #8]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	0151      	lsls	r1, r2, #5
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	440a      	add	r2, r1
 800acb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	015a      	lsls	r2, r3, #5
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	4413      	add	r3, r2
 800acc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800accc:	691a      	ldr	r2, [r3, #16]
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acd6:	6939      	ldr	r1, [r7, #16]
 800acd8:	0148      	lsls	r0, r1, #5
 800acda:	6979      	ldr	r1, [r7, #20]
 800acdc:	4401      	add	r1, r0
 800acde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ace2:	4313      	orrs	r3, r2
 800ace4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d10d      	bne.n	800ad08 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d009      	beq.n	800ad08 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	68d9      	ldr	r1, [r3, #12]
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad04:	460a      	mov	r2, r1
 800ad06:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	0151      	lsls	r1, r2, #5
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	440a      	add	r2, r1
 800ad1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	371c      	adds	r7, #28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b089      	sub	sp, #36	; 0x24
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	4611      	mov	r1, r2
 800ad42:	461a      	mov	r2, r3
 800ad44:	460b      	mov	r3, r1
 800ad46:	71fb      	strb	r3, [r7, #7]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ad54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d11a      	bne.n	800ad92 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ad5c:	88bb      	ldrh	r3, [r7, #4]
 800ad5e:	3303      	adds	r3, #3
 800ad60:	089b      	lsrs	r3, r3, #2
 800ad62:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ad64:	2300      	movs	r3, #0
 800ad66:	61bb      	str	r3, [r7, #24]
 800ad68:	e00f      	b.n	800ad8a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ad6a:	79fb      	ldrb	r3, [r7, #7]
 800ad6c:	031a      	lsls	r2, r3, #12
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad76:	461a      	mov	r2, r3
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	3304      	adds	r3, #4
 800ad82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	3301      	adds	r3, #1
 800ad88:	61bb      	str	r3, [r7, #24]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d3eb      	bcc.n	800ad6a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3724      	adds	r7, #36	; 0x24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b089      	sub	sp, #36	; 0x24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	4613      	mov	r3, r2
 800adac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800adb6:	88fb      	ldrh	r3, [r7, #6]
 800adb8:	3303      	adds	r3, #3
 800adba:	089b      	lsrs	r3, r3, #2
 800adbc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800adbe:	2300      	movs	r3, #0
 800adc0:	61bb      	str	r3, [r7, #24]
 800adc2:	e00b      	b.n	800addc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	601a      	str	r2, [r3, #0]
    pDest++;
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	3304      	adds	r3, #4
 800add4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	3301      	adds	r3, #1
 800adda:	61bb      	str	r3, [r7, #24]
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d3ef      	bcc.n	800adc4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ade4:	69fb      	ldr	r3, [r7, #28]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3724      	adds	r7, #36	; 0x24
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b085      	sub	sp, #20
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	785b      	ldrb	r3, [r3, #1]
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d12c      	bne.n	800ae68 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	db12      	blt.n	800ae46 <USB_EPSetStall+0x54>
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00f      	beq.n	800ae46 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	0151      	lsls	r1, r2, #5
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	440a      	add	r2, r1
 800ae3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae44:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	0151      	lsls	r1, r2, #5
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	440a      	add	r2, r1
 800ae5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae64:	6013      	str	r3, [r2, #0]
 800ae66:	e02b      	b.n	800aec0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	db12      	blt.n	800aea0 <USB_EPSetStall+0xae>
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00f      	beq.n	800aea0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	015a      	lsls	r2, r3, #5
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	0151      	lsls	r1, r2, #5
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	440a      	add	r2, r1
 800ae96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae9e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	0151      	lsls	r1, r2, #5
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	440a      	add	r2, r1
 800aeb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aece:	b480      	push	{r7}
 800aed0:	b085      	sub	sp, #20
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d128      	bne.n	800af3c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	0151      	lsls	r1, r2, #5
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	440a      	add	r2, r1
 800af00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	78db      	ldrb	r3, [r3, #3]
 800af0e:	2b03      	cmp	r3, #3
 800af10:	d003      	beq.n	800af1a <USB_EPClearStall+0x4c>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	78db      	ldrb	r3, [r3, #3]
 800af16:	2b02      	cmp	r3, #2
 800af18:	d138      	bne.n	800af8c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	4413      	add	r3, r2
 800af22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	0151      	lsls	r1, r2, #5
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	440a      	add	r2, r1
 800af30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af38:	6013      	str	r3, [r2, #0]
 800af3a:	e027      	b.n	800af8c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	0151      	lsls	r1, r2, #5
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	440a      	add	r2, r1
 800af52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	78db      	ldrb	r3, [r3, #3]
 800af60:	2b03      	cmp	r3, #3
 800af62:	d003      	beq.n	800af6c <USB_EPClearStall+0x9e>
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	78db      	ldrb	r3, [r3, #3]
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d10f      	bne.n	800af8c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	015a      	lsls	r2, r3, #5
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4413      	add	r3, r2
 800af74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	0151      	lsls	r1, r2, #5
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	440a      	add	r2, r1
 800af82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af8a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b085      	sub	sp, #20
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	460b      	mov	r3, r1
 800afa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afb8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800afbc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	78fb      	ldrb	r3, [r7, #3]
 800afc8:	011b      	lsls	r3, r3, #4
 800afca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800afce:	68f9      	ldr	r1, [r7, #12]
 800afd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afd4:	4313      	orrs	r3, r2
 800afd6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b085      	sub	sp, #20
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b000:	f023 0303 	bic.w	r3, r3, #3
 800b004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b014:	f023 0302 	bic.w	r3, r3, #2
 800b018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b042:	f023 0303 	bic.w	r3, r3, #3
 800b046:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b056:	f043 0302 	orr.w	r3, r3, #2
 800b05a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b085      	sub	sp, #20
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	4013      	ands	r3, r2
 800b080:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b082:	68fb      	ldr	r3, [r7, #12]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a2:	699b      	ldr	r3, [r3, #24]
 800b0a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	0c1b      	lsrs	r3, r3, #16
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	b29b      	uxth	r3, r3
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3714      	adds	r7, #20
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b108:	78fb      	ldrb	r3, [r7, #3]
 800b10a:	015a      	lsls	r2, r3, #5
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4413      	add	r3, r2
 800b110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	4013      	ands	r3, r2
 800b124:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b126:	68bb      	ldr	r3, [r7, #8]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b156:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b158:	78fb      	ldrb	r3, [r7, #3]
 800b15a:	f003 030f 	and.w	r3, r3, #15
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	fa22 f303 	lsr.w	r3, r2, r3
 800b164:	01db      	lsls	r3, r3, #7
 800b166:	b2db      	uxtb	r3, r3
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b16e:	78fb      	ldrb	r3, [r7, #3]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	4013      	ands	r3, r2
 800b180:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b182:	68bb      	ldr	r3, [r7, #8]
}
 800b184:	4618      	mov	r0, r3
 800b186:	371c      	adds	r7, #28
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	f003 0301 	and.w	r3, r3, #1
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b1ca:	f023 0307 	bic.w	r3, r3, #7
 800b1ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
	...

0800b1f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	333c      	adds	r3, #60	; 0x3c
 800b20a:	3304      	adds	r3, #4
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	4a26      	ldr	r2, [pc, #152]	; (800b2ac <USB_EP0_OutStart+0xb8>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d90a      	bls.n	800b22e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b228:	d101      	bne.n	800b22e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	e037      	b.n	800b29e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b234:	461a      	mov	r2, r3
 800b236:	2300      	movs	r3, #0
 800b238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b24c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b25c:	f043 0318 	orr.w	r3, r3, #24
 800b260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b270:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b274:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b276:	7afb      	ldrb	r3, [r7, #11]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d10f      	bne.n	800b29c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b282:	461a      	mov	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b296:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b29a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	371c      	adds	r7, #28
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	4f54300a 	.word	0x4f54300a

0800b2b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	60fb      	str	r3, [r7, #12]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	4a13      	ldr	r2, [pc, #76]	; (800b314 <USB_CoreReset+0x64>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d901      	bls.n	800b2ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e01b      	b.n	800b306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	daf2      	bge.n	800b2bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f043 0201 	orr.w	r2, r3, #1
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	4a09      	ldr	r2, [pc, #36]	; (800b314 <USB_CoreReset+0x64>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d901      	bls.n	800b2f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e006      	b.n	800b306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	f003 0301 	and.w	r3, r3, #1
 800b300:	2b01      	cmp	r3, #1
 800b302:	d0f0      	beq.n	800b2e6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	00030d40 	.word	0x00030d40

0800b318 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b31c:	4904      	ldr	r1, [pc, #16]	; (800b330 <MX_FATFS_Init+0x18>)
 800b31e:	4805      	ldr	r0, [pc, #20]	; (800b334 <MX_FATFS_Init+0x1c>)
 800b320:	f005 fb28 	bl	8010974 <FATFS_LinkDriver>
 800b324:	4603      	mov	r3, r0
 800b326:	461a      	mov	r2, r3
 800b328:	4b03      	ldr	r3, [pc, #12]	; (800b338 <MX_FATFS_Init+0x20>)
 800b32a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b32c:	bf00      	nop
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20002a6c 	.word	0x20002a6c
 800b334:	0801235c 	.word	0x0801235c
 800b338:	20002a68 	.word	0x20002a68

0800b33c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b33c:	b480      	push	{r7}
 800b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b340:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b342:	4618      	mov	r0, r3
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b356:	f000 f879 	bl	800b44c <BSP_SD_IsDetected>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d001      	beq.n	800b364 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e012      	b.n	800b38a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b364:	480b      	ldr	r0, [pc, #44]	; (800b394 <BSP_SD_Init+0x48>)
 800b366:	f7fb fa0b 	bl	8006780 <HAL_SD_Init>
 800b36a:	4603      	mov	r3, r0
 800b36c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b36e:	79fb      	ldrb	r3, [r7, #7]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d109      	bne.n	800b388 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b374:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b378:	4806      	ldr	r0, [pc, #24]	; (800b394 <BSP_SD_Init+0x48>)
 800b37a:	f7fb fff9 	bl	8007370 <HAL_SD_ConfigWideBusOperation>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b388:	79fb      	ldrb	r3, [r7, #7]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	20002860 	.word	0x20002860

0800b398 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	68f9      	ldr	r1, [r7, #12]
 800b3b4:	4806      	ldr	r0, [pc, #24]	; (800b3d0 <BSP_SD_ReadBlocks+0x38>)
 800b3b6:	f7fb fa73 	bl	80068a0 <HAL_SD_ReadBlocks>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20002860 	.word	0x20002860

0800b3d4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af02      	add	r7, sp, #8
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	68f9      	ldr	r1, [r7, #12]
 800b3f0:	4806      	ldr	r0, [pc, #24]	; (800b40c <BSP_SD_WriteBlocks+0x38>)
 800b3f2:	f7fb fc4d 	bl	8006c90 <HAL_SD_WriteBlocks>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b400:	7dfb      	ldrb	r3, [r7, #23]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3718      	adds	r7, #24
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20002860 	.word	0x20002860

0800b410 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b414:	4805      	ldr	r0, [pc, #20]	; (800b42c <BSP_SD_GetCardState+0x1c>)
 800b416:	f7fc f827 	bl	8007468 <HAL_SD_GetCardState>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b04      	cmp	r3, #4
 800b41e:	bf14      	ite	ne
 800b420:	2301      	movne	r3, #1
 800b422:	2300      	moveq	r3, #0
 800b424:	b2db      	uxtb	r3, r3
}
 800b426:	4618      	mov	r0, r3
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	20002860 	.word	0x20002860

0800b430 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	4803      	ldr	r0, [pc, #12]	; (800b448 <BSP_SD_GetCardInfo+0x18>)
 800b43c:	f7fb ff6c 	bl	8007318 <HAL_SD_GetCardInfo>
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20002860 	.word	0x20002860

0800b44c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b452:	2301      	movs	r3, #1
 800b454:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b456:	f000 f80b 	bl	800b470 <BSP_PlatformIsDetected>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d101      	bne.n	800b464 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b460:	2300      	movs	r3, #0
 800b462:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	b2db      	uxtb	r3, r3
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b476:	2301      	movs	r3, #1
 800b478:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b47a:	2180      	movs	r1, #128	; 0x80
 800b47c:	4806      	ldr	r0, [pc, #24]	; (800b498 <BSP_PlatformIsDetected+0x28>)
 800b47e:	f7f8 fde1 	bl	8004044 <HAL_GPIO_ReadPin>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b488:	2300      	movs	r3, #0
 800b48a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b48c:	79fb      	ldrb	r3, [r7, #7]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	40021000 	.word	0x40021000

0800b49c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b4a6:	4b0b      	ldr	r3, [pc, #44]	; (800b4d4 <SD_CheckStatus+0x38>)
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b4ac:	f7ff ffb0 	bl	800b410 <BSP_SD_GetCardState>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d107      	bne.n	800b4c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b4b6:	4b07      	ldr	r3, [pc, #28]	; (800b4d4 <SD_CheckStatus+0x38>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	f023 0301 	bic.w	r3, r3, #1
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	4b04      	ldr	r3, [pc, #16]	; (800b4d4 <SD_CheckStatus+0x38>)
 800b4c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b4c6:	4b03      	ldr	r3, [pc, #12]	; (800b4d4 <SD_CheckStatus+0x38>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b2db      	uxtb	r3, r3
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	20000009 	.word	0x20000009

0800b4d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b4e2:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <SD_initialize+0x38>)
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b4e8:	f7ff ff30 	bl	800b34c <BSP_SD_Init>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d107      	bne.n	800b502 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff ffd1 	bl	800b49c <SD_CheckStatus>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	4b04      	ldr	r3, [pc, #16]	; (800b510 <SD_initialize+0x38>)
 800b500:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b502:	4b03      	ldr	r3, [pc, #12]	; (800b510 <SD_initialize+0x38>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	b2db      	uxtb	r3, r3
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	20000009 	.word	0x20000009

0800b514 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff ffbb 	bl	800b49c <SD_CheckStatus>
 800b526:	4603      	mov	r3, r0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	607a      	str	r2, [r7, #4]
 800b53a:	603b      	str	r3, [r7, #0]
 800b53c:	4603      	mov	r3, r0
 800b53e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	6879      	ldr	r1, [r7, #4]
 800b54c:	68b8      	ldr	r0, [r7, #8]
 800b54e:	f7ff ff23 	bl	800b398 <BSP_SD_ReadBlocks>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d107      	bne.n	800b568 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b558:	bf00      	nop
 800b55a:	f7ff ff59 	bl	800b410 <BSP_SD_GetCardState>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1fa      	bne.n	800b55a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b568:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b086      	sub	sp, #24
 800b576:	af00      	add	r7, sp, #0
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
 800b57c:	603b      	str	r3, [r7, #0]
 800b57e:	4603      	mov	r3, r0
 800b580:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	6879      	ldr	r1, [r7, #4]
 800b58e:	68b8      	ldr	r0, [r7, #8]
 800b590:	f7ff ff20 	bl	800b3d4 <BSP_SD_WriteBlocks>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d107      	bne.n	800b5aa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b59a:	bf00      	nop
 800b59c:	f7ff ff38 	bl	800b410 <BSP_SD_GetCardState>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1fa      	bne.n	800b59c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08c      	sub	sp, #48	; 0x30
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	603a      	str	r2, [r7, #0]
 800b5be:	71fb      	strb	r3, [r7, #7]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b5ca:	4b25      	ldr	r3, [pc, #148]	; (800b660 <SD_ioctl+0xac>)
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d001      	beq.n	800b5dc <SD_ioctl+0x28>
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e03c      	b.n	800b656 <SD_ioctl+0xa2>

  switch (cmd)
 800b5dc:	79bb      	ldrb	r3, [r7, #6]
 800b5de:	2b03      	cmp	r3, #3
 800b5e0:	d834      	bhi.n	800b64c <SD_ioctl+0x98>
 800b5e2:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <SD_ioctl+0x34>)
 800b5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e8:	0800b5f9 	.word	0x0800b5f9
 800b5ec:	0800b601 	.word	0x0800b601
 800b5f0:	0800b619 	.word	0x0800b619
 800b5f4:	0800b633 	.word	0x0800b633
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5fe:	e028      	b.n	800b652 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b600:	f107 030c 	add.w	r3, r7, #12
 800b604:	4618      	mov	r0, r3
 800b606:	f7ff ff13 	bl	800b430 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b616:	e01c      	b.n	800b652 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b618:	f107 030c 	add.w	r3, r7, #12
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff ff07 	bl	800b430 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	b29a      	uxth	r2, r3
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b630:	e00f      	b.n	800b652 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b632:	f107 030c 	add.w	r3, r7, #12
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff fefa 	bl	800b430 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63e:	0a5a      	lsrs	r2, r3, #9
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b64a:	e002      	b.n	800b652 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b64c:	2304      	movs	r3, #4
 800b64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b656:	4618      	mov	r0, r3
 800b658:	3730      	adds	r7, #48	; 0x30
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	20000009 	.word	0x20000009

0800b664 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b670:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b674:	f005 ff9c 	bl	80115b0 <malloc>
 800b678:	4603      	mov	r3, r0
 800b67a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d105      	bne.n	800b68e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b68a:	2302      	movs	r3, #2
 800b68c:	e066      	b.n	800b75c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	7c1b      	ldrb	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d119      	bne.n	800b6d2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b69e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	2181      	movs	r1, #129	; 0x81
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f005 fe09 	bl	80112be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b6b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f005 fdff 	bl	80112be <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2210      	movs	r2, #16
 800b6cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b6d0:	e016      	b.n	800b700 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b6d2:	2340      	movs	r3, #64	; 0x40
 800b6d4:	2202      	movs	r2, #2
 800b6d6:	2181      	movs	r1, #129	; 0x81
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f005 fdf0 	bl	80112be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b6e4:	2340      	movs	r3, #64	; 0x40
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f005 fde7 	bl	80112be <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2210      	movs	r2, #16
 800b6fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b700:	2308      	movs	r3, #8
 800b702:	2203      	movs	r2, #3
 800b704:	2182      	movs	r1, #130	; 0x82
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f005 fdd9 	bl	80112be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	7c1b      	ldrb	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d109      	bne.n	800b74a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b73c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b740:	2101      	movs	r1, #1
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f005 feaa 	bl	801149c <USBD_LL_PrepareReceive>
 800b748:	e007      	b.n	800b75a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b750:	2340      	movs	r3, #64	; 0x40
 800b752:	2101      	movs	r1, #1
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f005 fea1 	bl	801149c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	460b      	mov	r3, r1
 800b76e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b770:	2300      	movs	r3, #0
 800b772:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b774:	2181      	movs	r1, #129	; 0x81
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f005 fdc7 	bl	801130a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b782:	2101      	movs	r1, #1
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f005 fdc0 	bl	801130a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b792:	2182      	movs	r1, #130	; 0x82
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f005 fdb8 	bl	801130a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00e      	beq.n	800b7d2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f005 fefb 	bl	80115c0 <free>
    pdev->pClassData = NULL;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7ec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b802:	2b00      	cmp	r3, #0
 800b804:	d03a      	beq.n	800b87c <USBD_CDC_Setup+0xa0>
 800b806:	2b20      	cmp	r3, #32
 800b808:	f040 8097 	bne.w	800b93a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	88db      	ldrh	r3, [r3, #6]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d029      	beq.n	800b868 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	b25b      	sxtb	r3, r3
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	da11      	bge.n	800b842 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b82a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	88d2      	ldrh	r2, [r2, #6]
 800b830:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b832:	6939      	ldr	r1, [r7, #16]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	88db      	ldrh	r3, [r3, #6]
 800b838:	461a      	mov	r2, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f001 fa9d 	bl	800cd7a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b840:	e082      	b.n	800b948 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	785a      	ldrb	r2, [r3, #1]
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	88db      	ldrh	r3, [r3, #6]
 800b850:	b2da      	uxtb	r2, r3
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b858:	6939      	ldr	r1, [r7, #16]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	88db      	ldrh	r3, [r3, #6]
 800b85e:	461a      	mov	r2, r3
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f001 fab6 	bl	800cdd2 <USBD_CtlPrepareRx>
    break;
 800b866:	e06f      	b.n	800b948 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	7850      	ldrb	r0, [r2, #1]
 800b874:	2200      	movs	r2, #0
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	4798      	blx	r3
    break;
 800b87a:	e065      	b.n	800b948 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	785b      	ldrb	r3, [r3, #1]
 800b880:	2b0b      	cmp	r3, #11
 800b882:	d84f      	bhi.n	800b924 <USBD_CDC_Setup+0x148>
 800b884:	a201      	add	r2, pc, #4	; (adr r2, 800b88c <USBD_CDC_Setup+0xb0>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b8bd 	.word	0x0800b8bd
 800b890:	0800b933 	.word	0x0800b933
 800b894:	0800b925 	.word	0x0800b925
 800b898:	0800b925 	.word	0x0800b925
 800b89c:	0800b925 	.word	0x0800b925
 800b8a0:	0800b925 	.word	0x0800b925
 800b8a4:	0800b925 	.word	0x0800b925
 800b8a8:	0800b925 	.word	0x0800b925
 800b8ac:	0800b925 	.word	0x0800b925
 800b8b0:	0800b925 	.word	0x0800b925
 800b8b4:	0800b8e5 	.word	0x0800b8e5
 800b8b8:	0800b90d 	.word	0x0800b90d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d107      	bne.n	800b8d6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b8c6:	f107 030c 	add.w	r3, r7, #12
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f001 fa53 	bl	800cd7a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b8d4:	e030      	b.n	800b938 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 f9dd 	bl	800cc98 <USBD_CtlError>
        ret = USBD_FAIL;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b8e2:	e029      	b.n	800b938 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d107      	bne.n	800b8fe <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b8ee:	f107 030f 	add.w	r3, r7, #15
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 fa3f 	bl	800cd7a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b8fc:	e01c      	b.n	800b938 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 f9c9 	bl	800cc98 <USBD_CtlError>
        ret = USBD_FAIL;
 800b906:	2303      	movs	r3, #3
 800b908:	75fb      	strb	r3, [r7, #23]
      break;
 800b90a:	e015      	b.n	800b938 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b912:	2b03      	cmp	r3, #3
 800b914:	d00f      	beq.n	800b936 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f001 f9bd 	bl	800cc98 <USBD_CtlError>
        ret = USBD_FAIL;
 800b91e:	2303      	movs	r3, #3
 800b920:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b922:	e008      	b.n	800b936 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 f9b6 	bl	800cc98 <USBD_CtlError>
      ret = USBD_FAIL;
 800b92c:	2303      	movs	r3, #3
 800b92e:	75fb      	strb	r3, [r7, #23]
      break;
 800b930:	e002      	b.n	800b938 <USBD_CDC_Setup+0x15c>
      break;
 800b932:	bf00      	nop
 800b934:	e008      	b.n	800b948 <USBD_CDC_Setup+0x16c>
      break;
 800b936:	bf00      	nop
    }
    break;
 800b938:	e006      	b.n	800b948 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 f9ab 	bl	800cc98 <USBD_CtlError>
    ret = USBD_FAIL;
 800b942:	2303      	movs	r3, #3
 800b944:	75fb      	strb	r3, [r7, #23]
    break;
 800b946:	bf00      	nop
  }

  return (uint8_t)ret;
 800b948:	7dfb      	ldrb	r3, [r7, #23]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop

0800b954 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	e049      	b.n	800ba0a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b97c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b97e:	78fa      	ldrb	r2, [r7, #3]
 800b980:	6879      	ldr	r1, [r7, #4]
 800b982:	4613      	mov	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	440b      	add	r3, r1
 800b98c:	3318      	adds	r3, #24
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d029      	beq.n	800b9e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b994:	78fa      	ldrb	r2, [r7, #3]
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	4613      	mov	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	440b      	add	r3, r1
 800b9a2:	3318      	adds	r3, #24
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	78f9      	ldrb	r1, [r7, #3]
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	00db      	lsls	r3, r3, #3
 800b9ae:	1a5b      	subs	r3, r3, r1
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4403      	add	r3, r0
 800b9b4:	3344      	adds	r3, #68	; 0x44
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b9bc:	fb03 f301 	mul.w	r3, r3, r1
 800b9c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d110      	bne.n	800b9e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b9c6:	78fa      	ldrb	r2, [r7, #3]
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	440b      	add	r3, r1
 800b9d4:	3318      	adds	r3, #24
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b9da:	78f9      	ldrb	r1, [r7, #3]
 800b9dc:	2300      	movs	r3, #0
 800b9de:	2200      	movs	r2, #0
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f005 fd3a 	bl	801145a <USBD_LL_Transmit>
 800b9e6:	e00f      	b.n	800ba08 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ba04:	78fa      	ldrb	r2, [r7, #3]
 800ba06:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d101      	bne.n	800ba34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba30:	2303      	movs	r3, #3
 800ba32:	e015      	b.n	800ba60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ba34:	78fb      	ldrb	r3, [r7, #3]
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f005 fd50 	bl	80114de <USBD_LL_GetRxDataSize>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba76:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d015      	beq.n	800baae <USBD_CDC_EP0_RxReady+0x46>
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ba88:	2bff      	cmp	r3, #255	; 0xff
 800ba8a:	d010      	beq.n	800baae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ba9a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800baa2:	b292      	uxth	r2, r2
 800baa4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	22ff      	movs	r2, #255	; 0xff
 800baaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2243      	movs	r2, #67	; 0x43
 800bac4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bac6:	4b03      	ldr	r3, [pc, #12]	; (800bad4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	20000094 	.word	0x20000094

0800bad8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2243      	movs	r2, #67	; 0x43
 800bae4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bae6:	4b03      	ldr	r3, [pc, #12]	; (800baf4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bae8:	4618      	mov	r0, r3
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	20000050 	.word	0x20000050

0800baf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2243      	movs	r2, #67	; 0x43
 800bb04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bb06:	4b03      	ldr	r3, [pc, #12]	; (800bb14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	200000d8 	.word	0x200000d8

0800bb18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	220a      	movs	r2, #10
 800bb24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bb26:	4b03      	ldr	r3, [pc, #12]	; (800bb34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	2000000c 	.word	0x2000000c

0800bb38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e004      	b.n	800bb56 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b087      	sub	sp, #28
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	60f8      	str	r0, [r7, #12]
 800bb6a:	60b9      	str	r1, [r7, #8]
 800bb6c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb74:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	371c      	adds	r7, #28
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bba4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	e01a      	b.n	800bc14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d114      	bne.n	800bc12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bc06:	2181      	movs	r1, #129	; 0x81
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f005 fc26 	bl	801145a <USBD_LL_Transmit>

    ret = USBD_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc36:	2303      	movs	r3, #3
 800bc38:	e016      	b.n	800bc68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	7c1b      	ldrb	r3, [r3, #16]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d109      	bne.n	800bc56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f005 fc24 	bl	801149c <USBD_LL_PrepareReceive>
 800bc54:	e007      	b.n	800bc66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc5c:	2340      	movs	r3, #64	; 0x40
 800bc5e:	2101      	movs	r1, #1
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f005 fc1b 	bl	801149c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e025      	b.n	800bcd4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d003      	beq.n	800bc9a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d003      	beq.n	800bcac <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d003      	beq.n	800bcba <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	79fa      	ldrb	r2, [r7, #7]
 800bcc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f005 fa91 	bl	80111f0 <USBD_LL_Init>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e010      	b.n	800bd16 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd04:	f107 020e 	add.w	r2, r7, #14
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4798      	blx	r3
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b082      	sub	sp, #8
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f005 faae 	bl	8011288 <USBD_LL_Start>
 800bd2c:	4603      	mov	r3, r0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b083      	sub	sp, #12
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d009      	beq.n	800bd7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	78fa      	ldrb	r2, [r7, #3]
 800bd70:	4611      	mov	r1, r2
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	4798      	blx	r3
 800bd76:	4603      	mov	r3, r0
 800bd78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d007      	beq.n	800bdaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	78fa      	ldrb	r2, [r7, #3]
 800bda4:	4611      	mov	r1, r2
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	4798      	blx	r3
  }

  return USBD_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 ff2c 	bl	800cc24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bdda:	461a      	mov	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bde8:	f003 031f 	and.w	r3, r3, #31
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d00e      	beq.n	800be0e <USBD_LL_SetupStage+0x5a>
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d302      	bcc.n	800bdfa <USBD_LL_SetupStage+0x46>
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d014      	beq.n	800be22 <USBD_LL_SetupStage+0x6e>
 800bdf8:	e01d      	b.n	800be36 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fa18 	bl	800c238 <USBD_StdDevReq>
 800be08:	4603      	mov	r3, r0
 800be0a:	73fb      	strb	r3, [r7, #15]
      break;
 800be0c:	e020      	b.n	800be50 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa7c 	bl	800c314 <USBD_StdItfReq>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73fb      	strb	r3, [r7, #15]
      break;
 800be20:	e016      	b.n	800be50 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fab8 	bl	800c3a0 <USBD_StdEPReq>
 800be30:	4603      	mov	r3, r0
 800be32:	73fb      	strb	r3, [r7, #15]
      break;
 800be34:	e00c      	b.n	800be50 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be40:	b2db      	uxtb	r3, r3
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f005 fa7f 	bl	8011348 <USBD_LL_StallEP>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73fb      	strb	r3, [r7, #15]
      break;
 800be4e:	bf00      	nop
  }

  return ret;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b086      	sub	sp, #24
 800be5e:	af00      	add	r7, sp, #0
 800be60:	60f8      	str	r0, [r7, #12]
 800be62:	460b      	mov	r3, r1
 800be64:	607a      	str	r2, [r7, #4]
 800be66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800be68:	7afb      	ldrb	r3, [r7, #11]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d137      	bne.n	800bede <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800be74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be7c:	2b03      	cmp	r3, #3
 800be7e:	d14a      	bne.n	800bf16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	689a      	ldr	r2, [r3, #8]
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d913      	bls.n	800beb4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	689a      	ldr	r2, [r3, #8]
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	1ad2      	subs	r2, r2, r3
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	68da      	ldr	r2, [r3, #12]
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	4293      	cmp	r3, r2
 800bea4:	bf28      	it	cs
 800bea6:	4613      	movcs	r3, r2
 800bea8:	461a      	mov	r2, r3
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f000 ffad 	bl	800ce0c <USBD_CtlContinueRx>
 800beb2:	e030      	b.n	800bf16 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00a      	beq.n	800bed6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bec6:	2b03      	cmp	r3, #3
 800bec8:	d105      	bne.n	800bed6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f000 ffa9 	bl	800ce2e <USBD_CtlSendStatus>
 800bedc:	e01b      	b.n	800bf16 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee4:	699b      	ldr	r3, [r3, #24]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d013      	beq.n	800bf12 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d10e      	bne.n	800bf12 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	7afa      	ldrb	r2, [r7, #11]
 800befe:	4611      	mov	r1, r2
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	4798      	blx	r3
 800bf04:	4603      	mov	r3, r0
 800bf06:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bf08:	7dfb      	ldrb	r3, [r7, #23]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	e002      	b.n	800bf18 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e000      	b.n	800bf18 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	607a      	str	r2, [r7, #4]
 800bf2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bf2e:	7afb      	ldrb	r3, [r7, #11]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d16a      	bne.n	800c00a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	3314      	adds	r3, #20
 800bf38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d155      	bne.n	800bff0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d914      	bls.n	800bf7a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	689a      	ldr	r2, [r3, #8]
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	1ad2      	subs	r2, r2, r3
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	461a      	mov	r2, r3
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f000 ff22 	bl	800cdb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	2200      	movs	r2, #0
 800bf70:	2100      	movs	r1, #0
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f005 fa92 	bl	801149c <USBD_LL_PrepareReceive>
 800bf78:	e03a      	b.n	800bff0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d11c      	bne.n	800bfc0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d316      	bcc.n	800bfc0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d20f      	bcs.n	800bfc0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f000 ff03 	bl	800cdb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f005 fa6f 	bl	801149c <USBD_LL_PrepareReceive>
 800bfbe:	e017      	b.n	800bff0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00a      	beq.n	800bfe2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d105      	bne.n	800bfe2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfe2:	2180      	movs	r1, #128	; 0x80
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f005 f9af 	bl	8011348 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 ff32 	bl	800ce54 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d123      	bne.n	800c042 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f7ff fe9b 	bl	800bd36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c008:	e01b      	b.n	800c042 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d013      	beq.n	800c03e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d10e      	bne.n	800c03e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c026:	695b      	ldr	r3, [r3, #20]
 800c028:	7afa      	ldrb	r2, [r7, #11]
 800c02a:	4611      	mov	r1, r2
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	4798      	blx	r3
 800c030:	4603      	mov	r3, r0
 800c032:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c034:	7dfb      	ldrb	r3, [r7, #23]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	e002      	b.n	800c044 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c03e:	2303      	movs	r3, #3
 800c040:	e000      	b.n	800c044 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3718      	adds	r7, #24
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d009      	beq.n	800c090 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	6852      	ldr	r2, [r2, #4]
 800c088:	b2d2      	uxtb	r2, r2
 800c08a:	4611      	mov	r1, r2
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c090:	2340      	movs	r3, #64	; 0x40
 800c092:	2200      	movs	r2, #0
 800c094:	2100      	movs	r1, #0
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f005 f911 	bl	80112be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2240      	movs	r2, #64	; 0x40
 800c0a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0ac:	2340      	movs	r3, #64	; 0x40
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	2180      	movs	r1, #128	; 0x80
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f005 f903 	bl	80112be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2240      	movs	r2, #64	; 0x40
 800c0c2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b083      	sub	sp, #12
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	78fa      	ldrb	r2, [r7, #3]
 800c0de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b083      	sub	sp, #12
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2204      	movs	r2, #4
 800c106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c126:	2b04      	cmp	r3, #4
 800c128:	d105      	bne.n	800c136 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c152:	2b03      	cmp	r3, #3
 800c154:	d10b      	bne.n	800c16e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d005      	beq.n	800c16e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c192:	b480      	push	{r7}
 800c194:	b083      	sub	sp, #12
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	460b      	mov	r3, r1
 800c19c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d009      	beq.n	800c1f0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	6852      	ldr	r2, [r2, #4]
 800c1e8:	b2d2      	uxtb	r2, r2
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	4798      	blx	r3
  }

  return USBD_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	b087      	sub	sp, #28
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	3301      	adds	r3, #1
 800c210:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c218:	8a3b      	ldrh	r3, [r7, #16]
 800c21a:	021b      	lsls	r3, r3, #8
 800c21c:	b21a      	sxth	r2, r3
 800c21e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c222:	4313      	orrs	r3, r2
 800c224:	b21b      	sxth	r3, r3
 800c226:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c228:	89fb      	ldrh	r3, [r7, #14]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	371c      	adds	r7, #28
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
	...

0800c238 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c24e:	2b20      	cmp	r3, #32
 800c250:	d004      	beq.n	800c25c <USBD_StdDevReq+0x24>
 800c252:	2b40      	cmp	r3, #64	; 0x40
 800c254:	d002      	beq.n	800c25c <USBD_StdDevReq+0x24>
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00a      	beq.n	800c270 <USBD_StdDevReq+0x38>
 800c25a:	e050      	b.n	800c2fe <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	4798      	blx	r3
 800c26a:	4603      	mov	r3, r0
 800c26c:	73fb      	strb	r3, [r7, #15]
    break;
 800c26e:	e04b      	b.n	800c308 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	785b      	ldrb	r3, [r3, #1]
 800c274:	2b09      	cmp	r3, #9
 800c276:	d83c      	bhi.n	800c2f2 <USBD_StdDevReq+0xba>
 800c278:	a201      	add	r2, pc, #4	; (adr r2, 800c280 <USBD_StdDevReq+0x48>)
 800c27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27e:	bf00      	nop
 800c280:	0800c2d5 	.word	0x0800c2d5
 800c284:	0800c2e9 	.word	0x0800c2e9
 800c288:	0800c2f3 	.word	0x0800c2f3
 800c28c:	0800c2df 	.word	0x0800c2df
 800c290:	0800c2f3 	.word	0x0800c2f3
 800c294:	0800c2b3 	.word	0x0800c2b3
 800c298:	0800c2a9 	.word	0x0800c2a9
 800c29c:	0800c2f3 	.word	0x0800c2f3
 800c2a0:	0800c2cb 	.word	0x0800c2cb
 800c2a4:	0800c2bd 	.word	0x0800c2bd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f9ce 	bl	800c64c <USBD_GetDescriptor>
      break;
 800c2b0:	e024      	b.n	800c2fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fb33 	bl	800c920 <USBD_SetAddress>
      break;
 800c2ba:	e01f      	b.n	800c2fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fb70 	bl	800c9a4 <USBD_SetConfig>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c8:	e018      	b.n	800c2fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c2ca:	6839      	ldr	r1, [r7, #0]
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fc0d 	bl	800caec <USBD_GetConfig>
      break;
 800c2d2:	e013      	b.n	800c2fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fc3c 	bl	800cb54 <USBD_GetStatus>
      break;
 800c2dc:	e00e      	b.n	800c2fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fc6a 	bl	800cbba <USBD_SetFeature>
      break;
 800c2e6:	e009      	b.n	800c2fc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fc79 	bl	800cbe2 <USBD_ClrFeature>
      break;
 800c2f0:	e004      	b.n	800c2fc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fccf 	bl	800cc98 <USBD_CtlError>
      break;
 800c2fa:	bf00      	nop
    }
    break;
 800c2fc:	e004      	b.n	800c308 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fcc9 	bl	800cc98 <USBD_CtlError>
    break;
 800c306:	bf00      	nop
  }

  return ret;
 800c308:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop

0800c314 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c32a:	2b20      	cmp	r3, #32
 800c32c:	d003      	beq.n	800c336 <USBD_StdItfReq+0x22>
 800c32e:	2b40      	cmp	r3, #64	; 0x40
 800c330:	d001      	beq.n	800c336 <USBD_StdItfReq+0x22>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d12a      	bne.n	800c38c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c33c:	3b01      	subs	r3, #1
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d81d      	bhi.n	800c37e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	889b      	ldrh	r3, [r3, #4]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d813      	bhi.n	800c374 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	4798      	blx	r3
 800c35a:	4603      	mov	r3, r0
 800c35c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	88db      	ldrh	r3, [r3, #6]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d110      	bne.n	800c388 <USBD_StdItfReq+0x74>
 800c366:	7bfb      	ldrb	r3, [r7, #15]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10d      	bne.n	800c388 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fd5e 	bl	800ce2e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c372:	e009      	b.n	800c388 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fc8e 	bl	800cc98 <USBD_CtlError>
      break;
 800c37c:	e004      	b.n	800c388 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fc89 	bl	800cc98 <USBD_CtlError>
      break;
 800c386:	e000      	b.n	800c38a <USBD_StdItfReq+0x76>
      break;
 800c388:	bf00      	nop
    }
    break;
 800c38a:	e004      	b.n	800c396 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c38c:	6839      	ldr	r1, [r7, #0]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fc82 	bl	800cc98 <USBD_CtlError>
    break;
 800c394:	bf00      	nop
  }

  return ret;
 800c396:	7bfb      	ldrb	r3, [r7, #15]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	889b      	ldrh	r3, [r3, #4]
 800c3b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3bc:	2b20      	cmp	r3, #32
 800c3be:	d004      	beq.n	800c3ca <USBD_StdEPReq+0x2a>
 800c3c0:	2b40      	cmp	r3, #64	; 0x40
 800c3c2:	d002      	beq.n	800c3ca <USBD_StdEPReq+0x2a>
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00a      	beq.n	800c3de <USBD_StdEPReq+0x3e>
 800c3c8:	e135      	b.n	800c636 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	4798      	blx	r3
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]
    break;
 800c3dc:	e130      	b.n	800c640 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	785b      	ldrb	r3, [r3, #1]
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d03e      	beq.n	800c464 <USBD_StdEPReq+0xc4>
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	d002      	beq.n	800c3f0 <USBD_StdEPReq+0x50>
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d077      	beq.n	800c4de <USBD_StdEPReq+0x13e>
 800c3ee:	e11c      	b.n	800c62a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d002      	beq.n	800c400 <USBD_StdEPReq+0x60>
 800c3fa:	2b03      	cmp	r3, #3
 800c3fc:	d015      	beq.n	800c42a <USBD_StdEPReq+0x8a>
 800c3fe:	e02b      	b.n	800c458 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c400:	7bbb      	ldrb	r3, [r7, #14]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00c      	beq.n	800c420 <USBD_StdEPReq+0x80>
 800c406:	7bbb      	ldrb	r3, [r7, #14]
 800c408:	2b80      	cmp	r3, #128	; 0x80
 800c40a:	d009      	beq.n	800c420 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c40c:	7bbb      	ldrb	r3, [r7, #14]
 800c40e:	4619      	mov	r1, r3
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f004 ff99 	bl	8011348 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c416:	2180      	movs	r1, #128	; 0x80
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f004 ff95 	bl	8011348 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c41e:	e020      	b.n	800c462 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fc38 	bl	800cc98 <USBD_CtlError>
        break;
 800c428:	e01b      	b.n	800c462 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	885b      	ldrh	r3, [r3, #2]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10e      	bne.n	800c450 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c432:	7bbb      	ldrb	r3, [r7, #14]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00b      	beq.n	800c450 <USBD_StdEPReq+0xb0>
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	2b80      	cmp	r3, #128	; 0x80
 800c43c:	d008      	beq.n	800c450 <USBD_StdEPReq+0xb0>
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	88db      	ldrh	r3, [r3, #6]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d104      	bne.n	800c450 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c446:	7bbb      	ldrb	r3, [r7, #14]
 800c448:	4619      	mov	r1, r3
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f004 ff7c 	bl	8011348 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fcec 	bl	800ce2e <USBD_CtlSendStatus>

        break;
 800c456:	e004      	b.n	800c462 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fc1c 	bl	800cc98 <USBD_CtlError>
        break;
 800c460:	bf00      	nop
      }
      break;
 800c462:	e0e7      	b.n	800c634 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d002      	beq.n	800c474 <USBD_StdEPReq+0xd4>
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d015      	beq.n	800c49e <USBD_StdEPReq+0xfe>
 800c472:	e02d      	b.n	800c4d0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c474:	7bbb      	ldrb	r3, [r7, #14]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00c      	beq.n	800c494 <USBD_StdEPReq+0xf4>
 800c47a:	7bbb      	ldrb	r3, [r7, #14]
 800c47c:	2b80      	cmp	r3, #128	; 0x80
 800c47e:	d009      	beq.n	800c494 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	4619      	mov	r1, r3
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f004 ff5f 	bl	8011348 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c48a:	2180      	movs	r1, #128	; 0x80
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f004 ff5b 	bl	8011348 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c492:	e023      	b.n	800c4dc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fbfe 	bl	800cc98 <USBD_CtlError>
        break;
 800c49c:	e01e      	b.n	800c4dc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	885b      	ldrh	r3, [r3, #2]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d119      	bne.n	800c4da <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
 800c4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d004      	beq.n	800c4ba <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c4b0:	7bbb      	ldrb	r3, [r7, #14]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f004 ff66 	bl	8011386 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fcb7 	bl	800ce2e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	4798      	blx	r3
        }
        break;
 800c4ce:	e004      	b.n	800c4da <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fbe0 	bl	800cc98 <USBD_CtlError>
        break;
 800c4d8:	e000      	b.n	800c4dc <USBD_StdEPReq+0x13c>
        break;
 800c4da:	bf00      	nop
      }
      break;
 800c4dc:	e0aa      	b.n	800c634 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d002      	beq.n	800c4ee <USBD_StdEPReq+0x14e>
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d032      	beq.n	800c552 <USBD_StdEPReq+0x1b2>
 800c4ec:	e097      	b.n	800c61e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d007      	beq.n	800c504 <USBD_StdEPReq+0x164>
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
 800c4f6:	2b80      	cmp	r3, #128	; 0x80
 800c4f8:	d004      	beq.n	800c504 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fbcb 	bl	800cc98 <USBD_CtlError>
          break;
 800c502:	e091      	b.n	800c628 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	da0b      	bge.n	800c524 <USBD_StdEPReq+0x184>
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c512:	4613      	mov	r3, r2
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4413      	add	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	3310      	adds	r3, #16
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	4413      	add	r3, r2
 800c520:	3304      	adds	r3, #4
 800c522:	e00b      	b.n	800c53c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c524:	7bbb      	ldrb	r3, [r7, #14]
 800c526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c52a:	4613      	mov	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4413      	add	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	4413      	add	r3, r2
 800c53a:	3304      	adds	r3, #4
 800c53c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2200      	movs	r2, #0
 800c542:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2202      	movs	r2, #2
 800c548:	4619      	mov	r1, r3
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fc15 	bl	800cd7a <USBD_CtlSendData>
        break;
 800c550:	e06a      	b.n	800c628 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c556:	2b00      	cmp	r3, #0
 800c558:	da11      	bge.n	800c57e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	f003 020f 	and.w	r2, r3, #15
 800c560:	6879      	ldr	r1, [r7, #4]
 800c562:	4613      	mov	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	440b      	add	r3, r1
 800c56c:	3324      	adds	r3, #36	; 0x24
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d117      	bne.n	800c5a4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fb8e 	bl	800cc98 <USBD_CtlError>
            break;
 800c57c:	e054      	b.n	800c628 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c57e:	7bbb      	ldrb	r3, [r7, #14]
 800c580:	f003 020f 	and.w	r2, r3, #15
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	4613      	mov	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	440b      	add	r3, r1
 800c590:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d104      	bne.n	800c5a4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fb7b 	bl	800cc98 <USBD_CtlError>
            break;
 800c5a2:	e041      	b.n	800c628 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	da0b      	bge.n	800c5c4 <USBD_StdEPReq+0x224>
 800c5ac:	7bbb      	ldrb	r3, [r7, #14]
 800c5ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	4413      	add	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	3310      	adds	r3, #16
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	4413      	add	r3, r2
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	e00b      	b.n	800c5dc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c5c4:	7bbb      	ldrb	r3, [r7, #14]
 800c5c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	4413      	add	r3, r2
 800c5da:	3304      	adds	r3, #4
 800c5dc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c5de:	7bbb      	ldrb	r3, [r7, #14]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <USBD_StdEPReq+0x24a>
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
 800c5e6:	2b80      	cmp	r3, #128	; 0x80
 800c5e8:	d103      	bne.n	800c5f2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	e00e      	b.n	800c610 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c5f2:	7bbb      	ldrb	r3, [r7, #14]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f004 fee4 	bl	80113c4 <USBD_LL_IsStallEP>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d003      	beq.n	800c60a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	2201      	movs	r2, #1
 800c606:	601a      	str	r2, [r3, #0]
 800c608:	e002      	b.n	800c610 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2200      	movs	r2, #0
 800c60e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2202      	movs	r2, #2
 800c614:	4619      	mov	r1, r3
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fbaf 	bl	800cd7a <USBD_CtlSendData>
          break;
 800c61c:	e004      	b.n	800c628 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fb39 	bl	800cc98 <USBD_CtlError>
        break;
 800c626:	bf00      	nop
      }
      break;
 800c628:	e004      	b.n	800c634 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fb33 	bl	800cc98 <USBD_CtlError>
      break;
 800c632:	bf00      	nop
    }
    break;
 800c634:	e004      	b.n	800c640 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fb2d 	bl	800cc98 <USBD_CtlError>
    break;
 800c63e:	bf00      	nop
  }

  return ret;
 800c640:	7bfb      	ldrb	r3, [r7, #15]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
	...

0800c64c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c656:	2300      	movs	r3, #0
 800c658:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c65a:	2300      	movs	r3, #0
 800c65c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	885b      	ldrh	r3, [r3, #2]
 800c666:	0a1b      	lsrs	r3, r3, #8
 800c668:	b29b      	uxth	r3, r3
 800c66a:	3b01      	subs	r3, #1
 800c66c:	2b06      	cmp	r3, #6
 800c66e:	f200 8128 	bhi.w	800c8c2 <USBD_GetDescriptor+0x276>
 800c672:	a201      	add	r2, pc, #4	; (adr r2, 800c678 <USBD_GetDescriptor+0x2c>)
 800c674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c678:	0800c695 	.word	0x0800c695
 800c67c:	0800c6ad 	.word	0x0800c6ad
 800c680:	0800c6ed 	.word	0x0800c6ed
 800c684:	0800c8c3 	.word	0x0800c8c3
 800c688:	0800c8c3 	.word	0x0800c8c3
 800c68c:	0800c863 	.word	0x0800c863
 800c690:	0800c88f 	.word	0x0800c88f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	7c12      	ldrb	r2, [r2, #16]
 800c6a0:	f107 0108 	add.w	r1, r7, #8
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	4798      	blx	r3
 800c6a8:	60f8      	str	r0, [r7, #12]
    break;
 800c6aa:	e112      	b.n	800c8d2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	7c1b      	ldrb	r3, [r3, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10d      	bne.n	800c6d0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6bc:	f107 0208 	add.w	r2, r7, #8
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	4798      	blx	r3
 800c6c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c6ce:	e100      	b.n	800c8d2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d8:	f107 0208 	add.w	r2, r7, #8
 800c6dc:	4610      	mov	r0, r2
 800c6de:	4798      	blx	r3
 800c6e0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	701a      	strb	r2, [r3, #0]
    break;
 800c6ea:	e0f2      	b.n	800c8d2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	885b      	ldrh	r3, [r3, #2]
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	2b05      	cmp	r3, #5
 800c6f4:	f200 80ac 	bhi.w	800c850 <USBD_GetDescriptor+0x204>
 800c6f8:	a201      	add	r2, pc, #4	; (adr r2, 800c700 <USBD_GetDescriptor+0xb4>)
 800c6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fe:	bf00      	nop
 800c700:	0800c719 	.word	0x0800c719
 800c704:	0800c74d 	.word	0x0800c74d
 800c708:	0800c781 	.word	0x0800c781
 800c70c:	0800c7b5 	.word	0x0800c7b5
 800c710:	0800c7e9 	.word	0x0800c7e9
 800c714:	0800c81d 	.word	0x0800c81d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	7c12      	ldrb	r2, [r2, #16]
 800c730:	f107 0108 	add.w	r1, r7, #8
 800c734:	4610      	mov	r0, r2
 800c736:	4798      	blx	r3
 800c738:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c73a:	e091      	b.n	800c860 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c73c:	6839      	ldr	r1, [r7, #0]
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 faaa 	bl	800cc98 <USBD_CtlError>
        err++;
 800c744:	7afb      	ldrb	r3, [r7, #11]
 800c746:	3301      	adds	r3, #1
 800c748:	72fb      	strb	r3, [r7, #11]
      break;
 800c74a:	e089      	b.n	800c860 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00b      	beq.n	800c770 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	7c12      	ldrb	r2, [r2, #16]
 800c764:	f107 0108 	add.w	r1, r7, #8
 800c768:	4610      	mov	r0, r2
 800c76a:	4798      	blx	r3
 800c76c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c76e:	e077      	b.n	800c860 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fa90 	bl	800cc98 <USBD_CtlError>
        err++;
 800c778:	7afb      	ldrb	r3, [r7, #11]
 800c77a:	3301      	adds	r3, #1
 800c77c:	72fb      	strb	r3, [r7, #11]
      break;
 800c77e:	e06f      	b.n	800c860 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00b      	beq.n	800c7a4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	7c12      	ldrb	r2, [r2, #16]
 800c798:	f107 0108 	add.w	r1, r7, #8
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
 800c7a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7a2:	e05d      	b.n	800c860 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c7a4:	6839      	ldr	r1, [r7, #0]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fa76 	bl	800cc98 <USBD_CtlError>
        err++;
 800c7ac:	7afb      	ldrb	r3, [r7, #11]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	72fb      	strb	r3, [r7, #11]
      break;
 800c7b2:	e055      	b.n	800c860 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00b      	beq.n	800c7d8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	7c12      	ldrb	r2, [r2, #16]
 800c7cc:	f107 0108 	add.w	r1, r7, #8
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	4798      	blx	r3
 800c7d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7d6:	e043      	b.n	800c860 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fa5c 	bl	800cc98 <USBD_CtlError>
        err++;
 800c7e0:	7afb      	ldrb	r3, [r7, #11]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	72fb      	strb	r3, [r7, #11]
      break;
 800c7e6:	e03b      	b.n	800c860 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ee:	695b      	ldr	r3, [r3, #20]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00b      	beq.n	800c80c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7fa:	695b      	ldr	r3, [r3, #20]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	7c12      	ldrb	r2, [r2, #16]
 800c800:	f107 0108 	add.w	r1, r7, #8
 800c804:	4610      	mov	r0, r2
 800c806:	4798      	blx	r3
 800c808:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c80a:	e029      	b.n	800c860 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fa42 	bl	800cc98 <USBD_CtlError>
        err++;
 800c814:	7afb      	ldrb	r3, [r7, #11]
 800c816:	3301      	adds	r3, #1
 800c818:	72fb      	strb	r3, [r7, #11]
      break;
 800c81a:	e021      	b.n	800c860 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00b      	beq.n	800c840 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	7c12      	ldrb	r2, [r2, #16]
 800c834:	f107 0108 	add.w	r1, r7, #8
 800c838:	4610      	mov	r0, r2
 800c83a:	4798      	blx	r3
 800c83c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c83e:	e00f      	b.n	800c860 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fa28 	bl	800cc98 <USBD_CtlError>
        err++;
 800c848:	7afb      	ldrb	r3, [r7, #11]
 800c84a:	3301      	adds	r3, #1
 800c84c:	72fb      	strb	r3, [r7, #11]
      break;
 800c84e:	e007      	b.n	800c860 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fa20 	bl	800cc98 <USBD_CtlError>
      err++;
 800c858:	7afb      	ldrb	r3, [r7, #11]
 800c85a:	3301      	adds	r3, #1
 800c85c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c85e:	bf00      	nop
    }
    break;
 800c860:	e037      	b.n	800c8d2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	7c1b      	ldrb	r3, [r3, #16]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d109      	bne.n	800c87e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c872:	f107 0208 	add.w	r2, r7, #8
 800c876:	4610      	mov	r0, r2
 800c878:	4798      	blx	r3
 800c87a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c87c:	e029      	b.n	800c8d2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 fa09 	bl	800cc98 <USBD_CtlError>
      err++;
 800c886:	7afb      	ldrb	r3, [r7, #11]
 800c888:	3301      	adds	r3, #1
 800c88a:	72fb      	strb	r3, [r7, #11]
    break;
 800c88c:	e021      	b.n	800c8d2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	7c1b      	ldrb	r3, [r3, #16]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10d      	bne.n	800c8b2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c89e:	f107 0208 	add.w	r2, r7, #8
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	4798      	blx	r3
 800c8a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	2207      	movs	r2, #7
 800c8ae:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c8b0:	e00f      	b.n	800c8d2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f9ef 	bl	800cc98 <USBD_CtlError>
      err++;
 800c8ba:	7afb      	ldrb	r3, [r7, #11]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	72fb      	strb	r3, [r7, #11]
    break;
 800c8c0:	e007      	b.n	800c8d2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f9e7 	bl	800cc98 <USBD_CtlError>
    err++;
 800c8ca:	7afb      	ldrb	r3, [r7, #11]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	72fb      	strb	r3, [r7, #11]
    break;
 800c8d0:	bf00      	nop
  }

  if (err != 0U)
 800c8d2:	7afb      	ldrb	r3, [r7, #11]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d11e      	bne.n	800c916 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	88db      	ldrh	r3, [r3, #6]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d016      	beq.n	800c90e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c8e0:	893b      	ldrh	r3, [r7, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00e      	beq.n	800c904 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	88da      	ldrh	r2, [r3, #6]
 800c8ea:	893b      	ldrh	r3, [r7, #8]
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	bf28      	it	cs
 800c8f0:	4613      	movcs	r3, r2
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c8f6:	893b      	ldrh	r3, [r7, #8]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	68f9      	ldr	r1, [r7, #12]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fa3c 	bl	800cd7a <USBD_CtlSendData>
 800c902:	e009      	b.n	800c918 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f9c6 	bl	800cc98 <USBD_CtlError>
 800c90c:	e004      	b.n	800c918 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fa8d 	bl	800ce2e <USBD_CtlSendStatus>
 800c914:	e000      	b.n	800c918 <USBD_GetDescriptor+0x2cc>
    return;
 800c916:	bf00      	nop
    }
  }
}
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop

0800c920 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	889b      	ldrh	r3, [r3, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d130      	bne.n	800c994 <USBD_SetAddress+0x74>
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	88db      	ldrh	r3, [r3, #6]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d12c      	bne.n	800c994 <USBD_SetAddress+0x74>
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	885b      	ldrh	r3, [r3, #2]
 800c93e:	2b7f      	cmp	r3, #127	; 0x7f
 800c940:	d828      	bhi.n	800c994 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	885b      	ldrh	r3, [r3, #2]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c94c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c954:	2b03      	cmp	r3, #3
 800c956:	d104      	bne.n	800c962 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 f99c 	bl	800cc98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c960:	e01c      	b.n	800c99c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	7bfa      	ldrb	r2, [r7, #15]
 800c966:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c96a:	7bfb      	ldrb	r3, [r7, #15]
 800c96c:	4619      	mov	r1, r3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f004 fd54 	bl	801141c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fa5a 	bl	800ce2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d004      	beq.n	800c98a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2202      	movs	r2, #2
 800c984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c988:	e008      	b.n	800c99c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2201      	movs	r2, #1
 800c98e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c992:	e003      	b.n	800c99c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 f97e 	bl	800cc98 <USBD_CtlError>
  }
}
 800c99c:	bf00      	nop
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	885b      	ldrh	r3, [r3, #2]
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	4b4b      	ldr	r3, [pc, #300]	; (800cae8 <USBD_SetConfig+0x144>)
 800c9ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c9bc:	4b4a      	ldr	r3, [pc, #296]	; (800cae8 <USBD_SetConfig+0x144>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d905      	bls.n	800c9d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f966 	bl	800cc98 <USBD_CtlError>
    return USBD_FAIL;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e087      	b.n	800cae0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	d002      	beq.n	800c9e0 <USBD_SetConfig+0x3c>
 800c9da:	2b03      	cmp	r3, #3
 800c9dc:	d025      	beq.n	800ca2a <USBD_SetConfig+0x86>
 800c9de:	e071      	b.n	800cac4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c9e0:	4b41      	ldr	r3, [pc, #260]	; (800cae8 <USBD_SetConfig+0x144>)
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d01c      	beq.n	800ca22 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c9e8:	4b3f      	ldr	r3, [pc, #252]	; (800cae8 <USBD_SetConfig+0x144>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9f2:	4b3d      	ldr	r3, [pc, #244]	; (800cae8 <USBD_SetConfig+0x144>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7ff f9a7 	bl	800bd4c <USBD_SetClassConfig>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d004      	beq.n	800ca12 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ca08:	6839      	ldr	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f944 	bl	800cc98 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ca10:	e065      	b.n	800cade <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fa0b 	bl	800ce2e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2203      	movs	r2, #3
 800ca1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ca20:	e05d      	b.n	800cade <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fa03 	bl	800ce2e <USBD_CtlSendStatus>
    break;
 800ca28:	e059      	b.n	800cade <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ca2a:	4b2f      	ldr	r3, [pc, #188]	; (800cae8 <USBD_SetConfig+0x144>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d112      	bne.n	800ca58 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2202      	movs	r2, #2
 800ca36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ca3a:	4b2b      	ldr	r3, [pc, #172]	; (800cae8 <USBD_SetConfig+0x144>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca44:	4b28      	ldr	r3, [pc, #160]	; (800cae8 <USBD_SetConfig+0x144>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7ff f99a 	bl	800bd84 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f9ec 	bl	800ce2e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ca56:	e042      	b.n	800cade <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ca58:	4b23      	ldr	r3, [pc, #140]	; (800cae8 <USBD_SetConfig+0x144>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d02a      	beq.n	800cabc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff f988 	bl	800bd84 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ca74:	4b1c      	ldr	r3, [pc, #112]	; (800cae8 <USBD_SetConfig+0x144>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	461a      	mov	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca7e:	4b1a      	ldr	r3, [pc, #104]	; (800cae8 <USBD_SetConfig+0x144>)
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	4619      	mov	r1, r3
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7ff f961 	bl	800bd4c <USBD_SetClassConfig>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00f      	beq.n	800cab4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ca94:	6839      	ldr	r1, [r7, #0]
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f8fe 	bl	800cc98 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff f96d 	bl	800bd84 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2202      	movs	r2, #2
 800caae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cab2:	e014      	b.n	800cade <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 f9ba 	bl	800ce2e <USBD_CtlSendStatus>
    break;
 800caba:	e010      	b.n	800cade <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 f9b6 	bl	800ce2e <USBD_CtlSendStatus>
    break;
 800cac2:	e00c      	b.n	800cade <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cac4:	6839      	ldr	r1, [r7, #0]
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 f8e6 	bl	800cc98 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cacc:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <USBD_SetConfig+0x144>)
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	4619      	mov	r1, r3
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7ff f956 	bl	800bd84 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cad8:	2303      	movs	r3, #3
 800cada:	73fb      	strb	r3, [r7, #15]
    break;
 800cadc:	bf00      	nop
  }

  return ret;
 800cade:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	20000208 	.word	0x20000208

0800caec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	88db      	ldrh	r3, [r3, #6]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d004      	beq.n	800cb08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 f8c9 	bl	800cc98 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cb06:	e021      	b.n	800cb4c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	db17      	blt.n	800cb42 <USBD_GetConfig+0x56>
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	dd02      	ble.n	800cb1c <USBD_GetConfig+0x30>
 800cb16:	2b03      	cmp	r3, #3
 800cb18:	d00b      	beq.n	800cb32 <USBD_GetConfig+0x46>
 800cb1a:	e012      	b.n	800cb42 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	3308      	adds	r3, #8
 800cb26:	2201      	movs	r2, #1
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f925 	bl	800cd7a <USBD_CtlSendData>
      break;
 800cb30:	e00c      	b.n	800cb4c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	3304      	adds	r3, #4
 800cb36:	2201      	movs	r2, #1
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f91d 	bl	800cd7a <USBD_CtlSendData>
      break;
 800cb40:	e004      	b.n	800cb4c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800cb42:	6839      	ldr	r1, [r7, #0]
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 f8a7 	bl	800cc98 <USBD_CtlError>
      break;
 800cb4a:	bf00      	nop
}
 800cb4c:	bf00      	nop
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb64:	3b01      	subs	r3, #1
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d81e      	bhi.n	800cba8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	88db      	ldrh	r3, [r3, #6]
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d004      	beq.n	800cb7c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 f88f 	bl	800cc98 <USBD_CtlError>
      break;
 800cb7a:	e01a      	b.n	800cbb2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d005      	beq.n	800cb98 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	f043 0202 	orr.w	r2, r3, #2
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	330c      	adds	r3, #12
 800cb9c:	2202      	movs	r2, #2
 800cb9e:	4619      	mov	r1, r3
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f8ea 	bl	800cd7a <USBD_CtlSendData>
    break;
 800cba6:	e004      	b.n	800cbb2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cba8:	6839      	ldr	r1, [r7, #0]
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f874 	bl	800cc98 <USBD_CtlError>
    break;
 800cbb0:	bf00      	nop
  }
}
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b082      	sub	sp, #8
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
 800cbc2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	885b      	ldrh	r3, [r3, #2]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d106      	bne.n	800cbda <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f92a 	bl	800ce2e <USBD_CtlSendStatus>
  }
}
 800cbda:	bf00      	nop
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
 800cbea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d80b      	bhi.n	800cc10 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	885b      	ldrh	r3, [r3, #2]
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d10c      	bne.n	800cc1a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f910 	bl	800ce2e <USBD_CtlSendStatus>
      }
      break;
 800cc0e:	e004      	b.n	800cc1a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cc10:	6839      	ldr	r1, [r7, #0]
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 f840 	bl	800cc98 <USBD_CtlError>
      break;
 800cc18:	e000      	b.n	800cc1c <USBD_ClrFeature+0x3a>
      break;
 800cc1a:	bf00      	nop
  }
}
 800cc1c:	bf00      	nop
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	781a      	ldrb	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	781a      	ldrb	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f7ff fad3 	bl	800c1fa <SWAPBYTE>
 800cc54:	4603      	mov	r3, r0
 800cc56:	461a      	mov	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3301      	adds	r3, #1
 800cc66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f7ff fac6 	bl	800c1fa <SWAPBYTE>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	461a      	mov	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f7ff fab9 	bl	800c1fa <SWAPBYTE>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	80da      	strh	r2, [r3, #6]
}
 800cc90:	bf00      	nop
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cca2:	2180      	movs	r1, #128	; 0x80
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f004 fb4f 	bl	8011348 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ccaa:	2100      	movs	r1, #0
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f004 fb4b 	bl	8011348 <USBD_LL_StallEP>
}
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b086      	sub	sp, #24
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	60b9      	str	r1, [r7, #8]
 800ccc4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d036      	beq.n	800cd3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ccd4:	6938      	ldr	r0, [r7, #16]
 800ccd6:	f000 f836 	bl	800cd46 <USBD_GetLen>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	3301      	adds	r3, #1
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	4413      	add	r3, r2
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	7812      	ldrb	r2, [r2, #0]
 800ccf2:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ccfa:	7dfb      	ldrb	r3, [r7, #23]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	4413      	add	r3, r2
 800cd00:	2203      	movs	r2, #3
 800cd02:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd04:	7dfb      	ldrb	r3, [r7, #23]
 800cd06:	3301      	adds	r3, #1
 800cd08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd0a:	e013      	b.n	800cd34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	4413      	add	r3, r2
 800cd12:	693a      	ldr	r2, [r7, #16]
 800cd14:	7812      	ldrb	r2, [r2, #0]
 800cd16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	613b      	str	r3, [r7, #16]
    idx++;
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
 800cd20:	3301      	adds	r3, #1
 800cd22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cd24:	7dfb      	ldrb	r3, [r7, #23]
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	4413      	add	r3, r2
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	701a      	strb	r2, [r3, #0]
    idx++;
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	3301      	adds	r3, #1
 800cd32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1e7      	bne.n	800cd0c <USBD_GetString+0x52>
 800cd3c:	e000      	b.n	800cd40 <USBD_GetString+0x86>
    return;
 800cd3e:	bf00      	nop
  }
}
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd46:	b480      	push	{r7}
 800cd48:	b085      	sub	sp, #20
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd56:	e005      	b.n	800cd64 <USBD_GetLen+0x1e>
  {
    len++;
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	3301      	adds	r3, #1
 800cd62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1f5      	bne.n	800cd58 <USBD_GetLen+0x12>
  }

  return len;
 800cd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3714      	adds	r7, #20
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b084      	sub	sp, #16
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	60b9      	str	r1, [r7, #8]
 800cd84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2202      	movs	r2, #2
 800cd8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	2100      	movs	r1, #0
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f004 fb5a 	bl	801145a <USBD_LL_Transmit>

  return USBD_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f004 fb49 	bl	801145a <USBD_LL_Transmit>

  return USBD_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b084      	sub	sp, #16
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	60f8      	str	r0, [r7, #12]
 800cdda:	60b9      	str	r1, [r7, #8]
 800cddc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2203      	movs	r2, #3
 800cde2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f004 fb4d 	bl	801149c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	68ba      	ldr	r2, [r7, #8]
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f004 fb3c 	bl	801149c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b082      	sub	sp, #8
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2204      	movs	r2, #4
 800ce3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce3e:	2300      	movs	r3, #0
 800ce40:	2200      	movs	r2, #0
 800ce42:	2100      	movs	r1, #0
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f004 fb08 	bl	801145a <USBD_LL_Transmit>

  return USBD_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2205      	movs	r2, #5
 800ce60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce64:	2300      	movs	r3, #0
 800ce66:	2200      	movs	r2, #0
 800ce68:	2100      	movs	r1, #0
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f004 fb16 	bl	801149c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ce86:	79fb      	ldrb	r3, [r7, #7]
 800ce88:	4a08      	ldr	r2, [pc, #32]	; (800ceac <disk_status+0x30>)
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	4413      	add	r3, r2
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	79fa      	ldrb	r2, [r7, #7]
 800ce94:	4905      	ldr	r1, [pc, #20]	; (800ceac <disk_status+0x30>)
 800ce96:	440a      	add	r2, r1
 800ce98:	7a12      	ldrb	r2, [r2, #8]
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	4798      	blx	r3
 800ce9e:	4603      	mov	r3, r0
 800cea0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	20000434 	.word	0x20000434

0800ceb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ceba:	2300      	movs	r3, #0
 800cebc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	4a0d      	ldr	r2, [pc, #52]	; (800cef8 <disk_initialize+0x48>)
 800cec2:	5cd3      	ldrb	r3, [r2, r3]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d111      	bne.n	800ceec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cec8:	79fb      	ldrb	r3, [r7, #7]
 800ceca:	4a0b      	ldr	r2, [pc, #44]	; (800cef8 <disk_initialize+0x48>)
 800cecc:	2101      	movs	r1, #1
 800cece:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	4a09      	ldr	r2, [pc, #36]	; (800cef8 <disk_initialize+0x48>)
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	79fa      	ldrb	r2, [r7, #7]
 800cede:	4906      	ldr	r1, [pc, #24]	; (800cef8 <disk_initialize+0x48>)
 800cee0:	440a      	add	r2, r1
 800cee2:	7a12      	ldrb	r2, [r2, #8]
 800cee4:	4610      	mov	r0, r2
 800cee6:	4798      	blx	r3
 800cee8:	4603      	mov	r3, r0
 800ceea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20000434 	.word	0x20000434

0800cefc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cefc:	b590      	push	{r4, r7, lr}
 800cefe:	b087      	sub	sp, #28
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60b9      	str	r1, [r7, #8]
 800cf04:	607a      	str	r2, [r7, #4]
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	4603      	mov	r3, r0
 800cf0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cf0c:	7bfb      	ldrb	r3, [r7, #15]
 800cf0e:	4a0a      	ldr	r2, [pc, #40]	; (800cf38 <disk_read+0x3c>)
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	4413      	add	r3, r2
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	689c      	ldr	r4, [r3, #8]
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
 800cf1a:	4a07      	ldr	r2, [pc, #28]	; (800cf38 <disk_read+0x3c>)
 800cf1c:	4413      	add	r3, r2
 800cf1e:	7a18      	ldrb	r0, [r3, #8]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	68b9      	ldr	r1, [r7, #8]
 800cf26:	47a0      	blx	r4
 800cf28:	4603      	mov	r3, r0
 800cf2a:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	371c      	adds	r7, #28
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd90      	pop	{r4, r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20000434 	.word	0x20000434

0800cf3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cf3c:	b590      	push	{r4, r7, lr}
 800cf3e:	b087      	sub	sp, #28
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60b9      	str	r1, [r7, #8]
 800cf44:	607a      	str	r2, [r7, #4]
 800cf46:	603b      	str	r3, [r7, #0]
 800cf48:	4603      	mov	r3, r0
 800cf4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
 800cf4e:	4a0a      	ldr	r2, [pc, #40]	; (800cf78 <disk_write+0x3c>)
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	68dc      	ldr	r4, [r3, #12]
 800cf58:	7bfb      	ldrb	r3, [r7, #15]
 800cf5a:	4a07      	ldr	r2, [pc, #28]	; (800cf78 <disk_write+0x3c>)
 800cf5c:	4413      	add	r3, r2
 800cf5e:	7a18      	ldrb	r0, [r3, #8]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	68b9      	ldr	r1, [r7, #8]
 800cf66:	47a0      	blx	r4
 800cf68:	4603      	mov	r3, r0
 800cf6a:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	371c      	adds	r7, #28
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd90      	pop	{r4, r7, pc}
 800cf76:	bf00      	nop
 800cf78:	20000434 	.word	0x20000434

0800cf7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	4603      	mov	r3, r0
 800cf84:	603a      	str	r2, [r7, #0]
 800cf86:	71fb      	strb	r3, [r7, #7]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cf8c:	79fb      	ldrb	r3, [r7, #7]
 800cf8e:	4a09      	ldr	r2, [pc, #36]	; (800cfb4 <disk_ioctl+0x38>)
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	4413      	add	r3, r2
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	691b      	ldr	r3, [r3, #16]
 800cf98:	79fa      	ldrb	r2, [r7, #7]
 800cf9a:	4906      	ldr	r1, [pc, #24]	; (800cfb4 <disk_ioctl+0x38>)
 800cf9c:	440a      	add	r2, r1
 800cf9e:	7a10      	ldrb	r0, [r2, #8]
 800cfa0:	79b9      	ldrb	r1, [r7, #6]
 800cfa2:	683a      	ldr	r2, [r7, #0]
 800cfa4:	4798      	blx	r3
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	73fb      	strb	r3, [r7, #15]
  return res;
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	20000434 	.word	0x20000434

0800cfb8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cfc8:	89fb      	ldrh	r3, [r7, #14]
 800cfca:	021b      	lsls	r3, r3, #8
 800cfcc:	b21a      	sxth	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	b21b      	sxth	r3, r3
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	b21b      	sxth	r3, r3
 800cfd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cfda:	89fb      	ldrh	r3, [r7, #14]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3714      	adds	r7, #20
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	3303      	adds	r3, #3
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	021b      	lsls	r3, r3, #8
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	3202      	adds	r2, #2
 800d000:	7812      	ldrb	r2, [r2, #0]
 800d002:	4313      	orrs	r3, r2
 800d004:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	021b      	lsls	r3, r3, #8
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	3201      	adds	r2, #1
 800d00e:	7812      	ldrb	r2, [r2, #0]
 800d010:	4313      	orrs	r3, r2
 800d012:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	021b      	lsls	r3, r3, #8
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	7812      	ldrb	r2, [r2, #0]
 800d01c:	4313      	orrs	r3, r2
 800d01e:	60fb      	str	r3, [r7, #12]
	return rv;
 800d020:	68fb      	ldr	r3, [r7, #12]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d02e:	b480      	push	{r7}
 800d030:	b083      	sub	sp, #12
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	460b      	mov	r3, r1
 800d038:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	1c5a      	adds	r2, r3, #1
 800d03e:	607a      	str	r2, [r7, #4]
 800d040:	887a      	ldrh	r2, [r7, #2]
 800d042:	b2d2      	uxtb	r2, r2
 800d044:	701a      	strb	r2, [r3, #0]
 800d046:	887b      	ldrh	r3, [r7, #2]
 800d048:	0a1b      	lsrs	r3, r3, #8
 800d04a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	1c5a      	adds	r2, r3, #1
 800d050:	607a      	str	r2, [r7, #4]
 800d052:	887a      	ldrh	r2, [r7, #2]
 800d054:	b2d2      	uxtb	r2, r2
 800d056:	701a      	strb	r2, [r3, #0]
}
 800d058:	bf00      	nop
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	1c5a      	adds	r2, r3, #1
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	b2d2      	uxtb	r2, r2
 800d078:	701a      	strb	r2, [r3, #0]
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	0a1b      	lsrs	r3, r3, #8
 800d07e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	1c5a      	adds	r2, r3, #1
 800d084:	607a      	str	r2, [r7, #4]
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	b2d2      	uxtb	r2, r2
 800d08a:	701a      	strb	r2, [r3, #0]
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	0a1b      	lsrs	r3, r3, #8
 800d090:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	1c5a      	adds	r2, r3, #1
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	b2d2      	uxtb	r2, r2
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	0a1b      	lsrs	r3, r3, #8
 800d0a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	607a      	str	r2, [r7, #4]
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	b2d2      	uxtb	r2, r2
 800d0ae:	701a      	strb	r2, [r3, #0]
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d0bc:	b480      	push	{r7}
 800d0be:	b087      	sub	sp, #28
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00d      	beq.n	800d0f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d0d6:	693a      	ldr	r2, [r7, #16]
 800d0d8:	1c53      	adds	r3, r2, #1
 800d0da:	613b      	str	r3, [r7, #16]
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	1c59      	adds	r1, r3, #1
 800d0e0:	6179      	str	r1, [r7, #20]
 800d0e2:	7812      	ldrb	r2, [r2, #0]
 800d0e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	607b      	str	r3, [r7, #4]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1f1      	bne.n	800d0d6 <mem_cpy+0x1a>
	}
}
 800d0f2:	bf00      	nop
 800d0f4:	371c      	adds	r7, #28
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d0fe:	b480      	push	{r7}
 800d100:	b087      	sub	sp, #28
 800d102:	af00      	add	r7, sp, #0
 800d104:	60f8      	str	r0, [r7, #12]
 800d106:	60b9      	str	r1, [r7, #8]
 800d108:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	1c5a      	adds	r2, r3, #1
 800d112:	617a      	str	r2, [r7, #20]
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	b2d2      	uxtb	r2, r2
 800d118:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3b01      	subs	r3, #1
 800d11e:	607b      	str	r3, [r7, #4]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1f3      	bne.n	800d10e <mem_set+0x10>
}
 800d126:	bf00      	nop
 800d128:	371c      	adds	r7, #28
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d132:	b480      	push	{r7}
 800d134:	b089      	sub	sp, #36	; 0x24
 800d136:	af00      	add	r7, sp, #0
 800d138:	60f8      	str	r0, [r7, #12]
 800d13a:	60b9      	str	r1, [r7, #8]
 800d13c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	61fb      	str	r3, [r7, #28]
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	1c5a      	adds	r2, r3, #1
 800d14e:	61fa      	str	r2, [r7, #28]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	4619      	mov	r1, r3
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	1c5a      	adds	r2, r3, #1
 800d158:	61ba      	str	r2, [r7, #24]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	1acb      	subs	r3, r1, r3
 800d15e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	3b01      	subs	r3, #1
 800d164:	607b      	str	r3, [r7, #4]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <mem_cmp+0x40>
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d0eb      	beq.n	800d14a <mem_cmp+0x18>

	return r;
 800d172:	697b      	ldr	r3, [r7, #20]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3724      	adds	r7, #36	; 0x24
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d18a:	e002      	b.n	800d192 <chk_chr+0x12>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3301      	adds	r3, #1
 800d190:	607b      	str	r3, [r7, #4]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d005      	beq.n	800d1a6 <chk_chr+0x26>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d1f2      	bne.n	800d18c <chk_chr+0xc>
	return *str;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	370c      	adds	r7, #12
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr
	...

0800d1b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	60bb      	str	r3, [r7, #8]
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	60fb      	str	r3, [r7, #12]
 800d1ca:	e029      	b.n	800d220 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d1cc:	4a27      	ldr	r2, [pc, #156]	; (800d26c <chk_lock+0xb4>)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	011b      	lsls	r3, r3, #4
 800d1d2:	4413      	add	r3, r2
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d01d      	beq.n	800d216 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d1da:	4a24      	ldr	r2, [pc, #144]	; (800d26c <chk_lock+0xb4>)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	011b      	lsls	r3, r3, #4
 800d1e0:	4413      	add	r3, r2
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d116      	bne.n	800d21a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d1ec:	4a1f      	ldr	r2, [pc, #124]	; (800d26c <chk_lock+0xb4>)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	011b      	lsls	r3, r3, #4
 800d1f2:	4413      	add	r3, r2
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d10c      	bne.n	800d21a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d200:	4a1a      	ldr	r2, [pc, #104]	; (800d26c <chk_lock+0xb4>)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	011b      	lsls	r3, r3, #4
 800d206:	4413      	add	r3, r2
 800d208:	3308      	adds	r3, #8
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d210:	429a      	cmp	r2, r3
 800d212:	d102      	bne.n	800d21a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d214:	e007      	b.n	800d226 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d216:	2301      	movs	r3, #1
 800d218:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	3301      	adds	r3, #1
 800d21e:	60fb      	str	r3, [r7, #12]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d9d2      	bls.n	800d1cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2b02      	cmp	r3, #2
 800d22a:	d109      	bne.n	800d240 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d102      	bne.n	800d238 <chk_lock+0x80>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d101      	bne.n	800d23c <chk_lock+0x84>
 800d238:	2300      	movs	r3, #0
 800d23a:	e010      	b.n	800d25e <chk_lock+0xa6>
 800d23c:	2312      	movs	r3, #18
 800d23e:	e00e      	b.n	800d25e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d108      	bne.n	800d258 <chk_lock+0xa0>
 800d246:	4a09      	ldr	r2, [pc, #36]	; (800d26c <chk_lock+0xb4>)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	011b      	lsls	r3, r3, #4
 800d24c:	4413      	add	r3, r2
 800d24e:	330c      	adds	r3, #12
 800d250:	881b      	ldrh	r3, [r3, #0]
 800d252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d256:	d101      	bne.n	800d25c <chk_lock+0xa4>
 800d258:	2310      	movs	r3, #16
 800d25a:	e000      	b.n	800d25e <chk_lock+0xa6>
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	20000214 	.word	0x20000214

0800d270 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d276:	2300      	movs	r3, #0
 800d278:	607b      	str	r3, [r7, #4]
 800d27a:	e002      	b.n	800d282 <enq_lock+0x12>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	3301      	adds	r3, #1
 800d280:	607b      	str	r3, [r7, #4]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b01      	cmp	r3, #1
 800d286:	d806      	bhi.n	800d296 <enq_lock+0x26>
 800d288:	4a09      	ldr	r2, [pc, #36]	; (800d2b0 <enq_lock+0x40>)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	011b      	lsls	r3, r3, #4
 800d28e:	4413      	add	r3, r2
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1f2      	bne.n	800d27c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b02      	cmp	r3, #2
 800d29a:	bf14      	ite	ne
 800d29c:	2301      	movne	r3, #1
 800d29e:	2300      	moveq	r3, #0
 800d2a0:	b2db      	uxtb	r3, r3
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	20000214 	.word	0x20000214

0800d2b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d2be:	2300      	movs	r3, #0
 800d2c0:	60fb      	str	r3, [r7, #12]
 800d2c2:	e01f      	b.n	800d304 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d2c4:	4a41      	ldr	r2, [pc, #260]	; (800d3cc <inc_lock+0x118>)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	011b      	lsls	r3, r3, #4
 800d2ca:	4413      	add	r3, r2
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d113      	bne.n	800d2fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d2d6:	4a3d      	ldr	r2, [pc, #244]	; (800d3cc <inc_lock+0x118>)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	011b      	lsls	r3, r3, #4
 800d2dc:	4413      	add	r3, r2
 800d2de:	3304      	adds	r3, #4
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d109      	bne.n	800d2fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d2ea:	4a38      	ldr	r2, [pc, #224]	; (800d3cc <inc_lock+0x118>)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	011b      	lsls	r3, r3, #4
 800d2f0:	4413      	add	r3, r2
 800d2f2:	3308      	adds	r3, #8
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d006      	beq.n	800d30c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	3301      	adds	r3, #1
 800d302:	60fb      	str	r3, [r7, #12]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d9dc      	bls.n	800d2c4 <inc_lock+0x10>
 800d30a:	e000      	b.n	800d30e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d30c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2b02      	cmp	r3, #2
 800d312:	d132      	bne.n	800d37a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d314:	2300      	movs	r3, #0
 800d316:	60fb      	str	r3, [r7, #12]
 800d318:	e002      	b.n	800d320 <inc_lock+0x6c>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3301      	adds	r3, #1
 800d31e:	60fb      	str	r3, [r7, #12]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d806      	bhi.n	800d334 <inc_lock+0x80>
 800d326:	4a29      	ldr	r2, [pc, #164]	; (800d3cc <inc_lock+0x118>)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	4413      	add	r3, r2
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1f2      	bne.n	800d31a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b02      	cmp	r3, #2
 800d338:	d101      	bne.n	800d33e <inc_lock+0x8a>
 800d33a:	2300      	movs	r3, #0
 800d33c:	e040      	b.n	800d3c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	4922      	ldr	r1, [pc, #136]	; (800d3cc <inc_lock+0x118>)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	011b      	lsls	r3, r3, #4
 800d348:	440b      	add	r3, r1
 800d34a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	491e      	ldr	r1, [pc, #120]	; (800d3cc <inc_lock+0x118>)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	011b      	lsls	r3, r3, #4
 800d356:	440b      	add	r3, r1
 800d358:	3304      	adds	r3, #4
 800d35a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	695a      	ldr	r2, [r3, #20]
 800d360:	491a      	ldr	r1, [pc, #104]	; (800d3cc <inc_lock+0x118>)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	011b      	lsls	r3, r3, #4
 800d366:	440b      	add	r3, r1
 800d368:	3308      	adds	r3, #8
 800d36a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d36c:	4a17      	ldr	r2, [pc, #92]	; (800d3cc <inc_lock+0x118>)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	011b      	lsls	r3, r3, #4
 800d372:	4413      	add	r3, r2
 800d374:	330c      	adds	r3, #12
 800d376:	2200      	movs	r2, #0
 800d378:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d009      	beq.n	800d394 <inc_lock+0xe0>
 800d380:	4a12      	ldr	r2, [pc, #72]	; (800d3cc <inc_lock+0x118>)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	011b      	lsls	r3, r3, #4
 800d386:	4413      	add	r3, r2
 800d388:	330c      	adds	r3, #12
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <inc_lock+0xe0>
 800d390:	2300      	movs	r3, #0
 800d392:	e015      	b.n	800d3c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d108      	bne.n	800d3ac <inc_lock+0xf8>
 800d39a:	4a0c      	ldr	r2, [pc, #48]	; (800d3cc <inc_lock+0x118>)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	011b      	lsls	r3, r3, #4
 800d3a0:	4413      	add	r3, r2
 800d3a2:	330c      	adds	r3, #12
 800d3a4:	881b      	ldrh	r3, [r3, #0]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	e001      	b.n	800d3b0 <inc_lock+0xfc>
 800d3ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3b0:	4906      	ldr	r1, [pc, #24]	; (800d3cc <inc_lock+0x118>)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	011b      	lsls	r3, r3, #4
 800d3b6:	440b      	add	r3, r1
 800d3b8:	330c      	adds	r3, #12
 800d3ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3301      	adds	r3, #1
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3714      	adds	r7, #20
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	20000214 	.word	0x20000214

0800d3d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	607b      	str	r3, [r7, #4]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d825      	bhi.n	800d430 <dec_lock+0x60>
		n = Files[i].ctr;
 800d3e4:	4a17      	ldr	r2, [pc, #92]	; (800d444 <dec_lock+0x74>)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	011b      	lsls	r3, r3, #4
 800d3ea:	4413      	add	r3, r2
 800d3ec:	330c      	adds	r3, #12
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d3f2:	89fb      	ldrh	r3, [r7, #14]
 800d3f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3f8:	d101      	bne.n	800d3fe <dec_lock+0x2e>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d3fe:	89fb      	ldrh	r3, [r7, #14]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d002      	beq.n	800d40a <dec_lock+0x3a>
 800d404:	89fb      	ldrh	r3, [r7, #14]
 800d406:	3b01      	subs	r3, #1
 800d408:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d40a:	4a0e      	ldr	r2, [pc, #56]	; (800d444 <dec_lock+0x74>)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	011b      	lsls	r3, r3, #4
 800d410:	4413      	add	r3, r2
 800d412:	330c      	adds	r3, #12
 800d414:	89fa      	ldrh	r2, [r7, #14]
 800d416:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d418:	89fb      	ldrh	r3, [r7, #14]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d105      	bne.n	800d42a <dec_lock+0x5a>
 800d41e:	4a09      	ldr	r2, [pc, #36]	; (800d444 <dec_lock+0x74>)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	011b      	lsls	r3, r3, #4
 800d424:	4413      	add	r3, r2
 800d426:	2200      	movs	r2, #0
 800d428:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d42a:	2300      	movs	r3, #0
 800d42c:	737b      	strb	r3, [r7, #13]
 800d42e:	e001      	b.n	800d434 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d430:	2302      	movs	r3, #2
 800d432:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d434:	7b7b      	ldrb	r3, [r7, #13]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	20000214 	.word	0x20000214

0800d448 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d448:	b480      	push	{r7}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d450:	2300      	movs	r3, #0
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	e010      	b.n	800d478 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d456:	4a0d      	ldr	r2, [pc, #52]	; (800d48c <clear_lock+0x44>)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	011b      	lsls	r3, r3, #4
 800d45c:	4413      	add	r3, r2
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	429a      	cmp	r2, r3
 800d464:	d105      	bne.n	800d472 <clear_lock+0x2a>
 800d466:	4a09      	ldr	r2, [pc, #36]	; (800d48c <clear_lock+0x44>)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	011b      	lsls	r3, r3, #4
 800d46c:	4413      	add	r3, r2
 800d46e:	2200      	movs	r2, #0
 800d470:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	3301      	adds	r3, #1
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d9eb      	bls.n	800d456 <clear_lock+0xe>
	}
}
 800d47e:	bf00      	nop
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	20000214 	.word	0x20000214

0800d490 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d498:	2300      	movs	r3, #0
 800d49a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	78db      	ldrb	r3, [r3, #3]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d034      	beq.n	800d50e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	7858      	ldrb	r0, [r3, #1]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	f7ff fd40 	bl	800cf3c <disk_write>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d002      	beq.n	800d4c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	73fb      	strb	r3, [r7, #15]
 800d4c6:	e022      	b.n	800d50e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	1ad2      	subs	r2, r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a1b      	ldr	r3, [r3, #32]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d217      	bcs.n	800d50e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	789b      	ldrb	r3, [r3, #2]
 800d4e2:	613b      	str	r3, [r7, #16]
 800d4e4:	e010      	b.n	800d508 <sync_window+0x78>
					wsect += fs->fsize;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	697a      	ldr	r2, [r7, #20]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	7858      	ldrb	r0, [r3, #1]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	697a      	ldr	r2, [r7, #20]
 800d4fe:	f7ff fd1d 	bl	800cf3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	3b01      	subs	r3, #1
 800d506:	613b      	str	r3, [r7, #16]
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d8eb      	bhi.n	800d4e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3718      	adds	r7, #24
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d522:	2300      	movs	r3, #0
 800d524:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d01b      	beq.n	800d568 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff ffad 	bl	800d490 <sync_window>
 800d536:	4603      	mov	r3, r0
 800d538:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d113      	bne.n	800d568 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	7858      	ldrb	r0, [r3, #1]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d54a:	2301      	movs	r3, #1
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	f7ff fcd5 	bl	800cefc <disk_read>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d55c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d55e:	2301      	movs	r3, #1
 800d560:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	683a      	ldr	r2, [r7, #0]
 800d566:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d568:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
	...

0800d574 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff ff87 	bl	800d490 <sync_window>
 800d582:	4603      	mov	r3, r0
 800d584:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d586:	7bfb      	ldrb	r3, [r7, #15]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d159      	bne.n	800d640 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b03      	cmp	r3, #3
 800d592:	d149      	bne.n	800d628 <sync_fs+0xb4>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	791b      	ldrb	r3, [r3, #4]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d145      	bne.n	800d628 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	899b      	ldrh	r3, [r3, #12]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	f7ff fda8 	bl	800d0fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3338      	adds	r3, #56	; 0x38
 800d5b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d5b6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7ff fd37 	bl	800d02e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	3338      	adds	r3, #56	; 0x38
 800d5c4:	4921      	ldr	r1, [pc, #132]	; (800d64c <sync_fs+0xd8>)
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7ff fd4c 	bl	800d064 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	3338      	adds	r3, #56	; 0x38
 800d5d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d5d4:	491e      	ldr	r1, [pc, #120]	; (800d650 <sync_fs+0xdc>)
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff fd44 	bl	800d064 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	3338      	adds	r3, #56	; 0x38
 800d5e0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	f7ff fd3a 	bl	800d064 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	3338      	adds	r3, #56	; 0x38
 800d5f4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	695b      	ldr	r3, [r3, #20]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4610      	mov	r0, r2
 800d600:	f7ff fd30 	bl	800d064 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d608:	1c5a      	adds	r2, r3, #1
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	7858      	ldrb	r0, [r3, #1]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d61c:	2301      	movs	r3, #1
 800d61e:	f7ff fc8d 	bl	800cf3c <disk_write>
			fs->fsi_flag = 0;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	785b      	ldrb	r3, [r3, #1]
 800d62c:	2200      	movs	r2, #0
 800d62e:	2100      	movs	r1, #0
 800d630:	4618      	mov	r0, r3
 800d632:	f7ff fca3 	bl	800cf7c <disk_ioctl>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d001      	beq.n	800d640 <sync_fs+0xcc>
 800d63c:	2301      	movs	r3, #1
 800d63e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d640:	7bfb      	ldrb	r3, [r7, #15]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	41615252 	.word	0x41615252
 800d650:	61417272 	.word	0x61417272

0800d654 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	3b02      	subs	r3, #2
 800d662:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	69db      	ldr	r3, [r3, #28]
 800d668:	3b02      	subs	r3, #2
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d301      	bcc.n	800d674 <clust2sect+0x20>
 800d670:	2300      	movs	r3, #0
 800d672:	e008      	b.n	800d686 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	895b      	ldrh	r3, [r3, #10]
 800d678:	461a      	mov	r2, r3
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	fb03 f202 	mul.w	r2, r3, r2
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d684:	4413      	add	r3, r2
}
 800d686:	4618      	mov	r0, r3
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b086      	sub	sp, #24
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d904      	bls.n	800d6b2 <get_fat+0x20>
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	69db      	ldr	r3, [r3, #28]
 800d6ac:	683a      	ldr	r2, [r7, #0]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d302      	bcc.n	800d6b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	617b      	str	r3, [r7, #20]
 800d6b6:	e0b7      	b.n	800d828 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	d05a      	beq.n	800d77c <get_fat+0xea>
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d07d      	beq.n	800d7c6 <get_fat+0x134>
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	f040 80a2 	bne.w	800d814 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	60fb      	str	r3, [r7, #12]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	085b      	lsrs	r3, r3, #1
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	4413      	add	r3, r2
 800d6dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	899b      	ldrh	r3, [r3, #12]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6ee:	4413      	add	r3, r2
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6938      	ldr	r0, [r7, #16]
 800d6f4:	f7ff ff10 	bl	800d518 <move_window>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f040 808d 	bne.w	800d81a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	1c5a      	adds	r2, r3, #1
 800d704:	60fa      	str	r2, [r7, #12]
 800d706:	693a      	ldr	r2, [r7, #16]
 800d708:	8992      	ldrh	r2, [r2, #12]
 800d70a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d70e:	fb02 f201 	mul.w	r2, r2, r1
 800d712:	1a9b      	subs	r3, r3, r2
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	4413      	add	r3, r2
 800d718:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d71c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	899b      	ldrh	r3, [r3, #12]
 800d726:	4619      	mov	r1, r3
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d72e:	4413      	add	r3, r2
 800d730:	4619      	mov	r1, r3
 800d732:	6938      	ldr	r0, [r7, #16]
 800d734:	f7ff fef0 	bl	800d518 <move_window>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d16f      	bne.n	800d81e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	899b      	ldrh	r3, [r3, #12]
 800d742:	461a      	mov	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	fbb3 f1f2 	udiv	r1, r3, r2
 800d74a:	fb02 f201 	mul.w	r2, r2, r1
 800d74e:	1a9b      	subs	r3, r3, r2
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	4413      	add	r3, r2
 800d754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d758:	021b      	lsls	r3, r3, #8
 800d75a:	461a      	mov	r2, r3
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	4313      	orrs	r3, r2
 800d760:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	f003 0301 	and.w	r3, r3, #1
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <get_fat+0xe0>
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	091b      	lsrs	r3, r3, #4
 800d770:	e002      	b.n	800d778 <get_fat+0xe6>
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d778:	617b      	str	r3, [r7, #20]
			break;
 800d77a:	e055      	b.n	800d828 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	899b      	ldrh	r3, [r3, #12]
 800d784:	085b      	lsrs	r3, r3, #1
 800d786:	b29b      	uxth	r3, r3
 800d788:	4619      	mov	r1, r3
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d790:	4413      	add	r3, r2
 800d792:	4619      	mov	r1, r3
 800d794:	6938      	ldr	r0, [r7, #16]
 800d796:	f7ff febf 	bl	800d518 <move_window>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d140      	bne.n	800d822 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	005b      	lsls	r3, r3, #1
 800d7aa:	693a      	ldr	r2, [r7, #16]
 800d7ac:	8992      	ldrh	r2, [r2, #12]
 800d7ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7b2:	fb02 f200 	mul.w	r2, r2, r0
 800d7b6:	1a9b      	subs	r3, r3, r2
 800d7b8:	440b      	add	r3, r1
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7ff fbfc 	bl	800cfb8 <ld_word>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	617b      	str	r3, [r7, #20]
			break;
 800d7c4:	e030      	b.n	800d828 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	899b      	ldrh	r3, [r3, #12]
 800d7ce:	089b      	lsrs	r3, r3, #2
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7da:	4413      	add	r3, r2
 800d7dc:	4619      	mov	r1, r3
 800d7de:	6938      	ldr	r0, [r7, #16]
 800d7e0:	f7ff fe9a 	bl	800d518 <move_window>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d11d      	bne.n	800d826 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	8992      	ldrh	r2, [r2, #12]
 800d7f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7fc:	fb02 f200 	mul.w	r2, r2, r0
 800d800:	1a9b      	subs	r3, r3, r2
 800d802:	440b      	add	r3, r1
 800d804:	4618      	mov	r0, r3
 800d806:	f7ff fbef 	bl	800cfe8 <ld_dword>
 800d80a:	4603      	mov	r3, r0
 800d80c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d810:	617b      	str	r3, [r7, #20]
			break;
 800d812:	e009      	b.n	800d828 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d814:	2301      	movs	r3, #1
 800d816:	617b      	str	r3, [r7, #20]
 800d818:	e006      	b.n	800d828 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d81a:	bf00      	nop
 800d81c:	e004      	b.n	800d828 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d81e:	bf00      	nop
 800d820:	e002      	b.n	800d828 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d822:	bf00      	nop
 800d824:	e000      	b.n	800d828 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d826:	bf00      	nop
		}
	}

	return val;
 800d828:	697b      	ldr	r3, [r7, #20]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3718      	adds	r7, #24
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d832:	b590      	push	{r4, r7, lr}
 800d834:	b089      	sub	sp, #36	; 0x24
 800d836:	af00      	add	r7, sp, #0
 800d838:	60f8      	str	r0, [r7, #12]
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d83e:	2302      	movs	r3, #2
 800d840:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	2b01      	cmp	r3, #1
 800d846:	f240 8106 	bls.w	800da56 <put_fat+0x224>
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	69db      	ldr	r3, [r3, #28]
 800d84e:	68ba      	ldr	r2, [r7, #8]
 800d850:	429a      	cmp	r2, r3
 800d852:	f080 8100 	bcs.w	800da56 <put_fat+0x224>
		switch (fs->fs_type) {
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	f000 8088 	beq.w	800d970 <put_fat+0x13e>
 800d860:	2b03      	cmp	r3, #3
 800d862:	f000 80b0 	beq.w	800d9c6 <put_fat+0x194>
 800d866:	2b01      	cmp	r3, #1
 800d868:	f040 80f5 	bne.w	800da56 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	61bb      	str	r3, [r7, #24]
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	085b      	lsrs	r3, r3, #1
 800d874:	69ba      	ldr	r2, [r7, #24]
 800d876:	4413      	add	r3, r2
 800d878:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	899b      	ldrh	r3, [r3, #12]
 800d882:	4619      	mov	r1, r3
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	fbb3 f3f1 	udiv	r3, r3, r1
 800d88a:	4413      	add	r3, r2
 800d88c:	4619      	mov	r1, r3
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f7ff fe42 	bl	800d518 <move_window>
 800d894:	4603      	mov	r3, r0
 800d896:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d898:	7ffb      	ldrb	r3, [r7, #31]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f040 80d4 	bne.w	800da48 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	61ba      	str	r2, [r7, #24]
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	8992      	ldrh	r2, [r2, #12]
 800d8b0:	fbb3 f0f2 	udiv	r0, r3, r2
 800d8b4:	fb02 f200 	mul.w	r2, r2, r0
 800d8b8:	1a9b      	subs	r3, r3, r2
 800d8ba:	440b      	add	r3, r1
 800d8bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	f003 0301 	and.w	r3, r3, #1
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00d      	beq.n	800d8e4 <put_fat+0xb2>
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	b25b      	sxtb	r3, r3
 800d8ce:	f003 030f 	and.w	r3, r3, #15
 800d8d2:	b25a      	sxtb	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	011b      	lsls	r3, r3, #4
 800d8da:	b25b      	sxtb	r3, r3
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	b25b      	sxtb	r3, r3
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	e001      	b.n	800d8e8 <put_fat+0xb6>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	697a      	ldr	r2, [r7, #20]
 800d8ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	899b      	ldrh	r3, [r3, #12]
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800d902:	4413      	add	r3, r2
 800d904:	4619      	mov	r1, r3
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f7ff fe06 	bl	800d518 <move_window>
 800d90c:	4603      	mov	r3, r0
 800d90e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d910:	7ffb      	ldrb	r3, [r7, #31]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f040 809a 	bne.w	800da4c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	899b      	ldrh	r3, [r3, #12]
 800d922:	461a      	mov	r2, r3
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	fbb3 f0f2 	udiv	r0, r3, r2
 800d92a:	fb02 f200 	mul.w	r2, r2, r0
 800d92e:	1a9b      	subs	r3, r3, r2
 800d930:	440b      	add	r3, r1
 800d932:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d003      	beq.n	800d946 <put_fat+0x114>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	091b      	lsrs	r3, r3, #4
 800d942:	b2db      	uxtb	r3, r3
 800d944:	e00e      	b.n	800d964 <put_fat+0x132>
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	b25b      	sxtb	r3, r3
 800d94c:	f023 030f 	bic.w	r3, r3, #15
 800d950:	b25a      	sxtb	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	0a1b      	lsrs	r3, r3, #8
 800d956:	b25b      	sxtb	r3, r3
 800d958:	f003 030f 	and.w	r3, r3, #15
 800d95c:	b25b      	sxtb	r3, r3
 800d95e:	4313      	orrs	r3, r2
 800d960:	b25b      	sxtb	r3, r3
 800d962:	b2db      	uxtb	r3, r3
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2201      	movs	r2, #1
 800d96c:	70da      	strb	r2, [r3, #3]
			break;
 800d96e:	e072      	b.n	800da56 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	899b      	ldrh	r3, [r3, #12]
 800d978:	085b      	lsrs	r3, r3, #1
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	4619      	mov	r1, r3
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	fbb3 f3f1 	udiv	r3, r3, r1
 800d984:	4413      	add	r3, r2
 800d986:	4619      	mov	r1, r3
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f7ff fdc5 	bl	800d518 <move_window>
 800d98e:	4603      	mov	r3, r0
 800d990:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d992:	7ffb      	ldrb	r3, [r7, #31]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d15b      	bne.n	800da50 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	005b      	lsls	r3, r3, #1
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	8992      	ldrh	r2, [r2, #12]
 800d9a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9aa:	fb02 f200 	mul.w	r2, r2, r0
 800d9ae:	1a9b      	subs	r3, r3, r2
 800d9b0:	440b      	add	r3, r1
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	b292      	uxth	r2, r2
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7ff fb38 	bl	800d02e <st_word>
			fs->wflag = 1;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	70da      	strb	r2, [r3, #3]
			break;
 800d9c4:	e047      	b.n	800da56 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	899b      	ldrh	r3, [r3, #12]
 800d9ce:	089b      	lsrs	r3, r3, #2
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9da:	4413      	add	r3, r2
 800d9dc:	4619      	mov	r1, r3
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f7ff fd9a 	bl	800d518 <move_window>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9e8:	7ffb      	ldrb	r3, [r7, #31]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d132      	bne.n	800da54 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	8992      	ldrh	r2, [r2, #12]
 800da02:	fbb3 f0f2 	udiv	r0, r3, r2
 800da06:	fb02 f200 	mul.w	r2, r2, r0
 800da0a:	1a9b      	subs	r3, r3, r2
 800da0c:	440b      	add	r3, r1
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff faea 	bl	800cfe8 <ld_dword>
 800da14:	4603      	mov	r3, r0
 800da16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800da1a:	4323      	orrs	r3, r4
 800da1c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	8992      	ldrh	r2, [r2, #12]
 800da2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800da30:	fb02 f200 	mul.w	r2, r2, r0
 800da34:	1a9b      	subs	r3, r3, r2
 800da36:	440b      	add	r3, r1
 800da38:	6879      	ldr	r1, [r7, #4]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff fb12 	bl	800d064 <st_dword>
			fs->wflag = 1;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2201      	movs	r2, #1
 800da44:	70da      	strb	r2, [r3, #3]
			break;
 800da46:	e006      	b.n	800da56 <put_fat+0x224>
			if (res != FR_OK) break;
 800da48:	bf00      	nop
 800da4a:	e004      	b.n	800da56 <put_fat+0x224>
			if (res != FR_OK) break;
 800da4c:	bf00      	nop
 800da4e:	e002      	b.n	800da56 <put_fat+0x224>
			if (res != FR_OK) break;
 800da50:	bf00      	nop
 800da52:	e000      	b.n	800da56 <put_fat+0x224>
			if (res != FR_OK) break;
 800da54:	bf00      	nop
		}
	}
	return res;
 800da56:	7ffb      	ldrb	r3, [r7, #31]
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3724      	adds	r7, #36	; 0x24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd90      	pop	{r4, r7, pc}

0800da60 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b088      	sub	sp, #32
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d904      	bls.n	800da86 <remove_chain+0x26>
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	69db      	ldr	r3, [r3, #28]
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	429a      	cmp	r2, r3
 800da84:	d301      	bcc.n	800da8a <remove_chain+0x2a>
 800da86:	2302      	movs	r3, #2
 800da88:	e04b      	b.n	800db22 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00c      	beq.n	800daaa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800da90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da94:	6879      	ldr	r1, [r7, #4]
 800da96:	69b8      	ldr	r0, [r7, #24]
 800da98:	f7ff fecb 	bl	800d832 <put_fat>
 800da9c:	4603      	mov	r3, r0
 800da9e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800daa0:	7ffb      	ldrb	r3, [r7, #31]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d001      	beq.n	800daaa <remove_chain+0x4a>
 800daa6:	7ffb      	ldrb	r3, [r7, #31]
 800daa8:	e03b      	b.n	800db22 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800daaa:	68b9      	ldr	r1, [r7, #8]
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f7ff fdf0 	bl	800d692 <get_fat>
 800dab2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d031      	beq.n	800db1e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d101      	bne.n	800dac4 <remove_chain+0x64>
 800dac0:	2302      	movs	r3, #2
 800dac2:	e02e      	b.n	800db22 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daca:	d101      	bne.n	800dad0 <remove_chain+0x70>
 800dacc:	2301      	movs	r3, #1
 800dace:	e028      	b.n	800db22 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dad0:	2200      	movs	r2, #0
 800dad2:	68b9      	ldr	r1, [r7, #8]
 800dad4:	69b8      	ldr	r0, [r7, #24]
 800dad6:	f7ff feac 	bl	800d832 <put_fat>
 800dada:	4603      	mov	r3, r0
 800dadc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dade:	7ffb      	ldrb	r3, [r7, #31]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <remove_chain+0x88>
 800dae4:	7ffb      	ldrb	r3, [r7, #31]
 800dae6:	e01c      	b.n	800db22 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	699a      	ldr	r2, [r3, #24]
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	69db      	ldr	r3, [r3, #28]
 800daf0:	3b02      	subs	r3, #2
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d20b      	bcs.n	800db0e <remove_chain+0xae>
			fs->free_clst++;
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	1c5a      	adds	r2, r3, #1
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	791b      	ldrb	r3, [r3, #4]
 800db04:	f043 0301 	orr.w	r3, r3, #1
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d3c6      	bcc.n	800daaa <remove_chain+0x4a>
 800db1c:	e000      	b.n	800db20 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db1e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3720      	adds	r7, #32
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b088      	sub	sp, #32
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d10d      	bne.n	800db5c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d004      	beq.n	800db56 <create_chain+0x2c>
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	69db      	ldr	r3, [r3, #28]
 800db50:	69ba      	ldr	r2, [r7, #24]
 800db52:	429a      	cmp	r2, r3
 800db54:	d31b      	bcc.n	800db8e <create_chain+0x64>
 800db56:	2301      	movs	r3, #1
 800db58:	61bb      	str	r3, [r7, #24]
 800db5a:	e018      	b.n	800db8e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800db5c:	6839      	ldr	r1, [r7, #0]
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff fd97 	bl	800d692 <get_fat>
 800db64:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d801      	bhi.n	800db70 <create_chain+0x46>
 800db6c:	2301      	movs	r3, #1
 800db6e:	e070      	b.n	800dc52 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db76:	d101      	bne.n	800db7c <create_chain+0x52>
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	e06a      	b.n	800dc52 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	69db      	ldr	r3, [r3, #28]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	429a      	cmp	r2, r3
 800db84:	d201      	bcs.n	800db8a <create_chain+0x60>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	e063      	b.n	800dc52 <create_chain+0x128>
		scl = clst;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	3301      	adds	r3, #1
 800db96:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	69db      	ldr	r3, [r3, #28]
 800db9c:	69fa      	ldr	r2, [r7, #28]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d307      	bcc.n	800dbb2 <create_chain+0x88>
				ncl = 2;
 800dba2:	2302      	movs	r3, #2
 800dba4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dba6:	69fa      	ldr	r2, [r7, #28]
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d901      	bls.n	800dbb2 <create_chain+0x88>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	e04f      	b.n	800dc52 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dbb2:	69f9      	ldr	r1, [r7, #28]
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7ff fd6c 	bl	800d692 <get_fat>
 800dbba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00e      	beq.n	800dbe0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d003      	beq.n	800dbd0 <create_chain+0xa6>
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbce:	d101      	bne.n	800dbd4 <create_chain+0xaa>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	e03e      	b.n	800dc52 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dbd4:	69fa      	ldr	r2, [r7, #28]
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d1da      	bne.n	800db92 <create_chain+0x68>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	e038      	b.n	800dc52 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dbe0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dbe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbe6:	69f9      	ldr	r1, [r7, #28]
 800dbe8:	6938      	ldr	r0, [r7, #16]
 800dbea:	f7ff fe22 	bl	800d832 <put_fat>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d109      	bne.n	800dc0c <create_chain+0xe2>
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d006      	beq.n	800dc0c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dbfe:	69fa      	ldr	r2, [r7, #28]
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6938      	ldr	r0, [r7, #16]
 800dc04:	f7ff fe15 	bl	800d832 <put_fat>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc0c:	7dfb      	ldrb	r3, [r7, #23]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d116      	bne.n	800dc40 <create_chain+0x116>
		fs->last_clst = ncl;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	69fa      	ldr	r2, [r7, #28]
 800dc16:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	699a      	ldr	r2, [r3, #24]
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	69db      	ldr	r3, [r3, #28]
 800dc20:	3b02      	subs	r3, #2
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d804      	bhi.n	800dc30 <create_chain+0x106>
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	699b      	ldr	r3, [r3, #24]
 800dc2a:	1e5a      	subs	r2, r3, #1
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	791b      	ldrb	r3, [r3, #4]
 800dc34:	f043 0301 	orr.w	r3, r3, #1
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	711a      	strb	r2, [r3, #4]
 800dc3e:	e007      	b.n	800dc50 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dc40:	7dfb      	ldrb	r3, [r7, #23]
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d102      	bne.n	800dc4c <create_chain+0x122>
 800dc46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc4a:	e000      	b.n	800dc4e <create_chain+0x124>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dc50:	69fb      	ldr	r3, [r7, #28]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3720      	adds	r7, #32
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b087      	sub	sp, #28
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6e:	3304      	adds	r3, #4
 800dc70:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	899b      	ldrh	r3, [r3, #12]
 800dc76:	461a      	mov	r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	8952      	ldrh	r2, [r2, #10]
 800dc82:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc86:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	1d1a      	adds	r2, r3, #4
 800dc8c:	613a      	str	r2, [r7, #16]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d101      	bne.n	800dc9c <clmt_clust+0x42>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	e010      	b.n	800dcbe <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dc9c:	697a      	ldr	r2, [r7, #20]
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d307      	bcc.n	800dcb4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dca4:	697a      	ldr	r2, [r7, #20]
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	617b      	str	r3, [r7, #20]
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcb2:	e7e9      	b.n	800dc88 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dcb4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	4413      	add	r3, r2
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	371c      	adds	r7, #28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr

0800dcca <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b086      	sub	sp, #24
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dce0:	d204      	bcs.n	800dcec <dir_sdi+0x22>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	f003 031f 	and.w	r3, r3, #31
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dcec:	2302      	movs	r3, #2
 800dcee:	e071      	b.n	800ddd4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d106      	bne.n	800dd10 <dir_sdi+0x46>
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	d902      	bls.n	800dd10 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d10c      	bne.n	800dd30 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	095b      	lsrs	r3, r3, #5
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	8912      	ldrh	r2, [r2, #8]
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d301      	bcc.n	800dd26 <dir_sdi+0x5c>
 800dd22:	2302      	movs	r3, #2
 800dd24:	e056      	b.n	800ddd4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	61da      	str	r2, [r3, #28]
 800dd2e:	e02d      	b.n	800dd8c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	895b      	ldrh	r3, [r3, #10]
 800dd34:	461a      	mov	r2, r3
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	899b      	ldrh	r3, [r3, #12]
 800dd3a:	fb03 f302 	mul.w	r3, r3, r2
 800dd3e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd40:	e019      	b.n	800dd76 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6979      	ldr	r1, [r7, #20]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7ff fca3 	bl	800d692 <get_fat>
 800dd4c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd54:	d101      	bne.n	800dd5a <dir_sdi+0x90>
 800dd56:	2301      	movs	r3, #1
 800dd58:	e03c      	b.n	800ddd4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d904      	bls.n	800dd6a <dir_sdi+0xa0>
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	69db      	ldr	r3, [r3, #28]
 800dd64:	697a      	ldr	r2, [r7, #20]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d301      	bcc.n	800dd6e <dir_sdi+0xa4>
 800dd6a:	2302      	movs	r3, #2
 800dd6c:	e032      	b.n	800ddd4 <dir_sdi+0x10a>
			ofs -= csz;
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d2e1      	bcs.n	800dd42 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800dd7e:	6979      	ldr	r1, [r7, #20]
 800dd80:	6938      	ldr	r0, [r7, #16]
 800dd82:	f7ff fc67 	bl	800d654 <clust2sect>
 800dd86:	4602      	mov	r2, r0
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	697a      	ldr	r2, [r7, #20]
 800dd90:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	69db      	ldr	r3, [r3, #28]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d101      	bne.n	800dd9e <dir_sdi+0xd4>
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	e01a      	b.n	800ddd4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	69da      	ldr	r2, [r3, #28]
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	899b      	ldrh	r3, [r3, #12]
 800dda6:	4619      	mov	r1, r3
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddae:	441a      	add	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	899b      	ldrh	r3, [r3, #12]
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddc6:	fb02 f200 	mul.w	r2, r2, r0
 800ddca:	1a9b      	subs	r3, r3, r2
 800ddcc:	18ca      	adds	r2, r1, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3718      	adds	r7, #24
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	3320      	adds	r3, #32
 800ddf2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	69db      	ldr	r3, [r3, #28]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d003      	beq.n	800de04 <dir_next+0x28>
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de02:	d301      	bcc.n	800de08 <dir_next+0x2c>
 800de04:	2304      	movs	r3, #4
 800de06:	e0bb      	b.n	800df80 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	899b      	ldrh	r3, [r3, #12]
 800de0c:	461a      	mov	r2, r3
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	fbb3 f1f2 	udiv	r1, r3, r2
 800de14:	fb02 f201 	mul.w	r2, r2, r1
 800de18:	1a9b      	subs	r3, r3, r2
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f040 809d 	bne.w	800df5a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	69db      	ldr	r3, [r3, #28]
 800de24:	1c5a      	adds	r2, r3, #1
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d10b      	bne.n	800de4a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	095b      	lsrs	r3, r3, #5
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	8912      	ldrh	r2, [r2, #8]
 800de3a:	4293      	cmp	r3, r2
 800de3c:	f0c0 808d 	bcc.w	800df5a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	61da      	str	r2, [r3, #28]
 800de46:	2304      	movs	r3, #4
 800de48:	e09a      	b.n	800df80 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	899b      	ldrh	r3, [r3, #12]
 800de4e:	461a      	mov	r2, r3
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	fbb3 f3f2 	udiv	r3, r3, r2
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	8952      	ldrh	r2, [r2, #10]
 800de5a:	3a01      	subs	r2, #1
 800de5c:	4013      	ands	r3, r2
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d17b      	bne.n	800df5a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	699b      	ldr	r3, [r3, #24]
 800de68:	4619      	mov	r1, r3
 800de6a:	4610      	mov	r0, r2
 800de6c:	f7ff fc11 	bl	800d692 <get_fat>
 800de70:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d801      	bhi.n	800de7c <dir_next+0xa0>
 800de78:	2302      	movs	r3, #2
 800de7a:	e081      	b.n	800df80 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de82:	d101      	bne.n	800de88 <dir_next+0xac>
 800de84:	2301      	movs	r3, #1
 800de86:	e07b      	b.n	800df80 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	69db      	ldr	r3, [r3, #28]
 800de8c:	697a      	ldr	r2, [r7, #20]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d359      	bcc.n	800df46 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d104      	bne.n	800dea2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	61da      	str	r2, [r3, #28]
 800de9e:	2304      	movs	r3, #4
 800dea0:	e06e      	b.n	800df80 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	4619      	mov	r1, r3
 800deaa:	4610      	mov	r0, r2
 800deac:	f7ff fe3d 	bl	800db2a <create_chain>
 800deb0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d101      	bne.n	800debc <dir_next+0xe0>
 800deb8:	2307      	movs	r3, #7
 800deba:	e061      	b.n	800df80 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d101      	bne.n	800dec6 <dir_next+0xea>
 800dec2:	2302      	movs	r3, #2
 800dec4:	e05c      	b.n	800df80 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800decc:	d101      	bne.n	800ded2 <dir_next+0xf6>
 800dece:	2301      	movs	r3, #1
 800ded0:	e056      	b.n	800df80 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f7ff fadc 	bl	800d490 <sync_window>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d001      	beq.n	800dee2 <dir_next+0x106>
 800dede:	2301      	movs	r3, #1
 800dee0:	e04e      	b.n	800df80 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	899b      	ldrh	r3, [r3, #12]
 800deec:	461a      	mov	r2, r3
 800deee:	2100      	movs	r1, #0
 800def0:	f7ff f905 	bl	800d0fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800def4:	2300      	movs	r3, #0
 800def6:	613b      	str	r3, [r7, #16]
 800def8:	6979      	ldr	r1, [r7, #20]
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	f7ff fbaa 	bl	800d654 <clust2sect>
 800df00:	4602      	mov	r2, r0
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	635a      	str	r2, [r3, #52]	; 0x34
 800df06:	e012      	b.n	800df2e <dir_next+0x152>
						fs->wflag = 1;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2201      	movs	r2, #1
 800df0c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f7ff fabe 	bl	800d490 <sync_window>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <dir_next+0x142>
 800df1a:	2301      	movs	r3, #1
 800df1c:	e030      	b.n	800df80 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	3301      	adds	r3, #1
 800df22:	613b      	str	r3, [r7, #16]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df28:	1c5a      	adds	r2, r3, #1
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	635a      	str	r2, [r3, #52]	; 0x34
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	895b      	ldrh	r3, [r3, #10]
 800df32:	461a      	mov	r2, r3
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	4293      	cmp	r3, r2
 800df38:	d3e6      	bcc.n	800df08 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	1ad2      	subs	r2, r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800df4c:	6979      	ldr	r1, [r7, #20]
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f7ff fb80 	bl	800d654 <clust2sect>
 800df54:	4602      	mov	r2, r0
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	899b      	ldrh	r3, [r3, #12]
 800df6a:	461a      	mov	r2, r3
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800df72:	fb02 f200 	mul.w	r2, r2, r0
 800df76:	1a9b      	subs	r3, r3, r2
 800df78:	18ca      	adds	r2, r1, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3718      	adds	r7, #24
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800df98:	2100      	movs	r1, #0
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7ff fe95 	bl	800dcca <dir_sdi>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dfa4:	7dfb      	ldrb	r3, [r7, #23]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d12b      	bne.n	800e002 <dir_alloc+0x7a>
		n = 0;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	69db      	ldr	r3, [r3, #28]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f7ff faaf 	bl	800d518 <move_window>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d11d      	bne.n	800e000 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6a1b      	ldr	r3, [r3, #32]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	2be5      	cmp	r3, #229	; 0xe5
 800dfcc:	d004      	beq.n	800dfd8 <dir_alloc+0x50>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d107      	bne.n	800dfe8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	613b      	str	r3, [r7, #16]
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d102      	bne.n	800dfec <dir_alloc+0x64>
 800dfe6:	e00c      	b.n	800e002 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dfe8:	2300      	movs	r3, #0
 800dfea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dfec:	2101      	movs	r1, #1
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7ff fef4 	bl	800dddc <dir_next>
 800dff4:	4603      	mov	r3, r0
 800dff6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dff8:	7dfb      	ldrb	r3, [r7, #23]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d0d7      	beq.n	800dfae <dir_alloc+0x26>
 800dffe:	e000      	b.n	800e002 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e000:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e002:	7dfb      	ldrb	r3, [r7, #23]
 800e004:	2b04      	cmp	r3, #4
 800e006:	d101      	bne.n	800e00c <dir_alloc+0x84>
 800e008:	2307      	movs	r3, #7
 800e00a:	75fb      	strb	r3, [r7, #23]
	return res;
 800e00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3718      	adds	r7, #24
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	331a      	adds	r3, #26
 800e024:	4618      	mov	r0, r3
 800e026:	f7fe ffc7 	bl	800cfb8 <ld_word>
 800e02a:	4603      	mov	r3, r0
 800e02c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2b03      	cmp	r3, #3
 800e034:	d109      	bne.n	800e04a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	3314      	adds	r3, #20
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe ffbc 	bl	800cfb8 <ld_word>
 800e040:	4603      	mov	r3, r0
 800e042:	041b      	lsls	r3, r3, #16
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	4313      	orrs	r3, r2
 800e048:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e04a:	68fb      	ldr	r3, [r7, #12]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	331a      	adds	r3, #26
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	b292      	uxth	r2, r2
 800e068:	4611      	mov	r1, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe ffdf 	bl	800d02e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	2b03      	cmp	r3, #3
 800e076:	d109      	bne.n	800e08c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	f103 0214 	add.w	r2, r3, #20
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	0c1b      	lsrs	r3, r3, #16
 800e082:	b29b      	uxth	r3, r3
 800e084:	4619      	mov	r1, r3
 800e086:	4610      	mov	r0, r2
 800e088:	f7fe ffd1 	bl	800d02e <st_word>
	}
}
 800e08c:	bf00      	nop
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e094:	b590      	push	{r4, r7, lr}
 800e096:	b087      	sub	sp, #28
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	331a      	adds	r3, #26
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fe ff88 	bl	800cfb8 <ld_word>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <cmp_lfn+0x1e>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	e059      	b.n	800e166 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0ba:	1e5a      	subs	r2, r3, #1
 800e0bc:	4613      	mov	r3, r2
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	4413      	add	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	81fb      	strh	r3, [r7, #14]
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	613b      	str	r3, [r7, #16]
 800e0d0:	e033      	b.n	800e13a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e0d2:	4a27      	ldr	r2, [pc, #156]	; (800e170 <cmp_lfn+0xdc>)
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	4413      	add	r3, r2
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fe ff69 	bl	800cfb8 <ld_word>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e0ea:	89fb      	ldrh	r3, [r7, #14]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d01a      	beq.n	800e126 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	2bfe      	cmp	r3, #254	; 0xfe
 800e0f4:	d812      	bhi.n	800e11c <cmp_lfn+0x88>
 800e0f6:	89bb      	ldrh	r3, [r7, #12]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f002 fc87 	bl	8010a0c <ff_wtoupper>
 800e0fe:	4603      	mov	r3, r0
 800e100:	461c      	mov	r4, r3
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	1c5a      	adds	r2, r3, #1
 800e106:	617a      	str	r2, [r7, #20]
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	4413      	add	r3, r2
 800e10e:	881b      	ldrh	r3, [r3, #0]
 800e110:	4618      	mov	r0, r3
 800e112:	f002 fc7b 	bl	8010a0c <ff_wtoupper>
 800e116:	4603      	mov	r3, r0
 800e118:	429c      	cmp	r4, r3
 800e11a:	d001      	beq.n	800e120 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e11c:	2300      	movs	r3, #0
 800e11e:	e022      	b.n	800e166 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e120:	89bb      	ldrh	r3, [r7, #12]
 800e122:	81fb      	strh	r3, [r7, #14]
 800e124:	e006      	b.n	800e134 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e126:	89bb      	ldrh	r3, [r7, #12]
 800e128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d001      	beq.n	800e134 <cmp_lfn+0xa0>
 800e130:	2300      	movs	r3, #0
 800e132:	e018      	b.n	800e166 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	3301      	adds	r3, #1
 800e138:	613b      	str	r3, [r7, #16]
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	2b0c      	cmp	r3, #12
 800e13e:	d9c8      	bls.n	800e0d2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d00b      	beq.n	800e164 <cmp_lfn+0xd0>
 800e14c:	89fb      	ldrh	r3, [r7, #14]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d008      	beq.n	800e164 <cmp_lfn+0xd0>
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	005b      	lsls	r3, r3, #1
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	4413      	add	r3, r2
 800e15a:	881b      	ldrh	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d001      	beq.n	800e164 <cmp_lfn+0xd0>
 800e160:	2300      	movs	r3, #0
 800e162:	e000      	b.n	800e166 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e164:	2301      	movs	r3, #1
}
 800e166:	4618      	mov	r0, r3
 800e168:	371c      	adds	r7, #28
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd90      	pop	{r4, r7, pc}
 800e16e:	bf00      	nop
 800e170:	080123f0 	.word	0x080123f0

0800e174 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	331a      	adds	r3, #26
 800e182:	4618      	mov	r0, r3
 800e184:	f7fe ff18 	bl	800cfb8 <ld_word>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <pick_lfn+0x1e>
 800e18e:	2300      	movs	r3, #0
 800e190:	e04d      	b.n	800e22e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e19a:	1e5a      	subs	r2, r3, #1
 800e19c:	4613      	mov	r3, r2
 800e19e:	005b      	lsls	r3, r3, #1
 800e1a0:	4413      	add	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4413      	add	r3, r2
 800e1a6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	81fb      	strh	r3, [r7, #14]
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	613b      	str	r3, [r7, #16]
 800e1b0:	e028      	b.n	800e204 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e1b2:	4a21      	ldr	r2, [pc, #132]	; (800e238 <pick_lfn+0xc4>)
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	4413      	add	r3, r2
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fe fef9 	bl	800cfb8 <ld_word>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e1ca:	89fb      	ldrh	r3, [r7, #14]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00f      	beq.n	800e1f0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	2bfe      	cmp	r3, #254	; 0xfe
 800e1d4:	d901      	bls.n	800e1da <pick_lfn+0x66>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e029      	b.n	800e22e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e1da:	89bb      	ldrh	r3, [r7, #12]
 800e1dc:	81fb      	strh	r3, [r7, #14]
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	1c5a      	adds	r2, r3, #1
 800e1e2:	617a      	str	r2, [r7, #20]
 800e1e4:	005b      	lsls	r3, r3, #1
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	4413      	add	r3, r2
 800e1ea:	89fa      	ldrh	r2, [r7, #14]
 800e1ec:	801a      	strh	r2, [r3, #0]
 800e1ee:	e006      	b.n	800e1fe <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e1f0:	89bb      	ldrh	r3, [r7, #12]
 800e1f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d001      	beq.n	800e1fe <pick_lfn+0x8a>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	e017      	b.n	800e22e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	3301      	adds	r3, #1
 800e202:	613b      	str	r3, [r7, #16]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	2b0c      	cmp	r3, #12
 800e208:	d9d3      	bls.n	800e1b2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00a      	beq.n	800e22c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	2bfe      	cmp	r3, #254	; 0xfe
 800e21a:	d901      	bls.n	800e220 <pick_lfn+0xac>
 800e21c:	2300      	movs	r3, #0
 800e21e:	e006      	b.n	800e22e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	4413      	add	r3, r2
 800e228:	2200      	movs	r2, #0
 800e22a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e22c:	2301      	movs	r3, #1
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3718      	adds	r7, #24
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	080123f0 	.word	0x080123f0

0800e23c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b088      	sub	sp, #32
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	4611      	mov	r1, r2
 800e248:	461a      	mov	r2, r3
 800e24a:	460b      	mov	r3, r1
 800e24c:	71fb      	strb	r3, [r7, #7]
 800e24e:	4613      	mov	r3, r2
 800e250:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	330d      	adds	r3, #13
 800e256:	79ba      	ldrb	r2, [r7, #6]
 800e258:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	330b      	adds	r3, #11
 800e25e:	220f      	movs	r2, #15
 800e260:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	330c      	adds	r3, #12
 800e266:	2200      	movs	r2, #0
 800e268:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	331a      	adds	r3, #26
 800e26e:	2100      	movs	r1, #0
 800e270:	4618      	mov	r0, r3
 800e272:	f7fe fedc 	bl	800d02e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e276:	79fb      	ldrb	r3, [r7, #7]
 800e278:	1e5a      	subs	r2, r3, #1
 800e27a:	4613      	mov	r3, r2
 800e27c:	005b      	lsls	r3, r3, #1
 800e27e:	4413      	add	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4413      	add	r3, r2
 800e284:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e286:	2300      	movs	r3, #0
 800e288:	82fb      	strh	r3, [r7, #22]
 800e28a:	2300      	movs	r3, #0
 800e28c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e28e:	8afb      	ldrh	r3, [r7, #22]
 800e290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e294:	4293      	cmp	r3, r2
 800e296:	d007      	beq.n	800e2a8 <put_lfn+0x6c>
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	61fa      	str	r2, [r7, #28]
 800e29e:	005b      	lsls	r3, r3, #1
 800e2a0:	68fa      	ldr	r2, [r7, #12]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e2a8:	4a17      	ldr	r2, [pc, #92]	; (800e308 <put_lfn+0xcc>)
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	8afa      	ldrh	r2, [r7, #22]
 800e2b8:	4611      	mov	r1, r2
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fe feb7 	bl	800d02e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e2c0:	8afb      	ldrh	r3, [r7, #22]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d102      	bne.n	800e2cc <put_lfn+0x90>
 800e2c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	61bb      	str	r3, [r7, #24]
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	2b0c      	cmp	r3, #12
 800e2d6:	d9da      	bls.n	800e28e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e2d8:	8afb      	ldrh	r3, [r7, #22]
 800e2da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d006      	beq.n	800e2f0 <put_lfn+0xb4>
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	881b      	ldrh	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d103      	bne.n	800e2f8 <put_lfn+0xbc>
 800e2f0:	79fb      	ldrb	r3, [r7, #7]
 800e2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	79fa      	ldrb	r2, [r7, #7]
 800e2fc:	701a      	strb	r2, [r3, #0]
}
 800e2fe:	bf00      	nop
 800e300:	3720      	adds	r7, #32
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	080123f0 	.word	0x080123f0

0800e30c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b08c      	sub	sp, #48	; 0x30
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e31a:	220b      	movs	r2, #11
 800e31c:	68b9      	ldr	r1, [r7, #8]
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f7fe fecc 	bl	800d0bc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b05      	cmp	r3, #5
 800e328:	d92b      	bls.n	800e382 <gen_numname+0x76>
		sr = seq;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e32e:	e022      	b.n	800e376 <gen_numname+0x6a>
			wc = *lfn++;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	1c9a      	adds	r2, r3, #2
 800e334:	607a      	str	r2, [r7, #4]
 800e336:	881b      	ldrh	r3, [r3, #0]
 800e338:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e33a:	2300      	movs	r3, #0
 800e33c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e33e:	e017      	b.n	800e370 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	005a      	lsls	r2, r3, #1
 800e344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e346:	f003 0301 	and.w	r3, r3, #1
 800e34a:	4413      	add	r3, r2
 800e34c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e34e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e350:	085b      	lsrs	r3, r3, #1
 800e352:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d005      	beq.n	800e36a <gen_numname+0x5e>
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e364:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e368:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36c:	3301      	adds	r3, #1
 800e36e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e372:	2b0f      	cmp	r3, #15
 800e374:	d9e4      	bls.n	800e340 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1d8      	bne.n	800e330 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e382:	2307      	movs	r3, #7
 800e384:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	f003 030f 	and.w	r3, r3, #15
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	3330      	adds	r3, #48	; 0x30
 800e392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e39a:	2b39      	cmp	r3, #57	; 0x39
 800e39c:	d904      	bls.n	800e3a8 <gen_numname+0x9c>
 800e39e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3a2:	3307      	adds	r3, #7
 800e3a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3aa:	1e5a      	subs	r2, r3, #1
 800e3ac:	62ba      	str	r2, [r7, #40]	; 0x28
 800e3ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e3b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	091b      	lsrs	r3, r3, #4
 800e3c0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1de      	bne.n	800e386 <gen_numname+0x7a>
	ns[i] = '~';
 800e3c8:	f107 0214 	add.w	r2, r7, #20
 800e3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ce:	4413      	add	r3, r2
 800e3d0:	227e      	movs	r2, #126	; 0x7e
 800e3d2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3d8:	e002      	b.n	800e3e0 <gen_numname+0xd4>
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	3301      	adds	r3, #1
 800e3de:	627b      	str	r3, [r7, #36]	; 0x24
 800e3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d205      	bcs.n	800e3f4 <gen_numname+0xe8>
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ec:	4413      	add	r3, r2
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	2b20      	cmp	r3, #32
 800e3f2:	d1f2      	bne.n	800e3da <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f6:	2b07      	cmp	r3, #7
 800e3f8:	d808      	bhi.n	800e40c <gen_numname+0x100>
 800e3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	62ba      	str	r2, [r7, #40]	; 0x28
 800e400:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e404:	4413      	add	r3, r2
 800e406:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e40a:	e000      	b.n	800e40e <gen_numname+0x102>
 800e40c:	2120      	movs	r1, #32
 800e40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	627a      	str	r2, [r7, #36]	; 0x24
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	4413      	add	r3, r2
 800e418:	460a      	mov	r2, r1
 800e41a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41e:	2b07      	cmp	r3, #7
 800e420:	d9e8      	bls.n	800e3f4 <gen_numname+0xe8>
}
 800e422:	bf00      	nop
 800e424:	3730      	adds	r7, #48	; 0x30
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e42a:	b480      	push	{r7}
 800e42c:	b085      	sub	sp, #20
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e436:	230b      	movs	r3, #11
 800e438:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	b2da      	uxtb	r2, r3
 800e43e:	0852      	lsrs	r2, r2, #1
 800e440:	01db      	lsls	r3, r3, #7
 800e442:	4313      	orrs	r3, r2
 800e444:	b2da      	uxtb	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	1c59      	adds	r1, r3, #1
 800e44a:	6079      	str	r1, [r7, #4]
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	4413      	add	r3, r2
 800e450:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	3b01      	subs	r3, #1
 800e456:	60bb      	str	r3, [r7, #8]
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1ed      	bne.n	800e43a <sum_sfn+0x10>
	return sum;
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3714      	adds	r7, #20
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e476:	2304      	movs	r3, #4
 800e478:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e480:	23ff      	movs	r3, #255	; 0xff
 800e482:	757b      	strb	r3, [r7, #21]
 800e484:	23ff      	movs	r3, #255	; 0xff
 800e486:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e488:	e081      	b.n	800e58e <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	69db      	ldr	r3, [r3, #28]
 800e48e:	4619      	mov	r1, r3
 800e490:	6938      	ldr	r0, [r7, #16]
 800e492:	f7ff f841 	bl	800d518 <move_window>
 800e496:	4603      	mov	r3, r0
 800e498:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e49a:	7dfb      	ldrb	r3, [r7, #23]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d17c      	bne.n	800e59a <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a1b      	ldr	r3, [r3, #32]
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e4a8:	7dbb      	ldrb	r3, [r7, #22]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d102      	bne.n	800e4b4 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e4ae:	2304      	movs	r3, #4
 800e4b0:	75fb      	strb	r3, [r7, #23]
 800e4b2:	e077      	b.n	800e5a4 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6a1b      	ldr	r3, [r3, #32]
 800e4b8:	330b      	adds	r3, #11
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4c0:	73fb      	strb	r3, [r7, #15]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	7bfa      	ldrb	r2, [r7, #15]
 800e4c6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e4c8:	7dbb      	ldrb	r3, [r7, #22]
 800e4ca:	2be5      	cmp	r3, #229	; 0xe5
 800e4cc:	d00e      	beq.n	800e4ec <dir_read+0x80>
 800e4ce:	7dbb      	ldrb	r3, [r7, #22]
 800e4d0:	2b2e      	cmp	r3, #46	; 0x2e
 800e4d2:	d00b      	beq.n	800e4ec <dir_read+0x80>
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
 800e4d6:	f023 0320 	bic.w	r3, r3, #32
 800e4da:	2b08      	cmp	r3, #8
 800e4dc:	bf0c      	ite	eq
 800e4de:	2301      	moveq	r3, #1
 800e4e0:	2300      	movne	r3, #0
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d002      	beq.n	800e4f2 <dir_read+0x86>
				ord = 0xFF;
 800e4ec:	23ff      	movs	r3, #255	; 0xff
 800e4ee:	757b      	strb	r3, [r7, #21]
 800e4f0:	e044      	b.n	800e57c <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e4f2:	7bfb      	ldrb	r3, [r7, #15]
 800e4f4:	2b0f      	cmp	r3, #15
 800e4f6:	d12f      	bne.n	800e558 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e4f8:	7dbb      	ldrb	r3, [r7, #22]
 800e4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00d      	beq.n	800e51e <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a1b      	ldr	r3, [r3, #32]
 800e506:	7b5b      	ldrb	r3, [r3, #13]
 800e508:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e50a:	7dbb      	ldrb	r3, [r7, #22]
 800e50c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e510:	75bb      	strb	r3, [r7, #22]
 800e512:	7dbb      	ldrb	r3, [r7, #22]
 800e514:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	695a      	ldr	r2, [r3, #20]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e51e:	7dba      	ldrb	r2, [r7, #22]
 800e520:	7d7b      	ldrb	r3, [r7, #21]
 800e522:	429a      	cmp	r2, r3
 800e524:	d115      	bne.n	800e552 <dir_read+0xe6>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6a1b      	ldr	r3, [r3, #32]
 800e52a:	330d      	adds	r3, #13
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	7d3a      	ldrb	r2, [r7, #20]
 800e530:	429a      	cmp	r2, r3
 800e532:	d10e      	bne.n	800e552 <dir_read+0xe6>
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	691a      	ldr	r2, [r3, #16]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6a1b      	ldr	r3, [r3, #32]
 800e53c:	4619      	mov	r1, r3
 800e53e:	4610      	mov	r0, r2
 800e540:	f7ff fe18 	bl	800e174 <pick_lfn>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d003      	beq.n	800e552 <dir_read+0xe6>
 800e54a:	7d7b      	ldrb	r3, [r7, #21]
 800e54c:	3b01      	subs	r3, #1
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	e000      	b.n	800e554 <dir_read+0xe8>
 800e552:	23ff      	movs	r3, #255	; 0xff
 800e554:	757b      	strb	r3, [r7, #21]
 800e556:	e011      	b.n	800e57c <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e558:	7d7b      	ldrb	r3, [r7, #21]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d109      	bne.n	800e572 <dir_read+0x106>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6a1b      	ldr	r3, [r3, #32]
 800e562:	4618      	mov	r0, r3
 800e564:	f7ff ff61 	bl	800e42a <sum_sfn>
 800e568:	4603      	mov	r3, r0
 800e56a:	461a      	mov	r2, r3
 800e56c:	7d3b      	ldrb	r3, [r7, #20]
 800e56e:	4293      	cmp	r3, r2
 800e570:	d015      	beq.n	800e59e <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e578:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e57a:	e010      	b.n	800e59e <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e57c:	2100      	movs	r1, #0
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff fc2c 	bl	800dddc <dir_next>
 800e584:	4603      	mov	r3, r0
 800e586:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e588:	7dfb      	ldrb	r3, [r7, #23]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d109      	bne.n	800e5a2 <dir_read+0x136>
	while (dp->sect) {
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	69db      	ldr	r3, [r3, #28]
 800e592:	2b00      	cmp	r3, #0
 800e594:	f47f af79 	bne.w	800e48a <dir_read+0x1e>
 800e598:	e004      	b.n	800e5a4 <dir_read+0x138>
		if (res != FR_OK) break;
 800e59a:	bf00      	nop
 800e59c:	e002      	b.n	800e5a4 <dir_read+0x138>
					break;
 800e59e:	bf00      	nop
 800e5a0:	e000      	b.n	800e5a4 <dir_read+0x138>
		if (res != FR_OK) break;
 800e5a2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e5a4:	7dfb      	ldrb	r3, [r7, #23]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d002      	beq.n	800e5b0 <dir_read+0x144>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	61da      	str	r2, [r3, #28]
	return res;
 800e5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b086      	sub	sp, #24
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7ff fb7d 	bl	800dcca <dir_sdi>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e5d4:	7dfb      	ldrb	r3, [r7, #23]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <dir_find+0x24>
 800e5da:	7dfb      	ldrb	r3, [r7, #23]
 800e5dc:	e0a9      	b.n	800e732 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e5de:	23ff      	movs	r3, #255	; 0xff
 800e5e0:	753b      	strb	r3, [r7, #20]
 800e5e2:	7d3b      	ldrb	r3, [r7, #20]
 800e5e4:	757b      	strb	r3, [r7, #21]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5ec:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	69db      	ldr	r3, [r3, #28]
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	6938      	ldr	r0, [r7, #16]
 800e5f6:	f7fe ff8f 	bl	800d518 <move_window>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
 800e600:	2b00      	cmp	r3, #0
 800e602:	f040 8090 	bne.w	800e726 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a1b      	ldr	r3, [r3, #32]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e60e:	7dbb      	ldrb	r3, [r7, #22]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d102      	bne.n	800e61a <dir_find+0x60>
 800e614:	2304      	movs	r3, #4
 800e616:	75fb      	strb	r3, [r7, #23]
 800e618:	e08a      	b.n	800e730 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a1b      	ldr	r3, [r3, #32]
 800e61e:	330b      	adds	r3, #11
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e626:	73fb      	strb	r3, [r7, #15]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	7bfa      	ldrb	r2, [r7, #15]
 800e62c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e62e:	7dbb      	ldrb	r3, [r7, #22]
 800e630:	2be5      	cmp	r3, #229	; 0xe5
 800e632:	d007      	beq.n	800e644 <dir_find+0x8a>
 800e634:	7bfb      	ldrb	r3, [r7, #15]
 800e636:	f003 0308 	and.w	r3, r3, #8
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d009      	beq.n	800e652 <dir_find+0x98>
 800e63e:	7bfb      	ldrb	r3, [r7, #15]
 800e640:	2b0f      	cmp	r3, #15
 800e642:	d006      	beq.n	800e652 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e644:	23ff      	movs	r3, #255	; 0xff
 800e646:	757b      	strb	r3, [r7, #21]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e64e:	631a      	str	r2, [r3, #48]	; 0x30
 800e650:	e05e      	b.n	800e710 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e652:	7bfb      	ldrb	r3, [r7, #15]
 800e654:	2b0f      	cmp	r3, #15
 800e656:	d136      	bne.n	800e6c6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e65e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e662:	2b00      	cmp	r3, #0
 800e664:	d154      	bne.n	800e710 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e666:	7dbb      	ldrb	r3, [r7, #22]
 800e668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00d      	beq.n	800e68c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6a1b      	ldr	r3, [r3, #32]
 800e674:	7b5b      	ldrb	r3, [r3, #13]
 800e676:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e678:	7dbb      	ldrb	r3, [r7, #22]
 800e67a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e67e:	75bb      	strb	r3, [r7, #22]
 800e680:	7dbb      	ldrb	r3, [r7, #22]
 800e682:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	695a      	ldr	r2, [r3, #20]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e68c:	7dba      	ldrb	r2, [r7, #22]
 800e68e:	7d7b      	ldrb	r3, [r7, #21]
 800e690:	429a      	cmp	r2, r3
 800e692:	d115      	bne.n	800e6c0 <dir_find+0x106>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6a1b      	ldr	r3, [r3, #32]
 800e698:	330d      	adds	r3, #13
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	7d3a      	ldrb	r2, [r7, #20]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d10e      	bne.n	800e6c0 <dir_find+0x106>
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	691a      	ldr	r2, [r3, #16]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6a1b      	ldr	r3, [r3, #32]
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	f7ff fcf1 	bl	800e094 <cmp_lfn>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d003      	beq.n	800e6c0 <dir_find+0x106>
 800e6b8:	7d7b      	ldrb	r3, [r7, #21]
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	e000      	b.n	800e6c2 <dir_find+0x108>
 800e6c0:	23ff      	movs	r3, #255	; 0xff
 800e6c2:	757b      	strb	r3, [r7, #21]
 800e6c4:	e024      	b.n	800e710 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e6c6:	7d7b      	ldrb	r3, [r7, #21]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d109      	bne.n	800e6e0 <dir_find+0x126>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6a1b      	ldr	r3, [r3, #32]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7ff feaa 	bl	800e42a <sum_sfn>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	461a      	mov	r2, r3
 800e6da:	7d3b      	ldrb	r3, [r7, #20]
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d024      	beq.n	800e72a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10a      	bne.n	800e704 <dir_find+0x14a>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6a18      	ldr	r0, [r3, #32]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	3324      	adds	r3, #36	; 0x24
 800e6f6:	220b      	movs	r2, #11
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	f7fe fd1a 	bl	800d132 <mem_cmp>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d014      	beq.n	800e72e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e704:	23ff      	movs	r3, #255	; 0xff
 800e706:	757b      	strb	r3, [r7, #21]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e70e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e710:	2100      	movs	r1, #0
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff fb62 	bl	800dddc <dir_next>
 800e718:	4603      	mov	r3, r0
 800e71a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e71c:	7dfb      	ldrb	r3, [r7, #23]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f43f af65 	beq.w	800e5ee <dir_find+0x34>
 800e724:	e004      	b.n	800e730 <dir_find+0x176>
		if (res != FR_OK) break;
 800e726:	bf00      	nop
 800e728:	e002      	b.n	800e730 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e72a:	bf00      	nop
 800e72c:	e000      	b.n	800e730 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e72e:	bf00      	nop

	return res;
 800e730:	7dfb      	ldrb	r3, [r7, #23]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3718      	adds	r7, #24
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
	...

0800e73c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08c      	sub	sp, #48	; 0x30
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e750:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <dir_register+0x20>
 800e758:	2306      	movs	r3, #6
 800e75a:	e0e0      	b.n	800e91e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e75c:	2300      	movs	r3, #0
 800e75e:	627b      	str	r3, [r7, #36]	; 0x24
 800e760:	e002      	b.n	800e768 <dir_register+0x2c>
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	3301      	adds	r3, #1
 800e766:	627b      	str	r3, [r7, #36]	; 0x24
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	691a      	ldr	r2, [r3, #16]
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	005b      	lsls	r3, r3, #1
 800e770:	4413      	add	r3, r2
 800e772:	881b      	ldrh	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1f4      	bne.n	800e762 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e77e:	f107 030c 	add.w	r3, r7, #12
 800e782:	220c      	movs	r2, #12
 800e784:	4618      	mov	r0, r3
 800e786:	f7fe fc99 	bl	800d0bc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e78a:	7dfb      	ldrb	r3, [r7, #23]
 800e78c:	f003 0301 	and.w	r3, r3, #1
 800e790:	2b00      	cmp	r3, #0
 800e792:	d032      	beq.n	800e7fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2240      	movs	r2, #64	; 0x40
 800e798:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e79c:	2301      	movs	r3, #1
 800e79e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7a0:	e016      	b.n	800e7d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	691a      	ldr	r2, [r3, #16]
 800e7ac:	f107 010c 	add.w	r1, r7, #12
 800e7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b2:	f7ff fdab 	bl	800e30c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff feff 	bl	800e5ba <dir_find>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e7c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	2b63      	cmp	r3, #99	; 0x63
 800e7d4:	d9e5      	bls.n	800e7a2 <dir_register+0x66>
 800e7d6:	e000      	b.n	800e7da <dir_register+0x9e>
			if (res != FR_OK) break;
 800e7d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7dc:	2b64      	cmp	r3, #100	; 0x64
 800e7de:	d101      	bne.n	800e7e4 <dir_register+0xa8>
 800e7e0:	2307      	movs	r3, #7
 800e7e2:	e09c      	b.n	800e91e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e7e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7e8:	2b04      	cmp	r3, #4
 800e7ea:	d002      	beq.n	800e7f2 <dir_register+0xb6>
 800e7ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7f0:	e095      	b.n	800e91e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e7f2:	7dfa      	ldrb	r2, [r7, #23]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	f003 0302 	and.w	r3, r3, #2
 800e800:	2b00      	cmp	r3, #0
 800e802:	d007      	beq.n	800e814 <dir_register+0xd8>
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	330c      	adds	r3, #12
 800e808:	4a47      	ldr	r2, [pc, #284]	; (800e928 <dir_register+0x1ec>)
 800e80a:	fba2 2303 	umull	r2, r3, r2, r3
 800e80e:	089b      	lsrs	r3, r3, #2
 800e810:	3301      	adds	r3, #1
 800e812:	e000      	b.n	800e816 <dir_register+0xda>
 800e814:	2301      	movs	r3, #1
 800e816:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e818:	6a39      	ldr	r1, [r7, #32]
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7ff fbb4 	bl	800df88 <dir_alloc>
 800e820:	4603      	mov	r3, r0
 800e822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d148      	bne.n	800e8c0 <dir_register+0x184>
 800e82e:	6a3b      	ldr	r3, [r7, #32]
 800e830:	3b01      	subs	r3, #1
 800e832:	623b      	str	r3, [r7, #32]
 800e834:	6a3b      	ldr	r3, [r7, #32]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d042      	beq.n	800e8c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	695a      	ldr	r2, [r3, #20]
 800e83e:	6a3b      	ldr	r3, [r7, #32]
 800e840:	015b      	lsls	r3, r3, #5
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	4619      	mov	r1, r3
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f7ff fa3f 	bl	800dcca <dir_sdi>
 800e84c:	4603      	mov	r3, r0
 800e84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e856:	2b00      	cmp	r3, #0
 800e858:	d132      	bne.n	800e8c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	3324      	adds	r3, #36	; 0x24
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff fde3 	bl	800e42a <sum_sfn>
 800e864:	4603      	mov	r3, r0
 800e866:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	69db      	ldr	r3, [r3, #28]
 800e86c:	4619      	mov	r1, r3
 800e86e:	69f8      	ldr	r0, [r7, #28]
 800e870:	f7fe fe52 	bl	800d518 <move_window>
 800e874:	4603      	mov	r3, r0
 800e876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e87a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d11d      	bne.n	800e8be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	6918      	ldr	r0, [r3, #16]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6a19      	ldr	r1, [r3, #32]
 800e88a:	6a3b      	ldr	r3, [r7, #32]
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	7efb      	ldrb	r3, [r7, #27]
 800e890:	f7ff fcd4 	bl	800e23c <put_lfn>
				fs->wflag = 1;
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	2201      	movs	r2, #1
 800e898:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e89a:	2100      	movs	r1, #0
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7ff fa9d 	bl	800dddc <dir_next>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e8a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d107      	bne.n	800e8c0 <dir_register+0x184>
 800e8b0:	6a3b      	ldr	r3, [r7, #32]
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	623b      	str	r3, [r7, #32]
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1d5      	bne.n	800e868 <dir_register+0x12c>
 800e8bc:	e000      	b.n	800e8c0 <dir_register+0x184>
				if (res != FR_OK) break;
 800e8be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e8c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d128      	bne.n	800e91a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	69db      	ldr	r3, [r3, #28]
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	69f8      	ldr	r0, [r7, #28]
 800e8d0:	f7fe fe22 	bl	800d518 <move_window>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e8da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d11b      	bne.n	800e91a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a1b      	ldr	r3, [r3, #32]
 800e8e6:	2220      	movs	r2, #32
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe fc07 	bl	800d0fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6a18      	ldr	r0, [r3, #32]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	3324      	adds	r3, #36	; 0x24
 800e8f8:	220b      	movs	r2, #11
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	f7fe fbde 	bl	800d0bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6a1b      	ldr	r3, [r3, #32]
 800e90a:	330c      	adds	r3, #12
 800e90c:	f002 0218 	and.w	r2, r2, #24
 800e910:	b2d2      	uxtb	r2, r2
 800e912:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	2201      	movs	r2, #1
 800e918:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e91a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3730      	adds	r7, #48	; 0x30
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	4ec4ec4f 	.word	0x4ec4ec4f

0800e92c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b086      	sub	sp, #24
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	695b      	ldr	r3, [r3, #20]
 800e93e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e948:	d007      	beq.n	800e95a <dir_remove+0x2e>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7ff f9ba 	bl	800dcca <dir_sdi>
 800e956:	4603      	mov	r3, r0
 800e958:	e000      	b.n	800e95c <dir_remove+0x30>
 800e95a:	2300      	movs	r3, #0
 800e95c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e95e:	7dfb      	ldrb	r3, [r7, #23]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d128      	bne.n	800e9b6 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	69db      	ldr	r3, [r3, #28]
 800e968:	4619      	mov	r1, r3
 800e96a:	6938      	ldr	r0, [r7, #16]
 800e96c:	f7fe fdd4 	bl	800d518 <move_window>
 800e970:	4603      	mov	r3, r0
 800e972:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e974:	7dfb      	ldrb	r3, [r7, #23]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d115      	bne.n	800e9a6 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a1b      	ldr	r3, [r3, #32]
 800e97e:	22e5      	movs	r2, #229	; 0xe5
 800e980:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	2201      	movs	r2, #1
 800e986:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	695b      	ldr	r3, [r3, #20]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d90b      	bls.n	800e9aa <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800e992:	2100      	movs	r1, #0
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f7ff fa21 	bl	800dddc <dir_next>
 800e99a:	4603      	mov	r3, r0
 800e99c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800e99e:	7dfb      	ldrb	r3, [r7, #23]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d0df      	beq.n	800e964 <dir_remove+0x38>
 800e9a4:	e002      	b.n	800e9ac <dir_remove+0x80>
			if (res != FR_OK) break;
 800e9a6:	bf00      	nop
 800e9a8:	e000      	b.n	800e9ac <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800e9aa:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800e9ac:	7dfb      	ldrb	r3, [r7, #23]
 800e9ae:	2b04      	cmp	r3, #4
 800e9b0:	d101      	bne.n	800e9b6 <dir_remove+0x8a>
 800e9b2:	2302      	movs	r3, #2
 800e9b4:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b088      	sub	sp, #32
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	69db      	ldr	r3, [r3, #28]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f000 80c9 	beq.w	800eb72 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9e8:	d032      	beq.n	800ea50 <get_fileinfo+0x90>
			i = j = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	61bb      	str	r3, [r7, #24]
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e9f2:	e01b      	b.n	800ea2c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e9f4:	89fb      	ldrh	r3, [r7, #14]
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f001 ffcb 	bl	8010994 <ff_convert>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ea02:	89fb      	ldrh	r3, [r7, #14]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d102      	bne.n	800ea0e <get_fileinfo+0x4e>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	61fb      	str	r3, [r7, #28]
 800ea0c:	e01a      	b.n	800ea44 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	2bfe      	cmp	r3, #254	; 0xfe
 800ea12:	d902      	bls.n	800ea1a <get_fileinfo+0x5a>
 800ea14:	2300      	movs	r3, #0
 800ea16:	61fb      	str	r3, [r7, #28]
 800ea18:	e014      	b.n	800ea44 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	1c5a      	adds	r2, r3, #1
 800ea1e:	61fa      	str	r2, [r7, #28]
 800ea20:	89fa      	ldrh	r2, [r7, #14]
 800ea22:	b2d1      	uxtb	r1, r2
 800ea24:	683a      	ldr	r2, [r7, #0]
 800ea26:	4413      	add	r3, r2
 800ea28:	460a      	mov	r2, r1
 800ea2a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	691a      	ldr	r2, [r3, #16]
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	1c59      	adds	r1, r3, #1
 800ea34:	61b9      	str	r1, [r7, #24]
 800ea36:	005b      	lsls	r3, r3, #1
 800ea38:	4413      	add	r3, r2
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	81fb      	strh	r3, [r7, #14]
 800ea3e:	89fb      	ldrh	r3, [r7, #14]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1d7      	bne.n	800e9f4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	4413      	add	r3, r2
 800ea4a:	3316      	adds	r3, #22
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ea50:	2300      	movs	r3, #0
 800ea52:	61bb      	str	r3, [r7, #24]
 800ea54:	69bb      	ldr	r3, [r7, #24]
 800ea56:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	3316      	adds	r3, #22
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ea64:	e04c      	b.n	800eb00 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a1a      	ldr	r2, [r3, #32]
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	1c59      	adds	r1, r3, #1
 800ea6e:	61f9      	str	r1, [r7, #28]
 800ea70:	4413      	add	r3, r2
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
 800ea78:	2b20      	cmp	r3, #32
 800ea7a:	d100      	bne.n	800ea7e <get_fileinfo+0xbe>
 800ea7c:	e040      	b.n	800eb00 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ea7e:	7dfb      	ldrb	r3, [r7, #23]
 800ea80:	2b05      	cmp	r3, #5
 800ea82:	d101      	bne.n	800ea88 <get_fileinfo+0xc8>
 800ea84:	23e5      	movs	r3, #229	; 0xe5
 800ea86:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	2b09      	cmp	r3, #9
 800ea8c:	d10f      	bne.n	800eaae <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ea8e:	89bb      	ldrh	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d105      	bne.n	800eaa0 <get_fileinfo+0xe0>
 800ea94:	683a      	ldr	r2, [r7, #0]
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	4413      	add	r3, r2
 800ea9a:	3316      	adds	r3, #22
 800ea9c:	222e      	movs	r2, #46	; 0x2e
 800ea9e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	1c5a      	adds	r2, r3, #1
 800eaa4:	61ba      	str	r2, [r7, #24]
 800eaa6:	683a      	ldr	r2, [r7, #0]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	222e      	movs	r2, #46	; 0x2e
 800eaac:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800eaae:	683a      	ldr	r2, [r7, #0]
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	4413      	add	r3, r2
 800eab4:	3309      	adds	r3, #9
 800eab6:	7dfa      	ldrb	r2, [r7, #23]
 800eab8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800eaba:	89bb      	ldrh	r3, [r7, #12]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d11c      	bne.n	800eafa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800eac0:	7dfb      	ldrb	r3, [r7, #23]
 800eac2:	2b40      	cmp	r3, #64	; 0x40
 800eac4:	d913      	bls.n	800eaee <get_fileinfo+0x12e>
 800eac6:	7dfb      	ldrb	r3, [r7, #23]
 800eac8:	2b5a      	cmp	r3, #90	; 0x5a
 800eaca:	d810      	bhi.n	800eaee <get_fileinfo+0x12e>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6a1b      	ldr	r3, [r3, #32]
 800ead0:	330c      	adds	r3, #12
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	461a      	mov	r2, r3
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	2b08      	cmp	r3, #8
 800eada:	d901      	bls.n	800eae0 <get_fileinfo+0x120>
 800eadc:	2310      	movs	r3, #16
 800eade:	e000      	b.n	800eae2 <get_fileinfo+0x122>
 800eae0:	2308      	movs	r3, #8
 800eae2:	4013      	ands	r3, r2
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800eae8:	7dfb      	ldrb	r3, [r7, #23]
 800eaea:	3320      	adds	r3, #32
 800eaec:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800eaee:	683a      	ldr	r2, [r7, #0]
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	3316      	adds	r3, #22
 800eaf6:	7dfa      	ldrb	r2, [r7, #23]
 800eaf8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	3301      	adds	r3, #1
 800eafe:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	2b0a      	cmp	r3, #10
 800eb04:	d9af      	bls.n	800ea66 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800eb06:	89bb      	ldrh	r3, [r7, #12]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10d      	bne.n	800eb28 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800eb0c:	683a      	ldr	r2, [r7, #0]
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	4413      	add	r3, r2
 800eb12:	3316      	adds	r3, #22
 800eb14:	2200      	movs	r2, #0
 800eb16:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a1b      	ldr	r3, [r3, #32]
 800eb1c:	330c      	adds	r3, #12
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d101      	bne.n	800eb28 <get_fileinfo+0x168>
 800eb24:	2300      	movs	r3, #0
 800eb26:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800eb28:	683a      	ldr	r2, [r7, #0]
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	3309      	adds	r3, #9
 800eb30:	2200      	movs	r2, #0
 800eb32:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6a1b      	ldr	r3, [r3, #32]
 800eb38:	7ada      	ldrb	r2, [r3, #11]
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	331c      	adds	r3, #28
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fe fa4f 	bl	800cfe8 <ld_dword>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6a1b      	ldr	r3, [r3, #32]
 800eb54:	3316      	adds	r3, #22
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fe fa46 	bl	800cfe8 <ld_dword>
 800eb5c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	80da      	strh	r2, [r3, #6]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	0c1b      	lsrs	r3, r3, #16
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	809a      	strh	r2, [r3, #4]
 800eb70:	e000      	b.n	800eb74 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800eb72:	bf00      	nop
}
 800eb74:	3720      	adds	r7, #32
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
	...

0800eb7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b08a      	sub	sp, #40	; 0x28
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	613b      	str	r3, [r7, #16]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	691b      	ldr	r3, [r3, #16]
 800eb92:	60fb      	str	r3, [r7, #12]
 800eb94:	2300      	movs	r3, #0
 800eb96:	617b      	str	r3, [r7, #20]
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800eb9c:	69bb      	ldr	r3, [r7, #24]
 800eb9e:	1c5a      	adds	r2, r3, #1
 800eba0:	61ba      	str	r2, [r7, #24]
 800eba2:	693a      	ldr	r2, [r7, #16]
 800eba4:	4413      	add	r3, r2
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ebaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebac:	2b1f      	cmp	r3, #31
 800ebae:	d940      	bls.n	800ec32 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ebb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebb2:	2b2f      	cmp	r3, #47	; 0x2f
 800ebb4:	d006      	beq.n	800ebc4 <create_name+0x48>
 800ebb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebb8:	2b5c      	cmp	r3, #92	; 0x5c
 800ebba:	d110      	bne.n	800ebde <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ebbc:	e002      	b.n	800ebc4 <create_name+0x48>
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	61bb      	str	r3, [r7, #24]
 800ebc4:	693a      	ldr	r2, [r7, #16]
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	4413      	add	r3, r2
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	2b2f      	cmp	r3, #47	; 0x2f
 800ebce:	d0f6      	beq.n	800ebbe <create_name+0x42>
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2b5c      	cmp	r3, #92	; 0x5c
 800ebda:	d0f0      	beq.n	800ebbe <create_name+0x42>
			break;
 800ebdc:	e02a      	b.n	800ec34 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	2bfe      	cmp	r3, #254	; 0xfe
 800ebe2:	d901      	bls.n	800ebe8 <create_name+0x6c>
 800ebe4:	2306      	movs	r3, #6
 800ebe6:	e177      	b.n	800eed8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ebe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ebee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebf0:	2101      	movs	r1, #1
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f001 fece 	bl	8010994 <ff_convert>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ebfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d101      	bne.n	800ec06 <create_name+0x8a>
 800ec02:	2306      	movs	r3, #6
 800ec04:	e168      	b.n	800eed8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ec06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec08:	2b7f      	cmp	r3, #127	; 0x7f
 800ec0a:	d809      	bhi.n	800ec20 <create_name+0xa4>
 800ec0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec0e:	4619      	mov	r1, r3
 800ec10:	48b3      	ldr	r0, [pc, #716]	; (800eee0 <create_name+0x364>)
 800ec12:	f7fe fab5 	bl	800d180 <chk_chr>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d001      	beq.n	800ec20 <create_name+0xa4>
 800ec1c:	2306      	movs	r3, #6
 800ec1e:	e15b      	b.n	800eed8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	1c5a      	adds	r2, r3, #1
 800ec24:	617a      	str	r2, [r7, #20]
 800ec26:	005b      	lsls	r3, r3, #1
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec2e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ec30:	e7b4      	b.n	800eb9c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ec32:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ec34:	693a      	ldr	r2, [r7, #16]
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	441a      	add	r2, r3
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ec3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec40:	2b1f      	cmp	r3, #31
 800ec42:	d801      	bhi.n	800ec48 <create_name+0xcc>
 800ec44:	2304      	movs	r3, #4
 800ec46:	e000      	b.n	800ec4a <create_name+0xce>
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ec4e:	e011      	b.n	800ec74 <create_name+0xf8>
		w = lfn[di - 1];
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec56:	3b01      	subs	r3, #1
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ec62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec64:	2b20      	cmp	r3, #32
 800ec66:	d002      	beq.n	800ec6e <create_name+0xf2>
 800ec68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ec6c:	d106      	bne.n	800ec7c <create_name+0x100>
		di--;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	3b01      	subs	r3, #1
 800ec72:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1ea      	bne.n	800ec50 <create_name+0xd4>
 800ec7a:	e000      	b.n	800ec7e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ec7c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	4413      	add	r3, r2
 800ec86:	2200      	movs	r2, #0
 800ec88:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d101      	bne.n	800ec94 <create_name+0x118>
 800ec90:	2306      	movs	r3, #6
 800ec92:	e121      	b.n	800eed8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	3324      	adds	r3, #36	; 0x24
 800ec98:	220b      	movs	r2, #11
 800ec9a:	2120      	movs	r1, #32
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fe fa2e 	bl	800d0fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800eca2:	2300      	movs	r3, #0
 800eca4:	61bb      	str	r3, [r7, #24]
 800eca6:	e002      	b.n	800ecae <create_name+0x132>
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	61bb      	str	r3, [r7, #24]
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	005b      	lsls	r3, r3, #1
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	2b20      	cmp	r3, #32
 800ecba:	d0f5      	beq.n	800eca8 <create_name+0x12c>
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	005b      	lsls	r3, r3, #1
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	2b2e      	cmp	r3, #46	; 0x2e
 800ecc8:	d0ee      	beq.n	800eca8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d009      	beq.n	800ece4 <create_name+0x168>
 800ecd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecd4:	f043 0303 	orr.w	r3, r3, #3
 800ecd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ecdc:	e002      	b.n	800ece4 <create_name+0x168>
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	3b01      	subs	r3, #1
 800ece2:	617b      	str	r3, [r7, #20]
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d009      	beq.n	800ecfe <create_name+0x182>
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	68fa      	ldr	r2, [r7, #12]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	2b2e      	cmp	r3, #46	; 0x2e
 800ecfc:	d1ef      	bne.n	800ecde <create_name+0x162>

	i = b = 0; ni = 8;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed04:	2300      	movs	r3, #0
 800ed06:	623b      	str	r3, [r7, #32]
 800ed08:	2308      	movs	r3, #8
 800ed0a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	1c5a      	adds	r2, r3, #1
 800ed10:	61ba      	str	r2, [r7, #24]
 800ed12:	005b      	lsls	r3, r3, #1
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	4413      	add	r3, r2
 800ed18:	881b      	ldrh	r3, [r3, #0]
 800ed1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ed1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 8090 	beq.w	800ee44 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ed24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed26:	2b20      	cmp	r3, #32
 800ed28:	d006      	beq.n	800ed38 <create_name+0x1bc>
 800ed2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ed2e:	d10a      	bne.n	800ed46 <create_name+0x1ca>
 800ed30:	69ba      	ldr	r2, [r7, #24]
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d006      	beq.n	800ed46 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ed38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed3c:	f043 0303 	orr.w	r3, r3, #3
 800ed40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed44:	e07d      	b.n	800ee42 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ed46:	6a3a      	ldr	r2, [r7, #32]
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d203      	bcs.n	800ed56 <create_name+0x1da>
 800ed4e:	69ba      	ldr	r2, [r7, #24]
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d123      	bne.n	800ed9e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	2b0b      	cmp	r3, #11
 800ed5a:	d106      	bne.n	800ed6a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ed5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed60:	f043 0303 	orr.w	r3, r3, #3
 800ed64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed68:	e06f      	b.n	800ee4a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ed6a:	69ba      	ldr	r2, [r7, #24]
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d005      	beq.n	800ed7e <create_name+0x202>
 800ed72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed76:	f043 0303 	orr.w	r3, r3, #3
 800ed7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ed7e:	69ba      	ldr	r2, [r7, #24]
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d860      	bhi.n	800ee48 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	61bb      	str	r3, [r7, #24]
 800ed8a:	2308      	movs	r3, #8
 800ed8c:	623b      	str	r3, [r7, #32]
 800ed8e:	230b      	movs	r3, #11
 800ed90:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ed92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed9c:	e051      	b.n	800ee42 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ed9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda0:	2b7f      	cmp	r3, #127	; 0x7f
 800eda2:	d914      	bls.n	800edce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800eda4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda6:	2100      	movs	r1, #0
 800eda8:	4618      	mov	r0, r3
 800edaa:	f001 fdf3 	bl	8010994 <ff_convert>
 800edae:	4603      	mov	r3, r0
 800edb0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800edb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d004      	beq.n	800edc2 <create_name+0x246>
 800edb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edba:	3b80      	subs	r3, #128	; 0x80
 800edbc:	4a49      	ldr	r2, [pc, #292]	; (800eee4 <create_name+0x368>)
 800edbe:	5cd3      	ldrb	r3, [r2, r3]
 800edc0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800edc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc6:	f043 0302 	orr.w	r3, r3, #2
 800edca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800edce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d007      	beq.n	800ede4 <create_name+0x268>
 800edd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edd6:	4619      	mov	r1, r3
 800edd8:	4843      	ldr	r0, [pc, #268]	; (800eee8 <create_name+0x36c>)
 800edda:	f7fe f9d1 	bl	800d180 <chk_chr>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d008      	beq.n	800edf6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ede4:	235f      	movs	r3, #95	; 0x5f
 800ede6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ede8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edec:	f043 0303 	orr.w	r3, r3, #3
 800edf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edf4:	e01b      	b.n	800ee2e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800edf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edf8:	2b40      	cmp	r3, #64	; 0x40
 800edfa:	d909      	bls.n	800ee10 <create_name+0x294>
 800edfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edfe:	2b5a      	cmp	r3, #90	; 0x5a
 800ee00:	d806      	bhi.n	800ee10 <create_name+0x294>
					b |= 2;
 800ee02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee06:	f043 0302 	orr.w	r3, r3, #2
 800ee0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee0e:	e00e      	b.n	800ee2e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ee10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee12:	2b60      	cmp	r3, #96	; 0x60
 800ee14:	d90b      	bls.n	800ee2e <create_name+0x2b2>
 800ee16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee18:	2b7a      	cmp	r3, #122	; 0x7a
 800ee1a:	d808      	bhi.n	800ee2e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ee1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee20:	f043 0301 	orr.w	r3, r3, #1
 800ee24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee2a:	3b20      	subs	r3, #32
 800ee2c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	1c5a      	adds	r2, r3, #1
 800ee32:	623a      	str	r2, [r7, #32]
 800ee34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee36:	b2d1      	uxtb	r1, r2
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	460a      	mov	r2, r1
 800ee3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ee42:	e763      	b.n	800ed0c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ee44:	bf00      	nop
 800ee46:	e000      	b.n	800ee4a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800ee48:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee50:	2be5      	cmp	r3, #229	; 0xe5
 800ee52:	d103      	bne.n	800ee5c <create_name+0x2e0>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2205      	movs	r2, #5
 800ee58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	2b08      	cmp	r3, #8
 800ee60:	d104      	bne.n	800ee6c <create_name+0x2f0>
 800ee62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ee6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee70:	f003 030c 	and.w	r3, r3, #12
 800ee74:	2b0c      	cmp	r3, #12
 800ee76:	d005      	beq.n	800ee84 <create_name+0x308>
 800ee78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee7c:	f003 0303 	and.w	r3, r3, #3
 800ee80:	2b03      	cmp	r3, #3
 800ee82:	d105      	bne.n	800ee90 <create_name+0x314>
 800ee84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee88:	f043 0302 	orr.w	r3, r3, #2
 800ee8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ee90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee94:	f003 0302 	and.w	r3, r3, #2
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d117      	bne.n	800eecc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ee9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eea0:	f003 0303 	and.w	r3, r3, #3
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d105      	bne.n	800eeb4 <create_name+0x338>
 800eea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeac:	f043 0310 	orr.w	r3, r3, #16
 800eeb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800eeb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eeb8:	f003 030c 	and.w	r3, r3, #12
 800eebc:	2b04      	cmp	r3, #4
 800eebe:	d105      	bne.n	800eecc <create_name+0x350>
 800eec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eec4:	f043 0308 	orr.w	r3, r3, #8
 800eec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eed2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800eed6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3728      	adds	r7, #40	; 0x28
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	080122bc 	.word	0x080122bc
 800eee4:	08012370 	.word	0x08012370
 800eee8:	080122c8 	.word	0x080122c8

0800eeec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef00:	e002      	b.n	800ef08 <follow_path+0x1c>
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	3301      	adds	r3, #1
 800ef06:	603b      	str	r3, [r7, #0]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	2b2f      	cmp	r3, #47	; 0x2f
 800ef0e:	d0f8      	beq.n	800ef02 <follow_path+0x16>
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	2b5c      	cmp	r3, #92	; 0x5c
 800ef16:	d0f4      	beq.n	800ef02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	2b1f      	cmp	r3, #31
 800ef24:	d80a      	bhi.n	800ef3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2280      	movs	r2, #128	; 0x80
 800ef2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ef2e:	2100      	movs	r1, #0
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f7fe feca 	bl	800dcca <dir_sdi>
 800ef36:	4603      	mov	r3, r0
 800ef38:	75fb      	strb	r3, [r7, #23]
 800ef3a:	e048      	b.n	800efce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ef3c:	463b      	mov	r3, r7
 800ef3e:	4619      	mov	r1, r3
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f7ff fe1b 	bl	800eb7c <create_name>
 800ef46:	4603      	mov	r3, r0
 800ef48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef4a:	7dfb      	ldrb	r3, [r7, #23]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d139      	bne.n	800efc4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7ff fb32 	bl	800e5ba <dir_find>
 800ef56:	4603      	mov	r3, r0
 800ef58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ef60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ef62:	7dfb      	ldrb	r3, [r7, #23]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00a      	beq.n	800ef7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ef68:	7dfb      	ldrb	r3, [r7, #23]
 800ef6a:	2b04      	cmp	r3, #4
 800ef6c:	d12c      	bne.n	800efc8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ef6e:	7afb      	ldrb	r3, [r7, #11]
 800ef70:	f003 0304 	and.w	r3, r3, #4
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d127      	bne.n	800efc8 <follow_path+0xdc>
 800ef78:	2305      	movs	r3, #5
 800ef7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ef7c:	e024      	b.n	800efc8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ef7e:	7afb      	ldrb	r3, [r7, #11]
 800ef80:	f003 0304 	and.w	r3, r3, #4
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d121      	bne.n	800efcc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	799b      	ldrb	r3, [r3, #6]
 800ef8c:	f003 0310 	and.w	r3, r3, #16
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d102      	bne.n	800ef9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ef94:	2305      	movs	r3, #5
 800ef96:	75fb      	strb	r3, [r7, #23]
 800ef98:	e019      	b.n	800efce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	695b      	ldr	r3, [r3, #20]
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	8992      	ldrh	r2, [r2, #12]
 800efa8:	fbb3 f0f2 	udiv	r0, r3, r2
 800efac:	fb02 f200 	mul.w	r2, r2, r0
 800efb0:	1a9b      	subs	r3, r3, r2
 800efb2:	440b      	add	r3, r1
 800efb4:	4619      	mov	r1, r3
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	f7ff f82d 	bl	800e016 <ld_clust>
 800efbc:	4602      	mov	r2, r0
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800efc2:	e7bb      	b.n	800ef3c <follow_path+0x50>
			if (res != FR_OK) break;
 800efc4:	bf00      	nop
 800efc6:	e002      	b.n	800efce <follow_path+0xe2>
				break;
 800efc8:	bf00      	nop
 800efca:	e000      	b.n	800efce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800efcc:	bf00      	nop
			}
		}
	}

	return res;
 800efce:	7dfb      	ldrb	r3, [r7, #23]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3718      	adds	r7, #24
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800efd8:	b480      	push	{r7}
 800efda:	b087      	sub	sp, #28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800efe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efe4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d031      	beq.n	800f052 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	617b      	str	r3, [r7, #20]
 800eff4:	e002      	b.n	800effc <get_ldnumber+0x24>
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	3301      	adds	r3, #1
 800effa:	617b      	str	r3, [r7, #20]
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	2b1f      	cmp	r3, #31
 800f002:	d903      	bls.n	800f00c <get_ldnumber+0x34>
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	2b3a      	cmp	r3, #58	; 0x3a
 800f00a:	d1f4      	bne.n	800eff6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	2b3a      	cmp	r3, #58	; 0x3a
 800f012:	d11c      	bne.n	800f04e <get_ldnumber+0x76>
			tp = *path;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	1c5a      	adds	r2, r3, #1
 800f01e:	60fa      	str	r2, [r7, #12]
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	3b30      	subs	r3, #48	; 0x30
 800f024:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	2b09      	cmp	r3, #9
 800f02a:	d80e      	bhi.n	800f04a <get_ldnumber+0x72>
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	429a      	cmp	r2, r3
 800f032:	d10a      	bne.n	800f04a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d107      	bne.n	800f04a <get_ldnumber+0x72>
					vol = (int)i;
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	3301      	adds	r3, #1
 800f042:	617b      	str	r3, [r7, #20]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	697a      	ldr	r2, [r7, #20]
 800f048:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	e002      	b.n	800f054 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f04e:	2300      	movs	r3, #0
 800f050:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f052:	693b      	ldr	r3, [r7, #16]
}
 800f054:	4618      	mov	r0, r3
 800f056:	371c      	adds	r7, #28
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	70da      	strb	r2, [r3, #3]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f076:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f078:	6839      	ldr	r1, [r7, #0]
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7fe fa4c 	bl	800d518 <move_window>
 800f080:	4603      	mov	r3, r0
 800f082:	2b00      	cmp	r3, #0
 800f084:	d001      	beq.n	800f08a <check_fs+0x2a>
 800f086:	2304      	movs	r3, #4
 800f088:	e038      	b.n	800f0fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	3338      	adds	r3, #56	; 0x38
 800f08e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f092:	4618      	mov	r0, r3
 800f094:	f7fd ff90 	bl	800cfb8 <ld_word>
 800f098:	4603      	mov	r3, r0
 800f09a:	461a      	mov	r2, r3
 800f09c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d001      	beq.n	800f0a8 <check_fs+0x48>
 800f0a4:	2303      	movs	r3, #3
 800f0a6:	e029      	b.n	800f0fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0ae:	2be9      	cmp	r3, #233	; 0xe9
 800f0b0:	d009      	beq.n	800f0c6 <check_fs+0x66>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0b8:	2beb      	cmp	r3, #235	; 0xeb
 800f0ba:	d11e      	bne.n	800f0fa <check_fs+0x9a>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f0c2:	2b90      	cmp	r3, #144	; 0x90
 800f0c4:	d119      	bne.n	800f0fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	3338      	adds	r3, #56	; 0x38
 800f0ca:	3336      	adds	r3, #54	; 0x36
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fd ff8b 	bl	800cfe8 <ld_dword>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f0d8:	4a0a      	ldr	r2, [pc, #40]	; (800f104 <check_fs+0xa4>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d101      	bne.n	800f0e2 <check_fs+0x82>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	e00c      	b.n	800f0fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	3338      	adds	r3, #56	; 0x38
 800f0e6:	3352      	adds	r3, #82	; 0x52
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fd ff7d 	bl	800cfe8 <ld_dword>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	4b05      	ldr	r3, [pc, #20]	; (800f108 <check_fs+0xa8>)
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d101      	bne.n	800f0fa <check_fs+0x9a>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	e000      	b.n	800f0fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f0fa:	2302      	movs	r3, #2
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	00544146 	.word	0x00544146
 800f108:	33544146 	.word	0x33544146

0800f10c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b096      	sub	sp, #88	; 0x58
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	4613      	mov	r3, r2
 800f118:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	2200      	movs	r2, #0
 800f11e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f7ff ff59 	bl	800efd8 <get_ldnumber>
 800f126:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	da01      	bge.n	800f132 <find_volume+0x26>
 800f12e:	230b      	movs	r3, #11
 800f130:	e268      	b.n	800f604 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f132:	4ab0      	ldr	r2, [pc, #704]	; (800f3f4 <find_volume+0x2e8>)
 800f134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f13a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d101      	bne.n	800f146 <find_volume+0x3a>
 800f142:	230c      	movs	r3, #12
 800f144:	e25e      	b.n	800f604 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f14a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f14c:	79fb      	ldrb	r3, [r7, #7]
 800f14e:	f023 0301 	bic.w	r3, r3, #1
 800f152:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d01a      	beq.n	800f192 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15e:	785b      	ldrb	r3, [r3, #1]
 800f160:	4618      	mov	r0, r3
 800f162:	f7fd fe8b 	bl	800ce7c <disk_status>
 800f166:	4603      	mov	r3, r0
 800f168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f16c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f170:	f003 0301 	and.w	r3, r3, #1
 800f174:	2b00      	cmp	r3, #0
 800f176:	d10c      	bne.n	800f192 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f178:	79fb      	ldrb	r3, [r7, #7]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d007      	beq.n	800f18e <find_volume+0x82>
 800f17e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f182:	f003 0304 	and.w	r3, r3, #4
 800f186:	2b00      	cmp	r3, #0
 800f188:	d001      	beq.n	800f18e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f18a:	230a      	movs	r3, #10
 800f18c:	e23a      	b.n	800f604 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800f18e:	2300      	movs	r3, #0
 800f190:	e238      	b.n	800f604 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f194:	2200      	movs	r2, #0
 800f196:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f19a:	b2da      	uxtb	r2, r3
 800f19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	785b      	ldrb	r3, [r3, #1]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7fd fe83 	bl	800ceb0 <disk_initialize>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f1b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1b4:	f003 0301 	and.w	r3, r3, #1
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d001      	beq.n	800f1c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f1bc:	2303      	movs	r3, #3
 800f1be:	e221      	b.n	800f604 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f1c0:	79fb      	ldrb	r3, [r7, #7]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d007      	beq.n	800f1d6 <find_volume+0xca>
 800f1c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1ca:	f003 0304 	and.w	r3, r3, #4
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d001      	beq.n	800f1d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f1d2:	230a      	movs	r3, #10
 800f1d4:	e216      	b.n	800f604 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	7858      	ldrb	r0, [r3, #1]
 800f1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1dc:	330c      	adds	r3, #12
 800f1de:	461a      	mov	r2, r3
 800f1e0:	2102      	movs	r1, #2
 800f1e2:	f7fd fecb 	bl	800cf7c <disk_ioctl>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d001      	beq.n	800f1f0 <find_volume+0xe4>
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e209      	b.n	800f604 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	899b      	ldrh	r3, [r3, #12]
 800f1f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1f8:	d80d      	bhi.n	800f216 <find_volume+0x10a>
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fc:	899b      	ldrh	r3, [r3, #12]
 800f1fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f202:	d308      	bcc.n	800f216 <find_volume+0x10a>
 800f204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f206:	899b      	ldrh	r3, [r3, #12]
 800f208:	461a      	mov	r2, r3
 800f20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20c:	899b      	ldrh	r3, [r3, #12]
 800f20e:	3b01      	subs	r3, #1
 800f210:	4013      	ands	r3, r2
 800f212:	2b00      	cmp	r3, #0
 800f214:	d001      	beq.n	800f21a <find_volume+0x10e>
 800f216:	2301      	movs	r3, #1
 800f218:	e1f4      	b.n	800f604 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f21a:	2300      	movs	r3, #0
 800f21c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f21e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f222:	f7ff ff1d 	bl	800f060 <check_fs>
 800f226:	4603      	mov	r3, r0
 800f228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f22c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f230:	2b02      	cmp	r3, #2
 800f232:	d14b      	bne.n	800f2cc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f234:	2300      	movs	r3, #0
 800f236:	643b      	str	r3, [r7, #64]	; 0x40
 800f238:	e01f      	b.n	800f27a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f242:	011b      	lsls	r3, r3, #4
 800f244:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f248:	4413      	add	r3, r2
 800f24a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24e:	3304      	adds	r3, #4
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d006      	beq.n	800f264 <find_volume+0x158>
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	3308      	adds	r3, #8
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fd fec4 	bl	800cfe8 <ld_dword>
 800f260:	4602      	mov	r2, r0
 800f262:	e000      	b.n	800f266 <find_volume+0x15a>
 800f264:	2200      	movs	r2, #0
 800f266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f26e:	440b      	add	r3, r1
 800f270:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f276:	3301      	adds	r3, #1
 800f278:	643b      	str	r3, [r7, #64]	; 0x40
 800f27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f27c:	2b03      	cmp	r3, #3
 800f27e:	d9dc      	bls.n	800f23a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f280:	2300      	movs	r3, #0
 800f282:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f286:	2b00      	cmp	r3, #0
 800f288:	d002      	beq.n	800f290 <find_volume+0x184>
 800f28a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f28c:	3b01      	subs	r3, #1
 800f28e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f292:	009b      	lsls	r3, r3, #2
 800f294:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f298:	4413      	add	r3, r2
 800f29a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f29e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d005      	beq.n	800f2b2 <find_volume+0x1a6>
 800f2a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2aa:	f7ff fed9 	bl	800f060 <check_fs>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	e000      	b.n	800f2b4 <find_volume+0x1a8>
 800f2b2:	2303      	movs	r3, #3
 800f2b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f2b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d905      	bls.n	800f2cc <find_volume+0x1c0>
 800f2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800f2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c8:	2b03      	cmp	r3, #3
 800f2ca:	d9e1      	bls.n	800f290 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f2cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2d0:	2b04      	cmp	r3, #4
 800f2d2:	d101      	bne.n	800f2d8 <find_volume+0x1cc>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e195      	b.n	800f604 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f2d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d901      	bls.n	800f2e4 <find_volume+0x1d8>
 800f2e0:	230d      	movs	r3, #13
 800f2e2:	e18f      	b.n	800f604 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e6:	3338      	adds	r3, #56	; 0x38
 800f2e8:	330b      	adds	r3, #11
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fd fe64 	bl	800cfb8 <ld_word>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f6:	899b      	ldrh	r3, [r3, #12]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d001      	beq.n	800f300 <find_volume+0x1f4>
 800f2fc:	230d      	movs	r3, #13
 800f2fe:	e181      	b.n	800f604 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f302:	3338      	adds	r3, #56	; 0x38
 800f304:	3316      	adds	r3, #22
 800f306:	4618      	mov	r0, r3
 800f308:	f7fd fe56 	bl	800cfb8 <ld_word>
 800f30c:	4603      	mov	r3, r0
 800f30e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f312:	2b00      	cmp	r3, #0
 800f314:	d106      	bne.n	800f324 <find_volume+0x218>
 800f316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f318:	3338      	adds	r3, #56	; 0x38
 800f31a:	3324      	adds	r3, #36	; 0x24
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fd fe63 	bl	800cfe8 <ld_dword>
 800f322:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f328:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f32c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f332:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f336:	789b      	ldrb	r3, [r3, #2]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d005      	beq.n	800f348 <find_volume+0x23c>
 800f33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33e:	789b      	ldrb	r3, [r3, #2]
 800f340:	2b02      	cmp	r3, #2
 800f342:	d001      	beq.n	800f348 <find_volume+0x23c>
 800f344:	230d      	movs	r3, #13
 800f346:	e15d      	b.n	800f604 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34a:	789b      	ldrb	r3, [r3, #2]
 800f34c:	461a      	mov	r2, r3
 800f34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f350:	fb02 f303 	mul.w	r3, r2, r3
 800f354:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f360:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f364:	895b      	ldrh	r3, [r3, #10]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d008      	beq.n	800f37c <find_volume+0x270>
 800f36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36c:	895b      	ldrh	r3, [r3, #10]
 800f36e:	461a      	mov	r2, r3
 800f370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f372:	895b      	ldrh	r3, [r3, #10]
 800f374:	3b01      	subs	r3, #1
 800f376:	4013      	ands	r3, r2
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <find_volume+0x274>
 800f37c:	230d      	movs	r3, #13
 800f37e:	e141      	b.n	800f604 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f382:	3338      	adds	r3, #56	; 0x38
 800f384:	3311      	adds	r3, #17
 800f386:	4618      	mov	r0, r3
 800f388:	f7fd fe16 	bl	800cfb8 <ld_word>
 800f38c:	4603      	mov	r3, r0
 800f38e:	461a      	mov	r2, r3
 800f390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f392:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f396:	891b      	ldrh	r3, [r3, #8]
 800f398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f39a:	8992      	ldrh	r2, [r2, #12]
 800f39c:	0952      	lsrs	r2, r2, #5
 800f39e:	b292      	uxth	r2, r2
 800f3a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3a4:	fb02 f201 	mul.w	r2, r2, r1
 800f3a8:	1a9b      	subs	r3, r3, r2
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d001      	beq.n	800f3b4 <find_volume+0x2a8>
 800f3b0:	230d      	movs	r3, #13
 800f3b2:	e127      	b.n	800f604 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b6:	3338      	adds	r3, #56	; 0x38
 800f3b8:	3313      	adds	r3, #19
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7fd fdfc 	bl	800cfb8 <ld_word>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f3c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d106      	bne.n	800f3d8 <find_volume+0x2cc>
 800f3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3cc:	3338      	adds	r3, #56	; 0x38
 800f3ce:	3320      	adds	r3, #32
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fd fe09 	bl	800cfe8 <ld_dword>
 800f3d6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	3338      	adds	r3, #56	; 0x38
 800f3dc:	330e      	adds	r3, #14
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fd fdea 	bl	800cfb8 <ld_word>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f3e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d104      	bne.n	800f3f8 <find_volume+0x2ec>
 800f3ee:	230d      	movs	r3, #13
 800f3f0:	e108      	b.n	800f604 <find_volume+0x4f8>
 800f3f2:	bf00      	nop
 800f3f4:	2000020c 	.word	0x2000020c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f3f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3fc:	4413      	add	r3, r2
 800f3fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f400:	8911      	ldrh	r1, [r2, #8]
 800f402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f404:	8992      	ldrh	r2, [r2, #12]
 800f406:	0952      	lsrs	r2, r2, #5
 800f408:	b292      	uxth	r2, r2
 800f40a:	fbb1 f2f2 	udiv	r2, r1, r2
 800f40e:	b292      	uxth	r2, r2
 800f410:	4413      	add	r3, r2
 800f412:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f418:	429a      	cmp	r2, r3
 800f41a:	d201      	bcs.n	800f420 <find_volume+0x314>
 800f41c:	230d      	movs	r3, #13
 800f41e:	e0f1      	b.n	800f604 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f428:	8952      	ldrh	r2, [r2, #10]
 800f42a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f42e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	2b00      	cmp	r3, #0
 800f434:	d101      	bne.n	800f43a <find_volume+0x32e>
 800f436:	230d      	movs	r3, #13
 800f438:	e0e4      	b.n	800f604 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800f43a:	2303      	movs	r3, #3
 800f43c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f446:	4293      	cmp	r3, r2
 800f448:	d802      	bhi.n	800f450 <find_volume+0x344>
 800f44a:	2302      	movs	r3, #2
 800f44c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f456:	4293      	cmp	r3, r2
 800f458:	d802      	bhi.n	800f460 <find_volume+0x354>
 800f45a:	2301      	movs	r3, #1
 800f45c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	1c9a      	adds	r2, r3, #2
 800f464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f466:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f46c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f46e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f472:	441a      	add	r2, r3
 800f474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f476:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f478:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47c:	441a      	add	r2, r3
 800f47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f480:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f482:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f486:	2b03      	cmp	r3, #3
 800f488:	d11e      	bne.n	800f4c8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48c:	3338      	adds	r3, #56	; 0x38
 800f48e:	332a      	adds	r3, #42	; 0x2a
 800f490:	4618      	mov	r0, r3
 800f492:	f7fd fd91 	bl	800cfb8 <ld_word>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d001      	beq.n	800f4a0 <find_volume+0x394>
 800f49c:	230d      	movs	r3, #13
 800f49e:	e0b1      	b.n	800f604 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a2:	891b      	ldrh	r3, [r3, #8]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d001      	beq.n	800f4ac <find_volume+0x3a0>
 800f4a8:	230d      	movs	r3, #13
 800f4aa:	e0ab      	b.n	800f604 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ae:	3338      	adds	r3, #56	; 0x38
 800f4b0:	332c      	adds	r3, #44	; 0x2c
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fd fd98 	bl	800cfe8 <ld_dword>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4bc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c0:	69db      	ldr	r3, [r3, #28]
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	647b      	str	r3, [r7, #68]	; 0x44
 800f4c6:	e01f      	b.n	800f508 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ca:	891b      	ldrh	r3, [r3, #8]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d101      	bne.n	800f4d4 <find_volume+0x3c8>
 800f4d0:	230d      	movs	r3, #13
 800f4d2:	e097      	b.n	800f604 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4da:	441a      	add	r2, r3
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f4e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4e4:	2b02      	cmp	r3, #2
 800f4e6:	d103      	bne.n	800f4f0 <find_volume+0x3e4>
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ea:	69db      	ldr	r3, [r3, #28]
 800f4ec:	005b      	lsls	r3, r3, #1
 800f4ee:	e00a      	b.n	800f506 <find_volume+0x3fa>
 800f4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f2:	69da      	ldr	r2, [r3, #28]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	005b      	lsls	r3, r3, #1
 800f4f8:	4413      	add	r3, r2
 800f4fa:	085a      	lsrs	r2, r3, #1
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fe:	69db      	ldr	r3, [r3, #28]
 800f500:	f003 0301 	and.w	r3, r3, #1
 800f504:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f506:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50a:	6a1a      	ldr	r2, [r3, #32]
 800f50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50e:	899b      	ldrh	r3, [r3, #12]
 800f510:	4619      	mov	r1, r3
 800f512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f514:	440b      	add	r3, r1
 800f516:	3b01      	subs	r3, #1
 800f518:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f51a:	8989      	ldrh	r1, [r1, #12]
 800f51c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f520:	429a      	cmp	r2, r3
 800f522:	d201      	bcs.n	800f528 <find_volume+0x41c>
 800f524:	230d      	movs	r3, #13
 800f526:	e06d      	b.n	800f604 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f52e:	619a      	str	r2, [r3, #24]
 800f530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f532:	699a      	ldr	r2, [r3, #24]
 800f534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f536:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53a:	2280      	movs	r2, #128	; 0x80
 800f53c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f53e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f542:	2b03      	cmp	r3, #3
 800f544:	d149      	bne.n	800f5da <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f548:	3338      	adds	r3, #56	; 0x38
 800f54a:	3330      	adds	r3, #48	; 0x30
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7fd fd33 	bl	800cfb8 <ld_word>
 800f552:	4603      	mov	r3, r0
 800f554:	2b01      	cmp	r3, #1
 800f556:	d140      	bne.n	800f5da <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f55a:	3301      	adds	r3, #1
 800f55c:	4619      	mov	r1, r3
 800f55e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f560:	f7fd ffda 	bl	800d518 <move_window>
 800f564:	4603      	mov	r3, r0
 800f566:	2b00      	cmp	r3, #0
 800f568:	d137      	bne.n	800f5da <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56c:	2200      	movs	r2, #0
 800f56e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	3338      	adds	r3, #56	; 0x38
 800f574:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fd fd1d 	bl	800cfb8 <ld_word>
 800f57e:	4603      	mov	r3, r0
 800f580:	461a      	mov	r2, r3
 800f582:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f586:	429a      	cmp	r2, r3
 800f588:	d127      	bne.n	800f5da <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58c:	3338      	adds	r3, #56	; 0x38
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fd fd2a 	bl	800cfe8 <ld_dword>
 800f594:	4602      	mov	r2, r0
 800f596:	4b1d      	ldr	r3, [pc, #116]	; (800f60c <find_volume+0x500>)
 800f598:	429a      	cmp	r2, r3
 800f59a:	d11e      	bne.n	800f5da <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59e:	3338      	adds	r3, #56	; 0x38
 800f5a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fd fd1f 	bl	800cfe8 <ld_dword>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	4b18      	ldr	r3, [pc, #96]	; (800f610 <find_volume+0x504>)
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d113      	bne.n	800f5da <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b4:	3338      	adds	r3, #56	; 0x38
 800f5b6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fd fd14 	bl	800cfe8 <ld_dword>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c8:	3338      	adds	r3, #56	; 0x38
 800f5ca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fd fd0a 	bl	800cfe8 <ld_dword>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5dc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f5e0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f5e2:	4b0c      	ldr	r3, [pc, #48]	; (800f614 <find_volume+0x508>)
 800f5e4:	881b      	ldrh	r3, [r3, #0]
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <find_volume+0x508>)
 800f5ec:	801a      	strh	r2, [r3, #0]
 800f5ee:	4b09      	ldr	r3, [pc, #36]	; (800f614 <find_volume+0x508>)
 800f5f0:	881a      	ldrh	r2, [r3, #0]
 800f5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f8:	4a07      	ldr	r2, [pc, #28]	; (800f618 <find_volume+0x50c>)
 800f5fa:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f5fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5fe:	f7fd ff23 	bl	800d448 <clear_lock>
#endif
	return FR_OK;
 800f602:	2300      	movs	r3, #0
}
 800f604:	4618      	mov	r0, r3
 800f606:	3758      	adds	r7, #88	; 0x58
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	41615252 	.word	0x41615252
 800f610:	61417272 	.word	0x61417272
 800f614:	20000210 	.word	0x20000210
 800f618:	20000234 	.word	0x20000234

0800f61c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f626:	2309      	movs	r3, #9
 800f628:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01c      	beq.n	800f66a <validate+0x4e>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d018      	beq.n	800f66a <validate+0x4e>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d013      	beq.n	800f66a <validate+0x4e>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	889a      	ldrh	r2, [r3, #4]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	88db      	ldrh	r3, [r3, #6]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d10c      	bne.n	800f66a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	785b      	ldrb	r3, [r3, #1]
 800f656:	4618      	mov	r0, r3
 800f658:	f7fd fc10 	bl	800ce7c <disk_status>
 800f65c:	4603      	mov	r3, r0
 800f65e:	f003 0301 	and.w	r3, r3, #1
 800f662:	2b00      	cmp	r3, #0
 800f664:	d101      	bne.n	800f66a <validate+0x4e>
			res = FR_OK;
 800f666:	2300      	movs	r3, #0
 800f668:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f66a:	7bfb      	ldrb	r3, [r7, #15]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d102      	bne.n	800f676 <validate+0x5a>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	e000      	b.n	800f678 <validate+0x5c>
 800f676:	2300      	movs	r3, #0
 800f678:	683a      	ldr	r2, [r7, #0]
 800f67a:	6013      	str	r3, [r2, #0]
	return res;
 800f67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3710      	adds	r7, #16
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
	...

0800f688 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b088      	sub	sp, #32
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	4613      	mov	r3, r2
 800f694:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f69a:	f107 0310 	add.w	r3, r7, #16
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7ff fc9a 	bl	800efd8 <get_ldnumber>
 800f6a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	da01      	bge.n	800f6b0 <f_mount+0x28>
 800f6ac:	230b      	movs	r3, #11
 800f6ae:	e02b      	b.n	800f708 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f6b0:	4a17      	ldr	r2, [pc, #92]	; (800f710 <f_mount+0x88>)
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d005      	beq.n	800f6cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f6c0:	69b8      	ldr	r0, [r7, #24]
 800f6c2:	f7fd fec1 	bl	800d448 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d002      	beq.n	800f6d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	490d      	ldr	r1, [pc, #52]	; (800f710 <f_mount+0x88>)
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d002      	beq.n	800f6ee <f_mount+0x66>
 800f6e8:	79fb      	ldrb	r3, [r7, #7]
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d001      	beq.n	800f6f2 <f_mount+0x6a>
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	e00a      	b.n	800f708 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f6f2:	f107 010c 	add.w	r1, r7, #12
 800f6f6:	f107 0308 	add.w	r3, r7, #8
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7ff fd05 	bl	800f10c <find_volume>
 800f702:	4603      	mov	r3, r0
 800f704:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f706:	7dfb      	ldrb	r3, [r7, #23]
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3720      	adds	r7, #32
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	2000020c 	.word	0x2000020c

0800f714 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b09a      	sub	sp, #104	; 0x68
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	4613      	mov	r3, r2
 800f720:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d101      	bne.n	800f72c <f_open+0x18>
 800f728:	2309      	movs	r3, #9
 800f72a:	e1bb      	b.n	800faa4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f72c:	79fb      	ldrb	r3, [r7, #7]
 800f72e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f732:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f734:	79fa      	ldrb	r2, [r7, #7]
 800f736:	f107 0114 	add.w	r1, r7, #20
 800f73a:	f107 0308 	add.w	r3, r7, #8
 800f73e:	4618      	mov	r0, r3
 800f740:	f7ff fce4 	bl	800f10c <find_volume>
 800f744:	4603      	mov	r3, r0
 800f746:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f74a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f040 819f 	bne.w	800fa92 <f_open+0x37e>
		dj.obj.fs = fs;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f758:	68ba      	ldr	r2, [r7, #8]
 800f75a:	f107 0318 	add.w	r3, r7, #24
 800f75e:	4611      	mov	r1, r2
 800f760:	4618      	mov	r0, r3
 800f762:	f7ff fbc3 	bl	800eeec <follow_path>
 800f766:	4603      	mov	r3, r0
 800f768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f76c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f770:	2b00      	cmp	r3, #0
 800f772:	d11a      	bne.n	800f7aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f778:	b25b      	sxtb	r3, r3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	da03      	bge.n	800f786 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f77e:	2306      	movs	r3, #6
 800f780:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f784:	e011      	b.n	800f7aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f786:	79fb      	ldrb	r3, [r7, #7]
 800f788:	f023 0301 	bic.w	r3, r3, #1
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	bf14      	ite	ne
 800f790:	2301      	movne	r3, #1
 800f792:	2300      	moveq	r3, #0
 800f794:	b2db      	uxtb	r3, r3
 800f796:	461a      	mov	r2, r3
 800f798:	f107 0318 	add.w	r3, r7, #24
 800f79c:	4611      	mov	r1, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fd fd0a 	bl	800d1b8 <chk_lock>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f7aa:	79fb      	ldrb	r3, [r7, #7]
 800f7ac:	f003 031c 	and.w	r3, r3, #28
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d07f      	beq.n	800f8b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f7b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d017      	beq.n	800f7ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f7bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7c0:	2b04      	cmp	r3, #4
 800f7c2:	d10e      	bne.n	800f7e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f7c4:	f7fd fd54 	bl	800d270 <enq_lock>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d006      	beq.n	800f7dc <f_open+0xc8>
 800f7ce:	f107 0318 	add.w	r3, r7, #24
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7fe ffb2 	bl	800e73c <dir_register>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	e000      	b.n	800f7de <f_open+0xca>
 800f7dc:	2312      	movs	r3, #18
 800f7de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f7e2:	79fb      	ldrb	r3, [r7, #7]
 800f7e4:	f043 0308 	orr.w	r3, r3, #8
 800f7e8:	71fb      	strb	r3, [r7, #7]
 800f7ea:	e010      	b.n	800f80e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f7ec:	7fbb      	ldrb	r3, [r7, #30]
 800f7ee:	f003 0311 	and.w	r3, r3, #17
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d003      	beq.n	800f7fe <f_open+0xea>
					res = FR_DENIED;
 800f7f6:	2307      	movs	r3, #7
 800f7f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f7fc:	e007      	b.n	800f80e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f7fe:	79fb      	ldrb	r3, [r7, #7]
 800f800:	f003 0304 	and.w	r3, r3, #4
 800f804:	2b00      	cmp	r3, #0
 800f806:	d002      	beq.n	800f80e <f_open+0xfa>
 800f808:	2308      	movs	r3, #8
 800f80a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f80e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f812:	2b00      	cmp	r3, #0
 800f814:	d168      	bne.n	800f8e8 <f_open+0x1d4>
 800f816:	79fb      	ldrb	r3, [r7, #7]
 800f818:	f003 0308 	and.w	r3, r3, #8
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d063      	beq.n	800f8e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f820:	f7fb fd8c 	bl	800b33c <get_fattime>
 800f824:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f828:	330e      	adds	r3, #14
 800f82a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fd fc19 	bl	800d064 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f834:	3316      	adds	r3, #22
 800f836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f838:	4618      	mov	r0, r3
 800f83a:	f7fd fc13 	bl	800d064 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f840:	330b      	adds	r3, #11
 800f842:	2220      	movs	r2, #32
 800f844:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f84a:	4611      	mov	r1, r2
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fe fbe2 	bl	800e016 <ld_clust>
 800f852:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f858:	2200      	movs	r2, #0
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fe fbfa 	bl	800e054 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f862:	331c      	adds	r3, #28
 800f864:	2100      	movs	r1, #0
 800f866:	4618      	mov	r0, r3
 800f868:	f7fd fbfc 	bl	800d064 <st_dword>
					fs->wflag = 1;
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	2201      	movs	r2, #1
 800f870:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f874:	2b00      	cmp	r3, #0
 800f876:	d037      	beq.n	800f8e8 <f_open+0x1d4>
						dw = fs->winsect;
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f87c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f87e:	f107 0318 	add.w	r3, r7, #24
 800f882:	2200      	movs	r2, #0
 800f884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f886:	4618      	mov	r0, r3
 800f888:	f7fe f8ea 	bl	800da60 <remove_chain>
 800f88c:	4603      	mov	r3, r0
 800f88e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f892:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f896:	2b00      	cmp	r3, #0
 800f898:	d126      	bne.n	800f8e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fd fe3a 	bl	800d518 <move_window>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8ae:	3a01      	subs	r2, #1
 800f8b0:	615a      	str	r2, [r3, #20]
 800f8b2:	e019      	b.n	800f8e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f8b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d115      	bne.n	800f8e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f8bc:	7fbb      	ldrb	r3, [r7, #30]
 800f8be:	f003 0310 	and.w	r3, r3, #16
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d003      	beq.n	800f8ce <f_open+0x1ba>
					res = FR_NO_FILE;
 800f8c6:	2304      	movs	r3, #4
 800f8c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f8cc:	e00c      	b.n	800f8e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f8ce:	79fb      	ldrb	r3, [r7, #7]
 800f8d0:	f003 0302 	and.w	r3, r3, #2
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d007      	beq.n	800f8e8 <f_open+0x1d4>
 800f8d8:	7fbb      	ldrb	r3, [r7, #30]
 800f8da:	f003 0301 	and.w	r3, r3, #1
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d002      	beq.n	800f8e8 <f_open+0x1d4>
						res = FR_DENIED;
 800f8e2:	2307      	movs	r3, #7
 800f8e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f8e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d128      	bne.n	800f942 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f8f0:	79fb      	ldrb	r3, [r7, #7]
 800f8f2:	f003 0308 	and.w	r3, r3, #8
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d003      	beq.n	800f902 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f8fa:	79fb      	ldrb	r3, [r7, #7]
 800f8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f900:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f90a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f910:	79fb      	ldrb	r3, [r7, #7]
 800f912:	f023 0301 	bic.w	r3, r3, #1
 800f916:	2b00      	cmp	r3, #0
 800f918:	bf14      	ite	ne
 800f91a:	2301      	movne	r3, #1
 800f91c:	2300      	moveq	r3, #0
 800f91e:	b2db      	uxtb	r3, r3
 800f920:	461a      	mov	r2, r3
 800f922:	f107 0318 	add.w	r3, r7, #24
 800f926:	4611      	mov	r1, r2
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fd fcc3 	bl	800d2b4 <inc_lock>
 800f92e:	4602      	mov	r2, r0
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	691b      	ldr	r3, [r3, #16]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d102      	bne.n	800f942 <f_open+0x22e>
 800f93c:	2302      	movs	r3, #2
 800f93e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f946:	2b00      	cmp	r3, #0
 800f948:	f040 80a3 	bne.w	800fa92 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f950:	4611      	mov	r1, r2
 800f952:	4618      	mov	r0, r3
 800f954:	f7fe fb5f 	bl	800e016 <ld_clust>
 800f958:	4602      	mov	r2, r0
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f960:	331c      	adds	r3, #28
 800f962:	4618      	mov	r0, r3
 800f964:	f7fd fb40 	bl	800cfe8 <ld_dword>
 800f968:	4602      	mov	r2, r0
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2200      	movs	r2, #0
 800f972:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f974:	697a      	ldr	r2, [r7, #20]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	88da      	ldrh	r2, [r3, #6]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	79fa      	ldrb	r2, [r7, #7]
 800f986:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2200      	movs	r2, #0
 800f98c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2200      	movs	r2, #0
 800f992:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2200      	movs	r2, #0
 800f998:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	3330      	adds	r3, #48	; 0x30
 800f99e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7fd fbaa 	bl	800d0fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f9aa:	79fb      	ldrb	r3, [r7, #7]
 800f9ac:	f003 0320 	and.w	r3, r3, #32
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d06e      	beq.n	800fa92 <f_open+0x37e>
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d06a      	beq.n	800fa92 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	68da      	ldr	r2, [r3, #12]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	895b      	ldrh	r3, [r3, #10]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	899b      	ldrh	r3, [r3, #12]
 800f9ce:	fb03 f302 	mul.w	r3, r3, r2
 800f9d2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9e0:	e016      	b.n	800fa10 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fd fe53 	bl	800d692 <get_fat>
 800f9ec:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f9ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d802      	bhi.n	800f9fa <f_open+0x2e6>
 800f9f4:	2302      	movs	r3, #2
 800f9f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f9fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa00:	d102      	bne.n	800fa08 <f_open+0x2f4>
 800fa02:	2301      	movs	r3, #1
 800fa04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa0c:	1ad3      	subs	r3, r2, r3
 800fa0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d103      	bne.n	800fa20 <f_open+0x30c>
 800fa18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d8e0      	bhi.n	800f9e2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fa26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d131      	bne.n	800fa92 <f_open+0x37e>
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	899b      	ldrh	r3, [r3, #12]
 800fa32:	461a      	mov	r2, r3
 800fa34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa36:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa3a:	fb02 f201 	mul.w	r2, r2, r1
 800fa3e:	1a9b      	subs	r3, r3, r2
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d026      	beq.n	800fa92 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fd fe03 	bl	800d654 <clust2sect>
 800fa4e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fa50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d103      	bne.n	800fa5e <f_open+0x34a>
						res = FR_INT_ERR;
 800fa56:	2302      	movs	r3, #2
 800fa58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fa5c:	e019      	b.n	800fa92 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	899b      	ldrh	r3, [r3, #12]
 800fa62:	461a      	mov	r2, r3
 800fa64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa66:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa6c:	441a      	add	r2, r3
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	7858      	ldrb	r0, [r3, #1]
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	6a1a      	ldr	r2, [r3, #32]
 800fa80:	2301      	movs	r3, #1
 800fa82:	f7fd fa3b 	bl	800cefc <disk_read>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d002      	beq.n	800fa92 <f_open+0x37e>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fa92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d002      	beq.n	800faa0 <f_open+0x38c>
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800faa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3768      	adds	r7, #104	; 0x68
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}

0800faac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b08e      	sub	sp, #56	; 0x38
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
 800fab8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	2200      	movs	r2, #0
 800fac2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f107 0214 	add.w	r2, r7, #20
 800faca:	4611      	mov	r1, r2
 800facc:	4618      	mov	r0, r3
 800face:	f7ff fda5 	bl	800f61c <validate>
 800fad2:	4603      	mov	r3, r0
 800fad4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d107      	bne.n	800faf0 <f_read+0x44>
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	7d5b      	ldrb	r3, [r3, #21]
 800fae4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fae8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faec:	2b00      	cmp	r3, #0
 800faee:	d002      	beq.n	800faf6 <f_read+0x4a>
 800faf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faf4:	e135      	b.n	800fd62 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	7d1b      	ldrb	r3, [r3, #20]
 800fafa:	f003 0301 	and.w	r3, r3, #1
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d101      	bne.n	800fb06 <f_read+0x5a>
 800fb02:	2307      	movs	r3, #7
 800fb04:	e12d      	b.n	800fd62 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	68da      	ldr	r2, [r3, #12]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	699b      	ldr	r3, [r3, #24]
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	6a3b      	ldr	r3, [r7, #32]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	f240 811e 	bls.w	800fd58 <f_read+0x2ac>
 800fb1c:	6a3b      	ldr	r3, [r7, #32]
 800fb1e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fb20:	e11a      	b.n	800fd58 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	699b      	ldr	r3, [r3, #24]
 800fb26:	697a      	ldr	r2, [r7, #20]
 800fb28:	8992      	ldrh	r2, [r2, #12]
 800fb2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb2e:	fb02 f201 	mul.w	r2, r2, r1
 800fb32:	1a9b      	subs	r3, r3, r2
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f040 80d5 	bne.w	800fce4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	699b      	ldr	r3, [r3, #24]
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	8992      	ldrh	r2, [r2, #12]
 800fb42:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb46:	697a      	ldr	r2, [r7, #20]
 800fb48:	8952      	ldrh	r2, [r2, #10]
 800fb4a:	3a01      	subs	r2, #1
 800fb4c:	4013      	ands	r3, r2
 800fb4e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d12f      	bne.n	800fbb6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	699b      	ldr	r3, [r3, #24]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d103      	bne.n	800fb66 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	633b      	str	r3, [r7, #48]	; 0x30
 800fb64:	e013      	b.n	800fb8e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d007      	beq.n	800fb7e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	699b      	ldr	r3, [r3, #24]
 800fb72:	4619      	mov	r1, r3
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7fe f870 	bl	800dc5a <clmt_clust>
 800fb7a:	6338      	str	r0, [r7, #48]	; 0x30
 800fb7c:	e007      	b.n	800fb8e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	69db      	ldr	r3, [r3, #28]
 800fb84:	4619      	mov	r1, r3
 800fb86:	4610      	mov	r0, r2
 800fb88:	f7fd fd83 	bl	800d692 <get_fat>
 800fb8c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d804      	bhi.n	800fb9e <f_read+0xf2>
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2202      	movs	r2, #2
 800fb98:	755a      	strb	r2, [r3, #21]
 800fb9a:	2302      	movs	r3, #2
 800fb9c:	e0e1      	b.n	800fd62 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fba4:	d104      	bne.n	800fbb0 <f_read+0x104>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2201      	movs	r2, #1
 800fbaa:	755a      	strb	r2, [r3, #21]
 800fbac:	2301      	movs	r3, #1
 800fbae:	e0d8      	b.n	800fd62 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbb4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fbb6:	697a      	ldr	r2, [r7, #20]
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	69db      	ldr	r3, [r3, #28]
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	4610      	mov	r0, r2
 800fbc0:	f7fd fd48 	bl	800d654 <clust2sect>
 800fbc4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d104      	bne.n	800fbd6 <f_read+0x12a>
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2202      	movs	r2, #2
 800fbd0:	755a      	strb	r2, [r3, #21]
 800fbd2:	2302      	movs	r3, #2
 800fbd4:	e0c5      	b.n	800fd62 <f_read+0x2b6>
			sect += csect;
 800fbd6:	69ba      	ldr	r2, [r7, #24]
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	4413      	add	r3, r2
 800fbdc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	899b      	ldrh	r3, [r3, #12]
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d041      	beq.n	800fc76 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fbf2:	69fa      	ldr	r2, [r7, #28]
 800fbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf6:	4413      	add	r3, r2
 800fbf8:	697a      	ldr	r2, [r7, #20]
 800fbfa:	8952      	ldrh	r2, [r2, #10]
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d905      	bls.n	800fc0c <f_read+0x160>
					cc = fs->csize - csect;
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	895b      	ldrh	r3, [r3, #10]
 800fc04:	461a      	mov	r2, r3
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	7858      	ldrb	r0, [r3, #1]
 800fc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc12:	69ba      	ldr	r2, [r7, #24]
 800fc14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc16:	f7fd f971 	bl	800cefc <disk_read>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d004      	beq.n	800fc2a <f_read+0x17e>
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2201      	movs	r2, #1
 800fc24:	755a      	strb	r2, [r3, #21]
 800fc26:	2301      	movs	r3, #1
 800fc28:	e09b      	b.n	800fd62 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	7d1b      	ldrb	r3, [r3, #20]
 800fc2e:	b25b      	sxtb	r3, r3
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	da18      	bge.n	800fc66 <f_read+0x1ba>
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6a1a      	ldr	r2, [r3, #32]
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d911      	bls.n	800fc66 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6a1a      	ldr	r2, [r3, #32]
 800fc46:	69bb      	ldr	r3, [r7, #24]
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	697a      	ldr	r2, [r7, #20]
 800fc4c:	8992      	ldrh	r2, [r2, #12]
 800fc4e:	fb02 f303 	mul.w	r3, r2, r3
 800fc52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc54:	18d0      	adds	r0, r2, r3
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	899b      	ldrh	r3, [r3, #12]
 800fc60:	461a      	mov	r2, r3
 800fc62:	f7fd fa2b 	bl	800d0bc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	899b      	ldrh	r3, [r3, #12]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6e:	fb02 f303 	mul.w	r3, r2, r3
 800fc72:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800fc74:	e05c      	b.n	800fd30 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6a1b      	ldr	r3, [r3, #32]
 800fc7a:	69ba      	ldr	r2, [r7, #24]
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d02e      	beq.n	800fcde <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	7d1b      	ldrb	r3, [r3, #20]
 800fc84:	b25b      	sxtb	r3, r3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	da18      	bge.n	800fcbc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	7858      	ldrb	r0, [r3, #1]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	6a1a      	ldr	r2, [r3, #32]
 800fc98:	2301      	movs	r3, #1
 800fc9a:	f7fd f94f 	bl	800cf3c <disk_write>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d004      	beq.n	800fcae <f_read+0x202>
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2201      	movs	r2, #1
 800fca8:	755a      	strb	r2, [r3, #21]
 800fcaa:	2301      	movs	r3, #1
 800fcac:	e059      	b.n	800fd62 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	7d1b      	ldrb	r3, [r3, #20]
 800fcb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	7858      	ldrb	r0, [r3, #1]
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	69ba      	ldr	r2, [r7, #24]
 800fcca:	f7fd f917 	bl	800cefc <disk_read>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d004      	beq.n	800fcde <f_read+0x232>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	755a      	strb	r2, [r3, #21]
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e041      	b.n	800fd62 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	69ba      	ldr	r2, [r7, #24]
 800fce2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	899b      	ldrh	r3, [r3, #12]
 800fce8:	4618      	mov	r0, r3
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	699b      	ldr	r3, [r3, #24]
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	8992      	ldrh	r2, [r2, #12]
 800fcf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcf6:	fb02 f201 	mul.w	r2, r2, r1
 800fcfa:	1a9b      	subs	r3, r3, r2
 800fcfc:	1ac3      	subs	r3, r0, r3
 800fcfe:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fd00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d901      	bls.n	800fd0c <f_read+0x260>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	699b      	ldr	r3, [r3, #24]
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	8992      	ldrh	r2, [r2, #12]
 800fd1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd1e:	fb02 f200 	mul.w	r2, r2, r0
 800fd22:	1a9b      	subs	r3, r3, r2
 800fd24:	440b      	add	r3, r1
 800fd26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd28:	4619      	mov	r1, r3
 800fd2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd2c:	f7fd f9c6 	bl	800d0bc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fd30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd34:	4413      	add	r3, r2
 800fd36:	627b      	str	r3, [r7, #36]	; 0x24
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	699a      	ldr	r2, [r3, #24]
 800fd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3e:	441a      	add	r2, r3
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	619a      	str	r2, [r3, #24]
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4a:	441a      	add	r2, r3
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	601a      	str	r2, [r3, #0]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f47f aee1 	bne.w	800fb22 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3738      	adds	r7, #56	; 0x38
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fd6a:	b580      	push	{r7, lr}
 800fd6c:	b08c      	sub	sp, #48	; 0x30
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	60f8      	str	r0, [r7, #12]
 800fd72:	60b9      	str	r1, [r7, #8]
 800fd74:	607a      	str	r2, [r7, #4]
 800fd76:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f107 0210 	add.w	r2, r7, #16
 800fd88:	4611      	mov	r1, r2
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff fc46 	bl	800f61c <validate>
 800fd90:	4603      	mov	r3, r0
 800fd92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fd96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d107      	bne.n	800fdae <f_write+0x44>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	7d5b      	ldrb	r3, [r3, #21]
 800fda2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fda6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <f_write+0x4a>
 800fdae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdb2:	e16a      	b.n	801008a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	7d1b      	ldrb	r3, [r3, #20]
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d101      	bne.n	800fdc4 <f_write+0x5a>
 800fdc0:	2307      	movs	r3, #7
 800fdc2:	e162      	b.n	801008a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	699a      	ldr	r2, [r3, #24]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	441a      	add	r2, r3
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	699b      	ldr	r3, [r3, #24]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	f080 814c 	bcs.w	801006e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	699b      	ldr	r3, [r3, #24]
 800fdda:	43db      	mvns	r3, r3
 800fddc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fdde:	e146      	b.n	801006e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	699b      	ldr	r3, [r3, #24]
 800fde4:	693a      	ldr	r2, [r7, #16]
 800fde6:	8992      	ldrh	r2, [r2, #12]
 800fde8:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdec:	fb02 f201 	mul.w	r2, r2, r1
 800fdf0:	1a9b      	subs	r3, r3, r2
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f040 80f1 	bne.w	800ffda <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	699b      	ldr	r3, [r3, #24]
 800fdfc:	693a      	ldr	r2, [r7, #16]
 800fdfe:	8992      	ldrh	r2, [r2, #12]
 800fe00:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe04:	693a      	ldr	r2, [r7, #16]
 800fe06:	8952      	ldrh	r2, [r2, #10]
 800fe08:	3a01      	subs	r2, #1
 800fe0a:	4013      	ands	r3, r2
 800fe0c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d143      	bne.n	800fe9c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	699b      	ldr	r3, [r3, #24]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d10c      	bne.n	800fe36 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	689b      	ldr	r3, [r3, #8]
 800fe20:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fe22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d11a      	bne.n	800fe5e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fd fe7c 	bl	800db2a <create_chain>
 800fe32:	62b8      	str	r0, [r7, #40]	; 0x28
 800fe34:	e013      	b.n	800fe5e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d007      	beq.n	800fe4e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	699b      	ldr	r3, [r3, #24]
 800fe42:	4619      	mov	r1, r3
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f7fd ff08 	bl	800dc5a <clmt_clust>
 800fe4a:	62b8      	str	r0, [r7, #40]	; 0x28
 800fe4c:	e007      	b.n	800fe5e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fe4e:	68fa      	ldr	r2, [r7, #12]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	69db      	ldr	r3, [r3, #28]
 800fe54:	4619      	mov	r1, r3
 800fe56:	4610      	mov	r0, r2
 800fe58:	f7fd fe67 	bl	800db2a <create_chain>
 800fe5c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fe5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f000 8109 	beq.w	8010078 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fe66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d104      	bne.n	800fe76 <f_write+0x10c>
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2202      	movs	r2, #2
 800fe70:	755a      	strb	r2, [r3, #21]
 800fe72:	2302      	movs	r3, #2
 800fe74:	e109      	b.n	801008a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe7c:	d104      	bne.n	800fe88 <f_write+0x11e>
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2201      	movs	r2, #1
 800fe82:	755a      	strb	r2, [r3, #21]
 800fe84:	2301      	movs	r3, #1
 800fe86:	e100      	b.n	801008a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe8c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d102      	bne.n	800fe9c <f_write+0x132>
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe9a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	7d1b      	ldrb	r3, [r3, #20]
 800fea0:	b25b      	sxtb	r3, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	da18      	bge.n	800fed8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	7858      	ldrb	r0, [r3, #1]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6a1a      	ldr	r2, [r3, #32]
 800feb4:	2301      	movs	r3, #1
 800feb6:	f7fd f841 	bl	800cf3c <disk_write>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d004      	beq.n	800feca <f_write+0x160>
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2201      	movs	r2, #1
 800fec4:	755a      	strb	r2, [r3, #21]
 800fec6:	2301      	movs	r3, #1
 800fec8:	e0df      	b.n	801008a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	7d1b      	ldrb	r3, [r3, #20]
 800fece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fed2:	b2da      	uxtb	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fed8:	693a      	ldr	r2, [r7, #16]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	69db      	ldr	r3, [r3, #28]
 800fede:	4619      	mov	r1, r3
 800fee0:	4610      	mov	r0, r2
 800fee2:	f7fd fbb7 	bl	800d654 <clust2sect>
 800fee6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d104      	bne.n	800fef8 <f_write+0x18e>
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2202      	movs	r2, #2
 800fef2:	755a      	strb	r2, [r3, #21]
 800fef4:	2302      	movs	r3, #2
 800fef6:	e0c8      	b.n	801008a <f_write+0x320>
			sect += csect;
 800fef8:	697a      	ldr	r2, [r7, #20]
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	4413      	add	r3, r2
 800fefe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	899b      	ldrh	r3, [r3, #12]
 800ff04:	461a      	mov	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff0c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ff0e:	6a3b      	ldr	r3, [r7, #32]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d043      	beq.n	800ff9c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ff14:	69ba      	ldr	r2, [r7, #24]
 800ff16:	6a3b      	ldr	r3, [r7, #32]
 800ff18:	4413      	add	r3, r2
 800ff1a:	693a      	ldr	r2, [r7, #16]
 800ff1c:	8952      	ldrh	r2, [r2, #10]
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d905      	bls.n	800ff2e <f_write+0x1c4>
					cc = fs->csize - csect;
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	895b      	ldrh	r3, [r3, #10]
 800ff26:	461a      	mov	r2, r3
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	1ad3      	subs	r3, r2, r3
 800ff2c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	7858      	ldrb	r0, [r3, #1]
 800ff32:	6a3b      	ldr	r3, [r7, #32]
 800ff34:	697a      	ldr	r2, [r7, #20]
 800ff36:	69f9      	ldr	r1, [r7, #28]
 800ff38:	f7fd f800 	bl	800cf3c <disk_write>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d004      	beq.n	800ff4c <f_write+0x1e2>
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	2201      	movs	r2, #1
 800ff46:	755a      	strb	r2, [r3, #21]
 800ff48:	2301      	movs	r3, #1
 800ff4a:	e09e      	b.n	801008a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6a1a      	ldr	r2, [r3, #32]
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	1ad3      	subs	r3, r2, r3
 800ff54:	6a3a      	ldr	r2, [r7, #32]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d918      	bls.n	800ff8c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6a1a      	ldr	r2, [r3, #32]
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	1ad3      	subs	r3, r2, r3
 800ff68:	693a      	ldr	r2, [r7, #16]
 800ff6a:	8992      	ldrh	r2, [r2, #12]
 800ff6c:	fb02 f303 	mul.w	r3, r2, r3
 800ff70:	69fa      	ldr	r2, [r7, #28]
 800ff72:	18d1      	adds	r1, r2, r3
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	899b      	ldrh	r3, [r3, #12]
 800ff78:	461a      	mov	r2, r3
 800ff7a:	f7fd f89f 	bl	800d0bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	7d1b      	ldrb	r3, [r3, #20]
 800ff82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff86:	b2da      	uxtb	r2, r3
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	899b      	ldrh	r3, [r3, #12]
 800ff90:	461a      	mov	r2, r3
 800ff92:	6a3b      	ldr	r3, [r7, #32]
 800ff94:	fb02 f303 	mul.w	r3, r2, r3
 800ff98:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ff9a:	e04b      	b.n	8010034 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6a1b      	ldr	r3, [r3, #32]
 800ffa0:	697a      	ldr	r2, [r7, #20]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d016      	beq.n	800ffd4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	699a      	ldr	r2, [r3, #24]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d210      	bcs.n	800ffd4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	7858      	ldrb	r0, [r3, #1]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	697a      	ldr	r2, [r7, #20]
 800ffc0:	f7fc ff9c 	bl	800cefc <disk_read>
 800ffc4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d004      	beq.n	800ffd4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	755a      	strb	r2, [r3, #21]
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	e05a      	b.n	801008a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	697a      	ldr	r2, [r7, #20]
 800ffd8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	899b      	ldrh	r3, [r3, #12]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	699b      	ldr	r3, [r3, #24]
 800ffe4:	693a      	ldr	r2, [r7, #16]
 800ffe6:	8992      	ldrh	r2, [r2, #12]
 800ffe8:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffec:	fb02 f201 	mul.w	r2, r2, r1
 800fff0:	1a9b      	subs	r3, r3, r2
 800fff2:	1ac3      	subs	r3, r0, r3
 800fff4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d901      	bls.n	8010002 <f_write+0x298>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	699b      	ldr	r3, [r3, #24]
 801000c:	693a      	ldr	r2, [r7, #16]
 801000e:	8992      	ldrh	r2, [r2, #12]
 8010010:	fbb3 f0f2 	udiv	r0, r3, r2
 8010014:	fb02 f200 	mul.w	r2, r2, r0
 8010018:	1a9b      	subs	r3, r3, r2
 801001a:	440b      	add	r3, r1
 801001c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801001e:	69f9      	ldr	r1, [r7, #28]
 8010020:	4618      	mov	r0, r3
 8010022:	f7fd f84b 	bl	800d0bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	7d1b      	ldrb	r3, [r3, #20]
 801002a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801002e:	b2da      	uxtb	r2, r3
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010034:	69fa      	ldr	r2, [r7, #28]
 8010036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010038:	4413      	add	r3, r2
 801003a:	61fb      	str	r3, [r7, #28]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	699a      	ldr	r2, [r3, #24]
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	441a      	add	r2, r3
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	619a      	str	r2, [r3, #24]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	68da      	ldr	r2, [r3, #12]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	699b      	ldr	r3, [r3, #24]
 8010050:	429a      	cmp	r2, r3
 8010052:	bf38      	it	cc
 8010054:	461a      	movcc	r2, r3
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	60da      	str	r2, [r3, #12]
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010060:	441a      	add	r2, r3
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	601a      	str	r2, [r3, #0]
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2b00      	cmp	r3, #0
 8010072:	f47f aeb5 	bne.w	800fde0 <f_write+0x76>
 8010076:	e000      	b.n	801007a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010078:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	7d1b      	ldrb	r3, [r3, #20]
 801007e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010082:	b2da      	uxtb	r2, r3
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010088:	2300      	movs	r3, #0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3730      	adds	r7, #48	; 0x30
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b086      	sub	sp, #24
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f107 0208 	add.w	r2, r7, #8
 80100a0:	4611      	mov	r1, r2
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7ff faba 	bl	800f61c <validate>
 80100a8:	4603      	mov	r3, r0
 80100aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100ac:	7dfb      	ldrb	r3, [r7, #23]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d168      	bne.n	8010184 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	7d1b      	ldrb	r3, [r3, #20]
 80100b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d062      	beq.n	8010184 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	7d1b      	ldrb	r3, [r3, #20]
 80100c2:	b25b      	sxtb	r3, r3
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	da15      	bge.n	80100f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	7858      	ldrb	r0, [r3, #1]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a1a      	ldr	r2, [r3, #32]
 80100d6:	2301      	movs	r3, #1
 80100d8:	f7fc ff30 	bl	800cf3c <disk_write>
 80100dc:	4603      	mov	r3, r0
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d001      	beq.n	80100e6 <f_sync+0x54>
 80100e2:	2301      	movs	r3, #1
 80100e4:	e04f      	b.n	8010186 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	7d1b      	ldrb	r3, [r3, #20]
 80100ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80100f4:	f7fb f922 	bl	800b33c <get_fattime>
 80100f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80100fa:	68ba      	ldr	r2, [r7, #8]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010100:	4619      	mov	r1, r3
 8010102:	4610      	mov	r0, r2
 8010104:	f7fd fa08 	bl	800d518 <move_window>
 8010108:	4603      	mov	r3, r0
 801010a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801010c:	7dfb      	ldrb	r3, [r7, #23]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d138      	bne.n	8010184 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010116:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	330b      	adds	r3, #11
 801011c:	781a      	ldrb	r2, [r3, #0]
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	330b      	adds	r3, #11
 8010122:	f042 0220 	orr.w	r2, r2, #32
 8010126:	b2d2      	uxtb	r2, r2
 8010128:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6818      	ldr	r0, [r3, #0]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	689b      	ldr	r3, [r3, #8]
 8010132:	461a      	mov	r2, r3
 8010134:	68f9      	ldr	r1, [r7, #12]
 8010136:	f7fd ff8d 	bl	800e054 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f103 021c 	add.w	r2, r3, #28
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	68db      	ldr	r3, [r3, #12]
 8010144:	4619      	mov	r1, r3
 8010146:	4610      	mov	r0, r2
 8010148:	f7fc ff8c 	bl	800d064 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	3316      	adds	r3, #22
 8010150:	6939      	ldr	r1, [r7, #16]
 8010152:	4618      	mov	r0, r3
 8010154:	f7fc ff86 	bl	800d064 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	3312      	adds	r3, #18
 801015c:	2100      	movs	r1, #0
 801015e:	4618      	mov	r0, r3
 8010160:	f7fc ff65 	bl	800d02e <st_word>
					fs->wflag = 1;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	2201      	movs	r2, #1
 8010168:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	4618      	mov	r0, r3
 801016e:	f7fd fa01 	bl	800d574 <sync_fs>
 8010172:	4603      	mov	r3, r0
 8010174:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	7d1b      	ldrb	r3, [r3, #20]
 801017a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801017e:	b2da      	uxtb	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010184:	7dfb      	ldrb	r3, [r7, #23]
}
 8010186:	4618      	mov	r0, r3
 8010188:	3718      	adds	r7, #24
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801018e:	b580      	push	{r7, lr}
 8010190:	b084      	sub	sp, #16
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f7ff ff7b 	bl	8010092 <f_sync>
 801019c:	4603      	mov	r3, r0
 801019e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80101a0:	7bfb      	ldrb	r3, [r7, #15]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d118      	bne.n	80101d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f107 0208 	add.w	r2, r7, #8
 80101ac:	4611      	mov	r1, r2
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7ff fa34 	bl	800f61c <validate>
 80101b4:	4603      	mov	r3, r0
 80101b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80101b8:	7bfb      	ldrb	r3, [r7, #15]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d10c      	bne.n	80101d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	691b      	ldr	r3, [r3, #16]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7fd f904 	bl	800d3d0 <dec_lock>
 80101c8:	4603      	mov	r3, r0
 80101ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80101cc:	7bfb      	ldrb	r3, [r7, #15]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d102      	bne.n	80101d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2200      	movs	r2, #0
 80101d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80101d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3710      	adds	r7, #16
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80101e2:	b580      	push	{r7, lr}
 80101e4:	b086      	sub	sp, #24
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
 80101ea:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d101      	bne.n	80101f6 <f_opendir+0x14>
 80101f2:	2309      	movs	r3, #9
 80101f4:	e064      	b.n	80102c0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80101fa:	f107 010c 	add.w	r1, r7, #12
 80101fe:	463b      	mov	r3, r7
 8010200:	2200      	movs	r2, #0
 8010202:	4618      	mov	r0, r3
 8010204:	f7fe ff82 	bl	800f10c <find_volume>
 8010208:	4603      	mov	r3, r0
 801020a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801020c:	7dfb      	ldrb	r3, [r7, #23]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d14f      	bne.n	80102b2 <f_opendir+0xd0>
		obj->fs = fs;
 8010212:	68fa      	ldr	r2, [r7, #12]
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7fe fe65 	bl	800eeec <follow_path>
 8010222:	4603      	mov	r3, r0
 8010224:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010226:	7dfb      	ldrb	r3, [r7, #23]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d13d      	bne.n	80102a8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010232:	b25b      	sxtb	r3, r3
 8010234:	2b00      	cmp	r3, #0
 8010236:	db12      	blt.n	801025e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	799b      	ldrb	r3, [r3, #6]
 801023c:	f003 0310 	and.w	r3, r3, #16
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00a      	beq.n	801025a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6a1b      	ldr	r3, [r3, #32]
 801024a:	4619      	mov	r1, r3
 801024c:	4610      	mov	r0, r2
 801024e:	f7fd fee2 	bl	800e016 <ld_clust>
 8010252:	4602      	mov	r2, r0
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	609a      	str	r2, [r3, #8]
 8010258:	e001      	b.n	801025e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801025a:	2305      	movs	r3, #5
 801025c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801025e:	7dfb      	ldrb	r3, [r7, #23]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d121      	bne.n	80102a8 <f_opendir+0xc6>
				obj->id = fs->id;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	88da      	ldrh	r2, [r3, #6]
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801026c:	2100      	movs	r1, #0
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f7fd fd2b 	bl	800dcca <dir_sdi>
 8010274:	4603      	mov	r3, r0
 8010276:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010278:	7dfb      	ldrb	r3, [r7, #23]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d114      	bne.n	80102a8 <f_opendir+0xc6>
					if (obj->sclust) {
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	689b      	ldr	r3, [r3, #8]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00d      	beq.n	80102a2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010286:	2100      	movs	r1, #0
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7fd f813 	bl	800d2b4 <inc_lock>
 801028e:	4602      	mov	r2, r0
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	691b      	ldr	r3, [r3, #16]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d105      	bne.n	80102a8 <f_opendir+0xc6>
 801029c:	2312      	movs	r3, #18
 801029e:	75fb      	strb	r3, [r7, #23]
 80102a0:	e002      	b.n	80102a8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	2200      	movs	r2, #0
 80102a6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80102a8:	7dfb      	ldrb	r3, [r7, #23]
 80102aa:	2b04      	cmp	r3, #4
 80102ac:	d101      	bne.n	80102b2 <f_opendir+0xd0>
 80102ae:	2305      	movs	r3, #5
 80102b0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80102b2:	7dfb      	ldrb	r3, [r7, #23]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d002      	beq.n	80102be <f_opendir+0xdc>
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	2200      	movs	r2, #0
 80102bc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80102be:	7dfb      	ldrb	r3, [r7, #23]
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3718      	adds	r7, #24
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f107 0208 	add.w	r2, r7, #8
 80102d6:	4611      	mov	r1, r2
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff f99f 	bl	800f61c <validate>
 80102de:	4603      	mov	r3, r0
 80102e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80102e2:	7bfb      	ldrb	r3, [r7, #15]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d110      	bne.n	801030a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d006      	beq.n	80102fe <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	691b      	ldr	r3, [r3, #16]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7fd f86b 	bl	800d3d0 <dec_lock>
 80102fa:	4603      	mov	r3, r0
 80102fc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80102fe:	7bfb      	ldrb	r3, [r7, #15]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d102      	bne.n	801030a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2200      	movs	r2, #0
 8010308:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801030a:	7bfb      	ldrb	r3, [r7, #15]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f107 0208 	add.w	r2, r7, #8
 8010324:	4611      	mov	r1, r2
 8010326:	4618      	mov	r0, r3
 8010328:	f7ff f978 	bl	800f61c <validate>
 801032c:	4603      	mov	r3, r0
 801032e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010330:	7bfb      	ldrb	r3, [r7, #15]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d126      	bne.n	8010384 <f_readdir+0x70>
		if (!fno) {
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d106      	bne.n	801034a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801033c:	2100      	movs	r1, #0
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f7fd fcc3 	bl	800dcca <dir_sdi>
 8010344:	4603      	mov	r3, r0
 8010346:	73fb      	strb	r3, [r7, #15]
 8010348:	e01c      	b.n	8010384 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801034a:	2100      	movs	r1, #0
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f7fe f88d 	bl	800e46c <dir_read>
 8010352:	4603      	mov	r3, r0
 8010354:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010356:	7bfb      	ldrb	r3, [r7, #15]
 8010358:	2b04      	cmp	r3, #4
 801035a:	d101      	bne.n	8010360 <f_readdir+0x4c>
 801035c:	2300      	movs	r3, #0
 801035e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010360:	7bfb      	ldrb	r3, [r7, #15]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d10e      	bne.n	8010384 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010366:	6839      	ldr	r1, [r7, #0]
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7fe fb29 	bl	800e9c0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801036e:	2100      	movs	r1, #0
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7fd fd33 	bl	800dddc <dir_next>
 8010376:	4603      	mov	r3, r0
 8010378:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801037a:	7bfb      	ldrb	r3, [r7, #15]
 801037c:	2b04      	cmp	r3, #4
 801037e:	d101      	bne.n	8010384 <f_readdir+0x70>
 8010380:	2300      	movs	r3, #0
 8010382:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010384:	7bfb      	ldrb	r3, [r7, #15]
}
 8010386:	4618      	mov	r0, r3
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b090      	sub	sp, #64	; 0x40
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
 8010396:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8010398:	f107 0108 	add.w	r1, r7, #8
 801039c:	1d3b      	adds	r3, r7, #4
 801039e:	2200      	movs	r2, #0
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7fe feb3 	bl	800f10c <find_volume>
 80103a6:	4603      	mov	r3, r0
 80103a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80103ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d11f      	bne.n	80103f4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	f107 0308 	add.w	r3, r7, #8
 80103ba:	4611      	mov	r1, r2
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fe fd95 	bl	800eeec <follow_path>
 80103c2:	4603      	mov	r3, r0
 80103c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80103c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d111      	bne.n	80103f4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80103d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103d4:	b25b      	sxtb	r3, r3
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	da03      	bge.n	80103e2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80103da:	2306      	movs	r3, #6
 80103dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80103e0:	e008      	b.n	80103f4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d005      	beq.n	80103f4 <f_stat+0x66>
 80103e8:	f107 0308 	add.w	r3, r7, #8
 80103ec:	6839      	ldr	r1, [r7, #0]
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7fe fae6 	bl	800e9c0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80103f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3740      	adds	r7, #64	; 0x40
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b092      	sub	sp, #72	; 0x48
 8010404:	af00      	add	r7, sp, #0
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801040c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010410:	f107 030c 	add.w	r3, r7, #12
 8010414:	2200      	movs	r2, #0
 8010416:	4618      	mov	r0, r3
 8010418:	f7fe fe78 	bl	800f10c <find_volume>
 801041c:	4603      	mov	r3, r0
 801041e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010422:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010426:	2b00      	cmp	r3, #0
 8010428:	f040 8099 	bne.w	801055e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801042c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010434:	699a      	ldr	r2, [r3, #24]
 8010436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010438:	69db      	ldr	r3, [r3, #28]
 801043a:	3b02      	subs	r3, #2
 801043c:	429a      	cmp	r2, r3
 801043e:	d804      	bhi.n	801044a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010442:	699a      	ldr	r2, [r3, #24]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	e089      	b.n	801055e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801044a:	2300      	movs	r3, #0
 801044c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801044e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	2b01      	cmp	r3, #1
 8010454:	d128      	bne.n	80104a8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010456:	2302      	movs	r3, #2
 8010458:	63fb      	str	r3, [r7, #60]	; 0x3c
 801045a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801045e:	f107 0314 	add.w	r3, r7, #20
 8010462:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010464:	4618      	mov	r0, r3
 8010466:	f7fd f914 	bl	800d692 <get_fat>
 801046a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801046c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010472:	d103      	bne.n	801047c <f_getfree+0x7c>
 8010474:	2301      	movs	r3, #1
 8010476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801047a:	e063      	b.n	8010544 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801047c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047e:	2b01      	cmp	r3, #1
 8010480:	d103      	bne.n	801048a <f_getfree+0x8a>
 8010482:	2302      	movs	r3, #2
 8010484:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010488:	e05c      	b.n	8010544 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801048a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048c:	2b00      	cmp	r3, #0
 801048e:	d102      	bne.n	8010496 <f_getfree+0x96>
 8010490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010492:	3301      	adds	r3, #1
 8010494:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010498:	3301      	adds	r3, #1
 801049a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049e:	69db      	ldr	r3, [r3, #28]
 80104a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d3db      	bcc.n	801045e <f_getfree+0x5e>
 80104a6:	e04d      	b.n	8010544 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80104a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104aa:	69db      	ldr	r3, [r3, #28]
 80104ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104b2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80104b4:	2300      	movs	r3, #0
 80104b6:	637b      	str	r3, [r7, #52]	; 0x34
 80104b8:	2300      	movs	r3, #0
 80104ba:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80104bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d113      	bne.n	80104ea <f_getfree+0xea>
							res = move_window(fs, sect++);
 80104c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c6:	1c5a      	adds	r2, r3, #1
 80104c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80104ca:	4619      	mov	r1, r3
 80104cc:	f7fd f824 	bl	800d518 <move_window>
 80104d0:	4603      	mov	r3, r0
 80104d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80104d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d131      	bne.n	8010542 <f_getfree+0x142>
							p = fs->win;
 80104de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e0:	3338      	adds	r3, #56	; 0x38
 80104e2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80104e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e6:	899b      	ldrh	r3, [r3, #12]
 80104e8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80104ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	d10f      	bne.n	8010512 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80104f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104f4:	f7fc fd60 	bl	800cfb8 <ld_word>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d102      	bne.n	8010504 <f_getfree+0x104>
 80104fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010500:	3301      	adds	r3, #1
 8010502:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010506:	3302      	adds	r3, #2
 8010508:	633b      	str	r3, [r7, #48]	; 0x30
 801050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050c:	3b02      	subs	r3, #2
 801050e:	637b      	str	r3, [r7, #52]	; 0x34
 8010510:	e010      	b.n	8010534 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010514:	f7fc fd68 	bl	800cfe8 <ld_dword>
 8010518:	4603      	mov	r3, r0
 801051a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801051e:	2b00      	cmp	r3, #0
 8010520:	d102      	bne.n	8010528 <f_getfree+0x128>
 8010522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010524:	3301      	adds	r3, #1
 8010526:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8010528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801052a:	3304      	adds	r3, #4
 801052c:	633b      	str	r3, [r7, #48]	; 0x30
 801052e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010530:	3b04      	subs	r3, #4
 8010532:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010536:	3b01      	subs	r3, #1
 8010538:	63fb      	str	r3, [r7, #60]	; 0x3c
 801053a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801053c:	2b00      	cmp	r3, #0
 801053e:	d1bd      	bne.n	80104bc <f_getfree+0xbc>
 8010540:	e000      	b.n	8010544 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010542:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010548:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801054e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010552:	791a      	ldrb	r2, [r3, #4]
 8010554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010556:	f042 0201 	orr.w	r2, r2, #1
 801055a:	b2d2      	uxtb	r2, r2
 801055c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801055e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010562:	4618      	mov	r0, r3
 8010564:	3748      	adds	r7, #72	; 0x48
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801056a:	b580      	push	{r7, lr}
 801056c:	b0a0      	sub	sp, #128	; 0x80
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8010572:	2300      	movs	r3, #0
 8010574:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010576:	f107 010c 	add.w	r1, r7, #12
 801057a:	1d3b      	adds	r3, r7, #4
 801057c:	2202      	movs	r2, #2
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe fdc4 	bl	800f10c <find_volume>
 8010584:	4603      	mov	r3, r0
 8010586:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 801058e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010592:	2b00      	cmp	r3, #0
 8010594:	f040 808e 	bne.w	80106b4 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801059e:	4611      	mov	r1, r2
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fe fca3 	bl	800eeec <follow_path>
 80105a6:	4603      	mov	r3, r0
 80105a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80105ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d108      	bne.n	80105c6 <f_unlink+0x5c>
 80105b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80105b8:	2102      	movs	r1, #2
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fc fdfc 	bl	800d1b8 <chk_lock>
 80105c0:	4603      	mov	r3, r0
 80105c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80105c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d172      	bne.n	80106b4 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80105ce:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80105d2:	b25b      	sxtb	r3, r3
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	da03      	bge.n	80105e0 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80105d8:	2306      	movs	r3, #6
 80105da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80105de:	e008      	b.n	80105f2 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80105e0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80105e4:	f003 0301 	and.w	r3, r3, #1
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d002      	beq.n	80105f2 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80105ec:	2307      	movs	r3, #7
 80105ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80105f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d134      	bne.n	8010664 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80105fe:	4611      	mov	r1, r2
 8010600:	4618      	mov	r0, r3
 8010602:	f7fd fd08 	bl	800e016 <ld_clust>
 8010606:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8010608:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801060c:	f003 0310 	and.w	r3, r3, #16
 8010610:	2b00      	cmp	r3, #0
 8010612:	d027      	beq.n	8010664 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8010618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801061a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801061c:	f107 0310 	add.w	r3, r7, #16
 8010620:	2100      	movs	r1, #0
 8010622:	4618      	mov	r0, r3
 8010624:	f7fd fb51 	bl	800dcca <dir_sdi>
 8010628:	4603      	mov	r3, r0
 801062a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 801062e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010632:	2b00      	cmp	r3, #0
 8010634:	d116      	bne.n	8010664 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8010636:	f107 0310 	add.w	r3, r7, #16
 801063a:	2100      	movs	r1, #0
 801063c:	4618      	mov	r0, r3
 801063e:	f7fd ff15 	bl	800e46c <dir_read>
 8010642:	4603      	mov	r3, r0
 8010644:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8010648:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801064c:	2b00      	cmp	r3, #0
 801064e:	d102      	bne.n	8010656 <f_unlink+0xec>
 8010650:	2307      	movs	r3, #7
 8010652:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8010656:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801065a:	2b04      	cmp	r3, #4
 801065c:	d102      	bne.n	8010664 <f_unlink+0xfa>
 801065e:	2300      	movs	r3, #0
 8010660:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8010664:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010668:	2b00      	cmp	r3, #0
 801066a:	d123      	bne.n	80106b4 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801066c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010670:	4618      	mov	r0, r3
 8010672:	f7fe f95b 	bl	800e92c <dir_remove>
 8010676:	4603      	mov	r3, r0
 8010678:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801067c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010680:	2b00      	cmp	r3, #0
 8010682:	d10c      	bne.n	801069e <f_unlink+0x134>
 8010684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010686:	2b00      	cmp	r3, #0
 8010688:	d009      	beq.n	801069e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801068a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801068e:	2200      	movs	r2, #0
 8010690:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010692:	4618      	mov	r0, r3
 8010694:	f7fd f9e4 	bl	800da60 <remove_chain>
 8010698:	4603      	mov	r3, r0
 801069a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801069e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d106      	bne.n	80106b4 <f_unlink+0x14a>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fc ff63 	bl	800d574 <sync_fs>
 80106ae:	4603      	mov	r3, r0
 80106b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80106b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3780      	adds	r7, #128	; 0x80
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b098      	sub	sp, #96	; 0x60
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80106c8:	f107 010c 	add.w	r1, r7, #12
 80106cc:	1d3b      	adds	r3, r7, #4
 80106ce:	2202      	movs	r2, #2
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fe fd1b 	bl	800f10c <find_volume>
 80106d6:	4603      	mov	r3, r0
 80106d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80106e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f040 80f2 	bne.w	80108ce <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	f107 0310 	add.w	r3, r7, #16
 80106f0:	4611      	mov	r1, r2
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7fe fbfa 	bl	800eeec <follow_path>
 80106f8:	4603      	mov	r3, r0
 80106fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80106fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010702:	2b00      	cmp	r3, #0
 8010704:	d102      	bne.n	801070c <f_mkdir+0x4c>
 8010706:	2308      	movs	r3, #8
 8010708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801070c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010710:	2b04      	cmp	r3, #4
 8010712:	f040 80dc 	bne.w	80108ce <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010716:	f107 0310 	add.w	r3, r7, #16
 801071a:	2100      	movs	r1, #0
 801071c:	4618      	mov	r0, r3
 801071e:	f7fd fa04 	bl	800db2a <create_chain>
 8010722:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	895b      	ldrh	r3, [r3, #10]
 8010728:	461a      	mov	r2, r3
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	899b      	ldrh	r3, [r3, #12]
 801072e:	fb03 f302 	mul.w	r3, r3, r2
 8010732:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8010734:	2300      	movs	r3, #0
 8010736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801073a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801073c:	2b00      	cmp	r3, #0
 801073e:	d102      	bne.n	8010746 <f_mkdir+0x86>
 8010740:	2307      	movs	r3, #7
 8010742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8010746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010748:	2b01      	cmp	r3, #1
 801074a:	d102      	bne.n	8010752 <f_mkdir+0x92>
 801074c:	2302      	movs	r3, #2
 801074e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010758:	d102      	bne.n	8010760 <f_mkdir+0xa0>
 801075a:	2301      	movs	r3, #1
 801075c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010764:	2b00      	cmp	r3, #0
 8010766:	d106      	bne.n	8010776 <f_mkdir+0xb6>
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	4618      	mov	r0, r3
 801076c:	f7fc fe90 	bl	800d490 <sync_window>
 8010770:	4603      	mov	r3, r0
 8010772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8010776:	f7fa fde1 	bl	800b33c <get_fattime>
 801077a:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 801077c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010780:	2b00      	cmp	r3, #0
 8010782:	d16c      	bne.n	801085e <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010788:	4618      	mov	r0, r3
 801078a:	f7fc ff63 	bl	800d654 <clust2sect>
 801078e:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	3338      	adds	r3, #56	; 0x38
 8010794:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	899b      	ldrh	r3, [r3, #12]
 801079a:	461a      	mov	r2, r3
 801079c:	2100      	movs	r1, #0
 801079e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80107a0:	f7fc fcad 	bl	800d0fe <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80107a4:	220b      	movs	r2, #11
 80107a6:	2120      	movs	r1, #32
 80107a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80107aa:	f7fc fca8 	bl	800d0fe <mem_set>
					dir[DIR_Name] = '.';
 80107ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107b0:	222e      	movs	r2, #46	; 0x2e
 80107b2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80107b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107b6:	330b      	adds	r3, #11
 80107b8:	2210      	movs	r2, #16
 80107ba:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80107bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107be:	3316      	adds	r3, #22
 80107c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fc fc4e 	bl	800d064 <st_dword>
					st_clust(fs, dir, dcl);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fd fc40 	bl	800e054 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80107d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107d6:	3320      	adds	r3, #32
 80107d8:	2220      	movs	r2, #32
 80107da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107dc:	4618      	mov	r0, r3
 80107de:	f7fc fc6d 	bl	800d0bc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80107e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107e4:	3321      	adds	r3, #33	; 0x21
 80107e6:	222e      	movs	r2, #46	; 0x2e
 80107e8:	701a      	strb	r2, [r3, #0]
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b03      	cmp	r3, #3
 80107f4:	d106      	bne.n	8010804 <f_mkdir+0x144>
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d101      	bne.n	8010804 <f_mkdir+0x144>
 8010800:	2300      	movs	r3, #0
 8010802:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010808:	3320      	adds	r3, #32
 801080a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801080c:	4619      	mov	r1, r3
 801080e:	f7fd fc21 	bl	800e054 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	895b      	ldrh	r3, [r3, #10]
 8010816:	65bb      	str	r3, [r7, #88]	; 0x58
 8010818:	e01c      	b.n	8010854 <f_mkdir+0x194>
					fs->winsect = dsc++;
 801081a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801081c:	1c5a      	adds	r2, r3, #1
 801081e:	657a      	str	r2, [r7, #84]	; 0x54
 8010820:	68fa      	ldr	r2, [r7, #12]
 8010822:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2201      	movs	r2, #1
 8010828:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	4618      	mov	r0, r3
 801082e:	f7fc fe2f 	bl	800d490 <sync_window>
 8010832:	4603      	mov	r3, r0
 8010834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8010838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801083c:	2b00      	cmp	r3, #0
 801083e:	d10d      	bne.n	801085c <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	899b      	ldrh	r3, [r3, #12]
 8010844:	461a      	mov	r2, r3
 8010846:	2100      	movs	r1, #0
 8010848:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801084a:	f7fc fc58 	bl	800d0fe <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801084e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010850:	3b01      	subs	r3, #1
 8010852:	65bb      	str	r3, [r7, #88]	; 0x58
 8010854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1df      	bne.n	801081a <f_mkdir+0x15a>
 801085a:	e000      	b.n	801085e <f_mkdir+0x19e>
					if (res != FR_OK) break;
 801085c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801085e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010862:	2b00      	cmp	r3, #0
 8010864:	d107      	bne.n	8010876 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010866:	f107 0310 	add.w	r3, r7, #16
 801086a:	4618      	mov	r0, r3
 801086c:	f7fd ff66 	bl	800e73c <dir_register>
 8010870:	4603      	mov	r3, r0
 8010872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8010876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801087a:	2b00      	cmp	r3, #0
 801087c:	d120      	bne.n	80108c0 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801087e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010880:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010884:	3316      	adds	r3, #22
 8010886:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010888:	4618      	mov	r0, r3
 801088a:	f7fc fbeb 	bl	800d064 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010894:	4618      	mov	r0, r3
 8010896:	f7fd fbdd 	bl	800e054 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801089a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801089c:	330b      	adds	r3, #11
 801089e:	2210      	movs	r2, #16
 80108a0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2201      	movs	r2, #1
 80108a6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80108a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d10e      	bne.n	80108ce <f_mkdir+0x20e>
					res = sync_fs(fs);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7fc fe5e 	bl	800d574 <sync_fs>
 80108b8:	4603      	mov	r3, r0
 80108ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80108be:	e006      	b.n	80108ce <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80108c0:	f107 0310 	add.w	r3, r7, #16
 80108c4:	2200      	movs	r2, #0
 80108c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7fd f8c9 	bl	800da60 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80108ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3760      	adds	r7, #96	; 0x60
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
	...

080108dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80108dc:	b480      	push	{r7}
 80108de:	b087      	sub	sp, #28
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	4613      	mov	r3, r2
 80108e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80108ea:	2301      	movs	r3, #1
 80108ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80108ee:	2300      	movs	r3, #0
 80108f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80108f2:	4b1f      	ldr	r3, [pc, #124]	; (8010970 <FATFS_LinkDriverEx+0x94>)
 80108f4:	7a5b      	ldrb	r3, [r3, #9]
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d131      	bne.n	8010960 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80108fc:	4b1c      	ldr	r3, [pc, #112]	; (8010970 <FATFS_LinkDriverEx+0x94>)
 80108fe:	7a5b      	ldrb	r3, [r3, #9]
 8010900:	b2db      	uxtb	r3, r3
 8010902:	461a      	mov	r2, r3
 8010904:	4b1a      	ldr	r3, [pc, #104]	; (8010970 <FATFS_LinkDriverEx+0x94>)
 8010906:	2100      	movs	r1, #0
 8010908:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801090a:	4b19      	ldr	r3, [pc, #100]	; (8010970 <FATFS_LinkDriverEx+0x94>)
 801090c:	7a5b      	ldrb	r3, [r3, #9]
 801090e:	b2db      	uxtb	r3, r3
 8010910:	4a17      	ldr	r2, [pc, #92]	; (8010970 <FATFS_LinkDriverEx+0x94>)
 8010912:	009b      	lsls	r3, r3, #2
 8010914:	4413      	add	r3, r2
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801091a:	4b15      	ldr	r3, [pc, #84]	; (8010970 <FATFS_LinkDriverEx+0x94>)
 801091c:	7a5b      	ldrb	r3, [r3, #9]
 801091e:	b2db      	uxtb	r3, r3
 8010920:	461a      	mov	r2, r3
 8010922:	4b13      	ldr	r3, [pc, #76]	; (8010970 <FATFS_LinkDriverEx+0x94>)
 8010924:	4413      	add	r3, r2
 8010926:	79fa      	ldrb	r2, [r7, #7]
 8010928:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801092a:	4b11      	ldr	r3, [pc, #68]	; (8010970 <FATFS_LinkDriverEx+0x94>)
 801092c:	7a5b      	ldrb	r3, [r3, #9]
 801092e:	b2db      	uxtb	r3, r3
 8010930:	1c5a      	adds	r2, r3, #1
 8010932:	b2d1      	uxtb	r1, r2
 8010934:	4a0e      	ldr	r2, [pc, #56]	; (8010970 <FATFS_LinkDriverEx+0x94>)
 8010936:	7251      	strb	r1, [r2, #9]
 8010938:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801093a:	7dbb      	ldrb	r3, [r7, #22]
 801093c:	3330      	adds	r3, #48	; 0x30
 801093e:	b2da      	uxtb	r2, r3
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	3301      	adds	r3, #1
 8010948:	223a      	movs	r2, #58	; 0x3a
 801094a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	3302      	adds	r3, #2
 8010950:	222f      	movs	r2, #47	; 0x2f
 8010952:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	3303      	adds	r3, #3
 8010958:	2200      	movs	r2, #0
 801095a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801095c:	2300      	movs	r3, #0
 801095e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010960:	7dfb      	ldrb	r3, [r7, #23]
}
 8010962:	4618      	mov	r0, r3
 8010964:	371c      	adds	r7, #28
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	20000434 	.word	0x20000434

08010974 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801097e:	2200      	movs	r2, #0
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7ff ffaa 	bl	80108dc <FATFS_LinkDriverEx>
 8010988:	4603      	mov	r3, r0
}
 801098a:	4618      	mov	r0, r3
 801098c:	3708      	adds	r7, #8
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
	...

08010994 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010994:	b480      	push	{r7}
 8010996:	b085      	sub	sp, #20
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	6039      	str	r1, [r7, #0]
 801099e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80109a0:	88fb      	ldrh	r3, [r7, #6]
 80109a2:	2b7f      	cmp	r3, #127	; 0x7f
 80109a4:	d802      	bhi.n	80109ac <ff_convert+0x18>
		c = chr;
 80109a6:	88fb      	ldrh	r3, [r7, #6]
 80109a8:	81fb      	strh	r3, [r7, #14]
 80109aa:	e025      	b.n	80109f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00b      	beq.n	80109ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80109b2:	88fb      	ldrh	r3, [r7, #6]
 80109b4:	2bff      	cmp	r3, #255	; 0xff
 80109b6:	d805      	bhi.n	80109c4 <ff_convert+0x30>
 80109b8:	88fb      	ldrh	r3, [r7, #6]
 80109ba:	3b80      	subs	r3, #128	; 0x80
 80109bc:	4a12      	ldr	r2, [pc, #72]	; (8010a08 <ff_convert+0x74>)
 80109be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109c2:	e000      	b.n	80109c6 <ff_convert+0x32>
 80109c4:	2300      	movs	r3, #0
 80109c6:	81fb      	strh	r3, [r7, #14]
 80109c8:	e016      	b.n	80109f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80109ca:	2300      	movs	r3, #0
 80109cc:	81fb      	strh	r3, [r7, #14]
 80109ce:	e009      	b.n	80109e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80109d0:	89fb      	ldrh	r3, [r7, #14]
 80109d2:	4a0d      	ldr	r2, [pc, #52]	; (8010a08 <ff_convert+0x74>)
 80109d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109d8:	88fa      	ldrh	r2, [r7, #6]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d006      	beq.n	80109ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80109de:	89fb      	ldrh	r3, [r7, #14]
 80109e0:	3301      	adds	r3, #1
 80109e2:	81fb      	strh	r3, [r7, #14]
 80109e4:	89fb      	ldrh	r3, [r7, #14]
 80109e6:	2b7f      	cmp	r3, #127	; 0x7f
 80109e8:	d9f2      	bls.n	80109d0 <ff_convert+0x3c>
 80109ea:	e000      	b.n	80109ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80109ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80109ee:	89fb      	ldrh	r3, [r7, #14]
 80109f0:	3380      	adds	r3, #128	; 0x80
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	b2db      	uxtb	r3, r3
 80109f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80109f8:	89fb      	ldrh	r3, [r7, #14]
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3714      	adds	r7, #20
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop
 8010a08:	08012400 	.word	0x08012400

08010a0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b087      	sub	sp, #28
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	4603      	mov	r3, r0
 8010a14:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010a16:	88fb      	ldrh	r3, [r7, #6]
 8010a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a1c:	d201      	bcs.n	8010a22 <ff_wtoupper+0x16>
 8010a1e:	4b3e      	ldr	r3, [pc, #248]	; (8010b18 <ff_wtoupper+0x10c>)
 8010a20:	e000      	b.n	8010a24 <ff_wtoupper+0x18>
 8010a22:	4b3e      	ldr	r3, [pc, #248]	; (8010b1c <ff_wtoupper+0x110>)
 8010a24:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	1c9a      	adds	r2, r3, #2
 8010a2a:	617a      	str	r2, [r7, #20]
 8010a2c:	881b      	ldrh	r3, [r3, #0]
 8010a2e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010a30:	8a7b      	ldrh	r3, [r7, #18]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d068      	beq.n	8010b08 <ff_wtoupper+0xfc>
 8010a36:	88fa      	ldrh	r2, [r7, #6]
 8010a38:	8a7b      	ldrh	r3, [r7, #18]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d364      	bcc.n	8010b08 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	1c9a      	adds	r2, r3, #2
 8010a42:	617a      	str	r2, [r7, #20]
 8010a44:	881b      	ldrh	r3, [r3, #0]
 8010a46:	823b      	strh	r3, [r7, #16]
 8010a48:	8a3b      	ldrh	r3, [r7, #16]
 8010a4a:	0a1b      	lsrs	r3, r3, #8
 8010a4c:	81fb      	strh	r3, [r7, #14]
 8010a4e:	8a3b      	ldrh	r3, [r7, #16]
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010a54:	88fa      	ldrh	r2, [r7, #6]
 8010a56:	8a79      	ldrh	r1, [r7, #18]
 8010a58:	8a3b      	ldrh	r3, [r7, #16]
 8010a5a:	440b      	add	r3, r1
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	da49      	bge.n	8010af4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010a60:	89fb      	ldrh	r3, [r7, #14]
 8010a62:	2b08      	cmp	r3, #8
 8010a64:	d84f      	bhi.n	8010b06 <ff_wtoupper+0xfa>
 8010a66:	a201      	add	r2, pc, #4	; (adr r2, 8010a6c <ff_wtoupper+0x60>)
 8010a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a6c:	08010a91 	.word	0x08010a91
 8010a70:	08010aa3 	.word	0x08010aa3
 8010a74:	08010ab9 	.word	0x08010ab9
 8010a78:	08010ac1 	.word	0x08010ac1
 8010a7c:	08010ac9 	.word	0x08010ac9
 8010a80:	08010ad1 	.word	0x08010ad1
 8010a84:	08010ad9 	.word	0x08010ad9
 8010a88:	08010ae1 	.word	0x08010ae1
 8010a8c:	08010ae9 	.word	0x08010ae9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010a90:	88fa      	ldrh	r2, [r7, #6]
 8010a92:	8a7b      	ldrh	r3, [r7, #18]
 8010a94:	1ad3      	subs	r3, r2, r3
 8010a96:	005b      	lsls	r3, r3, #1
 8010a98:	697a      	ldr	r2, [r7, #20]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	80fb      	strh	r3, [r7, #6]
 8010aa0:	e027      	b.n	8010af2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010aa2:	88fa      	ldrh	r2, [r7, #6]
 8010aa4:	8a7b      	ldrh	r3, [r7, #18]
 8010aa6:	1ad3      	subs	r3, r2, r3
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	f003 0301 	and.w	r3, r3, #1
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	88fa      	ldrh	r2, [r7, #6]
 8010ab2:	1ad3      	subs	r3, r2, r3
 8010ab4:	80fb      	strh	r3, [r7, #6]
 8010ab6:	e01c      	b.n	8010af2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010ab8:	88fb      	ldrh	r3, [r7, #6]
 8010aba:	3b10      	subs	r3, #16
 8010abc:	80fb      	strh	r3, [r7, #6]
 8010abe:	e018      	b.n	8010af2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010ac0:	88fb      	ldrh	r3, [r7, #6]
 8010ac2:	3b20      	subs	r3, #32
 8010ac4:	80fb      	strh	r3, [r7, #6]
 8010ac6:	e014      	b.n	8010af2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010ac8:	88fb      	ldrh	r3, [r7, #6]
 8010aca:	3b30      	subs	r3, #48	; 0x30
 8010acc:	80fb      	strh	r3, [r7, #6]
 8010ace:	e010      	b.n	8010af2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010ad0:	88fb      	ldrh	r3, [r7, #6]
 8010ad2:	3b1a      	subs	r3, #26
 8010ad4:	80fb      	strh	r3, [r7, #6]
 8010ad6:	e00c      	b.n	8010af2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010ad8:	88fb      	ldrh	r3, [r7, #6]
 8010ada:	3308      	adds	r3, #8
 8010adc:	80fb      	strh	r3, [r7, #6]
 8010ade:	e008      	b.n	8010af2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010ae0:	88fb      	ldrh	r3, [r7, #6]
 8010ae2:	3b50      	subs	r3, #80	; 0x50
 8010ae4:	80fb      	strh	r3, [r7, #6]
 8010ae6:	e004      	b.n	8010af2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010ae8:	88fb      	ldrh	r3, [r7, #6]
 8010aea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010aee:	80fb      	strh	r3, [r7, #6]
 8010af0:	bf00      	nop
			}
			break;
 8010af2:	e008      	b.n	8010b06 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010af4:	89fb      	ldrh	r3, [r7, #14]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d195      	bne.n	8010a26 <ff_wtoupper+0x1a>
 8010afa:	8a3b      	ldrh	r3, [r7, #16]
 8010afc:	005b      	lsls	r3, r3, #1
 8010afe:	697a      	ldr	r2, [r7, #20]
 8010b00:	4413      	add	r3, r2
 8010b02:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010b04:	e78f      	b.n	8010a26 <ff_wtoupper+0x1a>
			break;
 8010b06:	bf00      	nop
	}

	return chr;
 8010b08:	88fb      	ldrh	r3, [r7, #6]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	371c      	adds	r7, #28
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	08012500 	.word	0x08012500
 8010b1c:	080126f4 	.word	0x080126f4

08010b20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010b24:	2200      	movs	r2, #0
 8010b26:	4912      	ldr	r1, [pc, #72]	; (8010b70 <MX_USB_DEVICE_Init+0x50>)
 8010b28:	4812      	ldr	r0, [pc, #72]	; (8010b74 <MX_USB_DEVICE_Init+0x54>)
 8010b2a:	f7fb f8a1 	bl	800bc70 <USBD_Init>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d001      	beq.n	8010b38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010b34:	f7f1 ff12 	bl	800295c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010b38:	490f      	ldr	r1, [pc, #60]	; (8010b78 <MX_USB_DEVICE_Init+0x58>)
 8010b3a:	480e      	ldr	r0, [pc, #56]	; (8010b74 <MX_USB_DEVICE_Init+0x54>)
 8010b3c:	f7fb f8ce 	bl	800bcdc <USBD_RegisterClass>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d001      	beq.n	8010b4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010b46:	f7f1 ff09 	bl	800295c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010b4a:	490c      	ldr	r1, [pc, #48]	; (8010b7c <MX_USB_DEVICE_Init+0x5c>)
 8010b4c:	4809      	ldr	r0, [pc, #36]	; (8010b74 <MX_USB_DEVICE_Init+0x54>)
 8010b4e:	f7fa fff3 	bl	800bb38 <USBD_CDC_RegisterInterface>
 8010b52:	4603      	mov	r3, r0
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d001      	beq.n	8010b5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010b58:	f7f1 ff00 	bl	800295c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010b5c:	4805      	ldr	r0, [pc, #20]	; (8010b74 <MX_USB_DEVICE_Init+0x54>)
 8010b5e:	f7fb f8de 	bl	800bd1e <USBD_Start>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d001      	beq.n	8010b6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010b68:	f7f1 fef8 	bl	800295c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010b6c:	bf00      	nop
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	20000130 	.word	0x20000130
 8010b74:	20004ad8 	.word	0x20004ad8
 8010b78:	20000018 	.word	0x20000018
 8010b7c:	2000011c 	.word	0x2000011c

08010b80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010b84:	2200      	movs	r2, #0
 8010b86:	4905      	ldr	r1, [pc, #20]	; (8010b9c <CDC_Init_FS+0x1c>)
 8010b88:	4805      	ldr	r0, [pc, #20]	; (8010ba0 <CDC_Init_FS+0x20>)
 8010b8a:	f7fa ffea 	bl	800bb62 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010b8e:	4905      	ldr	r1, [pc, #20]	; (8010ba4 <CDC_Init_FS+0x24>)
 8010b90:	4803      	ldr	r0, [pc, #12]	; (8010ba0 <CDC_Init_FS+0x20>)
 8010b92:	f7fa ffff 	bl	800bb94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010b96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	200055a8 	.word	0x200055a8
 8010ba0:	20004ad8 	.word	0x20004ad8
 8010ba4:	20004da8 	.word	0x20004da8

08010ba8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010bac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b083      	sub	sp, #12
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	6039      	str	r1, [r7, #0]
 8010bc2:	71fb      	strb	r3, [r7, #7]
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010bc8:	79fb      	ldrb	r3, [r7, #7]
 8010bca:	2b23      	cmp	r3, #35	; 0x23
 8010bcc:	d84a      	bhi.n	8010c64 <CDC_Control_FS+0xac>
 8010bce:	a201      	add	r2, pc, #4	; (adr r2, 8010bd4 <CDC_Control_FS+0x1c>)
 8010bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd4:	08010c65 	.word	0x08010c65
 8010bd8:	08010c65 	.word	0x08010c65
 8010bdc:	08010c65 	.word	0x08010c65
 8010be0:	08010c65 	.word	0x08010c65
 8010be4:	08010c65 	.word	0x08010c65
 8010be8:	08010c65 	.word	0x08010c65
 8010bec:	08010c65 	.word	0x08010c65
 8010bf0:	08010c65 	.word	0x08010c65
 8010bf4:	08010c65 	.word	0x08010c65
 8010bf8:	08010c65 	.word	0x08010c65
 8010bfc:	08010c65 	.word	0x08010c65
 8010c00:	08010c65 	.word	0x08010c65
 8010c04:	08010c65 	.word	0x08010c65
 8010c08:	08010c65 	.word	0x08010c65
 8010c0c:	08010c65 	.word	0x08010c65
 8010c10:	08010c65 	.word	0x08010c65
 8010c14:	08010c65 	.word	0x08010c65
 8010c18:	08010c65 	.word	0x08010c65
 8010c1c:	08010c65 	.word	0x08010c65
 8010c20:	08010c65 	.word	0x08010c65
 8010c24:	08010c65 	.word	0x08010c65
 8010c28:	08010c65 	.word	0x08010c65
 8010c2c:	08010c65 	.word	0x08010c65
 8010c30:	08010c65 	.word	0x08010c65
 8010c34:	08010c65 	.word	0x08010c65
 8010c38:	08010c65 	.word	0x08010c65
 8010c3c:	08010c65 	.word	0x08010c65
 8010c40:	08010c65 	.word	0x08010c65
 8010c44:	08010c65 	.word	0x08010c65
 8010c48:	08010c65 	.word	0x08010c65
 8010c4c:	08010c65 	.word	0x08010c65
 8010c50:	08010c65 	.word	0x08010c65
 8010c54:	08010c65 	.word	0x08010c65
 8010c58:	08010c65 	.word	0x08010c65
 8010c5c:	08010c65 	.word	0x08010c65
 8010c60:	08010c65 	.word	0x08010c65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010c64:	bf00      	nop
  }

  return (USBD_OK);
 8010c66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr

08010c74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010c7e:	6879      	ldr	r1, [r7, #4]
 8010c80:	4812      	ldr	r0, [pc, #72]	; (8010ccc <CDC_Receive_FS+0x58>)
 8010c82:	f7fa ff87 	bl	800bb94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010c86:	4811      	ldr	r0, [pc, #68]	; (8010ccc <CDC_Receive_FS+0x58>)
 8010c88:	f7fa ffc8 	bl	800bc1c <USBD_CDC_ReceivePacket>
  //uint8_t len = (uint8_t) *Len;
  memset(com_buf, 0, 64);
 8010c8c:	2240      	movs	r2, #64	; 0x40
 8010c8e:	2100      	movs	r1, #0
 8010c90:	480f      	ldr	r0, [pc, #60]	; (8010cd0 <CDC_Receive_FS+0x5c>)
 8010c92:	f000 fca8 	bl	80115e6 <memset>
  if(*Len < 64)
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b3f      	cmp	r3, #63	; 0x3f
 8010c9c:	d806      	bhi.n	8010cac <CDC_Receive_FS+0x38>
	  memcpy(com_buf, Buf, (size_t) *Len);
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	6879      	ldr	r1, [r7, #4]
 8010ca6:	480a      	ldr	r0, [pc, #40]	; (8010cd0 <CDC_Receive_FS+0x5c>)
 8010ca8:	f000 fc92 	bl	80115d0 <memcpy>
  memset(Buf, '\0', (size_t) *Len);
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	2100      	movs	r1, #0
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 fc96 	bl	80115e6 <memset>
  com_bytes_available = 1;
 8010cba:	4b06      	ldr	r3, [pc, #24]	; (8010cd4 <CDC_Receive_FS+0x60>)
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8010cc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3708      	adds	r7, #8
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	20004ad8 	.word	0x20004ad8
 8010cd0:	200028e4 	.word	0x200028e4
 8010cd4:	20000200 	.word	0x20000200

08010cd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010ce8:	4b0d      	ldr	r3, [pc, #52]	; (8010d20 <CDC_Transmit_FS+0x48>)
 8010cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d001      	beq.n	8010cfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	e00b      	b.n	8010d16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010cfe:	887b      	ldrh	r3, [r7, #2]
 8010d00:	461a      	mov	r2, r3
 8010d02:	6879      	ldr	r1, [r7, #4]
 8010d04:	4806      	ldr	r0, [pc, #24]	; (8010d20 <CDC_Transmit_FS+0x48>)
 8010d06:	f7fa ff2c 	bl	800bb62 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010d0a:	4805      	ldr	r0, [pc, #20]	; (8010d20 <CDC_Transmit_FS+0x48>)
 8010d0c:	f7fa ff56 	bl	800bbbc <USBD_CDC_TransmitPacket>
 8010d10:	4603      	mov	r3, r0
 8010d12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3710      	adds	r7, #16
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	20004ad8 	.word	0x20004ad8

08010d24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b087      	sub	sp, #28
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	60b9      	str	r1, [r7, #8]
 8010d2e:	4613      	mov	r3, r2
 8010d30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	371c      	adds	r7, #28
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d44:	4770      	bx	lr
	...

08010d48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	4603      	mov	r3, r0
 8010d50:	6039      	str	r1, [r7, #0]
 8010d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	2212      	movs	r2, #18
 8010d58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010d5a:	4b03      	ldr	r3, [pc, #12]	; (8010d68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	370c      	adds	r7, #12
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr
 8010d68:	2000014c 	.word	0x2000014c

08010d6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	6039      	str	r1, [r7, #0]
 8010d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	2204      	movs	r2, #4
 8010d7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010d7e:	4b03      	ldr	r3, [pc, #12]	; (8010d8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	20000160 	.word	0x20000160

08010d90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	4603      	mov	r3, r0
 8010d98:	6039      	str	r1, [r7, #0]
 8010d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d9c:	79fb      	ldrb	r3, [r7, #7]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d105      	bne.n	8010dae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010da2:	683a      	ldr	r2, [r7, #0]
 8010da4:	4907      	ldr	r1, [pc, #28]	; (8010dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010da6:	4808      	ldr	r0, [pc, #32]	; (8010dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010da8:	f7fb ff87 	bl	800ccba <USBD_GetString>
 8010dac:	e004      	b.n	8010db8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010dae:	683a      	ldr	r2, [r7, #0]
 8010db0:	4904      	ldr	r1, [pc, #16]	; (8010dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010db2:	4805      	ldr	r0, [pc, #20]	; (8010dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010db4:	f7fb ff81 	bl	800ccba <USBD_GetString>
  }
  return USBD_StrDesc;
 8010db8:	4b02      	ldr	r3, [pc, #8]	; (8010dc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3708      	adds	r7, #8
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	20005da8 	.word	0x20005da8
 8010dc8:	08012304 	.word	0x08012304

08010dcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	6039      	str	r1, [r7, #0]
 8010dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010dd8:	683a      	ldr	r2, [r7, #0]
 8010dda:	4904      	ldr	r1, [pc, #16]	; (8010dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ddc:	4804      	ldr	r0, [pc, #16]	; (8010df0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010dde:	f7fb ff6c 	bl	800ccba <USBD_GetString>
  return USBD_StrDesc;
 8010de2:	4b02      	ldr	r3, [pc, #8]	; (8010dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	20005da8 	.word	0x20005da8
 8010df0:	08012314 	.word	0x08012314

08010df4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	6039      	str	r1, [r7, #0]
 8010dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	221a      	movs	r2, #26
 8010e04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010e06:	f000 f843 	bl	8010e90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010e0a:	4b02      	ldr	r3, [pc, #8]	; (8010e14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	20000164 	.word	0x20000164

08010e18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	4603      	mov	r3, r0
 8010e20:	6039      	str	r1, [r7, #0]
 8010e22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010e24:	79fb      	ldrb	r3, [r7, #7]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d105      	bne.n	8010e36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010e2a:	683a      	ldr	r2, [r7, #0]
 8010e2c:	4907      	ldr	r1, [pc, #28]	; (8010e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010e2e:	4808      	ldr	r0, [pc, #32]	; (8010e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010e30:	f7fb ff43 	bl	800ccba <USBD_GetString>
 8010e34:	e004      	b.n	8010e40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010e36:	683a      	ldr	r2, [r7, #0]
 8010e38:	4904      	ldr	r1, [pc, #16]	; (8010e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010e3a:	4805      	ldr	r0, [pc, #20]	; (8010e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010e3c:	f7fb ff3d 	bl	800ccba <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e40:	4b02      	ldr	r3, [pc, #8]	; (8010e4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3708      	adds	r7, #8
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	20005da8 	.word	0x20005da8
 8010e50:	08012328 	.word	0x08012328

08010e54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	6039      	str	r1, [r7, #0]
 8010e5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e60:	79fb      	ldrb	r3, [r7, #7]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d105      	bne.n	8010e72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e66:	683a      	ldr	r2, [r7, #0]
 8010e68:	4907      	ldr	r1, [pc, #28]	; (8010e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e6a:	4808      	ldr	r0, [pc, #32]	; (8010e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e6c:	f7fb ff25 	bl	800ccba <USBD_GetString>
 8010e70:	e004      	b.n	8010e7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e72:	683a      	ldr	r2, [r7, #0]
 8010e74:	4904      	ldr	r1, [pc, #16]	; (8010e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e76:	4805      	ldr	r0, [pc, #20]	; (8010e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e78:	f7fb ff1f 	bl	800ccba <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e7c:	4b02      	ldr	r3, [pc, #8]	; (8010e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3708      	adds	r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	20005da8 	.word	0x20005da8
 8010e8c:	08012334 	.word	0x08012334

08010e90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010e96:	4b0f      	ldr	r3, [pc, #60]	; (8010ed4 <Get_SerialNum+0x44>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010e9c:	4b0e      	ldr	r3, [pc, #56]	; (8010ed8 <Get_SerialNum+0x48>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010ea2:	4b0e      	ldr	r3, [pc, #56]	; (8010edc <Get_SerialNum+0x4c>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ea8:	68fa      	ldr	r2, [r7, #12]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	4413      	add	r3, r2
 8010eae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d009      	beq.n	8010eca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010eb6:	2208      	movs	r2, #8
 8010eb8:	4909      	ldr	r1, [pc, #36]	; (8010ee0 <Get_SerialNum+0x50>)
 8010eba:	68f8      	ldr	r0, [r7, #12]
 8010ebc:	f000 f814 	bl	8010ee8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010ec0:	2204      	movs	r2, #4
 8010ec2:	4908      	ldr	r1, [pc, #32]	; (8010ee4 <Get_SerialNum+0x54>)
 8010ec4:	68b8      	ldr	r0, [r7, #8]
 8010ec6:	f000 f80f 	bl	8010ee8 <IntToUnicode>
  }
}
 8010eca:	bf00      	nop
 8010ecc:	3710      	adds	r7, #16
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	1fff7a10 	.word	0x1fff7a10
 8010ed8:	1fff7a14 	.word	0x1fff7a14
 8010edc:	1fff7a18 	.word	0x1fff7a18
 8010ee0:	20000166 	.word	0x20000166
 8010ee4:	20000176 	.word	0x20000176

08010ee8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b087      	sub	sp, #28
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010efa:	2300      	movs	r3, #0
 8010efc:	75fb      	strb	r3, [r7, #23]
 8010efe:	e027      	b.n	8010f50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	0f1b      	lsrs	r3, r3, #28
 8010f04:	2b09      	cmp	r3, #9
 8010f06:	d80b      	bhi.n	8010f20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	0f1b      	lsrs	r3, r3, #28
 8010f0c:	b2da      	uxtb	r2, r3
 8010f0e:	7dfb      	ldrb	r3, [r7, #23]
 8010f10:	005b      	lsls	r3, r3, #1
 8010f12:	4619      	mov	r1, r3
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	440b      	add	r3, r1
 8010f18:	3230      	adds	r2, #48	; 0x30
 8010f1a:	b2d2      	uxtb	r2, r2
 8010f1c:	701a      	strb	r2, [r3, #0]
 8010f1e:	e00a      	b.n	8010f36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	0f1b      	lsrs	r3, r3, #28
 8010f24:	b2da      	uxtb	r2, r3
 8010f26:	7dfb      	ldrb	r3, [r7, #23]
 8010f28:	005b      	lsls	r3, r3, #1
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	440b      	add	r3, r1
 8010f30:	3237      	adds	r2, #55	; 0x37
 8010f32:	b2d2      	uxtb	r2, r2
 8010f34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	011b      	lsls	r3, r3, #4
 8010f3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010f3c:	7dfb      	ldrb	r3, [r7, #23]
 8010f3e:	005b      	lsls	r3, r3, #1
 8010f40:	3301      	adds	r3, #1
 8010f42:	68ba      	ldr	r2, [r7, #8]
 8010f44:	4413      	add	r3, r2
 8010f46:	2200      	movs	r2, #0
 8010f48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010f4a:	7dfb      	ldrb	r3, [r7, #23]
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	75fb      	strb	r3, [r7, #23]
 8010f50:	7dfa      	ldrb	r2, [r7, #23]
 8010f52:	79fb      	ldrb	r3, [r7, #7]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d3d3      	bcc.n	8010f00 <IntToUnicode+0x18>
  }
}
 8010f58:	bf00      	nop
 8010f5a:	371c      	adds	r7, #28
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr

08010f64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b08a      	sub	sp, #40	; 0x28
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f6c:	f107 0314 	add.w	r3, r7, #20
 8010f70:	2200      	movs	r2, #0
 8010f72:	601a      	str	r2, [r3, #0]
 8010f74:	605a      	str	r2, [r3, #4]
 8010f76:	609a      	str	r2, [r3, #8]
 8010f78:	60da      	str	r2, [r3, #12]
 8010f7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f84:	d13a      	bne.n	8010ffc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f86:	2300      	movs	r3, #0
 8010f88:	613b      	str	r3, [r7, #16]
 8010f8a:	4b1e      	ldr	r3, [pc, #120]	; (8011004 <HAL_PCD_MspInit+0xa0>)
 8010f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f8e:	4a1d      	ldr	r2, [pc, #116]	; (8011004 <HAL_PCD_MspInit+0xa0>)
 8010f90:	f043 0301 	orr.w	r3, r3, #1
 8010f94:	6313      	str	r3, [r2, #48]	; 0x30
 8010f96:	4b1b      	ldr	r3, [pc, #108]	; (8011004 <HAL_PCD_MspInit+0xa0>)
 8010f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f9a:	f003 0301 	and.w	r3, r3, #1
 8010f9e:	613b      	str	r3, [r7, #16]
 8010fa0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010fa2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010fa8:	2302      	movs	r3, #2
 8010faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fac:	2300      	movs	r3, #0
 8010fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010fb0:	2303      	movs	r3, #3
 8010fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010fb4:	230a      	movs	r3, #10
 8010fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010fb8:	f107 0314 	add.w	r3, r7, #20
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	4812      	ldr	r0, [pc, #72]	; (8011008 <HAL_PCD_MspInit+0xa4>)
 8010fc0:	f7f2 feae 	bl	8003d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010fc4:	4b0f      	ldr	r3, [pc, #60]	; (8011004 <HAL_PCD_MspInit+0xa0>)
 8010fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fc8:	4a0e      	ldr	r2, [pc, #56]	; (8011004 <HAL_PCD_MspInit+0xa0>)
 8010fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fce:	6353      	str	r3, [r2, #52]	; 0x34
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	60fb      	str	r3, [r7, #12]
 8010fd4:	4b0b      	ldr	r3, [pc, #44]	; (8011004 <HAL_PCD_MspInit+0xa0>)
 8010fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fd8:	4a0a      	ldr	r2, [pc, #40]	; (8011004 <HAL_PCD_MspInit+0xa0>)
 8010fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010fde:	6453      	str	r3, [r2, #68]	; 0x44
 8010fe0:	4b08      	ldr	r3, [pc, #32]	; (8011004 <HAL_PCD_MspInit+0xa0>)
 8010fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fe8:	60fb      	str	r3, [r7, #12]
 8010fea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010fec:	2200      	movs	r2, #0
 8010fee:	2100      	movs	r1, #0
 8010ff0:	2043      	movs	r0, #67	; 0x43
 8010ff2:	f7f2 fe5e 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010ff6:	2043      	movs	r0, #67	; 0x43
 8010ff8:	f7f2 fe77 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010ffc:	bf00      	nop
 8010ffe:	3728      	adds	r7, #40	; 0x28
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	40023800 	.word	0x40023800
 8011008:	40020000 	.word	0x40020000

0801100c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011020:	4619      	mov	r1, r3
 8011022:	4610      	mov	r0, r2
 8011024:	f7fa fec6 	bl	800bdb4 <USBD_LL_SetupStage>
}
 8011028:	bf00      	nop
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	460b      	mov	r3, r1
 801103a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011042:	78fa      	ldrb	r2, [r7, #3]
 8011044:	6879      	ldr	r1, [r7, #4]
 8011046:	4613      	mov	r3, r2
 8011048:	00db      	lsls	r3, r3, #3
 801104a:	1a9b      	subs	r3, r3, r2
 801104c:	009b      	lsls	r3, r3, #2
 801104e:	440b      	add	r3, r1
 8011050:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	78fb      	ldrb	r3, [r7, #3]
 8011058:	4619      	mov	r1, r3
 801105a:	f7fa fefe 	bl	800be5a <USBD_LL_DataOutStage>
}
 801105e:	bf00      	nop
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011066:	b580      	push	{r7, lr}
 8011068:	b082      	sub	sp, #8
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
 801106e:	460b      	mov	r3, r1
 8011070:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011078:	78fa      	ldrb	r2, [r7, #3]
 801107a:	6879      	ldr	r1, [r7, #4]
 801107c:	4613      	mov	r3, r2
 801107e:	00db      	lsls	r3, r3, #3
 8011080:	1a9b      	subs	r3, r3, r2
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	440b      	add	r3, r1
 8011086:	3348      	adds	r3, #72	; 0x48
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	78fb      	ldrb	r3, [r7, #3]
 801108c:	4619      	mov	r1, r3
 801108e:	f7fa ff47 	bl	800bf20 <USBD_LL_DataInStage>
}
 8011092:	bf00      	nop
 8011094:	3708      	adds	r7, #8
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}

0801109a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801109a:	b580      	push	{r7, lr}
 801109c:	b082      	sub	sp, #8
 801109e:	af00      	add	r7, sp, #0
 80110a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7fb f84b 	bl	800c144 <USBD_LL_SOF>
}
 80110ae:	bf00      	nop
 80110b0:	3708      	adds	r7, #8
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}

080110b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110b6:	b580      	push	{r7, lr}
 80110b8:	b084      	sub	sp, #16
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80110be:	2301      	movs	r3, #1
 80110c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	68db      	ldr	r3, [r3, #12]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d102      	bne.n	80110d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80110ca:	2300      	movs	r3, #0
 80110cc:	73fb      	strb	r3, [r7, #15]
 80110ce:	e008      	b.n	80110e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	2b02      	cmp	r3, #2
 80110d6:	d102      	bne.n	80110de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80110d8:	2301      	movs	r3, #1
 80110da:	73fb      	strb	r3, [r7, #15]
 80110dc:	e001      	b.n	80110e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80110de:	f7f1 fc3d 	bl	800295c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80110e8:	7bfa      	ldrb	r2, [r7, #15]
 80110ea:	4611      	mov	r1, r2
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7fa ffee 	bl	800c0ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fa ffa7 	bl	800c04c <USBD_LL_Reset>
}
 80110fe:	bf00      	nop
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
	...

08011108 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011116:	4618      	mov	r0, r3
 8011118:	f7fa ffe9 	bl	800c0ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	6812      	ldr	r2, [r2, #0]
 801112a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801112e:	f043 0301 	orr.w	r3, r3, #1
 8011132:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6a1b      	ldr	r3, [r3, #32]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d005      	beq.n	8011148 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801113c:	4b04      	ldr	r3, [pc, #16]	; (8011150 <HAL_PCD_SuspendCallback+0x48>)
 801113e:	691b      	ldr	r3, [r3, #16]
 8011140:	4a03      	ldr	r2, [pc, #12]	; (8011150 <HAL_PCD_SuspendCallback+0x48>)
 8011142:	f043 0306 	orr.w	r3, r3, #6
 8011146:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011148:	bf00      	nop
 801114a:	3708      	adds	r7, #8
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}
 8011150:	e000ed00 	.word	0xe000ed00

08011154 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011162:	4618      	mov	r0, r3
 8011164:	f7fa ffd8 	bl	800c118 <USBD_LL_Resume>
}
 8011168:	bf00      	nop
 801116a:	3708      	adds	r7, #8
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	460b      	mov	r3, r1
 801117a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011182:	78fa      	ldrb	r2, [r7, #3]
 8011184:	4611      	mov	r1, r2
 8011186:	4618      	mov	r0, r3
 8011188:	f7fb f803 	bl	800c192 <USBD_LL_IsoOUTIncomplete>
}
 801118c:	bf00      	nop
 801118e:	3708      	adds	r7, #8
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b082      	sub	sp, #8
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	460b      	mov	r3, r1
 801119e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80111a6:	78fa      	ldrb	r2, [r7, #3]
 80111a8:	4611      	mov	r1, r2
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fa ffe4 	bl	800c178 <USBD_LL_IsoINIncomplete>
}
 80111b0:	bf00      	nop
 80111b2:	3708      	adds	r7, #8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fa fff0 	bl	800c1ac <USBD_LL_DevConnected>
}
 80111cc:	bf00      	nop
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fa ffed 	bl	800c1c2 <USBD_LL_DevDisconnected>
}
 80111e8:	bf00      	nop
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d13c      	bne.n	801127a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011200:	4a20      	ldr	r2, [pc, #128]	; (8011284 <USBD_LL_Init+0x94>)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4a1e      	ldr	r2, [pc, #120]	; (8011284 <USBD_LL_Init+0x94>)
 801120c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011210:	4b1c      	ldr	r3, [pc, #112]	; (8011284 <USBD_LL_Init+0x94>)
 8011212:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011216:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011218:	4b1a      	ldr	r3, [pc, #104]	; (8011284 <USBD_LL_Init+0x94>)
 801121a:	2206      	movs	r2, #6
 801121c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801121e:	4b19      	ldr	r3, [pc, #100]	; (8011284 <USBD_LL_Init+0x94>)
 8011220:	2202      	movs	r2, #2
 8011222:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011224:	4b17      	ldr	r3, [pc, #92]	; (8011284 <USBD_LL_Init+0x94>)
 8011226:	2200      	movs	r2, #0
 8011228:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801122a:	4b16      	ldr	r3, [pc, #88]	; (8011284 <USBD_LL_Init+0x94>)
 801122c:	2202      	movs	r2, #2
 801122e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011230:	4b14      	ldr	r3, [pc, #80]	; (8011284 <USBD_LL_Init+0x94>)
 8011232:	2200      	movs	r2, #0
 8011234:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011236:	4b13      	ldr	r3, [pc, #76]	; (8011284 <USBD_LL_Init+0x94>)
 8011238:	2200      	movs	r2, #0
 801123a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801123c:	4b11      	ldr	r3, [pc, #68]	; (8011284 <USBD_LL_Init+0x94>)
 801123e:	2200      	movs	r2, #0
 8011240:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011242:	4b10      	ldr	r3, [pc, #64]	; (8011284 <USBD_LL_Init+0x94>)
 8011244:	2200      	movs	r2, #0
 8011246:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011248:	4b0e      	ldr	r3, [pc, #56]	; (8011284 <USBD_LL_Init+0x94>)
 801124a:	2200      	movs	r2, #0
 801124c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801124e:	480d      	ldr	r0, [pc, #52]	; (8011284 <USBD_LL_Init+0x94>)
 8011250:	f7f3 f87c 	bl	800434c <HAL_PCD_Init>
 8011254:	4603      	mov	r3, r0
 8011256:	2b00      	cmp	r3, #0
 8011258:	d001      	beq.n	801125e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801125a:	f7f1 fb7f 	bl	800295c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801125e:	2180      	movs	r1, #128	; 0x80
 8011260:	4808      	ldr	r0, [pc, #32]	; (8011284 <USBD_LL_Init+0x94>)
 8011262:	f7f4 fa0e 	bl	8005682 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011266:	2240      	movs	r2, #64	; 0x40
 8011268:	2100      	movs	r1, #0
 801126a:	4806      	ldr	r0, [pc, #24]	; (8011284 <USBD_LL_Init+0x94>)
 801126c:	f7f4 f9c2 	bl	80055f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011270:	2280      	movs	r2, #128	; 0x80
 8011272:	2101      	movs	r1, #1
 8011274:	4803      	ldr	r0, [pc, #12]	; (8011284 <USBD_LL_Init+0x94>)
 8011276:	f7f4 f9bd 	bl	80055f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801127a:	2300      	movs	r3, #0
}
 801127c:	4618      	mov	r0, r3
 801127e:	3708      	adds	r7, #8
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	20005fa8 	.word	0x20005fa8

08011288 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011290:	2300      	movs	r3, #0
 8011292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011294:	2300      	movs	r3, #0
 8011296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801129e:	4618      	mov	r0, r3
 80112a0:	f7f3 f978 	bl	8004594 <HAL_PCD_Start>
 80112a4:	4603      	mov	r3, r0
 80112a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112a8:	7bfb      	ldrb	r3, [r7, #15]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f000 f92a 	bl	8011504 <USBD_Get_USB_Status>
 80112b0:	4603      	mov	r3, r0
 80112b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3710      	adds	r7, #16
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}

080112be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80112be:	b580      	push	{r7, lr}
 80112c0:	b084      	sub	sp, #16
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
 80112c6:	4608      	mov	r0, r1
 80112c8:	4611      	mov	r1, r2
 80112ca:	461a      	mov	r2, r3
 80112cc:	4603      	mov	r3, r0
 80112ce:	70fb      	strb	r3, [r7, #3]
 80112d0:	460b      	mov	r3, r1
 80112d2:	70bb      	strb	r3, [r7, #2]
 80112d4:	4613      	mov	r3, r2
 80112d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112d8:	2300      	movs	r3, #0
 80112da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112dc:	2300      	movs	r3, #0
 80112de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80112e6:	78bb      	ldrb	r3, [r7, #2]
 80112e8:	883a      	ldrh	r2, [r7, #0]
 80112ea:	78f9      	ldrb	r1, [r7, #3]
 80112ec:	f7f3 fd89 	bl	8004e02 <HAL_PCD_EP_Open>
 80112f0:	4603      	mov	r3, r0
 80112f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112f4:	7bfb      	ldrb	r3, [r7, #15]
 80112f6:	4618      	mov	r0, r3
 80112f8:	f000 f904 	bl	8011504 <USBD_Get_USB_Status>
 80112fc:	4603      	mov	r3, r0
 80112fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011300:	7bbb      	ldrb	r3, [r7, #14]
}
 8011302:	4618      	mov	r0, r3
 8011304:	3710      	adds	r7, #16
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}

0801130a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b084      	sub	sp, #16
 801130e:	af00      	add	r7, sp, #0
 8011310:	6078      	str	r0, [r7, #4]
 8011312:	460b      	mov	r3, r1
 8011314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011316:	2300      	movs	r3, #0
 8011318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801131a:	2300      	movs	r3, #0
 801131c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011324:	78fa      	ldrb	r2, [r7, #3]
 8011326:	4611      	mov	r1, r2
 8011328:	4618      	mov	r0, r3
 801132a:	f7f3 fdd2 	bl	8004ed2 <HAL_PCD_EP_Close>
 801132e:	4603      	mov	r3, r0
 8011330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011332:	7bfb      	ldrb	r3, [r7, #15]
 8011334:	4618      	mov	r0, r3
 8011336:	f000 f8e5 	bl	8011504 <USBD_Get_USB_Status>
 801133a:	4603      	mov	r3, r0
 801133c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801133e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011340:	4618      	mov	r0, r3
 8011342:	3710      	adds	r7, #16
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}

08011348 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	460b      	mov	r3, r1
 8011352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011354:	2300      	movs	r3, #0
 8011356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011358:	2300      	movs	r3, #0
 801135a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011362:	78fa      	ldrb	r2, [r7, #3]
 8011364:	4611      	mov	r1, r2
 8011366:	4618      	mov	r0, r3
 8011368:	f7f3 feaa 	bl	80050c0 <HAL_PCD_EP_SetStall>
 801136c:	4603      	mov	r3, r0
 801136e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011370:	7bfb      	ldrb	r3, [r7, #15]
 8011372:	4618      	mov	r0, r3
 8011374:	f000 f8c6 	bl	8011504 <USBD_Get_USB_Status>
 8011378:	4603      	mov	r3, r0
 801137a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801137c:	7bbb      	ldrb	r3, [r7, #14]
}
 801137e:	4618      	mov	r0, r3
 8011380:	3710      	adds	r7, #16
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}

08011386 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011386:	b580      	push	{r7, lr}
 8011388:	b084      	sub	sp, #16
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	460b      	mov	r3, r1
 8011390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011392:	2300      	movs	r3, #0
 8011394:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011396:	2300      	movs	r3, #0
 8011398:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113a0:	78fa      	ldrb	r2, [r7, #3]
 80113a2:	4611      	mov	r1, r2
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7f3 feef 	bl	8005188 <HAL_PCD_EP_ClrStall>
 80113aa:	4603      	mov	r3, r0
 80113ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
 80113b0:	4618      	mov	r0, r3
 80113b2:	f000 f8a7 	bl	8011504 <USBD_Get_USB_Status>
 80113b6:	4603      	mov	r3, r0
 80113b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113c4:	b480      	push	{r7}
 80113c6:	b085      	sub	sp, #20
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	460b      	mov	r3, r1
 80113ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80113d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	da0b      	bge.n	80113f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80113e0:	78fb      	ldrb	r3, [r7, #3]
 80113e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113e6:	68f9      	ldr	r1, [r7, #12]
 80113e8:	4613      	mov	r3, r2
 80113ea:	00db      	lsls	r3, r3, #3
 80113ec:	1a9b      	subs	r3, r3, r2
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	440b      	add	r3, r1
 80113f2:	333e      	adds	r3, #62	; 0x3e
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	e00b      	b.n	8011410 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80113f8:	78fb      	ldrb	r3, [r7, #3]
 80113fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113fe:	68f9      	ldr	r1, [r7, #12]
 8011400:	4613      	mov	r3, r2
 8011402:	00db      	lsls	r3, r3, #3
 8011404:	1a9b      	subs	r3, r3, r2
 8011406:	009b      	lsls	r3, r3, #2
 8011408:	440b      	add	r3, r1
 801140a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801140e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011410:	4618      	mov	r0, r3
 8011412:	3714      	adds	r7, #20
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr

0801141c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	460b      	mov	r3, r1
 8011426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011428:	2300      	movs	r3, #0
 801142a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801142c:	2300      	movs	r3, #0
 801142e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011436:	78fa      	ldrb	r2, [r7, #3]
 8011438:	4611      	mov	r1, r2
 801143a:	4618      	mov	r0, r3
 801143c:	f7f3 fcbc 	bl	8004db8 <HAL_PCD_SetAddress>
 8011440:	4603      	mov	r3, r0
 8011442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011444:	7bfb      	ldrb	r3, [r7, #15]
 8011446:	4618      	mov	r0, r3
 8011448:	f000 f85c 	bl	8011504 <USBD_Get_USB_Status>
 801144c:	4603      	mov	r3, r0
 801144e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011450:	7bbb      	ldrb	r3, [r7, #14]
}
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}

0801145a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801145a:	b580      	push	{r7, lr}
 801145c:	b086      	sub	sp, #24
 801145e:	af00      	add	r7, sp, #0
 8011460:	60f8      	str	r0, [r7, #12]
 8011462:	607a      	str	r2, [r7, #4]
 8011464:	603b      	str	r3, [r7, #0]
 8011466:	460b      	mov	r3, r1
 8011468:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801146a:	2300      	movs	r3, #0
 801146c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801146e:	2300      	movs	r3, #0
 8011470:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011478:	7af9      	ldrb	r1, [r7, #11]
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	f7f3 fdd5 	bl	800502c <HAL_PCD_EP_Transmit>
 8011482:	4603      	mov	r3, r0
 8011484:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011486:	7dfb      	ldrb	r3, [r7, #23]
 8011488:	4618      	mov	r0, r3
 801148a:	f000 f83b 	bl	8011504 <USBD_Get_USB_Status>
 801148e:	4603      	mov	r3, r0
 8011490:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011492:	7dbb      	ldrb	r3, [r7, #22]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3718      	adds	r7, #24
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b086      	sub	sp, #24
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	607a      	str	r2, [r7, #4]
 80114a6:	603b      	str	r3, [r7, #0]
 80114a8:	460b      	mov	r3, r1
 80114aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114ac:	2300      	movs	r3, #0
 80114ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114b0:	2300      	movs	r3, #0
 80114b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114ba:	7af9      	ldrb	r1, [r7, #11]
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	f7f3 fd51 	bl	8004f66 <HAL_PCD_EP_Receive>
 80114c4:	4603      	mov	r3, r0
 80114c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114c8:	7dfb      	ldrb	r3, [r7, #23]
 80114ca:	4618      	mov	r0, r3
 80114cc:	f000 f81a 	bl	8011504 <USBD_Get_USB_Status>
 80114d0:	4603      	mov	r3, r0
 80114d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80114d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3718      	adds	r7, #24
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}

080114de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b082      	sub	sp, #8
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
 80114e6:	460b      	mov	r3, r1
 80114e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80114f0:	78fa      	ldrb	r2, [r7, #3]
 80114f2:	4611      	mov	r1, r2
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7f3 fd81 	bl	8004ffc <HAL_PCD_EP_GetRxCount>
 80114fa:	4603      	mov	r3, r0
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011504:	b480      	push	{r7}
 8011506:	b085      	sub	sp, #20
 8011508:	af00      	add	r7, sp, #0
 801150a:	4603      	mov	r3, r0
 801150c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801150e:	2300      	movs	r3, #0
 8011510:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011512:	79fb      	ldrb	r3, [r7, #7]
 8011514:	2b03      	cmp	r3, #3
 8011516:	d817      	bhi.n	8011548 <USBD_Get_USB_Status+0x44>
 8011518:	a201      	add	r2, pc, #4	; (adr r2, 8011520 <USBD_Get_USB_Status+0x1c>)
 801151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801151e:	bf00      	nop
 8011520:	08011531 	.word	0x08011531
 8011524:	08011537 	.word	0x08011537
 8011528:	0801153d 	.word	0x0801153d
 801152c:	08011543 	.word	0x08011543
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011530:	2300      	movs	r3, #0
 8011532:	73fb      	strb	r3, [r7, #15]
    break;
 8011534:	e00b      	b.n	801154e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011536:	2303      	movs	r3, #3
 8011538:	73fb      	strb	r3, [r7, #15]
    break;
 801153a:	e008      	b.n	801154e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801153c:	2301      	movs	r3, #1
 801153e:	73fb      	strb	r3, [r7, #15]
    break;
 8011540:	e005      	b.n	801154e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011542:	2303      	movs	r3, #3
 8011544:	73fb      	strb	r3, [r7, #15]
    break;
 8011546:	e002      	b.n	801154e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011548:	2303      	movs	r3, #3
 801154a:	73fb      	strb	r3, [r7, #15]
    break;
 801154c:	bf00      	nop
  }
  return usb_status;
 801154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3714      	adds	r7, #20
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <__errno>:
 801155c:	4b01      	ldr	r3, [pc, #4]	; (8011564 <__errno+0x8>)
 801155e:	6818      	ldr	r0, [r3, #0]
 8011560:	4770      	bx	lr
 8011562:	bf00      	nop
 8011564:	20000180 	.word	0x20000180

08011568 <__libc_init_array>:
 8011568:	b570      	push	{r4, r5, r6, lr}
 801156a:	4e0d      	ldr	r6, [pc, #52]	; (80115a0 <__libc_init_array+0x38>)
 801156c:	4c0d      	ldr	r4, [pc, #52]	; (80115a4 <__libc_init_array+0x3c>)
 801156e:	1ba4      	subs	r4, r4, r6
 8011570:	10a4      	asrs	r4, r4, #2
 8011572:	2500      	movs	r5, #0
 8011574:	42a5      	cmp	r5, r4
 8011576:	d109      	bne.n	801158c <__libc_init_array+0x24>
 8011578:	4e0b      	ldr	r6, [pc, #44]	; (80115a8 <__libc_init_array+0x40>)
 801157a:	4c0c      	ldr	r4, [pc, #48]	; (80115ac <__libc_init_array+0x44>)
 801157c:	f000 fc52 	bl	8011e24 <_init>
 8011580:	1ba4      	subs	r4, r4, r6
 8011582:	10a4      	asrs	r4, r4, #2
 8011584:	2500      	movs	r5, #0
 8011586:	42a5      	cmp	r5, r4
 8011588:	d105      	bne.n	8011596 <__libc_init_array+0x2e>
 801158a:	bd70      	pop	{r4, r5, r6, pc}
 801158c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011590:	4798      	blx	r3
 8011592:	3501      	adds	r5, #1
 8011594:	e7ee      	b.n	8011574 <__libc_init_array+0xc>
 8011596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801159a:	4798      	blx	r3
 801159c:	3501      	adds	r5, #1
 801159e:	e7f2      	b.n	8011586 <__libc_init_array+0x1e>
 80115a0:	080127ec 	.word	0x080127ec
 80115a4:	080127ec 	.word	0x080127ec
 80115a8:	080127ec 	.word	0x080127ec
 80115ac:	080127f0 	.word	0x080127f0

080115b0 <malloc>:
 80115b0:	4b02      	ldr	r3, [pc, #8]	; (80115bc <malloc+0xc>)
 80115b2:	4601      	mov	r1, r0
 80115b4:	6818      	ldr	r0, [r3, #0]
 80115b6:	f000 b86d 	b.w	8011694 <_malloc_r>
 80115ba:	bf00      	nop
 80115bc:	20000180 	.word	0x20000180

080115c0 <free>:
 80115c0:	4b02      	ldr	r3, [pc, #8]	; (80115cc <free+0xc>)
 80115c2:	4601      	mov	r1, r0
 80115c4:	6818      	ldr	r0, [r3, #0]
 80115c6:	f000 b817 	b.w	80115f8 <_free_r>
 80115ca:	bf00      	nop
 80115cc:	20000180 	.word	0x20000180

080115d0 <memcpy>:
 80115d0:	b510      	push	{r4, lr}
 80115d2:	1e43      	subs	r3, r0, #1
 80115d4:	440a      	add	r2, r1
 80115d6:	4291      	cmp	r1, r2
 80115d8:	d100      	bne.n	80115dc <memcpy+0xc>
 80115da:	bd10      	pop	{r4, pc}
 80115dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115e4:	e7f7      	b.n	80115d6 <memcpy+0x6>

080115e6 <memset>:
 80115e6:	4402      	add	r2, r0
 80115e8:	4603      	mov	r3, r0
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d100      	bne.n	80115f0 <memset+0xa>
 80115ee:	4770      	bx	lr
 80115f0:	f803 1b01 	strb.w	r1, [r3], #1
 80115f4:	e7f9      	b.n	80115ea <memset+0x4>
	...

080115f8 <_free_r>:
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	4605      	mov	r5, r0
 80115fc:	2900      	cmp	r1, #0
 80115fe:	d045      	beq.n	801168c <_free_r+0x94>
 8011600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011604:	1f0c      	subs	r4, r1, #4
 8011606:	2b00      	cmp	r3, #0
 8011608:	bfb8      	it	lt
 801160a:	18e4      	addlt	r4, r4, r3
 801160c:	f000 f8e6 	bl	80117dc <__malloc_lock>
 8011610:	4a1f      	ldr	r2, [pc, #124]	; (8011690 <_free_r+0x98>)
 8011612:	6813      	ldr	r3, [r2, #0]
 8011614:	4610      	mov	r0, r2
 8011616:	b933      	cbnz	r3, 8011626 <_free_r+0x2e>
 8011618:	6063      	str	r3, [r4, #4]
 801161a:	6014      	str	r4, [r2, #0]
 801161c:	4628      	mov	r0, r5
 801161e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011622:	f000 b8dc 	b.w	80117de <__malloc_unlock>
 8011626:	42a3      	cmp	r3, r4
 8011628:	d90c      	bls.n	8011644 <_free_r+0x4c>
 801162a:	6821      	ldr	r1, [r4, #0]
 801162c:	1862      	adds	r2, r4, r1
 801162e:	4293      	cmp	r3, r2
 8011630:	bf04      	itt	eq
 8011632:	681a      	ldreq	r2, [r3, #0]
 8011634:	685b      	ldreq	r3, [r3, #4]
 8011636:	6063      	str	r3, [r4, #4]
 8011638:	bf04      	itt	eq
 801163a:	1852      	addeq	r2, r2, r1
 801163c:	6022      	streq	r2, [r4, #0]
 801163e:	6004      	str	r4, [r0, #0]
 8011640:	e7ec      	b.n	801161c <_free_r+0x24>
 8011642:	4613      	mov	r3, r2
 8011644:	685a      	ldr	r2, [r3, #4]
 8011646:	b10a      	cbz	r2, 801164c <_free_r+0x54>
 8011648:	42a2      	cmp	r2, r4
 801164a:	d9fa      	bls.n	8011642 <_free_r+0x4a>
 801164c:	6819      	ldr	r1, [r3, #0]
 801164e:	1858      	adds	r0, r3, r1
 8011650:	42a0      	cmp	r0, r4
 8011652:	d10b      	bne.n	801166c <_free_r+0x74>
 8011654:	6820      	ldr	r0, [r4, #0]
 8011656:	4401      	add	r1, r0
 8011658:	1858      	adds	r0, r3, r1
 801165a:	4282      	cmp	r2, r0
 801165c:	6019      	str	r1, [r3, #0]
 801165e:	d1dd      	bne.n	801161c <_free_r+0x24>
 8011660:	6810      	ldr	r0, [r2, #0]
 8011662:	6852      	ldr	r2, [r2, #4]
 8011664:	605a      	str	r2, [r3, #4]
 8011666:	4401      	add	r1, r0
 8011668:	6019      	str	r1, [r3, #0]
 801166a:	e7d7      	b.n	801161c <_free_r+0x24>
 801166c:	d902      	bls.n	8011674 <_free_r+0x7c>
 801166e:	230c      	movs	r3, #12
 8011670:	602b      	str	r3, [r5, #0]
 8011672:	e7d3      	b.n	801161c <_free_r+0x24>
 8011674:	6820      	ldr	r0, [r4, #0]
 8011676:	1821      	adds	r1, r4, r0
 8011678:	428a      	cmp	r2, r1
 801167a:	bf04      	itt	eq
 801167c:	6811      	ldreq	r1, [r2, #0]
 801167e:	6852      	ldreq	r2, [r2, #4]
 8011680:	6062      	str	r2, [r4, #4]
 8011682:	bf04      	itt	eq
 8011684:	1809      	addeq	r1, r1, r0
 8011686:	6021      	streq	r1, [r4, #0]
 8011688:	605c      	str	r4, [r3, #4]
 801168a:	e7c7      	b.n	801161c <_free_r+0x24>
 801168c:	bd38      	pop	{r3, r4, r5, pc}
 801168e:	bf00      	nop
 8011690:	20000440 	.word	0x20000440

08011694 <_malloc_r>:
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	1ccd      	adds	r5, r1, #3
 8011698:	f025 0503 	bic.w	r5, r5, #3
 801169c:	3508      	adds	r5, #8
 801169e:	2d0c      	cmp	r5, #12
 80116a0:	bf38      	it	cc
 80116a2:	250c      	movcc	r5, #12
 80116a4:	2d00      	cmp	r5, #0
 80116a6:	4606      	mov	r6, r0
 80116a8:	db01      	blt.n	80116ae <_malloc_r+0x1a>
 80116aa:	42a9      	cmp	r1, r5
 80116ac:	d903      	bls.n	80116b6 <_malloc_r+0x22>
 80116ae:	230c      	movs	r3, #12
 80116b0:	6033      	str	r3, [r6, #0]
 80116b2:	2000      	movs	r0, #0
 80116b4:	bd70      	pop	{r4, r5, r6, pc}
 80116b6:	f000 f891 	bl	80117dc <__malloc_lock>
 80116ba:	4a21      	ldr	r2, [pc, #132]	; (8011740 <_malloc_r+0xac>)
 80116bc:	6814      	ldr	r4, [r2, #0]
 80116be:	4621      	mov	r1, r4
 80116c0:	b991      	cbnz	r1, 80116e8 <_malloc_r+0x54>
 80116c2:	4c20      	ldr	r4, [pc, #128]	; (8011744 <_malloc_r+0xb0>)
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	b91b      	cbnz	r3, 80116d0 <_malloc_r+0x3c>
 80116c8:	4630      	mov	r0, r6
 80116ca:	f000 f83d 	bl	8011748 <_sbrk_r>
 80116ce:	6020      	str	r0, [r4, #0]
 80116d0:	4629      	mov	r1, r5
 80116d2:	4630      	mov	r0, r6
 80116d4:	f000 f838 	bl	8011748 <_sbrk_r>
 80116d8:	1c43      	adds	r3, r0, #1
 80116da:	d124      	bne.n	8011726 <_malloc_r+0x92>
 80116dc:	230c      	movs	r3, #12
 80116de:	6033      	str	r3, [r6, #0]
 80116e0:	4630      	mov	r0, r6
 80116e2:	f000 f87c 	bl	80117de <__malloc_unlock>
 80116e6:	e7e4      	b.n	80116b2 <_malloc_r+0x1e>
 80116e8:	680b      	ldr	r3, [r1, #0]
 80116ea:	1b5b      	subs	r3, r3, r5
 80116ec:	d418      	bmi.n	8011720 <_malloc_r+0x8c>
 80116ee:	2b0b      	cmp	r3, #11
 80116f0:	d90f      	bls.n	8011712 <_malloc_r+0x7e>
 80116f2:	600b      	str	r3, [r1, #0]
 80116f4:	50cd      	str	r5, [r1, r3]
 80116f6:	18cc      	adds	r4, r1, r3
 80116f8:	4630      	mov	r0, r6
 80116fa:	f000 f870 	bl	80117de <__malloc_unlock>
 80116fe:	f104 000b 	add.w	r0, r4, #11
 8011702:	1d23      	adds	r3, r4, #4
 8011704:	f020 0007 	bic.w	r0, r0, #7
 8011708:	1ac3      	subs	r3, r0, r3
 801170a:	d0d3      	beq.n	80116b4 <_malloc_r+0x20>
 801170c:	425a      	negs	r2, r3
 801170e:	50e2      	str	r2, [r4, r3]
 8011710:	e7d0      	b.n	80116b4 <_malloc_r+0x20>
 8011712:	428c      	cmp	r4, r1
 8011714:	684b      	ldr	r3, [r1, #4]
 8011716:	bf16      	itet	ne
 8011718:	6063      	strne	r3, [r4, #4]
 801171a:	6013      	streq	r3, [r2, #0]
 801171c:	460c      	movne	r4, r1
 801171e:	e7eb      	b.n	80116f8 <_malloc_r+0x64>
 8011720:	460c      	mov	r4, r1
 8011722:	6849      	ldr	r1, [r1, #4]
 8011724:	e7cc      	b.n	80116c0 <_malloc_r+0x2c>
 8011726:	1cc4      	adds	r4, r0, #3
 8011728:	f024 0403 	bic.w	r4, r4, #3
 801172c:	42a0      	cmp	r0, r4
 801172e:	d005      	beq.n	801173c <_malloc_r+0xa8>
 8011730:	1a21      	subs	r1, r4, r0
 8011732:	4630      	mov	r0, r6
 8011734:	f000 f808 	bl	8011748 <_sbrk_r>
 8011738:	3001      	adds	r0, #1
 801173a:	d0cf      	beq.n	80116dc <_malloc_r+0x48>
 801173c:	6025      	str	r5, [r4, #0]
 801173e:	e7db      	b.n	80116f8 <_malloc_r+0x64>
 8011740:	20000440 	.word	0x20000440
 8011744:	20000444 	.word	0x20000444

08011748 <_sbrk_r>:
 8011748:	b538      	push	{r3, r4, r5, lr}
 801174a:	4c06      	ldr	r4, [pc, #24]	; (8011764 <_sbrk_r+0x1c>)
 801174c:	2300      	movs	r3, #0
 801174e:	4605      	mov	r5, r0
 8011750:	4608      	mov	r0, r1
 8011752:	6023      	str	r3, [r4, #0]
 8011754:	f7f1 fd5a 	bl	800320c <_sbrk>
 8011758:	1c43      	adds	r3, r0, #1
 801175a:	d102      	bne.n	8011762 <_sbrk_r+0x1a>
 801175c:	6823      	ldr	r3, [r4, #0]
 801175e:	b103      	cbz	r3, 8011762 <_sbrk_r+0x1a>
 8011760:	602b      	str	r3, [r5, #0]
 8011762:	bd38      	pop	{r3, r4, r5, pc}
 8011764:	200063b0 	.word	0x200063b0

08011768 <siprintf>:
 8011768:	b40e      	push	{r1, r2, r3}
 801176a:	b500      	push	{lr}
 801176c:	b09c      	sub	sp, #112	; 0x70
 801176e:	ab1d      	add	r3, sp, #116	; 0x74
 8011770:	9002      	str	r0, [sp, #8]
 8011772:	9006      	str	r0, [sp, #24]
 8011774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011778:	4809      	ldr	r0, [pc, #36]	; (80117a0 <siprintf+0x38>)
 801177a:	9107      	str	r1, [sp, #28]
 801177c:	9104      	str	r1, [sp, #16]
 801177e:	4909      	ldr	r1, [pc, #36]	; (80117a4 <siprintf+0x3c>)
 8011780:	f853 2b04 	ldr.w	r2, [r3], #4
 8011784:	9105      	str	r1, [sp, #20]
 8011786:	6800      	ldr	r0, [r0, #0]
 8011788:	9301      	str	r3, [sp, #4]
 801178a:	a902      	add	r1, sp, #8
 801178c:	f000 f882 	bl	8011894 <_svfiprintf_r>
 8011790:	9b02      	ldr	r3, [sp, #8]
 8011792:	2200      	movs	r2, #0
 8011794:	701a      	strb	r2, [r3, #0]
 8011796:	b01c      	add	sp, #112	; 0x70
 8011798:	f85d eb04 	ldr.w	lr, [sp], #4
 801179c:	b003      	add	sp, #12
 801179e:	4770      	bx	lr
 80117a0:	20000180 	.word	0x20000180
 80117a4:	ffff0208 	.word	0xffff0208

080117a8 <strcpy>:
 80117a8:	4603      	mov	r3, r0
 80117aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117ae:	f803 2b01 	strb.w	r2, [r3], #1
 80117b2:	2a00      	cmp	r2, #0
 80117b4:	d1f9      	bne.n	80117aa <strcpy+0x2>
 80117b6:	4770      	bx	lr

080117b8 <strncmp>:
 80117b8:	b510      	push	{r4, lr}
 80117ba:	b16a      	cbz	r2, 80117d8 <strncmp+0x20>
 80117bc:	3901      	subs	r1, #1
 80117be:	1884      	adds	r4, r0, r2
 80117c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80117c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80117c8:	4293      	cmp	r3, r2
 80117ca:	d103      	bne.n	80117d4 <strncmp+0x1c>
 80117cc:	42a0      	cmp	r0, r4
 80117ce:	d001      	beq.n	80117d4 <strncmp+0x1c>
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d1f5      	bne.n	80117c0 <strncmp+0x8>
 80117d4:	1a98      	subs	r0, r3, r2
 80117d6:	bd10      	pop	{r4, pc}
 80117d8:	4610      	mov	r0, r2
 80117da:	e7fc      	b.n	80117d6 <strncmp+0x1e>

080117dc <__malloc_lock>:
 80117dc:	4770      	bx	lr

080117de <__malloc_unlock>:
 80117de:	4770      	bx	lr

080117e0 <__ssputs_r>:
 80117e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117e4:	688e      	ldr	r6, [r1, #8]
 80117e6:	429e      	cmp	r6, r3
 80117e8:	4682      	mov	sl, r0
 80117ea:	460c      	mov	r4, r1
 80117ec:	4690      	mov	r8, r2
 80117ee:	4699      	mov	r9, r3
 80117f0:	d837      	bhi.n	8011862 <__ssputs_r+0x82>
 80117f2:	898a      	ldrh	r2, [r1, #12]
 80117f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80117f8:	d031      	beq.n	801185e <__ssputs_r+0x7e>
 80117fa:	6825      	ldr	r5, [r4, #0]
 80117fc:	6909      	ldr	r1, [r1, #16]
 80117fe:	1a6f      	subs	r7, r5, r1
 8011800:	6965      	ldr	r5, [r4, #20]
 8011802:	2302      	movs	r3, #2
 8011804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011808:	fb95 f5f3 	sdiv	r5, r5, r3
 801180c:	f109 0301 	add.w	r3, r9, #1
 8011810:	443b      	add	r3, r7
 8011812:	429d      	cmp	r5, r3
 8011814:	bf38      	it	cc
 8011816:	461d      	movcc	r5, r3
 8011818:	0553      	lsls	r3, r2, #21
 801181a:	d530      	bpl.n	801187e <__ssputs_r+0x9e>
 801181c:	4629      	mov	r1, r5
 801181e:	f7ff ff39 	bl	8011694 <_malloc_r>
 8011822:	4606      	mov	r6, r0
 8011824:	b950      	cbnz	r0, 801183c <__ssputs_r+0x5c>
 8011826:	230c      	movs	r3, #12
 8011828:	f8ca 3000 	str.w	r3, [sl]
 801182c:	89a3      	ldrh	r3, [r4, #12]
 801182e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011832:	81a3      	strh	r3, [r4, #12]
 8011834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183c:	463a      	mov	r2, r7
 801183e:	6921      	ldr	r1, [r4, #16]
 8011840:	f7ff fec6 	bl	80115d0 <memcpy>
 8011844:	89a3      	ldrh	r3, [r4, #12]
 8011846:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801184a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801184e:	81a3      	strh	r3, [r4, #12]
 8011850:	6126      	str	r6, [r4, #16]
 8011852:	6165      	str	r5, [r4, #20]
 8011854:	443e      	add	r6, r7
 8011856:	1bed      	subs	r5, r5, r7
 8011858:	6026      	str	r6, [r4, #0]
 801185a:	60a5      	str	r5, [r4, #8]
 801185c:	464e      	mov	r6, r9
 801185e:	454e      	cmp	r6, r9
 8011860:	d900      	bls.n	8011864 <__ssputs_r+0x84>
 8011862:	464e      	mov	r6, r9
 8011864:	4632      	mov	r2, r6
 8011866:	4641      	mov	r1, r8
 8011868:	6820      	ldr	r0, [r4, #0]
 801186a:	f000 fa93 	bl	8011d94 <memmove>
 801186e:	68a3      	ldr	r3, [r4, #8]
 8011870:	1b9b      	subs	r3, r3, r6
 8011872:	60a3      	str	r3, [r4, #8]
 8011874:	6823      	ldr	r3, [r4, #0]
 8011876:	441e      	add	r6, r3
 8011878:	6026      	str	r6, [r4, #0]
 801187a:	2000      	movs	r0, #0
 801187c:	e7dc      	b.n	8011838 <__ssputs_r+0x58>
 801187e:	462a      	mov	r2, r5
 8011880:	f000 faa1 	bl	8011dc6 <_realloc_r>
 8011884:	4606      	mov	r6, r0
 8011886:	2800      	cmp	r0, #0
 8011888:	d1e2      	bne.n	8011850 <__ssputs_r+0x70>
 801188a:	6921      	ldr	r1, [r4, #16]
 801188c:	4650      	mov	r0, sl
 801188e:	f7ff feb3 	bl	80115f8 <_free_r>
 8011892:	e7c8      	b.n	8011826 <__ssputs_r+0x46>

08011894 <_svfiprintf_r>:
 8011894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011898:	461d      	mov	r5, r3
 801189a:	898b      	ldrh	r3, [r1, #12]
 801189c:	061f      	lsls	r7, r3, #24
 801189e:	b09d      	sub	sp, #116	; 0x74
 80118a0:	4680      	mov	r8, r0
 80118a2:	460c      	mov	r4, r1
 80118a4:	4616      	mov	r6, r2
 80118a6:	d50f      	bpl.n	80118c8 <_svfiprintf_r+0x34>
 80118a8:	690b      	ldr	r3, [r1, #16]
 80118aa:	b96b      	cbnz	r3, 80118c8 <_svfiprintf_r+0x34>
 80118ac:	2140      	movs	r1, #64	; 0x40
 80118ae:	f7ff fef1 	bl	8011694 <_malloc_r>
 80118b2:	6020      	str	r0, [r4, #0]
 80118b4:	6120      	str	r0, [r4, #16]
 80118b6:	b928      	cbnz	r0, 80118c4 <_svfiprintf_r+0x30>
 80118b8:	230c      	movs	r3, #12
 80118ba:	f8c8 3000 	str.w	r3, [r8]
 80118be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118c2:	e0c8      	b.n	8011a56 <_svfiprintf_r+0x1c2>
 80118c4:	2340      	movs	r3, #64	; 0x40
 80118c6:	6163      	str	r3, [r4, #20]
 80118c8:	2300      	movs	r3, #0
 80118ca:	9309      	str	r3, [sp, #36]	; 0x24
 80118cc:	2320      	movs	r3, #32
 80118ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118d2:	2330      	movs	r3, #48	; 0x30
 80118d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118d8:	9503      	str	r5, [sp, #12]
 80118da:	f04f 0b01 	mov.w	fp, #1
 80118de:	4637      	mov	r7, r6
 80118e0:	463d      	mov	r5, r7
 80118e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80118e6:	b10b      	cbz	r3, 80118ec <_svfiprintf_r+0x58>
 80118e8:	2b25      	cmp	r3, #37	; 0x25
 80118ea:	d13e      	bne.n	801196a <_svfiprintf_r+0xd6>
 80118ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80118f0:	d00b      	beq.n	801190a <_svfiprintf_r+0x76>
 80118f2:	4653      	mov	r3, sl
 80118f4:	4632      	mov	r2, r6
 80118f6:	4621      	mov	r1, r4
 80118f8:	4640      	mov	r0, r8
 80118fa:	f7ff ff71 	bl	80117e0 <__ssputs_r>
 80118fe:	3001      	adds	r0, #1
 8011900:	f000 80a4 	beq.w	8011a4c <_svfiprintf_r+0x1b8>
 8011904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011906:	4453      	add	r3, sl
 8011908:	9309      	str	r3, [sp, #36]	; 0x24
 801190a:	783b      	ldrb	r3, [r7, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	f000 809d 	beq.w	8011a4c <_svfiprintf_r+0x1b8>
 8011912:	2300      	movs	r3, #0
 8011914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801191c:	9304      	str	r3, [sp, #16]
 801191e:	9307      	str	r3, [sp, #28]
 8011920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011924:	931a      	str	r3, [sp, #104]	; 0x68
 8011926:	462f      	mov	r7, r5
 8011928:	2205      	movs	r2, #5
 801192a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801192e:	4850      	ldr	r0, [pc, #320]	; (8011a70 <_svfiprintf_r+0x1dc>)
 8011930:	f7ee fc86 	bl	8000240 <memchr>
 8011934:	9b04      	ldr	r3, [sp, #16]
 8011936:	b9d0      	cbnz	r0, 801196e <_svfiprintf_r+0xda>
 8011938:	06d9      	lsls	r1, r3, #27
 801193a:	bf44      	itt	mi
 801193c:	2220      	movmi	r2, #32
 801193e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011942:	071a      	lsls	r2, r3, #28
 8011944:	bf44      	itt	mi
 8011946:	222b      	movmi	r2, #43	; 0x2b
 8011948:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801194c:	782a      	ldrb	r2, [r5, #0]
 801194e:	2a2a      	cmp	r2, #42	; 0x2a
 8011950:	d015      	beq.n	801197e <_svfiprintf_r+0xea>
 8011952:	9a07      	ldr	r2, [sp, #28]
 8011954:	462f      	mov	r7, r5
 8011956:	2000      	movs	r0, #0
 8011958:	250a      	movs	r5, #10
 801195a:	4639      	mov	r1, r7
 801195c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011960:	3b30      	subs	r3, #48	; 0x30
 8011962:	2b09      	cmp	r3, #9
 8011964:	d94d      	bls.n	8011a02 <_svfiprintf_r+0x16e>
 8011966:	b1b8      	cbz	r0, 8011998 <_svfiprintf_r+0x104>
 8011968:	e00f      	b.n	801198a <_svfiprintf_r+0xf6>
 801196a:	462f      	mov	r7, r5
 801196c:	e7b8      	b.n	80118e0 <_svfiprintf_r+0x4c>
 801196e:	4a40      	ldr	r2, [pc, #256]	; (8011a70 <_svfiprintf_r+0x1dc>)
 8011970:	1a80      	subs	r0, r0, r2
 8011972:	fa0b f000 	lsl.w	r0, fp, r0
 8011976:	4318      	orrs	r0, r3
 8011978:	9004      	str	r0, [sp, #16]
 801197a:	463d      	mov	r5, r7
 801197c:	e7d3      	b.n	8011926 <_svfiprintf_r+0x92>
 801197e:	9a03      	ldr	r2, [sp, #12]
 8011980:	1d11      	adds	r1, r2, #4
 8011982:	6812      	ldr	r2, [r2, #0]
 8011984:	9103      	str	r1, [sp, #12]
 8011986:	2a00      	cmp	r2, #0
 8011988:	db01      	blt.n	801198e <_svfiprintf_r+0xfa>
 801198a:	9207      	str	r2, [sp, #28]
 801198c:	e004      	b.n	8011998 <_svfiprintf_r+0x104>
 801198e:	4252      	negs	r2, r2
 8011990:	f043 0302 	orr.w	r3, r3, #2
 8011994:	9207      	str	r2, [sp, #28]
 8011996:	9304      	str	r3, [sp, #16]
 8011998:	783b      	ldrb	r3, [r7, #0]
 801199a:	2b2e      	cmp	r3, #46	; 0x2e
 801199c:	d10c      	bne.n	80119b8 <_svfiprintf_r+0x124>
 801199e:	787b      	ldrb	r3, [r7, #1]
 80119a0:	2b2a      	cmp	r3, #42	; 0x2a
 80119a2:	d133      	bne.n	8011a0c <_svfiprintf_r+0x178>
 80119a4:	9b03      	ldr	r3, [sp, #12]
 80119a6:	1d1a      	adds	r2, r3, #4
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	9203      	str	r2, [sp, #12]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	bfb8      	it	lt
 80119b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80119b4:	3702      	adds	r7, #2
 80119b6:	9305      	str	r3, [sp, #20]
 80119b8:	4d2e      	ldr	r5, [pc, #184]	; (8011a74 <_svfiprintf_r+0x1e0>)
 80119ba:	7839      	ldrb	r1, [r7, #0]
 80119bc:	2203      	movs	r2, #3
 80119be:	4628      	mov	r0, r5
 80119c0:	f7ee fc3e 	bl	8000240 <memchr>
 80119c4:	b138      	cbz	r0, 80119d6 <_svfiprintf_r+0x142>
 80119c6:	2340      	movs	r3, #64	; 0x40
 80119c8:	1b40      	subs	r0, r0, r5
 80119ca:	fa03 f000 	lsl.w	r0, r3, r0
 80119ce:	9b04      	ldr	r3, [sp, #16]
 80119d0:	4303      	orrs	r3, r0
 80119d2:	3701      	adds	r7, #1
 80119d4:	9304      	str	r3, [sp, #16]
 80119d6:	7839      	ldrb	r1, [r7, #0]
 80119d8:	4827      	ldr	r0, [pc, #156]	; (8011a78 <_svfiprintf_r+0x1e4>)
 80119da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119de:	2206      	movs	r2, #6
 80119e0:	1c7e      	adds	r6, r7, #1
 80119e2:	f7ee fc2d 	bl	8000240 <memchr>
 80119e6:	2800      	cmp	r0, #0
 80119e8:	d038      	beq.n	8011a5c <_svfiprintf_r+0x1c8>
 80119ea:	4b24      	ldr	r3, [pc, #144]	; (8011a7c <_svfiprintf_r+0x1e8>)
 80119ec:	bb13      	cbnz	r3, 8011a34 <_svfiprintf_r+0x1a0>
 80119ee:	9b03      	ldr	r3, [sp, #12]
 80119f0:	3307      	adds	r3, #7
 80119f2:	f023 0307 	bic.w	r3, r3, #7
 80119f6:	3308      	adds	r3, #8
 80119f8:	9303      	str	r3, [sp, #12]
 80119fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119fc:	444b      	add	r3, r9
 80119fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011a00:	e76d      	b.n	80118de <_svfiprintf_r+0x4a>
 8011a02:	fb05 3202 	mla	r2, r5, r2, r3
 8011a06:	2001      	movs	r0, #1
 8011a08:	460f      	mov	r7, r1
 8011a0a:	e7a6      	b.n	801195a <_svfiprintf_r+0xc6>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	3701      	adds	r7, #1
 8011a10:	9305      	str	r3, [sp, #20]
 8011a12:	4619      	mov	r1, r3
 8011a14:	250a      	movs	r5, #10
 8011a16:	4638      	mov	r0, r7
 8011a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a1c:	3a30      	subs	r2, #48	; 0x30
 8011a1e:	2a09      	cmp	r2, #9
 8011a20:	d903      	bls.n	8011a2a <_svfiprintf_r+0x196>
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d0c8      	beq.n	80119b8 <_svfiprintf_r+0x124>
 8011a26:	9105      	str	r1, [sp, #20]
 8011a28:	e7c6      	b.n	80119b8 <_svfiprintf_r+0x124>
 8011a2a:	fb05 2101 	mla	r1, r5, r1, r2
 8011a2e:	2301      	movs	r3, #1
 8011a30:	4607      	mov	r7, r0
 8011a32:	e7f0      	b.n	8011a16 <_svfiprintf_r+0x182>
 8011a34:	ab03      	add	r3, sp, #12
 8011a36:	9300      	str	r3, [sp, #0]
 8011a38:	4622      	mov	r2, r4
 8011a3a:	4b11      	ldr	r3, [pc, #68]	; (8011a80 <_svfiprintf_r+0x1ec>)
 8011a3c:	a904      	add	r1, sp, #16
 8011a3e:	4640      	mov	r0, r8
 8011a40:	f3af 8000 	nop.w
 8011a44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011a48:	4681      	mov	r9, r0
 8011a4a:	d1d6      	bne.n	80119fa <_svfiprintf_r+0x166>
 8011a4c:	89a3      	ldrh	r3, [r4, #12]
 8011a4e:	065b      	lsls	r3, r3, #25
 8011a50:	f53f af35 	bmi.w	80118be <_svfiprintf_r+0x2a>
 8011a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a56:	b01d      	add	sp, #116	; 0x74
 8011a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a5c:	ab03      	add	r3, sp, #12
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	4622      	mov	r2, r4
 8011a62:	4b07      	ldr	r3, [pc, #28]	; (8011a80 <_svfiprintf_r+0x1ec>)
 8011a64:	a904      	add	r1, sp, #16
 8011a66:	4640      	mov	r0, r8
 8011a68:	f000 f882 	bl	8011b70 <_printf_i>
 8011a6c:	e7ea      	b.n	8011a44 <_svfiprintf_r+0x1b0>
 8011a6e:	bf00      	nop
 8011a70:	080127b0 	.word	0x080127b0
 8011a74:	080127b6 	.word	0x080127b6
 8011a78:	080127ba 	.word	0x080127ba
 8011a7c:	00000000 	.word	0x00000000
 8011a80:	080117e1 	.word	0x080117e1

08011a84 <_printf_common>:
 8011a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a88:	4691      	mov	r9, r2
 8011a8a:	461f      	mov	r7, r3
 8011a8c:	688a      	ldr	r2, [r1, #8]
 8011a8e:	690b      	ldr	r3, [r1, #16]
 8011a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a94:	4293      	cmp	r3, r2
 8011a96:	bfb8      	it	lt
 8011a98:	4613      	movlt	r3, r2
 8011a9a:	f8c9 3000 	str.w	r3, [r9]
 8011a9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011aa2:	4606      	mov	r6, r0
 8011aa4:	460c      	mov	r4, r1
 8011aa6:	b112      	cbz	r2, 8011aae <_printf_common+0x2a>
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	f8c9 3000 	str.w	r3, [r9]
 8011aae:	6823      	ldr	r3, [r4, #0]
 8011ab0:	0699      	lsls	r1, r3, #26
 8011ab2:	bf42      	ittt	mi
 8011ab4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011ab8:	3302      	addmi	r3, #2
 8011aba:	f8c9 3000 	strmi.w	r3, [r9]
 8011abe:	6825      	ldr	r5, [r4, #0]
 8011ac0:	f015 0506 	ands.w	r5, r5, #6
 8011ac4:	d107      	bne.n	8011ad6 <_printf_common+0x52>
 8011ac6:	f104 0a19 	add.w	sl, r4, #25
 8011aca:	68e3      	ldr	r3, [r4, #12]
 8011acc:	f8d9 2000 	ldr.w	r2, [r9]
 8011ad0:	1a9b      	subs	r3, r3, r2
 8011ad2:	42ab      	cmp	r3, r5
 8011ad4:	dc28      	bgt.n	8011b28 <_printf_common+0xa4>
 8011ad6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011ada:	6822      	ldr	r2, [r4, #0]
 8011adc:	3300      	adds	r3, #0
 8011ade:	bf18      	it	ne
 8011ae0:	2301      	movne	r3, #1
 8011ae2:	0692      	lsls	r2, r2, #26
 8011ae4:	d42d      	bmi.n	8011b42 <_printf_common+0xbe>
 8011ae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011aea:	4639      	mov	r1, r7
 8011aec:	4630      	mov	r0, r6
 8011aee:	47c0      	blx	r8
 8011af0:	3001      	adds	r0, #1
 8011af2:	d020      	beq.n	8011b36 <_printf_common+0xb2>
 8011af4:	6823      	ldr	r3, [r4, #0]
 8011af6:	68e5      	ldr	r5, [r4, #12]
 8011af8:	f8d9 2000 	ldr.w	r2, [r9]
 8011afc:	f003 0306 	and.w	r3, r3, #6
 8011b00:	2b04      	cmp	r3, #4
 8011b02:	bf08      	it	eq
 8011b04:	1aad      	subeq	r5, r5, r2
 8011b06:	68a3      	ldr	r3, [r4, #8]
 8011b08:	6922      	ldr	r2, [r4, #16]
 8011b0a:	bf0c      	ite	eq
 8011b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b10:	2500      	movne	r5, #0
 8011b12:	4293      	cmp	r3, r2
 8011b14:	bfc4      	itt	gt
 8011b16:	1a9b      	subgt	r3, r3, r2
 8011b18:	18ed      	addgt	r5, r5, r3
 8011b1a:	f04f 0900 	mov.w	r9, #0
 8011b1e:	341a      	adds	r4, #26
 8011b20:	454d      	cmp	r5, r9
 8011b22:	d11a      	bne.n	8011b5a <_printf_common+0xd6>
 8011b24:	2000      	movs	r0, #0
 8011b26:	e008      	b.n	8011b3a <_printf_common+0xb6>
 8011b28:	2301      	movs	r3, #1
 8011b2a:	4652      	mov	r2, sl
 8011b2c:	4639      	mov	r1, r7
 8011b2e:	4630      	mov	r0, r6
 8011b30:	47c0      	blx	r8
 8011b32:	3001      	adds	r0, #1
 8011b34:	d103      	bne.n	8011b3e <_printf_common+0xba>
 8011b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b3e:	3501      	adds	r5, #1
 8011b40:	e7c3      	b.n	8011aca <_printf_common+0x46>
 8011b42:	18e1      	adds	r1, r4, r3
 8011b44:	1c5a      	adds	r2, r3, #1
 8011b46:	2030      	movs	r0, #48	; 0x30
 8011b48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b4c:	4422      	add	r2, r4
 8011b4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b56:	3302      	adds	r3, #2
 8011b58:	e7c5      	b.n	8011ae6 <_printf_common+0x62>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	4622      	mov	r2, r4
 8011b5e:	4639      	mov	r1, r7
 8011b60:	4630      	mov	r0, r6
 8011b62:	47c0      	blx	r8
 8011b64:	3001      	adds	r0, #1
 8011b66:	d0e6      	beq.n	8011b36 <_printf_common+0xb2>
 8011b68:	f109 0901 	add.w	r9, r9, #1
 8011b6c:	e7d8      	b.n	8011b20 <_printf_common+0x9c>
	...

08011b70 <_printf_i>:
 8011b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011b78:	460c      	mov	r4, r1
 8011b7a:	7e09      	ldrb	r1, [r1, #24]
 8011b7c:	b085      	sub	sp, #20
 8011b7e:	296e      	cmp	r1, #110	; 0x6e
 8011b80:	4617      	mov	r7, r2
 8011b82:	4606      	mov	r6, r0
 8011b84:	4698      	mov	r8, r3
 8011b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b88:	f000 80b3 	beq.w	8011cf2 <_printf_i+0x182>
 8011b8c:	d822      	bhi.n	8011bd4 <_printf_i+0x64>
 8011b8e:	2963      	cmp	r1, #99	; 0x63
 8011b90:	d036      	beq.n	8011c00 <_printf_i+0x90>
 8011b92:	d80a      	bhi.n	8011baa <_printf_i+0x3a>
 8011b94:	2900      	cmp	r1, #0
 8011b96:	f000 80b9 	beq.w	8011d0c <_printf_i+0x19c>
 8011b9a:	2958      	cmp	r1, #88	; 0x58
 8011b9c:	f000 8083 	beq.w	8011ca6 <_printf_i+0x136>
 8011ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ba4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011ba8:	e032      	b.n	8011c10 <_printf_i+0xa0>
 8011baa:	2964      	cmp	r1, #100	; 0x64
 8011bac:	d001      	beq.n	8011bb2 <_printf_i+0x42>
 8011bae:	2969      	cmp	r1, #105	; 0x69
 8011bb0:	d1f6      	bne.n	8011ba0 <_printf_i+0x30>
 8011bb2:	6820      	ldr	r0, [r4, #0]
 8011bb4:	6813      	ldr	r3, [r2, #0]
 8011bb6:	0605      	lsls	r5, r0, #24
 8011bb8:	f103 0104 	add.w	r1, r3, #4
 8011bbc:	d52a      	bpl.n	8011c14 <_printf_i+0xa4>
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	6011      	str	r1, [r2, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	da03      	bge.n	8011bce <_printf_i+0x5e>
 8011bc6:	222d      	movs	r2, #45	; 0x2d
 8011bc8:	425b      	negs	r3, r3
 8011bca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011bce:	486f      	ldr	r0, [pc, #444]	; (8011d8c <_printf_i+0x21c>)
 8011bd0:	220a      	movs	r2, #10
 8011bd2:	e039      	b.n	8011c48 <_printf_i+0xd8>
 8011bd4:	2973      	cmp	r1, #115	; 0x73
 8011bd6:	f000 809d 	beq.w	8011d14 <_printf_i+0x1a4>
 8011bda:	d808      	bhi.n	8011bee <_printf_i+0x7e>
 8011bdc:	296f      	cmp	r1, #111	; 0x6f
 8011bde:	d020      	beq.n	8011c22 <_printf_i+0xb2>
 8011be0:	2970      	cmp	r1, #112	; 0x70
 8011be2:	d1dd      	bne.n	8011ba0 <_printf_i+0x30>
 8011be4:	6823      	ldr	r3, [r4, #0]
 8011be6:	f043 0320 	orr.w	r3, r3, #32
 8011bea:	6023      	str	r3, [r4, #0]
 8011bec:	e003      	b.n	8011bf6 <_printf_i+0x86>
 8011bee:	2975      	cmp	r1, #117	; 0x75
 8011bf0:	d017      	beq.n	8011c22 <_printf_i+0xb2>
 8011bf2:	2978      	cmp	r1, #120	; 0x78
 8011bf4:	d1d4      	bne.n	8011ba0 <_printf_i+0x30>
 8011bf6:	2378      	movs	r3, #120	; 0x78
 8011bf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011bfc:	4864      	ldr	r0, [pc, #400]	; (8011d90 <_printf_i+0x220>)
 8011bfe:	e055      	b.n	8011cac <_printf_i+0x13c>
 8011c00:	6813      	ldr	r3, [r2, #0]
 8011c02:	1d19      	adds	r1, r3, #4
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	6011      	str	r1, [r2, #0]
 8011c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c10:	2301      	movs	r3, #1
 8011c12:	e08c      	b.n	8011d2e <_printf_i+0x1be>
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	6011      	str	r1, [r2, #0]
 8011c18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c1c:	bf18      	it	ne
 8011c1e:	b21b      	sxthne	r3, r3
 8011c20:	e7cf      	b.n	8011bc2 <_printf_i+0x52>
 8011c22:	6813      	ldr	r3, [r2, #0]
 8011c24:	6825      	ldr	r5, [r4, #0]
 8011c26:	1d18      	adds	r0, r3, #4
 8011c28:	6010      	str	r0, [r2, #0]
 8011c2a:	0628      	lsls	r0, r5, #24
 8011c2c:	d501      	bpl.n	8011c32 <_printf_i+0xc2>
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	e002      	b.n	8011c38 <_printf_i+0xc8>
 8011c32:	0668      	lsls	r0, r5, #25
 8011c34:	d5fb      	bpl.n	8011c2e <_printf_i+0xbe>
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	4854      	ldr	r0, [pc, #336]	; (8011d8c <_printf_i+0x21c>)
 8011c3a:	296f      	cmp	r1, #111	; 0x6f
 8011c3c:	bf14      	ite	ne
 8011c3e:	220a      	movne	r2, #10
 8011c40:	2208      	moveq	r2, #8
 8011c42:	2100      	movs	r1, #0
 8011c44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c48:	6865      	ldr	r5, [r4, #4]
 8011c4a:	60a5      	str	r5, [r4, #8]
 8011c4c:	2d00      	cmp	r5, #0
 8011c4e:	f2c0 8095 	blt.w	8011d7c <_printf_i+0x20c>
 8011c52:	6821      	ldr	r1, [r4, #0]
 8011c54:	f021 0104 	bic.w	r1, r1, #4
 8011c58:	6021      	str	r1, [r4, #0]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d13d      	bne.n	8011cda <_printf_i+0x16a>
 8011c5e:	2d00      	cmp	r5, #0
 8011c60:	f040 808e 	bne.w	8011d80 <_printf_i+0x210>
 8011c64:	4665      	mov	r5, ip
 8011c66:	2a08      	cmp	r2, #8
 8011c68:	d10b      	bne.n	8011c82 <_printf_i+0x112>
 8011c6a:	6823      	ldr	r3, [r4, #0]
 8011c6c:	07db      	lsls	r3, r3, #31
 8011c6e:	d508      	bpl.n	8011c82 <_printf_i+0x112>
 8011c70:	6923      	ldr	r3, [r4, #16]
 8011c72:	6862      	ldr	r2, [r4, #4]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	bfde      	ittt	le
 8011c78:	2330      	movle	r3, #48	; 0x30
 8011c7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c7e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011c82:	ebac 0305 	sub.w	r3, ip, r5
 8011c86:	6123      	str	r3, [r4, #16]
 8011c88:	f8cd 8000 	str.w	r8, [sp]
 8011c8c:	463b      	mov	r3, r7
 8011c8e:	aa03      	add	r2, sp, #12
 8011c90:	4621      	mov	r1, r4
 8011c92:	4630      	mov	r0, r6
 8011c94:	f7ff fef6 	bl	8011a84 <_printf_common>
 8011c98:	3001      	adds	r0, #1
 8011c9a:	d14d      	bne.n	8011d38 <_printf_i+0x1c8>
 8011c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ca0:	b005      	add	sp, #20
 8011ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ca6:	4839      	ldr	r0, [pc, #228]	; (8011d8c <_printf_i+0x21c>)
 8011ca8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011cac:	6813      	ldr	r3, [r2, #0]
 8011cae:	6821      	ldr	r1, [r4, #0]
 8011cb0:	1d1d      	adds	r5, r3, #4
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	6015      	str	r5, [r2, #0]
 8011cb6:	060a      	lsls	r2, r1, #24
 8011cb8:	d50b      	bpl.n	8011cd2 <_printf_i+0x162>
 8011cba:	07ca      	lsls	r2, r1, #31
 8011cbc:	bf44      	itt	mi
 8011cbe:	f041 0120 	orrmi.w	r1, r1, #32
 8011cc2:	6021      	strmi	r1, [r4, #0]
 8011cc4:	b91b      	cbnz	r3, 8011cce <_printf_i+0x15e>
 8011cc6:	6822      	ldr	r2, [r4, #0]
 8011cc8:	f022 0220 	bic.w	r2, r2, #32
 8011ccc:	6022      	str	r2, [r4, #0]
 8011cce:	2210      	movs	r2, #16
 8011cd0:	e7b7      	b.n	8011c42 <_printf_i+0xd2>
 8011cd2:	064d      	lsls	r5, r1, #25
 8011cd4:	bf48      	it	mi
 8011cd6:	b29b      	uxthmi	r3, r3
 8011cd8:	e7ef      	b.n	8011cba <_printf_i+0x14a>
 8011cda:	4665      	mov	r5, ip
 8011cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ce0:	fb02 3311 	mls	r3, r2, r1, r3
 8011ce4:	5cc3      	ldrb	r3, [r0, r3]
 8011ce6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011cea:	460b      	mov	r3, r1
 8011cec:	2900      	cmp	r1, #0
 8011cee:	d1f5      	bne.n	8011cdc <_printf_i+0x16c>
 8011cf0:	e7b9      	b.n	8011c66 <_printf_i+0xf6>
 8011cf2:	6813      	ldr	r3, [r2, #0]
 8011cf4:	6825      	ldr	r5, [r4, #0]
 8011cf6:	6961      	ldr	r1, [r4, #20]
 8011cf8:	1d18      	adds	r0, r3, #4
 8011cfa:	6010      	str	r0, [r2, #0]
 8011cfc:	0628      	lsls	r0, r5, #24
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	d501      	bpl.n	8011d06 <_printf_i+0x196>
 8011d02:	6019      	str	r1, [r3, #0]
 8011d04:	e002      	b.n	8011d0c <_printf_i+0x19c>
 8011d06:	066a      	lsls	r2, r5, #25
 8011d08:	d5fb      	bpl.n	8011d02 <_printf_i+0x192>
 8011d0a:	8019      	strh	r1, [r3, #0]
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	6123      	str	r3, [r4, #16]
 8011d10:	4665      	mov	r5, ip
 8011d12:	e7b9      	b.n	8011c88 <_printf_i+0x118>
 8011d14:	6813      	ldr	r3, [r2, #0]
 8011d16:	1d19      	adds	r1, r3, #4
 8011d18:	6011      	str	r1, [r2, #0]
 8011d1a:	681d      	ldr	r5, [r3, #0]
 8011d1c:	6862      	ldr	r2, [r4, #4]
 8011d1e:	2100      	movs	r1, #0
 8011d20:	4628      	mov	r0, r5
 8011d22:	f7ee fa8d 	bl	8000240 <memchr>
 8011d26:	b108      	cbz	r0, 8011d2c <_printf_i+0x1bc>
 8011d28:	1b40      	subs	r0, r0, r5
 8011d2a:	6060      	str	r0, [r4, #4]
 8011d2c:	6863      	ldr	r3, [r4, #4]
 8011d2e:	6123      	str	r3, [r4, #16]
 8011d30:	2300      	movs	r3, #0
 8011d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d36:	e7a7      	b.n	8011c88 <_printf_i+0x118>
 8011d38:	6923      	ldr	r3, [r4, #16]
 8011d3a:	462a      	mov	r2, r5
 8011d3c:	4639      	mov	r1, r7
 8011d3e:	4630      	mov	r0, r6
 8011d40:	47c0      	blx	r8
 8011d42:	3001      	adds	r0, #1
 8011d44:	d0aa      	beq.n	8011c9c <_printf_i+0x12c>
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	079b      	lsls	r3, r3, #30
 8011d4a:	d413      	bmi.n	8011d74 <_printf_i+0x204>
 8011d4c:	68e0      	ldr	r0, [r4, #12]
 8011d4e:	9b03      	ldr	r3, [sp, #12]
 8011d50:	4298      	cmp	r0, r3
 8011d52:	bfb8      	it	lt
 8011d54:	4618      	movlt	r0, r3
 8011d56:	e7a3      	b.n	8011ca0 <_printf_i+0x130>
 8011d58:	2301      	movs	r3, #1
 8011d5a:	464a      	mov	r2, r9
 8011d5c:	4639      	mov	r1, r7
 8011d5e:	4630      	mov	r0, r6
 8011d60:	47c0      	blx	r8
 8011d62:	3001      	adds	r0, #1
 8011d64:	d09a      	beq.n	8011c9c <_printf_i+0x12c>
 8011d66:	3501      	adds	r5, #1
 8011d68:	68e3      	ldr	r3, [r4, #12]
 8011d6a:	9a03      	ldr	r2, [sp, #12]
 8011d6c:	1a9b      	subs	r3, r3, r2
 8011d6e:	42ab      	cmp	r3, r5
 8011d70:	dcf2      	bgt.n	8011d58 <_printf_i+0x1e8>
 8011d72:	e7eb      	b.n	8011d4c <_printf_i+0x1dc>
 8011d74:	2500      	movs	r5, #0
 8011d76:	f104 0919 	add.w	r9, r4, #25
 8011d7a:	e7f5      	b.n	8011d68 <_printf_i+0x1f8>
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1ac      	bne.n	8011cda <_printf_i+0x16a>
 8011d80:	7803      	ldrb	r3, [r0, #0]
 8011d82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d8a:	e76c      	b.n	8011c66 <_printf_i+0xf6>
 8011d8c:	080127c1 	.word	0x080127c1
 8011d90:	080127d2 	.word	0x080127d2

08011d94 <memmove>:
 8011d94:	4288      	cmp	r0, r1
 8011d96:	b510      	push	{r4, lr}
 8011d98:	eb01 0302 	add.w	r3, r1, r2
 8011d9c:	d807      	bhi.n	8011dae <memmove+0x1a>
 8011d9e:	1e42      	subs	r2, r0, #1
 8011da0:	4299      	cmp	r1, r3
 8011da2:	d00a      	beq.n	8011dba <memmove+0x26>
 8011da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011da8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011dac:	e7f8      	b.n	8011da0 <memmove+0xc>
 8011dae:	4283      	cmp	r3, r0
 8011db0:	d9f5      	bls.n	8011d9e <memmove+0xa>
 8011db2:	1881      	adds	r1, r0, r2
 8011db4:	1ad2      	subs	r2, r2, r3
 8011db6:	42d3      	cmn	r3, r2
 8011db8:	d100      	bne.n	8011dbc <memmove+0x28>
 8011dba:	bd10      	pop	{r4, pc}
 8011dbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011dc0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011dc4:	e7f7      	b.n	8011db6 <memmove+0x22>

08011dc6 <_realloc_r>:
 8011dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc8:	4607      	mov	r7, r0
 8011dca:	4614      	mov	r4, r2
 8011dcc:	460e      	mov	r6, r1
 8011dce:	b921      	cbnz	r1, 8011dda <_realloc_r+0x14>
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011dd6:	f7ff bc5d 	b.w	8011694 <_malloc_r>
 8011dda:	b922      	cbnz	r2, 8011de6 <_realloc_r+0x20>
 8011ddc:	f7ff fc0c 	bl	80115f8 <_free_r>
 8011de0:	4625      	mov	r5, r4
 8011de2:	4628      	mov	r0, r5
 8011de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de6:	f000 f814 	bl	8011e12 <_malloc_usable_size_r>
 8011dea:	42a0      	cmp	r0, r4
 8011dec:	d20f      	bcs.n	8011e0e <_realloc_r+0x48>
 8011dee:	4621      	mov	r1, r4
 8011df0:	4638      	mov	r0, r7
 8011df2:	f7ff fc4f 	bl	8011694 <_malloc_r>
 8011df6:	4605      	mov	r5, r0
 8011df8:	2800      	cmp	r0, #0
 8011dfa:	d0f2      	beq.n	8011de2 <_realloc_r+0x1c>
 8011dfc:	4631      	mov	r1, r6
 8011dfe:	4622      	mov	r2, r4
 8011e00:	f7ff fbe6 	bl	80115d0 <memcpy>
 8011e04:	4631      	mov	r1, r6
 8011e06:	4638      	mov	r0, r7
 8011e08:	f7ff fbf6 	bl	80115f8 <_free_r>
 8011e0c:	e7e9      	b.n	8011de2 <_realloc_r+0x1c>
 8011e0e:	4635      	mov	r5, r6
 8011e10:	e7e7      	b.n	8011de2 <_realloc_r+0x1c>

08011e12 <_malloc_usable_size_r>:
 8011e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e16:	1f18      	subs	r0, r3, #4
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	bfbc      	itt	lt
 8011e1c:	580b      	ldrlt	r3, [r1, r0]
 8011e1e:	18c0      	addlt	r0, r0, r3
 8011e20:	4770      	bx	lr
	...

08011e24 <_init>:
 8011e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e26:	bf00      	nop
 8011e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e2a:	bc08      	pop	{r3}
 8011e2c:	469e      	mov	lr, r3
 8011e2e:	4770      	bx	lr

08011e30 <_fini>:
 8011e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e32:	bf00      	nop
 8011e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e36:	bc08      	pop	{r3}
 8011e38:	469e      	mov	lr, r3
 8011e3a:	4770      	bx	lr
