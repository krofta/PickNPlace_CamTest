
Feeder_Modul_F105R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08007c88  08007c88  00017c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd4  08007fd4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fdc  08007fdc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  20000094  08008078  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  08008078  000208c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f20b  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e8b  00000000  00000000  0003f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  00043158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  000445f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023145  00000000  00000000  00045908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000139f0  00000000  00000000  00068a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bcbd8  00000000  00000000  0007c43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139015  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c8  00000000  00000000  00139090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000094 	.word	0x20000094
 8000200:	00000000 	.word	0x00000000
 8000204:	08007c70 	.word	0x08007c70

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000098 	.word	0x20000098
 8000220:	08007c70 	.word	0x08007c70

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000234:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <USBH_HID_EventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_KEYBOARD){
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f005 fb03 	bl	8005b3c <USBH_HID_GetDeviceType>
 8000536:	4603      	mov	r3, r0
 8000538:	2b02      	cmp	r3, #2
 800053a:	d12a      	bne.n	8000592 <USBH_HID_EventCallback+0x6a>
		HID_KEYBD_Info_TypeDef *keyboard_info;
		keyboard_info = USBH_HID_GetKeybdInfo(phost);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f005 fc35 	bl	8005dac <USBH_HID_GetKeybdInfo>
 8000542:	60f8      	str	r0, [r7, #12]
		char key = USBH_HID_GetASCIICode(keyboard_info);
 8000544:	68f8      	ldr	r0, [r7, #12]
 8000546:	f005 fcd5 	bl	8005ef4 <USBH_HID_GetASCIICode>
 800054a:	4603      	mov	r3, r0
 800054c:	72fb      	strb	r3, [r7, #11]
		if(key == '\0')
 800054e:	7afb      	ldrb	r3, [r7, #11]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d01d      	beq.n	8000590 <USBH_HID_EventCallback+0x68>
			return;
		if(key == '\r' || key == '\n'){
 8000554:	7afb      	ldrb	r3, [r7, #11]
 8000556:	2b0d      	cmp	r3, #13
 8000558:	d002      	beq.n	8000560 <USBH_HID_EventCallback+0x38>
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	2b0a      	cmp	r3, #10
 800055e:	d107      	bne.n	8000570 <USBH_HID_EventCallback+0x48>
			*act_char = '\0';
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <USBH_HID_EventCallback+0x70>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
			act_char = &barcode[0];
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <USBH_HID_EventCallback+0x70>)
 800056a:	4a0c      	ldr	r2, [pc, #48]	; (800059c <USBH_HID_EventCallback+0x74>)
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	e006      	b.n	800057e <USBH_HID_EventCallback+0x56>

		}
		else{
			*act_char++ = key;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <USBH_HID_EventCallback+0x70>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	1c5a      	adds	r2, r3, #1
 8000576:	4908      	ldr	r1, [pc, #32]	; (8000598 <USBH_HID_EventCallback+0x70>)
 8000578:	600a      	str	r2, [r1, #0]
 800057a:	7afa      	ldrb	r2, [r7, #11]
 800057c:	701a      	strb	r2, [r3, #0]
		}

		if(act_char > &barcode[99])
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <USBH_HID_EventCallback+0x70>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <USBH_HID_EventCallback+0x78>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d904      	bls.n	8000592 <USBH_HID_EventCallback+0x6a>
			act_char = &barcode[0];
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <USBH_HID_EventCallback+0x70>)
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <USBH_HID_EventCallback+0x74>)
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	e000      	b.n	8000592 <USBH_HID_EventCallback+0x6a>
			return;
 8000590:	bf00      	nop

	}
}
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000000 	.word	0x20000000
 800059c:	20000118 	.word	0x20000118
 80005a0:	2000017b 	.word	0x2000017b

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t sprocket_started = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	71fb      	strb	r3, [r7, #7]
	uint8_t tape_started = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fc59 	bl	8000e68 <HAL_Init>
  //HAL_GPIO_WritePin(LED_Error_GPIO_Port, LED_Error_Pin, GPIO_PIN_SET);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f8ff 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fa1b 	bl	80009f4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005be:	f000 f965 	bl	800088c <MX_CAN1_Init>
  MX_USB_HOST_Init();
 80005c2:	f006 ffbd 	bl	8007540 <MX_USB_HOST_Init>
  MX_I2C1_Init();
 80005c6:	f000 f995 	bl	80008f4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80005ca:	f000 f9c1 	bl	8000950 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_Error_GPIO_Port, LED_Error_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	4874      	ldr	r0, [pc, #464]	; (80007a8 <main+0x204>)
 80005d6:	f001 f846 	bl	8001666 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e0:	4871      	ldr	r0, [pc, #452]	; (80007a8 <main+0x204>)
 80005e2:	f001 f840 	bl	8001666 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 80005e6:	4871      	ldr	r0, [pc, #452]	; (80007ac <main+0x208>)
 80005e8:	f003 fcf0 	bl	8003fcc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ec:	f006 ffce 	bl	800758c <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */

    //HAL_GPIO_WritePin(PWM_A), GPIO_Pin, PinState)

    // TEST SPROCKET
    if(HAL_GPIO_ReadPin(BTN_TBACK_GPIO_Port, BTN_TBACK_Pin) == GPIO_PIN_RESET && sprocket_started == 0){
 80005f0:	2104      	movs	r1, #4
 80005f2:	486f      	ldr	r0, [pc, #444]	; (80007b0 <main+0x20c>)
 80005f4:	f001 f820 	bl	8001638 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d113      	bne.n	8000626 <main+0x82>
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d110      	bne.n	8000626 <main+0x82>
    	HAL_Delay(150);
 8000604:	2096      	movs	r0, #150	; 0x96
 8000606:	f000 fc91 	bl	8000f2c <HAL_Delay>
    	if(HAL_GPIO_ReadPin(BTN_TBACK_GPIO_Port, BTN_TBACK_Pin) == GPIO_PIN_RESET){
 800060a:	2104      	movs	r1, #4
 800060c:	4868      	ldr	r0, [pc, #416]	; (80007b0 <main+0x20c>)
 800060e:	f001 f813 	bl	8001638 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d106      	bne.n	8000626 <main+0x82>
    		sprocket_started = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	71fb      	strb	r3, [r7, #7]
    		//HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
			HAL_GPIO_WritePin(DIR_A_GPIO_Port, DIR_A_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2120      	movs	r1, #32
 8000620:	4863      	ldr	r0, [pc, #396]	; (80007b0 <main+0x20c>)
 8000622:	f001 f820 	bl	8001666 <HAL_GPIO_WritePin>
    	}
    }
    if(HAL_GPIO_ReadPin(BTN_TBACK_GPIO_Port, BTN_TBACK_Pin) == GPIO_PIN_SET && sprocket_started == 1){
 8000626:	2104      	movs	r1, #4
 8000628:	4861      	ldr	r0, [pc, #388]	; (80007b0 <main+0x20c>)
 800062a:	f001 f805 	bl	8001638 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d113      	bne.n	800065c <main+0xb8>
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d110      	bne.n	800065c <main+0xb8>
    	HAL_Delay(150);
 800063a:	2096      	movs	r0, #150	; 0x96
 800063c:	f000 fc76 	bl	8000f2c <HAL_Delay>
    	if(HAL_GPIO_ReadPin(BTN_TBACK_GPIO_Port, BTN_TBACK_Pin) == GPIO_PIN_SET){
 8000640:	2104      	movs	r1, #4
 8000642:	485b      	ldr	r0, [pc, #364]	; (80007b0 <main+0x20c>)
 8000644:	f000 fff8 	bl	8001638 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d106      	bne.n	800065c <main+0xb8>
    		sprocket_started = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	71fb      	strb	r3, [r7, #7]
    		//HAL_TIMEx_PWMN_Stop(&htim3, TIM_CHANNEL_1);
			HAL_GPIO_WritePin(DIR_A_GPIO_Port, DIR_A_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	4856      	ldr	r0, [pc, #344]	; (80007b0 <main+0x20c>)
 8000658:	f001 f805 	bl	8001666 <HAL_GPIO_WritePin>
    	}
    }
    if(HAL_GPIO_ReadPin(BTN_TFOR_GPIO_Port, BTN_TFOR_Pin) == GPIO_PIN_RESET && sprocket_started == 0){
 800065c:	2102      	movs	r1, #2
 800065e:	4854      	ldr	r0, [pc, #336]	; (80007b0 <main+0x20c>)
 8000660:	f000 ffea 	bl	8001638 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d113      	bne.n	8000692 <main+0xee>
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d110      	bne.n	8000692 <main+0xee>
    	HAL_Delay(150);
 8000670:	2096      	movs	r0, #150	; 0x96
 8000672:	f000 fc5b 	bl	8000f2c <HAL_Delay>
    	if(HAL_GPIO_ReadPin(BTN_TFOR_GPIO_Port, BTN_TFOR_Pin) == GPIO_PIN_RESET){
 8000676:	2102      	movs	r1, #2
 8000678:	484d      	ldr	r0, [pc, #308]	; (80007b0 <main+0x20c>)
 800067a:	f000 ffdd 	bl	8001638 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d106      	bne.n	8000692 <main+0xee>
    		sprocket_started = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	71fb      	strb	r3, [r7, #7]
    		//HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
			//HAL_GPIO_WritePin(DIR_A_GPIO_Port, DIR_A_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DIR_A2_GPIO_Port, DIR_A2_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	4848      	ldr	r0, [pc, #288]	; (80007b0 <main+0x20c>)
 800068e:	f000 ffea 	bl	8001666 <HAL_GPIO_WritePin>
    	}
    }
    if(HAL_GPIO_ReadPin(BTN_TFOR_GPIO_Port, BTN_TFOR_Pin) == GPIO_PIN_SET && sprocket_started == 2){
 8000692:	2102      	movs	r1, #2
 8000694:	4846      	ldr	r0, [pc, #280]	; (80007b0 <main+0x20c>)
 8000696:	f000 ffcf 	bl	8001638 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d113      	bne.n	80006c8 <main+0x124>
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d110      	bne.n	80006c8 <main+0x124>
    	HAL_Delay(150);
 80006a6:	2096      	movs	r0, #150	; 0x96
 80006a8:	f000 fc40 	bl	8000f2c <HAL_Delay>
    	if(HAL_GPIO_ReadPin(BTN_TFOR_GPIO_Port, BTN_TFOR_Pin) == GPIO_PIN_SET){
 80006ac:	2102      	movs	r1, #2
 80006ae:	4840      	ldr	r0, [pc, #256]	; (80007b0 <main+0x20c>)
 80006b0:	f000 ffc2 	bl	8001638 <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d106      	bne.n	80006c8 <main+0x124>
    		sprocket_started = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	71fb      	strb	r3, [r7, #7]
    		//HAL_TIMEx_PWMN_Stop(&htim3, TIM_CHANNEL_1);
			//HAL_GPIO_WritePin(DIR_A_GPIO_Port, DIR_A_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DIR_A2_GPIO_Port, DIR_A2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	483b      	ldr	r0, [pc, #236]	; (80007b0 <main+0x20c>)
 80006c4:	f000 ffcf 	bl	8001666 <HAL_GPIO_WritePin>
    	}
    }


    // TAPE MOTOR TEST
    if(HAL_GPIO_ReadPin(BTN_SBACK_GPIO_Port, BTN_SBACK_Pin) == GPIO_PIN_RESET && tape_started == 0){
 80006c8:	2110      	movs	r1, #16
 80006ca:	483a      	ldr	r0, [pc, #232]	; (80007b4 <main+0x210>)
 80006cc:	f000 ffb4 	bl	8001638 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d113      	bne.n	80006fe <main+0x15a>
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d110      	bne.n	80006fe <main+0x15a>
    	HAL_Delay(150);
 80006dc:	2096      	movs	r0, #150	; 0x96
 80006de:	f000 fc25 	bl	8000f2c <HAL_Delay>
    	if(HAL_GPIO_ReadPin(BTN_SBACK_GPIO_Port, BTN_SBACK_Pin) == GPIO_PIN_RESET){
 80006e2:	2110      	movs	r1, #16
 80006e4:	4833      	ldr	r0, [pc, #204]	; (80007b4 <main+0x210>)
 80006e6:	f000 ffa7 	bl	8001638 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d106      	bne.n	80006fe <main+0x15a>
    		tape_started = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	71bb      	strb	r3, [r7, #6]
    		//HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
			HAL_GPIO_WritePin(DIR_B_GPIO_Port, DIR_B_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2110      	movs	r1, #16
 80006f8:	482b      	ldr	r0, [pc, #172]	; (80007a8 <main+0x204>)
 80006fa:	f000 ffb4 	bl	8001666 <HAL_GPIO_WritePin>
    	}
    }
    if(HAL_GPIO_ReadPin(BTN_SBACK_GPIO_Port, BTN_SBACK_Pin) == GPIO_PIN_SET && tape_started == 1){
 80006fe:	2110      	movs	r1, #16
 8000700:	482c      	ldr	r0, [pc, #176]	; (80007b4 <main+0x210>)
 8000702:	f000 ff99 	bl	8001638 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d113      	bne.n	8000734 <main+0x190>
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d110      	bne.n	8000734 <main+0x190>
    	HAL_Delay(150);
 8000712:	2096      	movs	r0, #150	; 0x96
 8000714:	f000 fc0a 	bl	8000f2c <HAL_Delay>
    	if(HAL_GPIO_ReadPin(BTN_SBACK_GPIO_Port, BTN_SBACK_Pin) == GPIO_PIN_SET){
 8000718:	2110      	movs	r1, #16
 800071a:	4826      	ldr	r0, [pc, #152]	; (80007b4 <main+0x210>)
 800071c:	f000 ff8c 	bl	8001638 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d106      	bne.n	8000734 <main+0x190>
    		tape_started = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	71bb      	strb	r3, [r7, #6]
    		//HAL_TIMEx_PWMN_Stop(&htim3, TIM_CHANNEL_1);
			HAL_GPIO_WritePin(DIR_B_GPIO_Port, DIR_B_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2110      	movs	r1, #16
 800072e:	481e      	ldr	r0, [pc, #120]	; (80007a8 <main+0x204>)
 8000730:	f000 ff99 	bl	8001666 <HAL_GPIO_WritePin>
    	}
    }
    if(HAL_GPIO_ReadPin(BTN_SFOR_GPIO_Port, BTN_SFOR_Pin) == GPIO_PIN_RESET && tape_started == 0){
 8000734:	2108      	movs	r1, #8
 8000736:	481f      	ldr	r0, [pc, #124]	; (80007b4 <main+0x210>)
 8000738:	f000 ff7e 	bl	8001638 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d113      	bne.n	800076a <main+0x1c6>
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d110      	bne.n	800076a <main+0x1c6>
    	HAL_Delay(150);
 8000748:	2096      	movs	r0, #150	; 0x96
 800074a:	f000 fbef 	bl	8000f2c <HAL_Delay>
    	if(HAL_GPIO_ReadPin(BTN_SFOR_GPIO_Port, BTN_SFOR_Pin) == GPIO_PIN_RESET){
 800074e:	2108      	movs	r1, #8
 8000750:	4818      	ldr	r0, [pc, #96]	; (80007b4 <main+0x210>)
 8000752:	f000 ff71 	bl	8001638 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d106      	bne.n	800076a <main+0x1c6>
    		tape_started = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	71bb      	strb	r3, [r7, #6]
    		//HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
			//HAL_GPIO_WritePin(DIR_A_GPIO_Port, DIR_A_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DIR_B2_GPIO_Port, DIR_B2_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	4812      	ldr	r0, [pc, #72]	; (80007b0 <main+0x20c>)
 8000766:	f000 ff7e 	bl	8001666 <HAL_GPIO_WritePin>
    	}
    }
    if(HAL_GPIO_ReadPin(BTN_SFOR_GPIO_Port, BTN_SFOR_Pin) == GPIO_PIN_SET && tape_started == 2){
 800076a:	2108      	movs	r1, #8
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <main+0x210>)
 800076e:	f000 ff63 	bl	8001638 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	f47f af39 	bne.w	80005ec <main+0x48>
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	2b02      	cmp	r3, #2
 800077e:	f47f af35 	bne.w	80005ec <main+0x48>
    	HAL_Delay(150);
 8000782:	2096      	movs	r0, #150	; 0x96
 8000784:	f000 fbd2 	bl	8000f2c <HAL_Delay>
    	if(HAL_GPIO_ReadPin(BTN_SFOR_GPIO_Port, BTN_SFOR_Pin) == GPIO_PIN_SET){
 8000788:	2108      	movs	r1, #8
 800078a:	480a      	ldr	r0, [pc, #40]	; (80007b4 <main+0x210>)
 800078c:	f000 ff54 	bl	8001638 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	f47f af2a 	bne.w	80005ec <main+0x48>
    		tape_started = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	71bb      	strb	r3, [r7, #6]
    		//HAL_TIMEx_PWMN_Stop(&htim3, TIM_CHANNEL_1);
			//HAL_GPIO_WritePin(DIR_A_GPIO_Port, DIR_A_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DIR_B2_GPIO_Port, DIR_B2_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <main+0x20c>)
 80007a2:	f000 ff60 	bl	8001666 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80007a6:	e721      	b.n	80005ec <main+0x48>
 80007a8:	40011000 	.word	0x40011000
 80007ac:	2000017c 	.word	0x2000017c
 80007b0:	40010800 	.word	0x40010800
 80007b4:	40010c00 	.word	0x40010c00

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	; 0x70
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c2:	2238      	movs	r2, #56	; 0x38
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f007 f992 	bl	8007af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2220      	movs	r2, #32
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 f984 	bl	8007af0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80007f2:	2304      	movs	r3, #4
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f6:	2301      	movs	r3, #1
 80007f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80007fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000800:	2302      	movs	r3, #2
 8000802:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000808:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800080a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800080e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL10;
 8000814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000818:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 800081a:	2310      	movs	r3, #16
 800081c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fd30 	bl	8003288 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800082e:	f000 f979 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f003 f830 	bl	80038b4 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800085a:	f000 f963 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800085e:	2310      	movs	r3, #16
 8000860:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV2;
 8000862:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000866:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fa2c 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000876:	f000 f955 	bl	8000b24 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800087a:	4b03      	ldr	r3, [pc, #12]	; (8000888 <SystemClock_Config+0xd0>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	3770      	adds	r7, #112	; 0x70
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	42420070 	.word	0x42420070

0800088c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_CAN1_Init+0x60>)
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <MX_CAN1_Init+0x64>)
 8000894:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_CAN1_Init+0x60>)
 8000898:	2210      	movs	r2, #16
 800089a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_CAN1_Init+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_CAN1_Init+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_CAN1_Init+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_CAN1_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MX_CAN1_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_CAN1_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_CAN1_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_CAN1_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_CAN1_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_CAN1_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_CAN1_Init+0x60>)
 80008da:	f000 fb49 	bl	8000f70 <HAL_CAN_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f91e 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200001c4 	.word	0x200001c4
 80008f0:	40006400 	.word	0x40006400

080008f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x50>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_I2C1_Init+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x50>)
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_I2C1_Init+0x58>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_I2C1_Init+0x50>)
 8000912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_I2C1_Init+0x50>)
 8000932:	f002 fb71 	bl	8003018 <HAL_I2C_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 f8f2 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000c4 	.word	0x200000c4
 8000948:	40005400 	.word	0x40005400
 800094c:	000186a0 	.word	0x000186a0

08000950 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_TIM1_Init+0x9c>)
 800096e:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <MX_TIM1_Init+0xa0>)
 8000970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_TIM1_Init+0x9c>)
 8000974:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000978:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_TIM1_Init+0x9c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_TIM1_Init+0x9c>)
 8000982:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000986:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM1_Init+0x9c>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_TIM1_Init+0x9c>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_TIM1_Init+0x9c>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800099a:	4814      	ldr	r0, [pc, #80]	; (80009ec <MX_TIM1_Init+0x9c>)
 800099c:	f003 fac6 	bl	8003f2c <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009a6:	f000 f8bd 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	4619      	mov	r1, r3
 80009b6:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_TIM1_Init+0x9c>)
 80009b8:	f003 fc6a 	bl	8004290 <HAL_TIM_ConfigClockSource>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009c2:	f000 f8af 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_TIM1_Init+0x9c>)
 80009d4:	f003 fe42 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80009de:	f000 f8a1 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000017c 	.word	0x2000017c
 80009f0:	40012c00 	.word	0x40012c00

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a08:	4b42      	ldr	r3, [pc, #264]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a41      	ldr	r2, [pc, #260]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a0e:	f043 0320 	orr.w	r3, r3, #32
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0320 	and.w	r3, r3, #32
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a3b      	ldr	r2, [pc, #236]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a38:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a35      	ldr	r2, [pc, #212]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <MX_GPIO_Init+0x120>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_A_Pin|DIR_A2_Pin|DIR_B2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8000a6e:	482a      	ldr	r0, [pc, #168]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a70:	f000 fdf9 	bl	8001666 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_B_Pin|MODE_Pin|LED_Error_Pin|LED_Status_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 8000a7a:	4828      	ldr	r0, [pc, #160]	; (8000b1c <MX_GPIO_Init+0x128>)
 8000a7c:	f000 fdf3 	bl	8001666 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_TFOR_Pin BTN_TBACK_Pin TAPE_MICROBTN_Pin */
  GPIO_InitStruct.Pin = BTN_TFOR_Pin|BTN_TBACK_Pin|TAPE_MICROBTN_Pin;
 8000a80:	f248 0306 	movw	r3, #32774	; 0x8006
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	4820      	ldr	r0, [pc, #128]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a96:	f000 fc75 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_A_Pin DIR_A2_Pin DIR_B2_Pin PA10 */
  GPIO_InitStruct.Pin = DIR_A_Pin|DIR_A2_Pin|DIR_B2_Pin|GPIO_PIN_10;
 8000a9a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4819      	ldr	r0, [pc, #100]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000ab4:	f000 fc66 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_B_Pin MODE_Pin LED_Error_Pin LED_Status_Pin */
  GPIO_InitStruct.Pin = DIR_B_Pin|MODE_Pin|LED_Error_Pin|LED_Status_Pin;
 8000ab8:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4812      	ldr	r0, [pc, #72]	; (8000b1c <MX_GPIO_Init+0x128>)
 8000ad2:	f000 fc57 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR7_Pin ADDR6_Pin ADDR5_Pin ADDR4_Pin
                           BTN_SFOR_Pin BTN_SBACK_Pin */
  GPIO_InitStruct.Pin = ADDR7_Pin|ADDR6_Pin|ADDR5_Pin|ADDR4_Pin
 8000ad6:	f24f 0318 	movw	r3, #61464	; 0xf018
 8000ada:	613b      	str	r3, [r7, #16]
                          |BTN_SFOR_Pin|BTN_SBACK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_GPIO_Init+0x12c>)
 8000aec:	f000 fc4a 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR3_Pin ADDR2_Pin ADDR1_Pin ADDR0_Pin */
  GPIO_InitStruct.Pin = ADDR3_Pin|ADDR2_Pin|ADDR1_Pin|ADDR0_Pin;
 8000af0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_GPIO_Init+0x128>)
 8000b06:	f000 fc3d 	bl	8001384 <HAL_GPIO_Init>

}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	40010c00 	.word	0x40010c00

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <Error_Handler+0x6>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_MspInit+0x60>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_MspInit+0x60>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000

08000b90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <HAL_CAN_MspInit+0xb0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d143      	bne.n	8000c38 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <HAL_CAN_MspInit+0xb4>)
 8000bb2:	69db      	ldr	r3, [r3, #28]
 8000bb4:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <HAL_CAN_MspInit+0xb4>)
 8000bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bba:	61d3      	str	r3, [r2, #28]
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_CAN_MspInit+0xb4>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <HAL_CAN_MspInit+0xb4>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <HAL_CAN_MspInit+0xb4>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_CAN_MspInit+0xb4>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4814      	ldr	r0, [pc, #80]	; (8000c48 <HAL_CAN_MspInit+0xb8>)
 8000bf6:	f000 fbc5 	bl	8001384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <HAL_CAN_MspInit+0xb8>)
 8000c10:	f000 fbb8 	bl	8001384 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_CAN_MspInit+0xbc>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
 8000c32:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_CAN_MspInit+0xbc>)
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40006400 	.word	0x40006400
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <HAL_I2C_MspInit+0x70>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d123      	bne.n	8000cb8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_I2C_MspInit+0x74>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <HAL_I2C_MspInit+0x74>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_I2C_MspInit+0x74>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c88:	23c0      	movs	r3, #192	; 0xc0
 8000c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <HAL_I2C_MspInit+0x78>)
 8000c9c:	f000 fb72 	bl	8001384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_I2C_MspInit+0x74>)
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_I2C_MspInit+0x74>)
 8000ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000caa:	61d3      	str	r3, [r2, #28]
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_I2C_MspInit+0x74>)
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010c00 	.word	0x40010c00

08000ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_TIM_Base_MspInit+0x44>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d113      	bne.n	8000d06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_TIM_Base_MspInit+0x48>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <HAL_TIM_Base_MspInit+0x48>)
 8000ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_TIM_Base_MspInit+0x48>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f000 fb0b 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d00:	2019      	movs	r0, #25
 8000d02:	f000 fb24 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40012c00 	.word	0x40012c00
 8000d14:	40021000 	.word	0x40021000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5e:	f000 f8c9 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <TIM1_UP_IRQHandler+0x24>)
 8000d6e:	f003 f987 	bl	8004080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  HAL_GPIO_TogglePin(LED_Error_GPIO_Port, LED_Error_Pin);
 8000d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <TIM1_UP_IRQHandler+0x28>)
 8000d78:	f000 fc8d 	bl	8001696 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED_Status_GPIO_Port, LED_Status_Pin);
 8000d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <TIM1_UP_IRQHandler+0x28>)
 8000d82:	f000 fc88 	bl	8001696 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000017c 	.word	0x2000017c
 8000d90:	40011000 	.word	0x40011000

08000d94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <OTG_FS_IRQHandler+0x10>)
 8000d9a:	f000 ff21 	bl	8001be0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200005f8 	.word	0x200005f8

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f006 fe74 	bl	8007ac4 <__errno>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	230c      	movs	r3, #12
 8000de0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20010000 	.word	0x20010000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	200000b0 	.word	0x200000b0
 8000e10:	200008c0 	.word	0x200008c0

08000e14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e22:	e003      	b.n	8000e2c <LoopCopyDataInit>

08000e24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8000e26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e2a:	3104      	adds	r1, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8000e30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e34:	d3f6      	bcc.n	8000e24 <CopyDataInit>
  ldr r2, =_sbss
 8000e36:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8000e38:	e002      	b.n	8000e40 <LoopFillZerobss>

08000e3a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e3c:	f842 3b04 	str.w	r3, [r2], #4

08000e40 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8000e42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e44:	d3f9      	bcc.n	8000e3a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e46:	f7ff ffe5 	bl	8000e14 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8000e4a:	f7ff fbab 	bl	80005a4 <main>
  bx lr
 8000e4e:	4770      	bx	lr
  ldr r3, =_sidata
 8000e50:	08007fe4 	.word	0x08007fe4
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e58:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8000e5c:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 8000e60:	200008c0 	.word	0x200008c0

08000e64 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x28>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x28>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fa41 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fe52 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa59 	bl	800136a <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed0:	f000 fa21 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	2000000c 	.word	0x2000000c
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x1c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x20>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_IncTick+0x20>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	200001ec 	.word	0x200001ec

08000f18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <HAL_GetTick+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	200001ec 	.word	0x200001ec

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff fff0 	bl	8000f18 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_Delay+0x40>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffe0 	bl	8000f18 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000000c 	.word	0x2000000c

08000f70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e0ed      	b.n	800115e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d102      	bne.n	8000f94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fdfe 	bl	8000b90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0202 	bic.w	r2, r2, #2
 8000fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fa4:	f7ff ffb8 	bl	8000f18 <HAL_GetTick>
 8000fa8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000faa:	e012      	b.n	8000fd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fac:	f7ff ffb4 	bl	8000f18 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b0a      	cmp	r3, #10
 8000fb8:	d90b      	bls.n	8000fd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2205      	movs	r2, #5
 8000fca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0c5      	b.n	800115e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e5      	bne.n	8000fac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ff0:	f7ff ff92 	bl	8000f18 <HAL_GetTick>
 8000ff4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ff6:	e012      	b.n	800101e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ff8:	f7ff ff8e 	bl	8000f18 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b0a      	cmp	r3, #10
 8001004:	d90b      	bls.n	800101e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2205      	movs	r2, #5
 8001016:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e09f      	b.n	800115e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0e5      	beq.n	8000ff8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7e1b      	ldrb	r3, [r3, #24]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d108      	bne.n	8001046 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e007      	b.n	8001056 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7e5b      	ldrb	r3, [r3, #25]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d108      	bne.n	8001070 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e007      	b.n	8001080 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800107e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7e9b      	ldrb	r3, [r3, #26]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d108      	bne.n	800109a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0220 	orr.w	r2, r2, #32
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e007      	b.n	80010aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0220 	bic.w	r2, r2, #32
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7edb      	ldrb	r3, [r3, #27]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d108      	bne.n	80010c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0210 	bic.w	r2, r2, #16
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	e007      	b.n	80010d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0210 	orr.w	r2, r2, #16
 80010d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7f1b      	ldrb	r3, [r3, #28]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d108      	bne.n	80010ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0208 	orr.w	r2, r2, #8
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e007      	b.n	80010fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0208 	bic.w	r2, r2, #8
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7f5b      	ldrb	r3, [r3, #29]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d108      	bne.n	8001118 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0204 	orr.w	r2, r2, #4
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e007      	b.n	8001128 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0204 	bic.w	r2, r2, #4
 8001126:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	ea42 0103 	orr.w	r1, r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	430a      	orrs	r2, r1
 800114c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4906      	ldr	r1, [pc, #24]	; (8001200 <__NVIC_EnableIRQ+0x34>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e0:	f7ff ff90 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff2d 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff42 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff90 	bl	8001258 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5f 	bl	8001204 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff35 	bl	80011cc <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b08b      	sub	sp, #44	; 0x2c
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001396:	e127      	b.n	80015e8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001398:	2201      	movs	r2, #1
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 8116 	bne.w	80015e2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d034      	beq.n	8001428 <HAL_GPIO_Init+0xa4>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d80d      	bhi.n	80013de <HAL_GPIO_Init+0x5a>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d02b      	beq.n	800141e <HAL_GPIO_Init+0x9a>
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d804      	bhi.n	80013d4 <HAL_GPIO_Init+0x50>
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d031      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d01c      	beq.n	800140c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013d2:	e048      	b.n	8001466 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d043      	beq.n	8001460 <HAL_GPIO_Init+0xdc>
 80013d8:	2b11      	cmp	r3, #17
 80013da:	d01b      	beq.n	8001414 <HAL_GPIO_Init+0x90>
          break;
 80013dc:	e043      	b.n	8001466 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013de:	4a89      	ldr	r2, [pc, #548]	; (8001604 <HAL_GPIO_Init+0x280>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d026      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 80013e4:	4a87      	ldr	r2, [pc, #540]	; (8001604 <HAL_GPIO_Init+0x280>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d806      	bhi.n	80013f8 <HAL_GPIO_Init+0x74>
 80013ea:	4a87      	ldr	r2, [pc, #540]	; (8001608 <HAL_GPIO_Init+0x284>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d020      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 80013f0:	4a86      	ldr	r2, [pc, #536]	; (800160c <HAL_GPIO_Init+0x288>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01d      	beq.n	8001432 <HAL_GPIO_Init+0xae>
          break;
 80013f6:	e036      	b.n	8001466 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013f8:	4a85      	ldr	r2, [pc, #532]	; (8001610 <HAL_GPIO_Init+0x28c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 80013fe:	4a85      	ldr	r2, [pc, #532]	; (8001614 <HAL_GPIO_Init+0x290>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d016      	beq.n	8001432 <HAL_GPIO_Init+0xae>
 8001404:	4a84      	ldr	r2, [pc, #528]	; (8001618 <HAL_GPIO_Init+0x294>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0xae>
          break;
 800140a:	e02c      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e028      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	3304      	adds	r3, #4
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e023      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	3308      	adds	r3, #8
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e01e      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	330c      	adds	r3, #12
 800142e:	623b      	str	r3, [r7, #32]
          break;
 8001430:	e019      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800143a:	2304      	movs	r3, #4
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e012      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001448:	2308      	movs	r3, #8
 800144a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	611a      	str	r2, [r3, #16]
          break;
 8001452:	e008      	b.n	8001466 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001454:	2308      	movs	r3, #8
 8001456:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	615a      	str	r2, [r3, #20]
          break;
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2bff      	cmp	r3, #255	; 0xff
 800146a:	d801      	bhi.n	8001470 <HAL_GPIO_Init+0xec>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	e001      	b.n	8001474 <HAL_GPIO_Init+0xf0>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3304      	adds	r3, #4
 8001474:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2bff      	cmp	r3, #255	; 0xff
 800147a:	d802      	bhi.n	8001482 <HAL_GPIO_Init+0xfe>
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	e002      	b.n	8001488 <HAL_GPIO_Init+0x104>
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	3b08      	subs	r3, #8
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	210f      	movs	r1, #15
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	401a      	ands	r2, r3
 800149a:	6a39      	ldr	r1, [r7, #32]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8096 	beq.w	80015e2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <HAL_GPIO_Init+0x298>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	4a58      	ldr	r2, [pc, #352]	; (800161c <HAL_GPIO_Init+0x298>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6193      	str	r3, [r2, #24]
 80014c2:	4b56      	ldr	r3, [pc, #344]	; (800161c <HAL_GPIO_Init+0x298>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014ce:	4a54      	ldr	r2, [pc, #336]	; (8001620 <HAL_GPIO_Init+0x29c>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4013      	ands	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <HAL_GPIO_Init+0x2a0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x19e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4a      	ldr	r2, [pc, #296]	; (8001628 <HAL_GPIO_Init+0x2a4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x19a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a49      	ldr	r2, [pc, #292]	; (800162c <HAL_GPIO_Init+0x2a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x196>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a48      	ldr	r2, [pc, #288]	; (8001630 <HAL_GPIO_Init+0x2ac>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x192>
 8001512:	2303      	movs	r3, #3
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x1a0>
 8001516:	2304      	movs	r3, #4
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x1a0>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x1a0>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x1a0>
 8001522:	2300      	movs	r3, #0
 8001524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001526:	f002 0203 	and.w	r2, r2, #3
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	4093      	lsls	r3, r2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001534:	493a      	ldr	r1, [pc, #232]	; (8001620 <HAL_GPIO_Init+0x29c>)
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d006      	beq.n	800155c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800154e:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4938      	ldr	r1, [pc, #224]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
 800155a:	e006      	b.n	800156a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800155c:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	43db      	mvns	r3, r3
 8001564:	4933      	ldr	r1, [pc, #204]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001566:	4013      	ands	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	492e      	ldr	r1, [pc, #184]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
 8001582:	e006      	b.n	8001592 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	43db      	mvns	r3, r3
 800158c:	4929      	ldr	r1, [pc, #164]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 800158e:	4013      	ands	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	4924      	ldr	r1, [pc, #144]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	491f      	ldr	r1, [pc, #124]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	491a      	ldr	r1, [pc, #104]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60cb      	str	r3, [r1, #12]
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	43db      	mvns	r3, r3
 80015dc:	4915      	ldr	r1, [pc, #84]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80015de:	4013      	ands	r3, r2
 80015e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	3301      	adds	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f47f aed0 	bne.w	8001398 <HAL_GPIO_Init+0x14>
  }
}
 80015f8:	bf00      	nop
 80015fa:	372c      	adds	r7, #44	; 0x2c
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	10210000 	.word	0x10210000
 8001608:	10110000 	.word	0x10110000
 800160c:	10120000 	.word	0x10120000
 8001610:	10310000 	.word	0x10310000
 8001614:	10320000 	.word	0x10320000
 8001618:	10220000 	.word	0x10220000
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	40010800 	.word	0x40010800
 8001628:	40010c00 	.word	0x40010c00
 800162c:	40011000 	.word	0x40011000
 8001630:	40011400 	.word	0x40011400
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	e001      	b.n	800165a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	807b      	strh	r3, [r7, #2]
 8001672:	4613      	mov	r3, r2
 8001674:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001676:	787b      	ldrb	r3, [r7, #1]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167c:	887a      	ldrh	r2, [r7, #2]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001682:	e003      	b.n	800168c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	041a      	lsls	r2, r3, #16
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	611a      	str	r2, [r3, #16]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016a8:	887a      	ldrh	r2, [r7, #2]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	041a      	lsls	r2, r3, #16
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	400b      	ands	r3, r1
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	611a      	str	r2, [r3, #16]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	b08f      	sub	sp, #60	; 0x3c
 80016cc:	af0a      	add	r7, sp, #40	; 0x28
 80016ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e054      	b.n	8001784 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d106      	bne.n	80016fa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f005 ff7f 	bl	80075f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2203      	movs	r2, #3
 80016fe:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f003 f86f 	bl	80047fc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	687e      	ldr	r6, [r7, #4]
 8001726:	466d      	mov	r5, sp
 8001728:	f106 0410 	add.w	r4, r6, #16
 800172c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001734:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001738:	e885 0003 	stmia.w	r5, {r0, r1}
 800173c:	1d33      	adds	r3, r6, #4
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f003 f803 	bl	800474c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2101      	movs	r1, #1
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f865 	bl	800481c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	687e      	ldr	r6, [r7, #4]
 800175a:	466d      	mov	r5, sp
 800175c:	f106 0410 	add.w	r4, r6, #16
 8001760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001768:	e894 0003 	ldmia.w	r4, {r0, r1}
 800176c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001770:	1d33      	adds	r3, r6, #4
 8001772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001774:	6838      	ldr	r0, [r7, #0]
 8001776:	f003 f969 	bl	8004a4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800178c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af04      	add	r7, sp, #16
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	4608      	mov	r0, r1
 8001796:	4611      	mov	r1, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4603      	mov	r3, r0
 800179c:	70fb      	strb	r3, [r7, #3]
 800179e:	460b      	mov	r3, r1
 80017a0:	70bb      	strb	r3, [r7, #2]
 80017a2:	4613      	mov	r3, r2
 80017a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_HCD_HC_Init+0x28>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e07f      	b.n	80018b4 <HAL_HCD_HC_Init+0x128>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	333d      	adds	r3, #61	; 0x3d
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3338      	adds	r3, #56	; 0x38
 80017e0:	787a      	ldrb	r2, [r7, #1]
 80017e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	3340      	adds	r3, #64	; 0x40
 80017f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017f6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	3339      	adds	r3, #57	; 0x39
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	333f      	adds	r3, #63	; 0x3f
 800181c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001820:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	78bb      	ldrb	r3, [r7, #2]
 8001826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800182a:	b2d8      	uxtb	r0, r3
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	333a      	adds	r3, #58	; 0x3a
 800183a:	4602      	mov	r2, r0
 800183c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800183e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da0a      	bge.n	800185c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	333b      	adds	r3, #59	; 0x3b
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e009      	b.n	8001870 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	333b      	adds	r3, #59	; 0x3b
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	333c      	adds	r3, #60	; 0x3c
 8001880:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001884:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	787c      	ldrb	r4, [r7, #1]
 800188c:	78ba      	ldrb	r2, [r7, #2]
 800188e:	78f9      	ldrb	r1, [r7, #3]
 8001890:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	4623      	mov	r3, r4
 80018a2:	f003 fa13 	bl	8004ccc <USB_HC_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd90      	pop	{r4, r7, pc}

080018bc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_HCD_HC_Halt+0x1e>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e00f      	b.n	80018fa <HAL_HCD_HC_Halt+0x3e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fbf0 	bl	80050d0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4603      	mov	r3, r0
 8001914:	70fb      	strb	r3, [r7, #3]
 8001916:	460b      	mov	r3, r1
 8001918:	70bb      	strb	r3, [r7, #2]
 800191a:	4613      	mov	r3, r2
 800191c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	333b      	adds	r3, #59	; 0x3b
 800192e:	78ba      	ldrb	r2, [r7, #2]
 8001930:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	333f      	adds	r3, #63	; 0x3f
 8001942:	787a      	ldrb	r2, [r7, #1]
 8001944:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001946:	7c3b      	ldrb	r3, [r7, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d114      	bne.n	8001976 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3342      	adds	r3, #66	; 0x42
 800195c:	2203      	movs	r2, #3
 800195e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	333d      	adds	r3, #61	; 0x3d
 8001970:	7f3a      	ldrb	r2, [r7, #28]
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e009      	b.n	800198a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	3342      	adds	r3, #66	; 0x42
 8001986:	2202      	movs	r2, #2
 8001988:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800198a:	787b      	ldrb	r3, [r7, #1]
 800198c:	2b03      	cmp	r3, #3
 800198e:	f200 80d6 	bhi.w	8001b3e <HAL_HCD_HC_SubmitRequest+0x23a>
 8001992:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001998:	080019a9 	.word	0x080019a9
 800199c:	08001b29 	.word	0x08001b29
 80019a0:	08001a15 	.word	0x08001a15
 80019a4:	08001a9f 	.word	0x08001a9f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019a8:	7c3b      	ldrb	r3, [r7, #16]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	f040 80c9 	bne.w	8001b42 <HAL_HCD_HC_SubmitRequest+0x23e>
 80019b0:	78bb      	ldrb	r3, [r7, #2]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 80c5 	bne.w	8001b42 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80019b8:	8b3b      	ldrh	r3, [r7, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	3351      	adds	r3, #81	; 0x51
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	3351      	adds	r3, #81	; 0x51
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10a      	bne.n	80019fe <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3342      	adds	r3, #66	; 0x42
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019fc:	e0a1      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3342      	adds	r3, #66	; 0x42
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
      break;
 8001a12:	e096      	b.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a14:	78bb      	ldrb	r3, [r7, #2]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d120      	bne.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	440b      	add	r3, r1
 8001a28:	3351      	adds	r3, #81	; 0x51
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3342      	adds	r3, #66	; 0x42
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a44:	e07e      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	3342      	adds	r3, #66	; 0x42
 8001a56:	2202      	movs	r2, #2
 8001a58:	701a      	strb	r2, [r3, #0]
      break;
 8001a5a:	e073      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	3350      	adds	r3, #80	; 0x50
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10a      	bne.n	8001a88 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	3342      	adds	r3, #66	; 0x42
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
      break;
 8001a86:	e05d      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	3342      	adds	r3, #66	; 0x42
 8001a98:	2202      	movs	r2, #2
 8001a9a:	701a      	strb	r2, [r3, #0]
      break;
 8001a9c:	e052      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a9e:	78bb      	ldrb	r3, [r7, #2]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d120      	bne.n	8001ae6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3351      	adds	r3, #81	; 0x51
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3342      	adds	r3, #66	; 0x42
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ace:	e039      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	3342      	adds	r3, #66	; 0x42
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
      break;
 8001ae4:	e02e      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3350      	adds	r3, #80	; 0x50
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	3342      	adds	r3, #66	; 0x42
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
      break;
 8001b10:	e018      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3342      	adds	r3, #66	; 0x42
 8001b22:	2202      	movs	r2, #2
 8001b24:	701a      	strb	r2, [r3, #0]
      break;
 8001b26:	e00d      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	3342      	adds	r3, #66	; 0x42
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
      break;
 8001b3c:	e002      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001b3e:	bf00      	nop
 8001b40:	e000      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001b42:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	3344      	adds	r3, #68	; 0x44
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	8b39      	ldrh	r1, [r7, #24]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4403      	add	r3, r0
 8001b68:	3348      	adds	r3, #72	; 0x48
 8001b6a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	335c      	adds	r3, #92	; 0x5c
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	334c      	adds	r3, #76	; 0x4c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3339      	adds	r3, #57	; 0x39
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	335d      	adds	r3, #93	; 0x5d
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	3338      	adds	r3, #56	; 0x38
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f003 f96d 	bl	8004eb0 <USB_HC_StartXfer>
 8001bd6:	4603      	mov	r3, r0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fee8 	bl	80049cc <USB_GetMode>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	f040 80ef 	bne.w	8001de2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fecd 	bl	80049a8 <USB_ReadInterrupts>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80e5 	beq.w	8001de0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fec4 	bl	80049a8 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c2a:	d104      	bne.n	8001c36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 feb4 	bl	80049a8 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c4a:	d104      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fea4 	bl	80049a8 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c6a:	d104      	bne.n	8001c76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fe94 	bl	80049a8 <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d103      	bne.n	8001c92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fe86 	bl	80049a8 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ca6:	d115      	bne.n	8001cd4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f005 fcd8 	bl	8007678 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 ff3a 	bl	8004b48 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 fe65 	bl	80049a8 <USB_ReadInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d102      	bne.n	8001cf0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f001 f920 	bl	8002f30 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 fe57 	bl	80049a8 <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d106      	bne.n	8001d12 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f005 fc9b 	bl	8007640 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2208      	movs	r2, #8
 8001d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 fe46 	bl	80049a8 <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d26:	d138      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 f9bf 	bl	80050b0 <USB_HC_ReadInterrupt>
 8001d32:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e025      	b.n	8001d86 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d018      	beq.n	8001d80 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d64:	d106      	bne.n	8001d74 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8cd 	bl	8001f0c <HCD_HC_IN_IRQHandler>
 8001d72:	e005      	b.n	8001d80 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fcd7 	bl	800272e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3d4      	bcc.n	8001d3a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fe02 	bl	80049a8 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d101      	bne.n	8001db2 <HAL_HCD_IRQHandler+0x1d2>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_HCD_IRQHandler+0x1d4>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d014      	beq.n	8001de2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0210 	bic.w	r2, r2, #16
 8001dc6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f001 f805 	bl	8002dd8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0210 	orr.w	r2, r2, #16
 8001ddc:	619a      	str	r2, [r3, #24]
 8001dde:	e000      	b.n	8001de2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001de0:	bf00      	nop
    }
  }
}
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_HCD_Start+0x16>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e013      	b.n	8001e26 <HAL_HCD_Start+0x3e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fce6 	bl	80047dc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 fef9 	bl	8004c0e <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_HCD_Stop+0x16>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e00d      	b.n	8001e60 <HAL_HCD_Stop+0x32>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fa3b 	bl	80052cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 fea0 	bl	8004bba <USB_ResetPort>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	335c      	adds	r3, #92	; 0x5c
 8001ea0:	781b      	ldrb	r3, [r3, #0]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	334c      	adds	r3, #76	; 0x4c
 8001ec8:	681b      	ldr	r3, [r3, #0]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fee2 	bl	8004caa <USB_GetCurrentFrame>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 febe 	bl	8004c7e <USB_GetHostSpeed>
 8001f02:	4603      	mov	r3, r0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d119      	bne.n	8001f70 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	0151      	lsls	r1, r2, #5
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	440a      	add	r2, r1
 8001f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	60d3      	str	r3, [r2, #12]
 8001f6e:	e0ce      	b.n	800210e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f86:	d12c      	bne.n	8001fe2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	335d      	adds	r3, #93	; 0x5d
 8001fac:	2207      	movs	r2, #7
 8001fae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	0151      	lsls	r1, r2, #5
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	440a      	add	r2, r1
 8001fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 f878 	bl	80050d0 <USB_HC_Halt>
 8001fe0:	e095      	b.n	800210e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d109      	bne.n	800200c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	461a      	mov	r2, r3
 8002006:	2320      	movs	r3, #32
 8002008:	6093      	str	r3, [r2, #8]
 800200a:	e080      	b.n	800210e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b08      	cmp	r3, #8
 8002020:	d134      	bne.n	800208c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	0151      	lsls	r1, r2, #5
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	440a      	add	r2, r1
 8002038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	335d      	adds	r3, #93	; 0x5d
 8002052:	2205      	movs	r2, #5
 8002054:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	2310      	movs	r3, #16
 8002066:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002074:	461a      	mov	r2, r3
 8002076:	2308      	movs	r3, #8
 8002078:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f003 f823 	bl	80050d0 <USB_HC_Halt>
 800208a:	e040      	b.n	800210e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	d134      	bne.n	800210e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fffe 	bl	80050d0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	461a      	mov	r2, r3
 80020e2:	2310      	movs	r3, #16
 80020e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	335d      	adds	r3, #93	; 0x5d
 80020f6:	2208      	movs	r2, #8
 80020f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	461a      	mov	r2, r3
 8002108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800210c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002124:	d122      	bne.n	800216c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	0151      	lsls	r1, r2, #5
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	440a      	add	r2, r1
 800213c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f002 ffbd 	bl	80050d0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002162:	461a      	mov	r2, r3
 8002164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002168:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800216a:	e2dc      	b.n	8002726 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	f040 80dd 	bne.w	800233e <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	335d      	adds	r3, #93	; 0x5d
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	3358      	adds	r3, #88	; 0x58
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	461a      	mov	r2, r3
 80021ba:	2301      	movs	r3, #1
 80021bc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	333f      	adds	r3, #63	; 0x3f
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	333f      	adds	r3, #63	; 0x3f
 80021e4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d121      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	0151      	lsls	r1, r2, #5
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	440a      	add	r2, r1
 8002200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f002 ff5b 	bl	80050d0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	461a      	mov	r2, r3
 8002228:	2310      	movs	r3, #16
 800222a:	6093      	str	r3, [r2, #8]
 800222c:	e070      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	333f      	adds	r3, #63	; 0x3f
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d12a      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	0151      	lsls	r1, r2, #5
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	440a      	add	r2, r1
 800225a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800225e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002262:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	335c      	adds	r3, #92	; 0x5c
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	b2d8      	uxtb	r0, r3
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	335c      	adds	r3, #92	; 0x5c
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	4601      	mov	r1, r0
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 f9fe 	bl	8007694 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002298:	e03a      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	333f      	adds	r3, #63	; 0x3f
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d12f      	bne.n	8002310 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	335c      	adds	r3, #92	; 0x5c
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	3350      	adds	r3, #80	; 0x50
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f083 0301 	eor.w	r3, r3, #1
 80022da:	b2d8      	uxtb	r0, r3
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	440b      	add	r3, r1
 80022ea:	3350      	adds	r3, #80	; 0x50
 80022ec:	4602      	mov	r2, r0
 80022ee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	b2d8      	uxtb	r0, r3
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	335c      	adds	r3, #92	; 0x5c
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	4601      	mov	r1, r0
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f005 f9c2 	bl	8007694 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	3350      	adds	r3, #80	; 0x50
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2d8      	uxtb	r0, r3
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	3350      	adds	r3, #80	; 0x50
 8002338:	4602      	mov	r2, r0
 800233a:	701a      	strb	r2, [r3, #0]
}
 800233c:	e1f3      	b.n	8002726 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	f040 811a 	bne.w	800258a <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	0151      	lsls	r1, r2, #5
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	440a      	add	r2, r1
 800236c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002370:	f023 0302 	bic.w	r3, r3, #2
 8002374:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	335d      	adds	r3, #93	; 0x5d
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10a      	bne.n	80023a2 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	335c      	adds	r3, #92	; 0x5c
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e0d9      	b.n	8002556 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	335d      	adds	r3, #93	; 0x5d
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10a      	bne.n	80023ce <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	335c      	adds	r3, #92	; 0x5c
 80023c8:	2205      	movs	r2, #5
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e0c3      	b.n	8002556 <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	335d      	adds	r3, #93	; 0x5d
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b06      	cmp	r3, #6
 80023e2:	d00a      	beq.n	80023fa <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	335d      	adds	r3, #93	; 0x5d
 80023f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d156      	bne.n	80024a8 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	3358      	adds	r3, #88	; 0x58
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c59      	adds	r1, r3, #1
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4403      	add	r3, r0
 800241c:	3358      	adds	r3, #88	; 0x58
 800241e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	3358      	adds	r3, #88	; 0x58
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d914      	bls.n	8002460 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	3358      	adds	r3, #88	; 0x58
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	335c      	adds	r3, #92	; 0x5c
 800245a:	2204      	movs	r2, #4
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e009      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	335c      	adds	r3, #92	; 0x5c
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800248a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002492:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e056      	b.n	8002556 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	335d      	adds	r3, #93	; 0x5d
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d123      	bne.n	8002506 <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	335c      	adds	r3, #92	; 0x5c
 80024ce:	2202      	movs	r2, #2
 80024d0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024e8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024f0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e027      	b.n	8002556 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	335d      	adds	r3, #93	; 0x5d
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b07      	cmp	r3, #7
 800251a:	d11c      	bne.n	8002556 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	3358      	adds	r3, #88	; 0x58
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	1c59      	adds	r1, r3, #1
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4403      	add	r3, r0
 800253e:	3358      	adds	r3, #88	; 0x58
 8002540:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	335c      	adds	r3, #92	; 0x5c
 8002552:	2204      	movs	r2, #4
 8002554:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	461a      	mov	r2, r3
 8002564:	2302      	movs	r3, #2
 8002566:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	b2d8      	uxtb	r0, r3
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	335c      	adds	r3, #92	; 0x5c
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4601      	mov	r1, r0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f005 f886 	bl	8007694 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002588:	e0cd      	b.n	8002726 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d13e      	bne.n	800261e <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	0151      	lsls	r1, r2, #5
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	440a      	add	r2, r1
 80025b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	3358      	adds	r3, #88	; 0x58
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1c59      	adds	r1, r3, #1
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4403      	add	r3, r0
 80025e2:	3358      	adds	r3, #88	; 0x58
 80025e4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	335d      	adds	r3, #93	; 0x5d
 80025f6:	2206      	movs	r2, #6
 80025f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fd63 	bl	80050d0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002616:	461a      	mov	r2, r3
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	6093      	str	r3, [r2, #8]
}
 800261c:	e083      	b.n	8002726 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b10      	cmp	r3, #16
 8002632:	d178      	bne.n	8002726 <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	333f      	adds	r3, #63	; 0x3f
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d122      	bne.n	8002690 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	3358      	adds	r3, #88	; 0x58
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	0151      	lsls	r1, r2, #5
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	440a      	add	r2, r1
 8002674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f002 fd21 	bl	80050d0 <USB_HC_Halt>
 800268e:	e041      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	333f      	adds	r3, #63	; 0x3f
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	333f      	adds	r3, #63	; 0x3f
 80026b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d12b      	bne.n	8002714 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3358      	adds	r3, #88	; 0x58
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	335d      	adds	r3, #93	; 0x5d
 80026e0:	2203      	movs	r2, #3
 80026e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	0151      	lsls	r1, r2, #5
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	440a      	add	r2, r1
 80026fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fcde 	bl	80050d0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	2310      	movs	r3, #16
 8002724:	6093      	str	r3, [r2, #8]
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b04      	cmp	r3, #4
 800275c:	d119      	bne.n	8002792 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2304      	movs	r3, #4
 800276e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	0151      	lsls	r1, r2, #5
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	440a      	add	r2, r1
 8002786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002790:	e31e      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d141      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	461a      	mov	r2, r3
 80027b6:	2320      	movs	r3, #32
 80027b8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	333d      	adds	r3, #61	; 0x3d
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	f040 82ff 	bne.w	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	333d      	adds	r3, #61	; 0x3d
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	335c      	adds	r3, #92	; 0x5c
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	0151      	lsls	r1, r2, #5
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	440a      	add	r2, r1
 8002810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f002 fc53 	bl	80050d0 <USB_HC_Halt>
}
 800282a:	e2d1      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d13f      	bne.n	80028c2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	335d      	adds	r3, #93	; 0x5d
 8002852:	2204      	movs	r2, #4
 8002854:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	333d      	adds	r3, #61	; 0x3d
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	3358      	adds	r3, #88	; 0x58
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	0151      	lsls	r1, r2, #5
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	440a      	add	r2, r1
 8002894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 fc11 	bl	80050d0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	461a      	mov	r2, r3
 80028bc:	2340      	movs	r3, #64	; 0x40
 80028be:	6093      	str	r3, [r2, #8]
}
 80028c0:	e286      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d8:	d122      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	0151      	lsls	r1, r2, #5
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	440a      	add	r2, r1
 80028f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fbe3 	bl	80050d0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291c:	6093      	str	r3, [r2, #8]
}
 800291e:	e257      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d135      	bne.n	80029a2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	3358      	adds	r3, #88	; 0x58
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	0151      	lsls	r1, r2, #5
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	440a      	add	r2, r1
 8002960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f002 fbab 	bl	80050d0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	335d      	adds	r3, #93	; 0x5d
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
}
 80029a0:	e216      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d12b      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	461a      	mov	r2, r3
 80029c6:	2308      	movs	r3, #8
 80029c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	0151      	lsls	r1, r2, #5
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	440a      	add	r2, r1
 80029e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fb6b 	bl	80050d0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	335d      	adds	r3, #93	; 0x5d
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	701a      	strb	r2, [r3, #0]
}
 8002a0e:	e1df      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d135      	bne.n	8002a92 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	3358      	adds	r3, #88	; 0x58
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	335d      	adds	r3, #93	; 0x5d
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	0151      	lsls	r1, r2, #5
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	440a      	add	r2, r1
 8002a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 fb29 	bl	80050d0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	6093      	str	r3, [r2, #8]
}
 8002a90:	e19e      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b80      	cmp	r3, #128	; 0x80
 8002aa6:	d12b      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac2:	f043 0302 	orr.w	r3, r3, #2
 8002ac6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 fafc 	bl	80050d0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	335d      	adds	r3, #93	; 0x5d
 8002ae8:	2206      	movs	r2, #6
 8002aea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	6093      	str	r3, [r2, #8]
}
 8002afe:	e167      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b16:	d135      	bne.n	8002b84 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	0151      	lsls	r1, r2, #5
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 fac4 	bl	80050d0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	461a      	mov	r2, r3
 8002b56:	2310      	movs	r3, #16
 8002b58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	461a      	mov	r2, r3
 8002b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	335d      	adds	r3, #93	; 0x5d
 8002b7e:	2208      	movs	r2, #8
 8002b80:	701a      	strb	r2, [r3, #0]
}
 8002b82:	e125      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	f040 811a 	bne.w	8002dd0 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	0151      	lsls	r1, r2, #5
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	440a      	add	r2, r1
 8002bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb6:	f023 0302 	bic.w	r3, r3, #2
 8002bba:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	335d      	adds	r3, #93	; 0x5d
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d137      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	440b      	add	r3, r1
 8002be0:	335c      	adds	r3, #92	; 0x5c
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	333f      	adds	r3, #63	; 0x3f
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d00b      	beq.n	8002c14 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	333f      	adds	r3, #63	; 0x3f
 8002c0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	f040 80c5 	bne.w	8002d9e <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	3351      	adds	r3, #81	; 0x51
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f083 0301 	eor.w	r3, r3, #1
 8002c2a:	b2d8      	uxtb	r0, r3
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3351      	adds	r3, #81	; 0x51
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e0ad      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	335d      	adds	r3, #93	; 0x5d
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d10a      	bne.n	8002c6e <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	335c      	adds	r3, #92	; 0x5c
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e097      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	335d      	adds	r3, #93	; 0x5d
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d10a      	bne.n	8002c9a <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	335c      	adds	r3, #92	; 0x5c
 8002c94:	2202      	movs	r2, #2
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e081      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	335d      	adds	r3, #93	; 0x5d
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d10a      	bne.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	335c      	adds	r3, #92	; 0x5c
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e06b      	b.n	8002d9e <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	335d      	adds	r3, #93	; 0x5d
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b06      	cmp	r3, #6
 8002cda:	d00a      	beq.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	335d      	adds	r3, #93	; 0x5d
 8002cec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d155      	bne.n	8002d9e <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	3358      	adds	r3, #88	; 0x58
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	1c59      	adds	r1, r3, #1
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4403      	add	r3, r0
 8002d14:	3358      	adds	r3, #88	; 0x58
 8002d16:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3358      	adds	r3, #88	; 0x58
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d914      	bls.n	8002d58 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3358      	adds	r3, #88	; 0x58
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	335c      	adds	r3, #92	; 0x5c
 8002d52:	2204      	movs	r2, #4
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e009      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	335c      	adds	r3, #92	; 0x5c
 8002d68:	2202      	movs	r2, #2
 8002d6a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d82:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d8a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	2302      	movs	r3, #2
 8002dae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	b2d8      	uxtb	r0, r3
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	335c      	adds	r3, #92	; 0x5c
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4601      	mov	r1, r0
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f004 fc62 	bl	8007694 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dd0:	bf00      	nop
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	0c5b      	lsrs	r3, r3, #17
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d003      	beq.n	8002e1c <HCD_RXQLVL_IRQHandler+0x44>
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	f000 8082 	beq.w	8002f1e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e1a:	e083      	b.n	8002f24 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d07f      	beq.n	8002f22 <HCD_RXQLVL_IRQHandler+0x14a>
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	440b      	add	r3, r1
 8002e30:	3344      	adds	r3, #68	; 0x44
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d074      	beq.n	8002f22 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3344      	adds	r3, #68	; 0x44
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	b292      	uxth	r2, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f001 fd80 	bl	8004958 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	3344      	adds	r3, #68	; 0x44
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	18d1      	adds	r1, r2, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4403      	add	r3, r0
 8002e7c:	3344      	adds	r3, #68	; 0x44
 8002e7e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	334c      	adds	r3, #76	; 0x4c
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	18d1      	adds	r1, r2, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4403      	add	r3, r0
 8002ea4:	334c      	adds	r3, #76	; 0x4c
 8002ea6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HCD_RXQLVL_IRQHandler+0x154>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d031      	beq.n	8002f22 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ed4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002edc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	3350      	adds	r3, #80	; 0x50
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	f083 0301 	eor.w	r3, r3, #1
 8002f06:	b2d8      	uxtb	r0, r3
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	3350      	adds	r3, #80	; 0x50
 8002f18:	4602      	mov	r2, r0
 8002f1a:	701a      	strb	r2, [r3, #0]
      break;
 8002f1c:	e001      	b.n	8002f22 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002f22:	bf00      	nop
  }
}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	; 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	1ff80000 	.word	0x1ff80000

08002f30 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f5c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d10b      	bne.n	8002f80 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d102      	bne.n	8002f78 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f004 fb72 	bl	800765c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f043 0302 	orr.w	r3, r3, #2
 8002f7e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d132      	bne.n	8002ff0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d126      	bne.n	8002fea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d113      	bne.n	8002fcc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002faa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fae:	d106      	bne.n	8002fbe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 fdc6 	bl	8004b48 <USB_InitFSLSPClkSel>
 8002fbc:	e011      	b.n	8002fe2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 fdbf 	bl	8004b48 <USB_InitFSLSPClkSel>
 8002fca:	e00a      	b.n	8002fe2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d106      	bne.n	8002fe2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fe0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f004 fb63 	bl	80076ae <HAL_HCD_PortEnabled_Callback>
 8002fe8:	e002      	b.n	8002ff0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f004 fb6d 	bl	80076ca <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d103      	bne.n	8003002 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f043 0320 	orr.w	r3, r3, #32
 8003000:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003008:	461a      	mov	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	6013      	str	r3, [r2, #0]
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e11f      	b.n	800326a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fe06 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800306a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800307a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800307c:	f000 fdf2 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8003080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4a7b      	ldr	r2, [pc, #492]	; (8003274 <HAL_I2C_Init+0x25c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d807      	bhi.n	800309c <HAL_I2C_Init+0x84>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a7a      	ldr	r2, [pc, #488]	; (8003278 <HAL_I2C_Init+0x260>)
 8003090:	4293      	cmp	r3, r2
 8003092:	bf94      	ite	ls
 8003094:	2301      	movls	r3, #1
 8003096:	2300      	movhi	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e006      	b.n	80030aa <HAL_I2C_Init+0x92>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a77      	ldr	r2, [pc, #476]	; (800327c <HAL_I2C_Init+0x264>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	bf94      	ite	ls
 80030a4:	2301      	movls	r3, #1
 80030a6:	2300      	movhi	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0db      	b.n	800326a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a72      	ldr	r2, [pc, #456]	; (8003280 <HAL_I2C_Init+0x268>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	0c9b      	lsrs	r3, r3, #18
 80030bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a64      	ldr	r2, [pc, #400]	; (8003274 <HAL_I2C_Init+0x25c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d802      	bhi.n	80030ec <HAL_I2C_Init+0xd4>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3301      	adds	r3, #1
 80030ea:	e009      	b.n	8003100 <HAL_I2C_Init+0xe8>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	4a63      	ldr	r2, [pc, #396]	; (8003284 <HAL_I2C_Init+0x26c>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	3301      	adds	r3, #1
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	430b      	orrs	r3, r1
 8003106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4956      	ldr	r1, [pc, #344]	; (8003274 <HAL_I2C_Init+0x25c>)
 800311c:	428b      	cmp	r3, r1
 800311e:	d80d      	bhi.n	800313c <HAL_I2C_Init+0x124>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e59      	subs	r1, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fbb1 f3f3 	udiv	r3, r1, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	bf38      	it	cc
 8003138:	2304      	movcc	r3, #4
 800313a:	e04f      	b.n	80031dc <HAL_I2C_Init+0x1c4>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d111      	bne.n	8003168 <HAL_I2C_Init+0x150>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	440b      	add	r3, r1
 8003152:	fbb0 f3f3 	udiv	r3, r0, r3
 8003156:	3301      	adds	r3, #1
 8003158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e012      	b.n	800318e <HAL_I2C_Init+0x176>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e58      	subs	r0, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	0099      	lsls	r1, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	fbb0 f3f3 	udiv	r3, r0, r3
 800317e:	3301      	adds	r3, #1
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Init+0x17e>
 8003192:	2301      	movs	r3, #1
 8003194:	e022      	b.n	80031dc <HAL_I2C_Init+0x1c4>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10e      	bne.n	80031bc <HAL_I2C_Init+0x1a4>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1e58      	subs	r0, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	440b      	add	r3, r1
 80031ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ba:	e00f      	b.n	80031dc <HAL_I2C_Init+0x1c4>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e58      	subs	r0, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	0099      	lsls	r1, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	6809      	ldr	r1, [r1, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800320a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6911      	ldr	r1, [r2, #16]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68d2      	ldr	r2, [r2, #12]
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	000186a0 	.word	0x000186a0
 8003278:	001e847f 	.word	0x001e847f
 800327c:	003d08ff 	.word	0x003d08ff
 8003280:	431bde83 	.word	0x431bde83
 8003284:	10624dd3 	.word	0x10624dd3

08003288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e304      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8087 	beq.w	80033b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a8:	4b92      	ldr	r3, [pc, #584]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d00c      	beq.n	80032ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b4:	4b8f      	ldr	r3, [pc, #572]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d112      	bne.n	80032e6 <HAL_RCC_OscConfig+0x5e>
 80032c0:	4b8c      	ldr	r3, [pc, #560]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d10b      	bne.n	80032e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ce:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d06c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x12c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d168      	bne.n	80033b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e2de      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ee:	d106      	bne.n	80032fe <HAL_RCC_OscConfig+0x76>
 80032f0:	4b80      	ldr	r3, [pc, #512]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a7f      	ldr	r2, [pc, #508]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	e02e      	b.n	800335c <HAL_RCC_OscConfig+0xd4>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0x98>
 8003306:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7a      	ldr	r2, [pc, #488]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 800330c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b78      	ldr	r3, [pc, #480]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a77      	ldr	r2, [pc, #476]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xd4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0xbc>
 800332a:	4b72      	ldr	r3, [pc, #456]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a71      	ldr	r2, [pc, #452]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b6f      	ldr	r3, [pc, #444]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6e      	ldr	r2, [pc, #440]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xd4>
 8003344:	4b6b      	ldr	r3, [pc, #428]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6a      	ldr	r2, [pc, #424]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b68      	ldr	r3, [pc, #416]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a67      	ldr	r2, [pc, #412]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fd fdd8 	bl	8000f18 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7fd fdd4 	bl	8000f18 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e292      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b5d      	ldr	r3, [pc, #372]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xe4>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fd fdc4 	bl	8000f18 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fd fdc0 	bl	8000f18 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e27e      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x10c>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d063      	beq.n	800348a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033c2:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ce:	4b49      	ldr	r3, [pc, #292]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d11c      	bne.n	8003414 <HAL_RCC_OscConfig+0x18c>
 80033da:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_RCC_OscConfig+0x176>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e252      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4939      	ldr	r1, [pc, #228]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	e03a      	b.n	800348a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341c:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003422:	f7fd fd79 	bl	8000f18 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342a:	f7fd fd75 	bl	8000f18 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e233      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4927      	ldr	r1, [pc, #156]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	e015      	b.n	800348a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fd fd58 	bl	8000f18 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346c:	f7fd fd54 	bl	8000f18 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e212      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d03a      	beq.n	800350c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d019      	beq.n	80034d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349e:	4b17      	ldr	r3, [pc, #92]	; (80034fc <HAL_RCC_OscConfig+0x274>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a4:	f7fd fd38 	bl	8000f18 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fd fd34 	bl	8000f18 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1f2      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ca:	2001      	movs	r0, #1
 80034cc:	f000 fbde 	bl	8003c8c <RCC_Delay>
 80034d0:	e01c      	b.n	800350c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <HAL_RCC_OscConfig+0x274>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d8:	f7fd fd1e 	bl	8000f18 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034de:	e00f      	b.n	8003500 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e0:	f7fd fd1a 	bl	8000f18 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d908      	bls.n	8003500 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1d8      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	42420000 	.word	0x42420000
 80034fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003500:	4b9b      	ldr	r3, [pc, #620]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e9      	bne.n	80034e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80a6 	beq.w	8003666 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351e:	4b94      	ldr	r3, [pc, #592]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10d      	bne.n	8003546 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b91      	ldr	r3, [pc, #580]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	4a90      	ldr	r2, [pc, #576]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	61d3      	str	r3, [r2, #28]
 8003536:	4b8e      	ldr	r3, [pc, #568]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	4b8b      	ldr	r3, [pc, #556]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d118      	bne.n	8003584 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003552:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a87      	ldr	r2, [pc, #540]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 8003558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355e:	f7fd fcdb 	bl	8000f18 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003566:	f7fd fcd7 	bl	8000f18 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b64      	cmp	r3, #100	; 0x64
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e195      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	4b7e      	ldr	r3, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d106      	bne.n	800359a <HAL_RCC_OscConfig+0x312>
 800358c:	4b78      	ldr	r3, [pc, #480]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4a77      	ldr	r2, [pc, #476]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6213      	str	r3, [r2, #32]
 8003598:	e02d      	b.n	80035f6 <HAL_RCC_OscConfig+0x36e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x334>
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a72      	ldr	r2, [pc, #456]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	6213      	str	r3, [r2, #32]
 80035ae:	4b70      	ldr	r3, [pc, #448]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4a6f      	ldr	r2, [pc, #444]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	6213      	str	r3, [r2, #32]
 80035ba:	e01c      	b.n	80035f6 <HAL_RCC_OscConfig+0x36e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b05      	cmp	r3, #5
 80035c2:	d10c      	bne.n	80035de <HAL_RCC_OscConfig+0x356>
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4a69      	ldr	r2, [pc, #420]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	6213      	str	r3, [r2, #32]
 80035d0:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4a66      	ldr	r2, [pc, #408]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6213      	str	r3, [r2, #32]
 80035dc:	e00b      	b.n	80035f6 <HAL_RCC_OscConfig+0x36e>
 80035de:	4b64      	ldr	r3, [pc, #400]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4a63      	ldr	r2, [pc, #396]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6213      	str	r3, [r2, #32]
 80035ea:	4b61      	ldr	r3, [pc, #388]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4a60      	ldr	r2, [pc, #384]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d015      	beq.n	800362a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fd fc8b 	bl	8000f18 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fd fc87 	bl	8000f18 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e143      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	4b54      	ldr	r3, [pc, #336]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ee      	beq.n	8003606 <HAL_RCC_OscConfig+0x37e>
 8003628:	e014      	b.n	8003654 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362a:	f7fd fc75 	bl	8000f18 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003630:	e00a      	b.n	8003648 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7fd fc71 	bl	8000f18 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e12d      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003648:	4b49      	ldr	r3, [pc, #292]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ee      	bne.n	8003632 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d105      	bne.n	8003666 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365a:	4b45      	ldr	r3, [pc, #276]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4a44      	ldr	r2, [pc, #272]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003664:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 808c 	beq.w	8003788 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003670:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367c:	d10e      	bne.n	800369c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800367e:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003686:	2b08      	cmp	r3, #8
 8003688:	d108      	bne.n	800369c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800368a:	4b39      	ldr	r3, [pc, #228]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003696:	d101      	bne.n	800369c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e103      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d14e      	bne.n	8003742 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80036a4:	4b32      	ldr	r3, [pc, #200]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80036b0:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0ef      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80036c4:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <HAL_RCC_OscConfig+0x4f0>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fd fc25 	bl	8000f18 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80036d2:	f7fd fc21 	bl	8000f18 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b64      	cmp	r3, #100	; 0x64
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0df      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80036f0:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	491c      	ldr	r1, [pc, #112]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4918      	ldr	r1, [pc, #96]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003710:	4313      	orrs	r3, r2
 8003712:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003714:	4b18      	ldr	r3, [pc, #96]	; (8003778 <HAL_RCC_OscConfig+0x4f0>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fd fbfd 	bl	8000f18 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003722:	f7fd fbf9 	bl	8000f18 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b64      	cmp	r3, #100	; 0x64
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0b7      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x49a>
 8003740:	e022      	b.n	8003788 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <HAL_RCC_OscConfig+0x4f0>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fd fbe0 	bl	8000f18 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800375a:	e00f      	b.n	800377c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800375c:	f7fd fbdc 	bl	8000f18 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d908      	bls.n	800377c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e09a      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40007000 	.word	0x40007000
 8003778:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800377c:	4b4b      	ldr	r3, [pc, #300]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e9      	bne.n	800375c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8088 	beq.w	80038a2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003792:	4b46      	ldr	r3, [pc, #280]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d068      	beq.n	8003870 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d14d      	bne.n	8003842 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <HAL_RCC_OscConfig+0x628>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fd fbb4 	bl	8000f18 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fd fbb0 	bl	8000f18 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e06e      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037da:	d10f      	bne.n	80037fc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80037dc:	4b33      	ldr	r3, [pc, #204]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4931      	ldr	r1, [pc, #196]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	f023 020f 	bic.w	r2, r3, #15
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	492d      	ldr	r1, [pc, #180]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fc:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	430b      	orrs	r3, r1
 800380e:	4927      	ldr	r1, [pc, #156]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003814:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <HAL_RCC_OscConfig+0x628>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fd fb7d 	bl	8000f18 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003822:	f7fd fb79 	bl	8000f18 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e037      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x59a>
 8003840:	e02f      	b.n	80038a2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <HAL_RCC_OscConfig+0x628>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd fb66 	bl	8000f18 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003850:	f7fd fb62 	bl	8000f18 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e020      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x5c8>
 800386e:	e018      	b.n	80038a2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e013      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	429a      	cmp	r2, r3
 800388e:	d106      	bne.n	800389e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	42420060 	.word	0x42420060

080038b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0d0      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b67      	ldr	r3, [pc, #412]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 0207 	bic.w	r2, r3, #7
 80038de:	4965      	ldr	r1, [pc, #404]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800391a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d040      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e073      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3d      	ldr	r3, [pc, #244]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4936      	ldr	r1, [pc, #216]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fd fab8 	bl	8000f18 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fd fab4 	bl	8000f18 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e053      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d210      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0207 	bic.w	r2, r3, #7
 80039ea:	4922      	ldr	r1, [pc, #136]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4601      	mov	r1, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	5cd3      	ldrb	r3, [r2, r3]
 8003a56:	fa21 f303 	lsr.w	r3, r1, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1cc>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1d0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd fa16 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08007cac 	.word	0x08007cac
 8003a80:	20000004 	.word	0x20000004
 8003a84:	20000008 	.word	0x20000008

08003a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a8c:	b091      	sub	sp, #68	; 0x44
 8003a8e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003a90:	4b6a      	ldr	r3, [pc, #424]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x1b4>)
 8003a92:	f107 0414 	add.w	r4, r7, #20
 8003a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a98:	c407      	stmia	r4!, {r0, r1, r2}
 8003a9a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003a9c:	4b68      	ldr	r3, [pc, #416]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a9e:	1d3c      	adds	r4, r7, #4
 8003aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aaa:	2300      	movs	r3, #0
 8003aac:	633b      	str	r3, [r7, #48]	; 0x30
 8003aae:	2300      	movs	r3, #0
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ac2:	4b60      	ldr	r3, [pc, #384]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x50>
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x56>
 8003ad6:	e0a7      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ad8:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003adc:	e0a7      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae0:	0c9b      	lsrs	r3, r3, #18
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003aea:	4413      	add	r3, r2
 8003aec:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 808d 	beq.w	8003c18 <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003b12:	4b4c      	ldr	r3, [pc, #304]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d06a      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003b1e:	4b49      	ldr	r3, [pc, #292]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	3301      	adds	r3, #1
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003b2c:	4b45      	ldr	r3, [pc, #276]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	3302      	adds	r3, #2
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	f04f 0400 	mov.w	r4, #0
 8003b48:	fb03 f502 	mul.w	r5, r3, r2
 8003b4c:	fb01 f004 	mul.w	r0, r1, r4
 8003b50:	4428      	add	r0, r5
 8003b52:	fba1 5603 	umull	r5, r6, r1, r3
 8003b56:	1983      	adds	r3, r0, r6
 8003b58:	461e      	mov	r6, r3
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	f04f 0400 	mov.w	r4, #0
 8003b66:	0154      	lsls	r4, r2, #5
 8003b68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b6c:	014b      	lsls	r3, r1, #5
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4622      	mov	r2, r4
 8003b72:	1b49      	subs	r1, r1, r5
 8003b74:	eb62 0206 	sbc.w	r2, r2, r6
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	f04f 0400 	mov.w	r4, #0
 8003b80:	0194      	lsls	r4, r2, #6
 8003b82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b86:	018b      	lsls	r3, r1, #6
 8003b88:	1a5b      	subs	r3, r3, r1
 8003b8a:	eb64 0402 	sbc.w	r4, r4, r2
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	00e2      	lsls	r2, r4, #3
 8003b98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b9c:	00d9      	lsls	r1, r3, #3
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	195b      	adds	r3, r3, r5
 8003ba4:	eb44 0406 	adc.w	r4, r4, r6
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	0262      	lsls	r2, r4, #9
 8003bb2:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003bb6:	0259      	lsls	r1, r3, #9
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4614      	mov	r4, r2
 8003bbc:	4698      	mov	r8, r3
 8003bbe:	46a1      	mov	r9, r4
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	f04f 0400 	mov.w	r4, #0
 8003bce:	fb03 f502 	mul.w	r5, r3, r2
 8003bd2:	fb01 f004 	mul.w	r0, r1, r4
 8003bd6:	4428      	add	r0, r5
 8003bd8:	fba1 3403 	umull	r3, r4, r1, r3
 8003bdc:	1902      	adds	r2, r0, r4
 8003bde:	4614      	mov	r4, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	4640      	mov	r0, r8
 8003be6:	4649      	mov	r1, r9
 8003be8:	f7fc fb1c 	bl	8000224 <__aeabi_uldivmod>
 8003bec:	4603      	mov	r3, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf2:	e007      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003bf8:	fb02 f203 	mul.w	r2, r2, r3
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003c04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d108      	bne.n	8003c22 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c16:	e004      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1c4>)
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8003c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3744      	adds	r7, #68	; 0x44
 8003c34:	46bd      	mov	sp, r7
 8003c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c3a:	bf00      	nop
 8003c3c:	08007c88 	.word	0x08007c88
 8003c40:	08007c98 	.word	0x08007c98
 8003c44:	40021000 	.word	0x40021000
 8003c48:	007a1200 	.word	0x007a1200
 8003c4c:	003d0900 	.word	0x003d0900

08003c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	20000004 	.word	0x20000004

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff2 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4a03      	ldr	r2, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7a:	5cd3      	ldrb	r3, [r2, r3]
 8003c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08007cbc 	.word	0x08007cbc

08003c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <RCC_Delay+0x34>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <RCC_Delay+0x38>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0a5b      	lsrs	r3, r3, #9
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ca8:	bf00      	nop
  }
  while (Delay --);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1e5a      	subs	r2, r3, #1
 8003cae:	60fa      	str	r2, [r7, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f9      	bne.n	8003ca8 <RCC_Delay+0x1c>
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000004 	.word	0x20000004
 8003cc4:	10624dd3 	.word	0x10624dd3

08003cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d07d      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cec:	4b8b      	ldr	r3, [pc, #556]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	4a87      	ldr	r2, [pc, #540]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	61d3      	str	r3, [r2, #28]
 8003d04:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	4b82      	ldr	r3, [pc, #520]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d118      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d20:	4b7f      	ldr	r3, [pc, #508]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a7e      	ldr	r2, [pc, #504]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2c:	f7fd f8f4 	bl	8000f18 <HAL_GetTick>
 8003d30:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d32:	e008      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d34:	f7fd f8f0 	bl	8000f18 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0e5      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d46:	4b76      	ldr	r3, [pc, #472]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d52:	4b72      	ldr	r3, [pc, #456]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02e      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d027      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d70:	4b6a      	ldr	r3, [pc, #424]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d7a:	4b6a      	ldr	r3, [pc, #424]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d80:	4b68      	ldr	r3, [pc, #416]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d86:	4a65      	ldr	r2, [pc, #404]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d014      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fd f8bf 	bl	8000f18 <HAL_GetTick>
 8003d9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fd f8bb 	bl	8000f18 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0ae      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ee      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc0:	4b56      	ldr	r3, [pc, #344]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4953      	ldr	r1, [pc, #332]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dd2:	7efb      	ldrb	r3, [r7, #27]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd8:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4a4f      	ldr	r2, [pc, #316]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df0:	4b4a      	ldr	r3, [pc, #296]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4947      	ldr	r1, [pc, #284]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003e0e:	4b43      	ldr	r3, [pc, #268]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	4940      	ldr	r1, [pc, #256]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	4938      	ldr	r1, [pc, #224]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003e3e:	4b37      	ldr	r3, [pc, #220]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003e4a:	4b34      	ldr	r3, [pc, #208]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003e56:	2301      	movs	r3, #1
 8003e58:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d148      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003e60:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d138      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d009      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e042      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	4920      	ldr	r1, [pc, #128]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003e9e:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	491c      	ldr	r1, [pc, #112]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fd f82f 	bl	8000f18 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ebe:	f7fd f82b 	bl	8000f18 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	; 0x64
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e020      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003edc:	e009      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003ede:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00f      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4904      	ldr	r1, [pc, #16]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40007000 	.word	0x40007000
 8003f24:	42420440 	.word	0x42420440
 8003f28:	42420070 	.word	0x42420070

08003f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e041      	b.n	8003fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fc feba 	bl	8000ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f000 fa74 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d001      	beq.n	8003fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e03f      	b.n	8004064 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1b      	ldr	r2, [pc, #108]	; (8004070 <HAL_TIM_Base_Start_IT+0xa4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x62>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d00e      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x62>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_TIM_Base_Start_IT+0xa8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x62>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a16      	ldr	r2, [pc, #88]	; (8004078 <HAL_TIM_Base_Start_IT+0xac>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x62>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <HAL_TIM_Base_Start_IT+0xb0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b06      	cmp	r3, #6
 800403e:	d010      	beq.n	8004062 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004050:	e007      	b.n	8004062 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00

08004080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0202 	mvn.w	r2, #2
 80040ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9ad 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9a0 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f9af 	bl	8004434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0204 	mvn.w	r2, #4
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f983 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f976 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f985 	bl	8004434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b08      	cmp	r3, #8
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0208 	mvn.w	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f959 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f94c 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f95b 	bl	8004434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b10      	cmp	r3, #16
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0210 	mvn.w	r2, #16
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2208      	movs	r2, #8
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f92f 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f922 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f931 	bl	8004434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0201 	mvn.w	r2, #1
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8fd 	bl	80043fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa85 	bl	800473a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8f5 	bl	8004446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	d10e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b20      	cmp	r3, #32
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0220 	mvn.w	r2, #32
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa50 	bl	8004728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIM_ConfigClockSource+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0a6      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x166>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d067      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x120>
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d80b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x6c>
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d073      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x140>
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d802      	bhi.n	80042f2 <HAL_TIM_ConfigClockSource+0x62>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d06f      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042f0:	e078      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d06c      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x140>
 80042f6:	2b30      	cmp	r3, #48	; 0x30
 80042f8:	d06a      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80042fa:	e073      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042fc:	2b70      	cmp	r3, #112	; 0x70
 80042fe:	d00d      	beq.n	800431c <HAL_TIM_ConfigClockSource+0x8c>
 8004300:	2b70      	cmp	r3, #112	; 0x70
 8004302:	d804      	bhi.n	800430e <HAL_TIM_ConfigClockSource+0x7e>
 8004304:	2b50      	cmp	r3, #80	; 0x50
 8004306:	d033      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0xe0>
 8004308:	2b60      	cmp	r3, #96	; 0x60
 800430a:	d041      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800430c:	e06a      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	d066      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x152>
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d017      	beq.n	800434a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800431a:	e063      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	6899      	ldr	r1, [r3, #8]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f000 f977 	bl	800461e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800433e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	609a      	str	r2, [r3, #8]
      break;
 8004348:	e04c      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6899      	ldr	r1, [r3, #8]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f000 f960 	bl	800461e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436c:	609a      	str	r2, [r3, #8]
      break;
 800436e:	e039      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	461a      	mov	r2, r3
 800437e:	f000 f8d7 	bl	8004530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2150      	movs	r1, #80	; 0x50
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f92e 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 800438e:	e029      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	f000 f8f5 	bl	800458c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2160      	movs	r1, #96	; 0x60
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f91e 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 80043ae:	e019      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	f000 f8b7 	bl	8004530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f90e 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 80043ce:	e009      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f000 f905 	bl	80045ea <TIM_ITRx_SetConfig>
        break;
 80043e0:	e000      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80043e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a2d      	ldr	r2, [pc, #180]	; (8004520 <TIM_Base_SetConfig+0xc8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00f      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d00b      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <TIM_Base_SetConfig+0xcc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a29      	ldr	r2, [pc, #164]	; (8004528 <TIM_Base_SetConfig+0xd0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a28      	ldr	r2, [pc, #160]	; (800452c <TIM_Base_SetConfig+0xd4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <TIM_Base_SetConfig+0xc8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00f      	beq.n	80044ca <TIM_Base_SetConfig+0x72>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d00b      	beq.n	80044ca <TIM_Base_SetConfig+0x72>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a1b      	ldr	r2, [pc, #108]	; (8004524 <TIM_Base_SetConfig+0xcc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <TIM_Base_SetConfig+0x72>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a1a      	ldr	r2, [pc, #104]	; (8004528 <TIM_Base_SetConfig+0xd0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_Base_SetConfig+0x72>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <TIM_Base_SetConfig+0xd4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d108      	bne.n	80044dc <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a07      	ldr	r2, [pc, #28]	; (8004520 <TIM_Base_SetConfig+0xc8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	615a      	str	r2, [r3, #20]
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00

08004530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800455a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 030a 	bic.w	r3, r3, #10
 800456c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f023 0210 	bic.w	r2, r3, #16
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	031b      	lsls	r3, r3, #12
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	f043 0307 	orr.w	r3, r3, #7
 800460c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	609a      	str	r2, [r3, #8]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461e:	b480      	push	{r7}
 8004620:	b087      	sub	sp, #28
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004638:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	021a      	lsls	r2, r3, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	431a      	orrs	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4313      	orrs	r3, r2
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	609a      	str	r2, [r3, #8]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e04b      	b.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d00e      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d009      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10c      	bne.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00

08004728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800474c:	b084      	sub	sp, #16
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	f107 001c 	add.w	r0, r7, #28
 800475a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	2b01      	cmp	r3, #1
 8004762:	d122      	bne.n	80047aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f922 	bl	80049e8 <USB_CoreReset>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e010      	b.n	80047cc <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f916 	bl	80049e8 <USB_CoreReset>
 80047bc:	4603      	mov	r3, r0
 80047be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047d8:	b004      	add	sp, #16
 80047da:	4770      	bx	lr

080047dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f043 0201 	orr.w	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 0201 	bic.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d106      	bne.n	8004848 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	e00b      	b.n	8004860 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	e001      	b.n	8004860 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e003      	b.n	8004868 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004860:	2032      	movs	r0, #50	; 0x32
 8004862:	f7fc fb63 	bl	8000f2c <HAL_Delay>

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <USB_FlushTxFifo+0x44>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e006      	b.n	80048aa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d0f0      	beq.n	800488a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	00030d40 	.word	0x00030d40

080048b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2210      	movs	r2, #16
 80048c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <USB_FlushRxFifo+0x3c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e006      	b.n	80048ea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d0f0      	beq.n	80048ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	00030d40 	.word	0x00030d40

080048f8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	460b      	mov	r3, r1
 8004908:	71fb      	strb	r3, [r7, #7]
 800490a:	4613      	mov	r3, r2
 800490c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004916:	88bb      	ldrh	r3, [r7, #4]
 8004918:	3303      	adds	r3, #3
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	e00f      	b.n	8004944 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	031a      	lsls	r2, r3, #12
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4413      	add	r3, r2
 800492c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004930:	461a      	mov	r2, r3
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3304      	adds	r3, #4
 800493c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	3301      	adds	r3, #1
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	429a      	cmp	r2, r3
 800494a:	d3eb      	bcc.n	8004924 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004958:	b480      	push	{r7}
 800495a:	b089      	sub	sp, #36	; 0x24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	3303      	adds	r3, #3
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e00b      	b.n	8004994 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	601a      	str	r2, [r3, #0]
    pDest++;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	3304      	adds	r3, #4
 800498c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	3301      	adds	r3, #1
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d3ef      	bcc.n	800497c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800499c:	69fb      	ldr	r3, [r7, #28]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4013      	ands	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049c0:	68fb      	ldr	r3, [r7, #12]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0301 	and.w	r3, r3, #1
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr
	...

080049e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3301      	adds	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <USB_CoreReset+0x60>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e01b      	b.n	8004a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	daf2      	bge.n	80049f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f043 0201 	orr.w	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3301      	adds	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <USB_CoreReset+0x60>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e006      	b.n	8004a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d0f0      	beq.n	8004a1e <USB_CoreReset+0x36>

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	00030d40 	.word	0x00030d40

08004a4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	f107 001c 	add.w	r0, r7, #28
 8004a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004a9a:	2110      	movs	r1, #16
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fee7 	bl	8004870 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff ff08 	bl	80048b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e015      	b.n	8004ada <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	461a      	mov	r2, r3
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ac0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d3e5      	bcc.n	8004aae <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f892 	bl	8004c0e <USB_DriveVbus>

  HAL_Delay(200U);
 8004aea:	20c8      	movs	r0, #200	; 0xc8
 8004aec:	f7fc fa1e 	bl	8000f2c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004afc:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <USB_HostInit+0xf0>)
 8004b08:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <USB_HostInit+0xf4>)
 8004b0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f043 0210 	orr.w	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <USB_HostInit+0xf8>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b36:	b004      	add	sp, #16
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	00600080 	.word	0x00600080
 8004b40:	004000e0 	.word	0x004000e0
 8004b44:	a3200008 	.word	0xa3200008

08004b48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d107      	bne.n	8004b9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b90:	461a      	mov	r2, r3
 8004b92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b96:	6053      	str	r3, [r2, #4]
 8004b98:	e009      	b.n	8004bae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d106      	bne.n	8004bae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f241 7370 	movw	r3, #6000	; 0x1770
 8004bac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr

08004bba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bda:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004bea:	2064      	movs	r0, #100	; 0x64
 8004bec:	f7fc f99e 	bl	8000f2c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004bfe:	200a      	movs	r0, #10
 8004c00:	f7fc f994 	bl	8000f2c <HAL_Delay>

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c32:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <USB_DriveVbus+0x44>
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d106      	bne.n	8004c52 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c50:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d109      	bne.n	8004c72 <USB_DriveVbus+0x64>
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c70:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	0c5b      	lsrs	r3, r3, #17
 8004c9c:	f003 0303 	and.w	r3, r3, #3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	b29b      	uxth	r3, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
	...

08004ccc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	70fb      	strb	r3, [r7, #3]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	70bb      	strb	r3, [r7, #2]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d867      	bhi.n	8004dda <USB_HC_Init+0x10e>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <USB_HC_Init+0x44>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d9d 	.word	0x08004d9d
 8004d18:	08004d21 	.word	0x08004d21
 8004d1c:	08004d5f 	.word	0x08004d5f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da51      	bge.n	8004de0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5a:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d5c:	e040      	b.n	8004de0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d70:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	da34      	bge.n	8004de4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d98:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d9a:	e023      	b.n	8004de4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	461a      	mov	r2, r3
 8004daa:	f240 2325 	movw	r3, #549	; 0x225
 8004dae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004db0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da17      	bge.n	8004de8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004dd6:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004dd8:	e006      	b.n	8004de8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dde:	e004      	b.n	8004dea <USB_HC_Init+0x11e>
      break;
 8004de0:	bf00      	nop
 8004de2:	e002      	b.n	8004dea <USB_HC_Init+0x11e>
      break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <USB_HC_Init+0x11e>
      break;
 8004de8:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e04:	4313      	orrs	r3, r2
 8004e06:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	da03      	bge.n	8004e24 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	e001      	b.n	8004e28 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004e28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d103      	bne.n	8004e38 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e001      	b.n	8004e3c <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e3c:	787b      	ldrb	r3, [r7, #1]
 8004e3e:	059b      	lsls	r3, r3, #22
 8004e40:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e44:	78bb      	ldrb	r3, [r7, #2]
 8004e46:	02db      	lsls	r3, r3, #11
 8004e48:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e4c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e52:	049b      	lsls	r3, r3, #18
 8004e54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	0159      	lsls	r1, r3, #5
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e78:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004e7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d10f      	bne.n	8004ea2 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ea0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop

08004eb0 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	785b      	ldrb	r3, [r3, #1]
 8004ec2:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ec8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d018      	beq.n	8004f04 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	8912      	ldrh	r2, [r2, #8]
 8004eda:	4413      	add	r3, r2
 8004edc:	3b01      	subs	r3, #1
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	8912      	ldrh	r2, [r2, #8]
 8004ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ee6:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8004ee8:	8bfa      	ldrh	r2, [r7, #30]
 8004eea:	8a7b      	ldrh	r3, [r7, #18]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d90b      	bls.n	8004f08 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8004ef0:	8a7b      	ldrh	r3, [r7, #18]
 8004ef2:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004ef4:	8bfb      	ldrh	r3, [r7, #30]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	8912      	ldrh	r2, [r2, #8]
 8004efa:	fb02 f203 	mul.w	r2, r2, r3
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	611a      	str	r2, [r3, #16]
 8004f02:	e001      	b.n	8004f08 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8004f04:	2301      	movs	r3, #1
 8004f06:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	78db      	ldrb	r3, [r3, #3]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d006      	beq.n	8004f1e <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004f10:	8bfb      	ldrh	r3, [r7, #30]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	8912      	ldrh	r2, [r2, #8]
 8004f16:	fb02 f203 	mul.w	r2, r2, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f26:	8bfb      	ldrh	r3, [r7, #30]
 8004f28:	04d9      	lsls	r1, r3, #19
 8004f2a:	4b5f      	ldr	r3, [pc, #380]	; (80050a8 <USB_HC_StartXfer+0x1f8>)
 8004f2c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f2e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	7a9b      	ldrb	r3, [r3, #10]
 8004f34:	075b      	lsls	r3, r3, #29
 8004f36:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f3a:	6979      	ldr	r1, [r7, #20]
 8004f3c:	0148      	lsls	r0, r1, #5
 8004f3e:	69b9      	ldr	r1, [r7, #24]
 8004f40:	4401      	add	r1, r0
 8004f42:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f46:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f48:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	7c7b      	ldrb	r3, [r7, #17]
 8004f92:	075b      	lsls	r3, r3, #29
 8004f94:	6979      	ldr	r1, [r7, #20]
 8004f96:	0148      	lsls	r0, r1, #5
 8004f98:	69b9      	ldr	r1, [r7, #24]
 8004f9a:	4401      	add	r1, r0
 8004f9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a3e      	ldr	r2, [pc, #248]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8004fb4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fb6:	4b3d      	ldr	r3, [pc, #244]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fbe:	4a3b      	ldr	r2, [pc, #236]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8004fc0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	78db      	ldrb	r3, [r3, #3]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d006      	beq.n	8004fd8 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004fca:	4b38      	ldr	r3, [pc, #224]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd2:	4a36      	ldr	r2, [pc, #216]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e005      	b.n	8004fe4 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004fd8:	4b34      	ldr	r3, [pc, #208]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fe0:	4a32      	ldr	r2, [pc, #200]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8004fe2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fe4:	4b31      	ldr	r3, [pc, #196]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fec:	4a2f      	ldr	r2, [pc, #188]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8004fee:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <USB_HC_StartXfer+0x1fc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	78db      	ldrb	r3, [r3, #3]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d148      	bne.n	800509e <USB_HC_StartXfer+0x1ee>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d044      	beq.n	800509e <USB_HC_StartXfer+0x1ee>
  {
    switch (hc->ep_type)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	79db      	ldrb	r3, [r3, #7]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d831      	bhi.n	8005080 <USB_HC_StartXfer+0x1d0>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <USB_HC_StartXfer+0x174>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005035 	.word	0x08005035
 8005028:	08005059 	.word	0x08005059
 800502c:	08005035 	.word	0x08005035
 8005030:	08005059 	.word	0x08005059
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	3303      	adds	r3, #3
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800503e:	89fa      	ldrh	r2, [r7, #14]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	b29b      	uxth	r3, r3
 8005046:	429a      	cmp	r2, r3
 8005048:	d91c      	bls.n	8005084 <USB_HC_StartXfer+0x1d4>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	619a      	str	r2, [r3, #24]
        }
        break;
 8005056:	e015      	b.n	8005084 <USB_HC_StartXfer+0x1d4>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	3303      	adds	r3, #3
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005062:	89fa      	ldrh	r2, [r7, #14]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	b29b      	uxth	r3, r3
 800506e:	429a      	cmp	r2, r3
 8005070:	d90a      	bls.n	8005088 <USB_HC_StartXfer+0x1d8>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	619a      	str	r2, [r3, #24]
        }
        break;
 800507e:	e003      	b.n	8005088 <USB_HC_StartXfer+0x1d8>

      default:
        break;
 8005080:	bf00      	nop
 8005082:	e002      	b.n	800508a <USB_HC_StartXfer+0x1da>
        break;
 8005084:	bf00      	nop
 8005086:	e000      	b.n	800508a <USB_HC_StartXfer+0x1da>
        break;
 8005088:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68d9      	ldr	r1, [r3, #12]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	785a      	ldrb	r2, [r3, #1]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	b29b      	uxth	r3, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fc2d 	bl	80048f8 <USB_WritePacket>
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	1ff80000 	.word	0x1ff80000
 80050ac:	200000b4 	.word	0x200000b4

080050b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	b29b      	uxth	r3, r3
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	0c9b      	lsrs	r3, r3, #18
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <USB_HC_Halt+0x3a>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d16c      	bne.n	80051e4 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	440a      	add	r2, r1
 8005120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005128:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d143      	bne.n	80051be <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	440a      	add	r2, r1
 800514c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005154:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	440a      	add	r2, r1
 800516c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005174:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	440a      	add	r2, r1
 800518c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005190:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005194:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	3301      	adds	r3, #1
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a2:	d81d      	bhi.n	80051e0 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ba:	d0ec      	beq.n	8005196 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051bc:	e080      	b.n	80052c0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051dc:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051de:	e06f      	b.n	80052c0 <USB_HC_Halt+0x1f0>
          break;
 80051e0:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051e2:	e06d      	b.n	80052c0 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005202:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d143      	bne.n	800529c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	440a      	add	r2, r1
 800522a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005232:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	440a      	add	r2, r1
 800524a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800524e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005252:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	440a      	add	r2, r1
 800526a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800526e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005272:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3301      	adds	r3, #1
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005280:	d81d      	bhi.n	80052be <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4413      	add	r3, r2
 800528a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005298:	d0ec      	beq.n	8005274 <USB_HC_Halt+0x1a4>
 800529a:	e011      	b.n	80052c0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e000      	b.n	80052c0 <USB_HC_Halt+0x1f0>
          break;
 80052be:	bf00      	nop
    }
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr

080052cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff fa8d 	bl	80047fc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80052e2:	2110      	movs	r1, #16
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff fac3 	bl	8004870 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fae4 	bl	80048b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	e01f      	b.n	8005336 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005314:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800531c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	461a      	mov	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	3301      	adds	r3, #1
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b0f      	cmp	r3, #15
 800533a:	d9dc      	bls.n	80052f6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	e034      	b.n	80053ac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005358:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005360:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005368:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	461a      	mov	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	3301      	adds	r3, #1
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005388:	d80c      	bhi.n	80053a4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a0:	d0ec      	beq.n	800537c <USB_StopHost+0xb0>
 80053a2:	e000      	b.n	80053a6 <USB_StopHost+0xda>
        break;
 80053a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3301      	adds	r3, #1
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b0f      	cmp	r3, #15
 80053b0:	d9c7      	bls.n	8005342 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b8:	461a      	mov	r2, r3
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fa07 	bl	80047dc <USB_EnableGlobalInt>

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b08b      	sub	sp, #44	; 0x2c
 80053dc:	af04      	add	r7, sp, #16
 80053de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80053ea:	7919      	ldrb	r1, [r3, #4]
 80053ec:	23ff      	movs	r3, #255	; 0xff
 80053ee:	2201      	movs	r2, #1
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 ff55 	bl	80062a0 <USBH_FindInterface>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80053fa:	7dbb      	ldrb	r3, [r7, #22]
 80053fc:	2bff      	cmp	r3, #255	; 0xff
 80053fe:	d002      	beq.n	8005406 <USBH_HID_InterfaceInit+0x2e>
 8005400:	7dbb      	ldrb	r3, [r7, #22]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d901      	bls.n	800540a <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005406:	2302      	movs	r3, #2
 8005408:	e108      	b.n	800561c <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 800540a:	7dbb      	ldrb	r3, [r7, #22]
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 ff2b 	bl	800626a <USBH_SelectInterface>
 8005414:	4603      	mov	r3, r0
 8005416:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8005418:	7d7b      	ldrb	r3, [r7, #21]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800541e:	2302      	movs	r3, #2
 8005420:	e0fc      	b.n	800561c <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005428:	2034      	movs	r0, #52	; 0x34
 800542a:	f002 fb51 	bl	8007ad0 <malloc>
 800542e:	4603      	mov	r3, r0
 8005430:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8005442:	2302      	movs	r3, #2
 8005444:	e0ea      	b.n	800561c <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8005446:	2234      	movs	r2, #52	; 0x34
 8005448:	2100      	movs	r1, #0
 800544a:	6938      	ldr	r0, [r7, #16]
 800544c:	f002 fb50 	bl	8007af0 <memset>

  HID_Handle->state = HID_ERROR;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2207      	movs	r2, #7
 8005454:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005456:	7dbb      	ldrb	r3, [r7, #22]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	211a      	movs	r1, #26
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	4413      	add	r3, r2
 8005462:	f203 3347 	addw	r3, r3, #839	; 0x347
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d103      	bne.n	8005474 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4a6d      	ldr	r2, [pc, #436]	; (8005624 <USBH_HID_InterfaceInit+0x24c>)
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
 8005472:	e010      	b.n	8005496 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8005474:	7dbb      	ldrb	r3, [r7, #22]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	211a      	movs	r1, #26
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	4413      	add	r3, r2
 8005480:	f203 3347 	addw	r3, r3, #839	; 0x347
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d103      	bne.n	8005492 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4a66      	ldr	r2, [pc, #408]	; (8005628 <USBH_HID_InterfaceInit+0x250>)
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
 8005490:	e001      	b.n	8005496 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8005492:	2302      	movs	r3, #2
 8005494:	e0c2      	b.n	800561c <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2200      	movs	r2, #0
 800549a:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2200      	movs	r2, #0
 80054a0:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054a2:	7dbb      	ldrb	r3, [r7, #22]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	211a      	movs	r1, #26
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80054b2:	781a      	ldrb	r2, [r3, #0]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054b8:	7dbb      	ldrb	r3, [r7, #22]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	211a      	movs	r1, #26
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054c8:	881a      	ldrh	r2, [r3, #0]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80054ce:	7dbb      	ldrb	r3, [r7, #22]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	211a      	movs	r1, #26
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	4413      	add	r3, r2
 80054da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	8b9b      	ldrh	r3, [r3, #28]
 80054ea:	2b09      	cmp	r3, #9
 80054ec:	d802      	bhi.n	80054f4 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	220a      	movs	r2, #10
 80054f2:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80054f4:	7dbb      	ldrb	r3, [r7, #22]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	211a      	movs	r1, #26
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b02      	cmp	r3, #2
 8005508:	bf28      	it	cs
 800550a:	2302      	movcs	r3, #2
 800550c:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]
 8005512:	e07d      	b.n	8005610 <USBH_HID_InterfaceInit+0x238>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8005514:	7dbb      	ldrb	r3, [r7, #22]
 8005516:	7df9      	ldrb	r1, [r7, #23]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	3101      	adds	r1, #1
 800551c:	00c9      	lsls	r1, r1, #3
 800551e:	201a      	movs	r0, #26
 8005520:	fb00 f303 	mul.w	r3, r0, r3
 8005524:	440b      	add	r3, r1
 8005526:	4413      	add	r3, r2
 8005528:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	b25b      	sxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	da35      	bge.n	80055a0 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005534:	7dbb      	ldrb	r3, [r7, #22]
 8005536:	7df9      	ldrb	r1, [r7, #23]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	3101      	adds	r1, #1
 800553c:	00c9      	lsls	r1, r1, #3
 800553e:	201a      	movs	r0, #26
 8005540:	fb00 f303 	mul.w	r3, r0, r3
 8005544:	440b      	add	r3, r1
 8005546:	4413      	add	r3, r2
 8005548:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	791b      	ldrb	r3, [r3, #4]
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 ff94 	bl	8007486 <USBH_AllocPipe>
 800555e:	4603      	mov	r3, r0
 8005560:	461a      	mov	r2, r3
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	7859      	ldrb	r1, [r3, #1]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	7918      	ldrb	r0, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	8b12      	ldrh	r2, [r2, #24]
 800557e:	9202      	str	r2, [sp, #8]
 8005580:	2203      	movs	r2, #3
 8005582:	9201      	str	r2, [sp, #4]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	4623      	mov	r3, r4
 8005588:	4602      	mov	r2, r0
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 ff4c 	bl	8007428 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	2200      	movs	r2, #0
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f002 fa0d 	bl	80079b8 <USBH_LL_SetToggle>
 800559e:	e034      	b.n	800560a <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80055a0:	7dbb      	ldrb	r3, [r7, #22]
 80055a2:	7df9      	ldrb	r1, [r7, #23]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	3101      	adds	r1, #1
 80055a8:	00c9      	lsls	r1, r1, #3
 80055aa:	201a      	movs	r0, #26
 80055ac:	fb00 f303 	mul.w	r3, r0, r3
 80055b0:	440b      	add	r3, r1
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	78db      	ldrb	r3, [r3, #3]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 ff5e 	bl	8007486 <USBH_AllocPipe>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	7819      	ldrb	r1, [r3, #0]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	78d8      	ldrb	r0, [r3, #3]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	8b12      	ldrh	r2, [r2, #24]
 80055ea:	9202      	str	r2, [sp, #8]
 80055ec:	2203      	movs	r2, #3
 80055ee:	9201      	str	r2, [sp, #4]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	4623      	mov	r3, r4
 80055f4:	4602      	mov	r2, r0
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 ff16 	bl	8007428 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f002 f9d7 	bl	80079b8 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	3301      	adds	r3, #1
 800560e:	75fb      	strb	r3, [r7, #23]
 8005610:	7dfa      	ldrb	r2, [r7, #23]
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	429a      	cmp	r2, r3
 8005616:	f4ff af7d 	bcc.w	8005514 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	bd90      	pop	{r4, r7, pc}
 8005624:	08005cfd 	.word	0x08005cfd
 8005628:	08005f4d 	.word	0x08005f4d

0800562c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00e      	beq.n	8005664 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 ff0a 	bl	8007466 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 ff34 	bl	80074c6 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00e      	beq.n	800568a <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 fef7 	bl	8007466 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 ff21 	bl	80074c6 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	4618      	mov	r0, r3
 80056a0:	f002 fa1e 	bl	8007ae0 <free>
    phost->pActiveClass->pData = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056aa:	2200      	movs	r2, #0
 80056ac:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	795b      	ldrb	r3, [r3, #5]
 80056d6:	2b05      	cmp	r3, #5
 80056d8:	d858      	bhi.n	800578c <USBH_HID_ClassRequest+0xd4>
 80056da:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <USBH_HID_ClassRequest+0x28>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	080056f9 	.word	0x080056f9
 80056e4:	0800578d 	.word	0x0800578d
 80056e8:	08005723 	.word	0x08005723
 80056ec:	080056f9 	.word	0x080056f9
 80056f0:	0800573d 	.word	0x0800573d
 80056f4:	08005767 	.word	0x08005767
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      /* Get HID Desc */
      if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE) == USBH_OK)
 80056f8:	2109      	movs	r1, #9
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f951 	bl	80059a2 <USBH_HID_GetHIDDescriptor>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d144      	bne.n	8005790 <USBH_HID_ClassRequest+0xd8>
      {

        USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f000 f9d7 	bl	8005ac8 <USBH_HID_ParseHIDDesc>
        HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2202      	movs	r2, #2
 800571e:	715a      	strb	r2, [r3, #5]
      }

      break;
 8005720:	e036      	b.n	8005790 <USBH_HID_ClassRequest+0xd8>
    case HID_REQ_GET_REPORT_DESC:


      /* Get Report Desc */
      if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f921 	bl	8005970 <USBH_HID_GetHIDReportDescriptor>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d12f      	bne.n	8005794 <USBH_HID_ClassRequest+0xdc>
      {
        /* The descriptor is available in phost->device.Data */

        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2204      	movs	r2, #4
 8005738:	715a      	strb	r2, [r3, #5]
      }

      break;
 800573a:	e02b      	b.n	8005794 <USBH_HID_ClassRequest+0xdc>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800573c:	2200      	movs	r2, #0
 800573e:	2100      	movs	r1, #0
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f947 	bl	80059d4 <USBH_HID_SetIdle>
 8005746:	4603      	mov	r3, r0
 8005748:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800574a:	7bbb      	ldrb	r3, [r7, #14]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2205      	movs	r2, #5
 8005754:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8005756:	e01f      	b.n	8005798 <USBH_HID_ClassRequest+0xe0>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	2b03      	cmp	r3, #3
 800575c:	d11c      	bne.n	8005798 <USBH_HID_ClassRequest+0xe0>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2205      	movs	r2, #5
 8005762:	715a      	strb	r2, [r3, #5]
      break;
 8005764:	e018      	b.n	8005798 <USBH_HID_ClassRequest+0xe0>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      if (USBH_HID_SetProtocol(phost, 0U) == USBH_OK)
 8005766:	2100      	movs	r1, #0
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f987 	bl	8005a7c <USBH_HID_SetProtocol>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d113      	bne.n	800579c <USBH_HID_ClassRequest+0xe4>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2201      	movs	r2, #1
 8005778:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8005780:	2102      	movs	r1, #2
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
        status = USBH_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800578a:	e007      	b.n	800579c <USBH_HID_ClassRequest+0xe4>

    case HID_REQ_IDLE:
    default:
      break;
 800578c:	bf00      	nop
 800578e:	e006      	b.n	800579e <USBH_HID_ClassRequest+0xe6>
      break;
 8005790:	bf00      	nop
 8005792:	e004      	b.n	800579e <USBH_HID_ClassRequest+0xe6>
      break;
 8005794:	bf00      	nop
 8005796:	e002      	b.n	800579e <USBH_HID_ClassRequest+0xe6>
      break;
 8005798:	bf00      	nop
 800579a:	e000      	b.n	800579e <USBH_HID_ClassRequest+0xe6>
      break;
 800579c:	bf00      	nop
  }

  return status;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	789b      	ldrb	r3, [r3, #2]
 80057c2:	2b06      	cmp	r3, #6
 80057c4:	f200 80a9 	bhi.w	800591a <USBH_HID_Process+0x172>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <USBH_HID_Process+0x28>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	0800591b 	.word	0x0800591b
 80057dc:	0800591b 	.word	0x0800591b
 80057e0:	0800586d 	.word	0x0800586d
 80057e4:	08005857 	.word	0x08005857
 80057e8:	0800589b 	.word	0x0800589b
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2201      	movs	r2, #1
 80057f8:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80057fa:	e093      	b.n	8005924 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	8b1b      	ldrh	r3, [r3, #24]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	2200      	movs	r2, #0
 800580c:	2101      	movs	r1, #1
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f908 	bl	8005a24 <USBH_HID_GetReport>
 8005814:	4603      	mov	r3, r0
 8005816:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2205      	movs	r2, #5
 8005822:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005824:	e07e      	b.n	8005924 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d105      	bne.n	8005838 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2201      	movs	r2, #1
 8005830:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	75fb      	strb	r3, [r7, #23]
      break;
 8005836:	e075      	b.n	8005924 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	2b03      	cmp	r3, #3
 800583c:	d105      	bne.n	800584a <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2205      	movs	r2, #5
 8005842:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	75fb      	strb	r3, [r7, #23]
      break;
 8005848:	e06c      	b.n	8005924 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2207      	movs	r2, #7
 800584e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005850:	2302      	movs	r3, #2
 8005852:	75fb      	strb	r3, [r7, #23]
      break;
 8005854:	e066      	b.n	8005924 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d05c      	beq.n	800591e <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2204      	movs	r2, #4
 8005868:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800586a:	e058      	b.n	800591e <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005874:	b2da      	uxtb	r2, r3
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fdb5 	bl	80073ea <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2206      	movs	r2, #6
 8005884:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8005898:	e044      	b.n	8005924 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f002 f85f 	bl	8007964 <USBH_LL_GetURBState>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d120      	bne.n	80058ee <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 ffc4 	bl	8007840 <USBH_LL_GetLastXferSize>
 80058b8:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d12e      	bne.n	8005922 <USBH_HID_Process+0x17a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02b      	beq.n	8005922 <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f103 0008 	add.w	r0, r3, #8
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6959      	ldr	r1, [r3, #20]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	8b1b      	ldrh	r3, [r3, #24]
 80058d8:	461a      	mov	r2, r3
 80058da:	f000 f9bb 	bl	8005c54 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fa fe1e 	bl	8000528 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 80058ec:	e019      	b.n	8005922 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f002 f835 	bl	8007964 <USBH_LL_GetURBState>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d110      	bne.n	8005922 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	7e9b      	ldrb	r3, [r3, #26]
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 f983 	bl	8006c12 <USBH_ClrFeature>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d107      	bne.n	8005922 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2204      	movs	r2, #4
 8005916:	709a      	strb	r2, [r3, #2]
      break;
 8005918:	e003      	b.n	8005922 <USBH_HID_Process+0x17a>

    default:
      break;
 800591a:	bf00      	nop
 800591c:	e002      	b.n	8005924 <USBH_HID_Process+0x17c>
      break;
 800591e:	bf00      	nop
 8005920:	e000      	b.n	8005924 <USBH_HID_Process+0x17c>
      break;
 8005922:	bf00      	nop
  }

  return status;
 8005924:	7dfb      	ldrb	r3, [r7, #23]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop

08005930 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	789b      	ldrb	r3, [r3, #2]
 8005946:	2b06      	cmp	r3, #6
 8005948:	d10c      	bne.n	8005964 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	8b92      	ldrh	r2, [r2, #28]
 800595a:	4293      	cmp	r3, r2
 800595c:	d302      	bcc.n	8005964 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2204      	movs	r2, #4
 8005962:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr

08005970 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af02      	add	r7, sp, #8
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005982:	887b      	ldrh	r3, [r7, #2]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800598c:	2101      	movs	r1, #1
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f001 f89f 	bl	8006ad2 <USBH_GetDescriptor>
 8005994:	4603      	mov	r3, r0
 8005996:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
                                             uint16_t length)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af02      	add	r7, sp, #8
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	460b      	mov	r3, r1
 80059ac:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID,
                              phost->device.Data,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80059b4:	887b      	ldrh	r3, [r7, #2]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	4613      	mov	r3, r2
 80059ba:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 80059be:	2101      	movs	r1, #1
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 f886 	bl	8006ad2 <USBH_GetDescriptor>
 80059c6:	4603      	mov	r3, r0
 80059c8:	73fb      	strb	r3, [r7, #15]
                              length);

  return status;
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	70fb      	strb	r3, [r7, #3]
 80059e0:	4613      	mov	r3, r2
 80059e2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2221      	movs	r2, #33	; 0x21
 80059e8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	220a      	movs	r2, #10
 80059ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	78bb      	ldrb	r3, [r7, #2]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4313      	orrs	r3, r2
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005a10:	2200      	movs	r2, #0
 8005a12:	2100      	movs	r1, #0
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 fad7 	bl	8006fc8 <USBH_CtlReq>
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	72fb      	strb	r3, [r7, #11]
 8005a32:	4613      	mov	r3, r2
 8005a34:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	22a1      	movs	r2, #161	; 0xa1
 8005a3a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8005a42:	7afb      	ldrb	r3, [r7, #11]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	7abb      	ldrb	r3, [r7, #10]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8005a5c:	7e3b      	ldrb	r3, [r7, #24]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8005a64:	7e3b      	ldrb	r3, [r7, #24]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f001 faab 	bl	8006fc8 <USBH_CtlReq>
 8005a72:	4603      	mov	r3, r0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2221      	movs	r2, #33	; 0x21
 8005a8c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	220b      	movs	r2, #11
 8005a92:	745a      	strb	r2, [r3, #17]
  if (protocol)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	825a      	strh	r2, [r3, #18]
 8005aa0:	e002      	b.n	8005aa8 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 fa85 	bl	8006fc8 <USBH_CtlReq>
 8005abe:	4603      	mov	r3, r0

}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]

  desc->bLength                  = *(uint8_t *)(buf + 0);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t *)(buf + 1);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	785a      	ldrb	r2, [r3, #1]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16(buf + 2);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	3303      	adds	r3, #3
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	4313      	orrs	r3, r2
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t *)(buf + 4);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	791a      	ldrb	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t *)(buf + 5);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	795a      	ldrb	r2, [r3, #5]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t *)(buf + 6);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	799a      	ldrb	r2, [r3, #6]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16(buf + 7);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	3307      	adds	r3, #7
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	811a      	strh	r2, [r3, #8]
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr

08005b3c <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8005b44:	23ff      	movs	r3, #255	; 0xff
 8005b46:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b0b      	cmp	r3, #11
 8005b50:	d117      	bne.n	8005b82 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005b58:	4619      	mov	r1, r3
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	231a      	movs	r3, #26
 8005b5e:	fb03 f301 	mul.w	r3, r3, r1
 8005b62:	4413      	add	r3, r2
 8005b64:	f203 3347 	addw	r3, r3, #839	; 0x347
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d102      	bne.n	8005b78 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8005b72:	2302      	movs	r3, #2
 8005b74:	73fb      	strb	r3, [r7, #15]
 8005b76:	e004      	b.n	8005b82 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8005b78:	7bbb      	ldrb	r3, [r7, #14]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d101      	bne.n	8005b82 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr

08005b8e <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	88fa      	ldrh	r2, [r7, #6]
 8005bb2:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	601a      	str	r2, [r3, #0]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	7a9b      	ldrb	r3, [r3, #10]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d131      	bne.n	8005c42 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005be4:	2300      	movs	r3, #0
 8005be6:	82fb      	strh	r3, [r7, #22]
 8005be8:	e027      	b.n	8005c3a <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	88da      	ldrh	r2, [r3, #6]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	889b      	ldrh	r3, [r3, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d019      	beq.n	8005c2a <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	88d2      	ldrh	r2, [r2, #6]
 8005bfe:	441a      	add	r2, r3
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1c59      	adds	r1, r3, #1
 8005c04:	6139      	str	r1, [r7, #16]
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	88db      	ldrh	r3, [r3, #6]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	88da      	ldrh	r2, [r3, #6]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	891b      	ldrh	r3, [r3, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d108      	bne.n	8005c34 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	80da      	strh	r2, [r3, #6]
 8005c28:	e004      	b.n	8005c34 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	729a      	strb	r2, [r3, #10]
        return i;
 8005c30:	8afb      	ldrh	r3, [r7, #22]
 8005c32:	e00a      	b.n	8005c4a <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8005c34:	8afb      	ldrh	r3, [r7, #22]
 8005c36:	3301      	adds	r3, #1
 8005c38:	82fb      	strh	r3, [r7, #22]
 8005c3a:	8afa      	ldrh	r2, [r7, #22]
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d3d3      	bcc.n	8005bea <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005c48:	88fb      	ldrh	r3, [r7, #6]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	7a9b      	ldrb	r3, [r3, #10]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d13c      	bne.n	8005ce8 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005c74:	2300      	movs	r3, #0
 8005c76:	82fb      	strh	r3, [r7, #22]
 8005c78:	e032      	b.n	8005ce0 <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	889b      	ldrh	r3, [r3, #4]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	88d2      	ldrh	r2, [r2, #6]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00a      	beq.n	8005c9e <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	889b      	ldrh	r3, [r3, #4]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d108      	bne.n	8005ca8 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88db      	ldrh	r3, [r3, #6]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d104      	bne.n	8005ca8 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	729a      	strb	r2, [r3, #10]
        return i;
 8005ca4:	8afb      	ldrh	r3, [r7, #22]
 8005ca6:	e023      	b.n	8005cf0 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	613a      	str	r2, [r7, #16]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	8889      	ldrh	r1, [r1, #4]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	889b      	ldrh	r3, [r3, #4]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	889a      	ldrh	r2, [r3, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	891b      	ldrh	r3, [r3, #8]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d102      	bne.n	8005cda <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8005cda:	8afb      	ldrh	r3, [r7, #22]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	82fb      	strh	r3, [r7, #22]
 8005ce0:	8afa      	ldrh	r2, [r7, #22]
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3c8      	bcc.n	8005c7a <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005cee:	88fb      	ldrh	r3, [r7, #6]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr
	...

08005cfc <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8005d0e:	4b24      	ldr	r3, [pc, #144]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	709a      	strb	r2, [r3, #2]
 8005d14:	4b22      	ldr	r3, [pc, #136]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d16:	789a      	ldrb	r2, [r3, #2]
 8005d18:	4b21      	ldr	r3, [pc, #132]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d1a:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8005d1c:	4b20      	ldr	r3, [pc, #128]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	711a      	strb	r2, [r3, #4]
 8005d22:	4b1f      	ldr	r3, [pc, #124]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d24:	791a      	ldrb	r2, [r3, #4]
 8005d26:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d28:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8005d2a:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	719a      	strb	r2, [r3, #6]
 8005d30:	4b1b      	ldr	r3, [pc, #108]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d32:	799a      	ldrb	r2, [r3, #6]
 8005d34:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d36:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8005d38:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	721a      	strb	r2, [r3, #8]
 8005d3e:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d40:	7a1a      	ldrb	r2, [r3, #8]
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <USBH_HID_KeybdInit+0xa4>)
 8005d44:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e00c      	b.n	8005d66 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8005d4c:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <USBH_HID_KeybdInit+0xa8>)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2100      	movs	r1, #0
 8005d52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8005d56:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <USBH_HID_KeybdInit+0xac>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d9ef      	bls.n	8005d4c <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	8b1b      	ldrh	r3, [r3, #24]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d902      	bls.n	8005d7a <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2208      	movs	r2, #8
 8005d78:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <USBH_HID_KeybdInit+0xac>)
 8005d7e:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f103 0008 	add.w	r0, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d8c:	2250      	movs	r2, #80	; 0x50
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f7ff fefd 	bl	8005b8e <USBH_HID_FifoInit>

  return USBH_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000200 	.word	0x20000200
 8005da4:	200001f0 	.word	0x200001f0
 8005da8:	200001f8 	.word	0x200001f8

08005dac <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f80d 	bl	8005dd4 <USBH_HID_KeybdDecode>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8005dc0:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <USBH_HID_GetKeybdInfo+0x24>)
 8005dc2:	e000      	b.n	8005dc6 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8005dc4:	2300      	movs	r3, #0
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000200 	.word	0x20000200

08005dd4 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	8b1b      	ldrh	r3, [r3, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8005dee:	2302      	movs	r3, #2
 8005df0:	e066      	b.n	8005ec0 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f103 0008 	add.w	r0, r3, #8
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	8b1b      	ldrh	r3, [r3, #24]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4932      	ldr	r1, [pc, #200]	; (8005ec8 <USBH_HID_KeybdDecode+0xf4>)
 8005e00:	f7ff fee0 	bl	8005bc4 <USBH_HID_FifoRead>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	8b1b      	ldrh	r3, [r3, #24]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d156      	bne.n	8005ebe <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8005e10:	2100      	movs	r1, #0
 8005e12:	482e      	ldr	r0, [pc, #184]	; (8005ecc <USBH_HID_KeybdDecode+0xf8>)
 8005e14:	f000 f8e4 	bl	8005fe0 <HID_ReadItem>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	4b2c      	ldr	r3, [pc, #176]	; (8005ed0 <USBH_HID_KeybdDecode+0xfc>)
 8005e1e:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8005e20:	2100      	movs	r1, #0
 8005e22:	482c      	ldr	r0, [pc, #176]	; (8005ed4 <USBH_HID_KeybdDecode+0x100>)
 8005e24:	f000 f8dc 	bl	8005fe0 <HID_ReadItem>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <USBH_HID_KeybdDecode+0xfc>)
 8005e2e:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8005e30:	2100      	movs	r1, #0
 8005e32:	4829      	ldr	r0, [pc, #164]	; (8005ed8 <USBH_HID_KeybdDecode+0x104>)
 8005e34:	f000 f8d4 	bl	8005fe0 <HID_ReadItem>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <USBH_HID_KeybdDecode+0xfc>)
 8005e3e:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8005e40:	2100      	movs	r1, #0
 8005e42:	4826      	ldr	r0, [pc, #152]	; (8005edc <USBH_HID_KeybdDecode+0x108>)
 8005e44:	f000 f8cc 	bl	8005fe0 <HID_ReadItem>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <USBH_HID_KeybdDecode+0xfc>)
 8005e4e:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8005e50:	2100      	movs	r1, #0
 8005e52:	4823      	ldr	r0, [pc, #140]	; (8005ee0 <USBH_HID_KeybdDecode+0x10c>)
 8005e54:	f000 f8c4 	bl	8005fe0 <HID_ReadItem>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	4b1c      	ldr	r3, [pc, #112]	; (8005ed0 <USBH_HID_KeybdDecode+0xfc>)
 8005e5e:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8005e60:	2100      	movs	r1, #0
 8005e62:	4820      	ldr	r0, [pc, #128]	; (8005ee4 <USBH_HID_KeybdDecode+0x110>)
 8005e64:	f000 f8bc 	bl	8005fe0 <HID_ReadItem>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	4b18      	ldr	r3, [pc, #96]	; (8005ed0 <USBH_HID_KeybdDecode+0xfc>)
 8005e6e:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8005e70:	2100      	movs	r1, #0
 8005e72:	481d      	ldr	r0, [pc, #116]	; (8005ee8 <USBH_HID_KeybdDecode+0x114>)
 8005e74:	f000 f8b4 	bl	8005fe0 <HID_ReadItem>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <USBH_HID_KeybdDecode+0xfc>)
 8005e7e:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8005e80:	2100      	movs	r1, #0
 8005e82:	481a      	ldr	r0, [pc, #104]	; (8005eec <USBH_HID_KeybdDecode+0x118>)
 8005e84:	f000 f8ac 	bl	8005fe0 <HID_ReadItem>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	4b10      	ldr	r3, [pc, #64]	; (8005ed0 <USBH_HID_KeybdDecode+0xfc>)
 8005e8e:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8005e90:	2300      	movs	r3, #0
 8005e92:	73fb      	strb	r3, [r7, #15]
 8005e94:	e00e      	b.n	8005eb4 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4815      	ldr	r0, [pc, #84]	; (8005ef0 <USBH_HID_KeybdDecode+0x11c>)
 8005e9c:	f000 f8a0 	bl	8005fe0 <HID_ReadItem>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	b2d1      	uxtb	r1, r2
 8005ea6:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <USBH_HID_KeybdDecode+0xfc>)
 8005ea8:	4413      	add	r3, r2
 8005eaa:	460a      	mov	r2, r1
 8005eac:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d9ed      	bls.n	8005e96 <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e000      	b.n	8005ec0 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 8005ebe:	2302      	movs	r3, #2
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200001f0 	.word	0x200001f0
 8005ecc:	08007cc4 	.word	0x08007cc4
 8005ed0:	20000200 	.word	0x20000200
 8005ed4:	08007ce4 	.word	0x08007ce4
 8005ed8:	08007d04 	.word	0x08007d04
 8005edc:	08007d24 	.word	0x08007d24
 8005ee0:	08007d44 	.word	0x08007d44
 8005ee4:	08007d64 	.word	0x08007d64
 8005ee8:	08007d84 	.word	0x08007d84
 8005eec:	08007da4 	.word	0x08007da4
 8005ef0:	08007dc4 	.word	0x08007dc4

08005ef4 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift == 1U) || (info->rshift))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	789b      	ldrb	r3, [r3, #2]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d003      	beq.n	8005f0c <USBH_HID_GetASCIICode+0x18>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	799b      	ldrb	r3, [r3, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d009      	beq.n	8005f20 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	7a5b      	ldrb	r3, [r3, #9]
 8005f10:	461a      	mov	r2, r3
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <USBH_HID_GetASCIICode+0x4c>)
 8005f14:	5c9b      	ldrb	r3, [r3, r2]
 8005f16:	461a      	mov	r2, r3
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <USBH_HID_GetASCIICode+0x50>)
 8005f1a:	5c9b      	ldrb	r3, [r3, r2]
 8005f1c:	73fb      	strb	r3, [r7, #15]
 8005f1e:	e008      	b.n	8005f32 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7a5b      	ldrb	r3, [r3, #9]
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <USBH_HID_GetASCIICode+0x4c>)
 8005f28:	5c9b      	ldrb	r3, [r3, r2]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <USBH_HID_GetASCIICode+0x54>)
 8005f2e:	5c9b      	ldrb	r3, [r3, r2]
 8005f30:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	08007eec 	.word	0x08007eec
 8005f44:	08007e68 	.word	0x08007e68
 8005f48:	08007de4 	.word	0x08007de4

08005f4c <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8005f5e:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <USBH_HID_MouseInit+0x88>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8005f64:	4b1b      	ldr	r3, [pc, #108]	; (8005fd4 <USBH_HID_MouseInit+0x88>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <USBH_HID_MouseInit+0x88>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8005f70:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <USBH_HID_MouseInit+0x88>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8005f76:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <USBH_HID_MouseInit+0x88>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e00c      	b.n	8005f9c <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8005f82:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <USBH_HID_MouseInit+0x8c>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2100      	movs	r1, #0
 8005f88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <USBH_HID_MouseInit+0x90>)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2100      	movs	r1, #0
 8005f92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d9ef      	bls.n	8005f82 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	8b1b      	ldrh	r3, [r3, #24]
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d902      	bls.n	8005fb0 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2208      	movs	r2, #8
 8005fae:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <USBH_HID_MouseInit+0x90>)
 8005fb4:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f103 0008 	add.w	r0, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005fc2:	2250      	movs	r2, #80	; 0x50
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f7ff fde2 	bl	8005b8e <USBH_HID_FifoInit>

  return USBH_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000210 	.word	0x20000210
 8005fd8:	20000218 	.word	0x20000218
 8005fdc:	20000220 	.word	0x20000220

08005fe0 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	; 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	7a1b      	ldrb	r3, [r3, #8]
 8005ffe:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	7a5b      	ldrb	r3, [r3, #9]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01a      	beq.n	800603e <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	7a5b      	ldrb	r3, [r3, #9]
 800600c:	78fa      	ldrb	r2, [r7, #3]
 800600e:	429a      	cmp	r2, r3
 8006010:	d301      	bcc.n	8006016 <HID_ReadItem+0x36>
    {
      return (0U);
 8006012:	2300      	movs	r3, #0
 8006014:	e076      	b.n	8006104 <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6852      	ldr	r2, [r2, #4]
 800601c:	fb02 f303 	mul.w	r3, r2, r3
 8006020:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8006022:	7cfb      	ldrb	r3, [r7, #19]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	08db      	lsrs	r3, r3, #3
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4413      	add	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 800603e:	2300      	movs	r3, #0
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	e00a      	b.n	800605a <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	3301      	adds	r3, #1
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <HID_ReadItem+0x90>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	08db      	lsrs	r3, r3, #3
 800606c:	3301      	adds	r3, #1
 800606e:	e002      	b.n	8006076 <HID_ReadItem+0x96>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	08db      	lsrs	r3, r3, #3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4293      	cmp	r3, r2
 800607a:	d8e3      	bhi.n	8006044 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 800607c:	7cfb      	ldrb	r3, [r7, #19]
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	40da      	lsrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2101      	movs	r1, #1
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	4013      	ands	r3, r2
 8006090:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	429a      	cmp	r2, r3
 800609a:	d304      	bcc.n	80060a6 <HID_ReadItem+0xc6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d901      	bls.n	80060aa <HID_ReadItem+0xca>
  {
    return (0U);
 80060a6:	2300      	movs	r3, #0
 80060a8:	e02c      	b.n	8006104 <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7a9b      	ldrb	r3, [r3, #10]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01d      	beq.n	80060ee <HID_ReadItem+0x10e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	2201      	movs	r2, #1
 80060ba:	409a      	lsls	r2, r3
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d014      	beq.n	80060ee <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	425b      	negs	r3, r3
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	e010      	b.n	8006104 <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	e00a      	b.n	8006104 <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HID_ReadItem+0x11a>
    {
      return (val);
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	e004      	b.n	8006104 <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8006104:	4618      	mov	r0, r3
 8006106:	3724      	adds	r7, #36	; 0x24
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr

0800610e <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	4613      	mov	r3, r2
 800611a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006122:	2302      	movs	r3, #2
 8006124:	e029      	b.n	800617a <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	79fa      	ldrb	r2, [r7, #7]
 800612a:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f81f 	bl	8006182 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f001 fab8 	bl	80076e8 <USBH_LL_Init>

  return USBH_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e008      	b.n	80061a6 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	32e0      	adds	r2, #224	; 0xe0
 800619a:	2100      	movs	r1, #0
 800619c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b0e      	cmp	r3, #14
 80061aa:	d9f3      	bls.n	8006194 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e009      	b.n	80061c6 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061cc:	d3f1      	bcc.n	80061b2 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2240      	movs	r2, #64	; 0x40
 80061f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d017      	beq.n	800625a <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10f      	bne.n	8006254 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800623a:	1c59      	adds	r1, r3, #1
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	33dc      	adds	r3, #220	; 0xdc
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	e004      	b.n	800625e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006254:	2302      	movs	r3, #2
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	e001      	b.n	800625e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800625a:	2302      	movs	r3, #2
 800625c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800625e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr

0800626a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8006280:	78fa      	ldrb	r2, [r7, #3]
 8006282:	429a      	cmp	r2, r3
 8006284:	d204      	bcs.n	8006290 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	78fa      	ldrb	r2, [r7, #3]
 800628a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800628e:	e001      	b.n	8006294 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006290:	2302      	movs	r3, #2
 8006292:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	4608      	mov	r0, r1
 80062aa:	4611      	mov	r1, r2
 80062ac:	461a      	mov	r2, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	70fb      	strb	r3, [r7, #3]
 80062b2:	460b      	mov	r3, r1
 80062b4:	70bb      	strb	r3, [r7, #2]
 80062b6:	4613      	mov	r3, r2
 80062b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f203 3336 	addw	r3, r3, #822	; 0x336
 80062c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80062ca:	e025      	b.n	8006318 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	221a      	movs	r2, #26
 80062d0:	fb02 f303 	mul.w	r3, r2, r3
 80062d4:	3308      	adds	r3, #8
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	3302      	adds	r3, #2
 80062dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	795b      	ldrb	r3, [r3, #5]
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d002      	beq.n	80062ee <USBH_FindInterface+0x4e>
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	2bff      	cmp	r3, #255	; 0xff
 80062ec:	d111      	bne.n	8006312 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80062f2:	78ba      	ldrb	r2, [r7, #2]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d002      	beq.n	80062fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062f8:	78bb      	ldrb	r3, [r7, #2]
 80062fa:	2bff      	cmp	r3, #255	; 0xff
 80062fc:	d109      	bne.n	8006312 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006302:	787a      	ldrb	r2, [r7, #1]
 8006304:	429a      	cmp	r2, r3
 8006306:	d002      	beq.n	800630e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006308:	787b      	ldrb	r3, [r7, #1]
 800630a:	2bff      	cmp	r3, #255	; 0xff
 800630c:	d101      	bne.n	8006312 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	e006      	b.n	8006320 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	3301      	adds	r3, #1
 8006316:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d9d6      	bls.n	80062cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800631e:	23ff      	movs	r3, #255	; 0xff
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr

0800632a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fa0e 	bl	8007754 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006338:	2101      	movs	r1, #1
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fb25 	bl	800798a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af04      	add	r7, sp, #16
 8006352:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006354:	2302      	movs	r3, #2
 8006356:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	d102      	bne.n	800636e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2203      	movs	r2, #3
 800636c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b0b      	cmp	r3, #11
 8006376:	f200 8177 	bhi.w	8006668 <USBH_Process+0x31c>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <USBH_Process+0x34>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	080063b1 	.word	0x080063b1
 8006384:	080063d3 	.word	0x080063d3
 8006388:	080063e7 	.word	0x080063e7
 800638c:	08006603 	.word	0x08006603
 8006390:	08006669 	.word	0x08006669
 8006394:	0800648b 	.word	0x0800648b
 8006398:	080065b9 	.word	0x080065b9
 800639c:	080064bb 	.word	0x080064bb
 80063a0:	080064db 	.word	0x080064db
 80063a4:	080064fb 	.word	0x080064fb
 80063a8:	08006529 	.word	0x08006529
 80063ac:	080065eb 	.word	0x080065eb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8157 	beq.w	800666c <USBH_Process+0x320>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80063c4:	20c8      	movs	r0, #200	; 0xc8
 80063c6:	f001 fb29 	bl	8007a1c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fa1d 	bl	800780a <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80063d0:	e14c      	b.n	800666c <USBH_Process+0x320>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 8149 	bne.w	8006670 <USBH_Process+0x324>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80063e4:	e144      	b.n	8006670 <USBH_Process+0x324>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80063f6:	2104      	movs	r1, #4
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80063fc:	2064      	movs	r0, #100	; 0x64
 80063fe:	f001 fb0d 	bl	8007a1c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 f9dc 	bl	80077c0 <USBH_LL_GetSpeed>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2205      	movs	r2, #5
 8006416:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006418:	2100      	movs	r1, #0
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 f833 	bl	8007486 <USBH_AllocPipe>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006428:	2180      	movs	r1, #128	; 0x80
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 f82b 	bl	8007486 <USBH_AllocPipe>
 8006430:	4603      	mov	r3, r0
 8006432:	461a      	mov	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7919      	ldrb	r1, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800644c:	b292      	uxth	r2, r2
 800644e:	9202      	str	r2, [sp, #8]
 8006450:	2200      	movs	r2, #0
 8006452:	9201      	str	r2, [sp, #4]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	4603      	mov	r3, r0
 8006458:	2280      	movs	r2, #128	; 0x80
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 ffe4 	bl	8007428 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	7959      	ldrb	r1, [r3, #5]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006474:	b292      	uxth	r2, r2
 8006476:	9202      	str	r2, [sp, #8]
 8006478:	2200      	movs	r2, #0
 800647a:	9201      	str	r2, [sp, #4]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	4603      	mov	r3, r0
 8006480:	2200      	movs	r2, #0
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 ffd0 	bl	8007428 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006488:	e101      	b.n	800668e <USBH_Process+0x342>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f904 	bl	8006698 <USBH_HandleEnum>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 80ee 	bne.w	8006674 <USBH_Process+0x328>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d103      	bne.n	80064b2 <USBH_Process+0x166>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2208      	movs	r2, #8
 80064ae:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 80064b0:	e0e0      	b.n	8006674 <USBH_Process+0x328>
          phost->gState = HOST_INPUT;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2207      	movs	r2, #7
 80064b6:	701a      	strb	r2, [r3, #0]
      break;
 80064b8:	e0dc      	b.n	8006674 <USBH_Process+0x328>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80d9 	beq.w	8006678 <USBH_Process+0x32c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80064cc:	2101      	movs	r1, #1
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2208      	movs	r2, #8
 80064d6:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80064d8:	e0ce      	b.n	8006678 <USBH_Process+0x32c>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fb4d 	bl	8006b84 <USBH_SetCfg>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 80c5 	bne.w	800667c <USBH_Process+0x330>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2209      	movs	r2, #9
 80064f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80064f8:	e0c0      	b.n	800667c <USBH_Process+0x330>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <USBH_Process+0x1d4>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006508:	2101      	movs	r1, #1
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fb5d 	bl	8006bca <USBH_SetFeature>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	f040 80b4 	bne.w	8006680 <USBH_Process+0x334>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	220a      	movs	r2, #10
 800651c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800651e:	e0af      	b.n	8006680 <USBH_Process+0x334>
        phost->gState = HOST_CHECK_CLASS;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	220a      	movs	r2, #10
 8006524:	701a      	strb	r2, [r3, #0]
      break;
 8006526:	e0ab      	b.n	8006680 <USBH_Process+0x334>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 80a8 	beq.w	8006684 <USBH_Process+0x338>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]
 8006540:	e017      	b.n	8006572 <USBH_Process+0x226>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	33dc      	adds	r3, #220	; 0xdc
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	791a      	ldrb	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8006556:	429a      	cmp	r2, r3
 8006558:	d108      	bne.n	800656c <USBH_Process+0x220>
          {
            phost->pActiveClass = phost->pClass[idx];
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	33dc      	adds	r3, #220	; 0xdc
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	3301      	adds	r3, #1
 8006570:	73fb      	strb	r3, [r7, #15]
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0e4      	beq.n	8006542 <USBH_Process+0x1f6>
          }
        }

        if (phost->pActiveClass != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800657e:	2b00      	cmp	r3, #0
 8006580:	d016      	beq.n	80065b0 <USBH_Process+0x264>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <USBH_Process+0x25c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2206      	movs	r2, #6
 8006598:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80065a0:	2103      	movs	r1, #3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80065a6:	e06d      	b.n	8006684 <USBH_Process+0x338>
            phost->gState = HOST_ABORT_STATE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	220d      	movs	r2, #13
 80065ac:	701a      	strb	r2, [r3, #0]
      break;
 80065ae:	e069      	b.n	8006684 <USBH_Process+0x338>
          phost->gState = HOST_ABORT_STATE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	220d      	movs	r2, #13
 80065b4:	701a      	strb	r2, [r3, #0]
      break;
 80065b6:	e065      	b.n	8006684 <USBH_Process+0x338>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00f      	beq.n	80065e2 <USBH_Process+0x296>
      {
        status = phost->pActiveClass->Requests(phost);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d156      	bne.n	8006688 <USBH_Process+0x33c>
        {
          phost->gState = HOST_CLASS;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	220b      	movs	r2, #11
 80065de:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80065e0:	e052      	b.n	8006688 <USBH_Process+0x33c>
        phost->gState = HOST_ABORT_STATE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	220d      	movs	r2, #13
 80065e6:	701a      	strb	r2, [r3, #0]
      break;
 80065e8:	e04e      	b.n	8006688 <USBH_Process+0x33c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d04b      	beq.n	800668c <USBH_Process+0x340>
      {
        phost->pActiveClass->BgndProcess(phost);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	4798      	blx	r3
      }
      break;
 8006600:	e044      	b.n	800668c <USBH_Process+0x340>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fdb9 	bl	8006182 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <USBH_Process+0x2e2>
      {
        phost->pActiveClass->DeInit(phost);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <USBH_Process+0x2f8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800663e:	2105      	movs	r1, #5
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	d107      	bne.n	8006660 <USBH_Process+0x314>
      {
        phost->device.is_ReEnumerated = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fe66 	bl	800632a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800665e:	e016      	b.n	800668e <USBH_Process+0x342>
        USBH_LL_Start(phost);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 f877 	bl	8007754 <USBH_LL_Start>
      break;
 8006666:	e012      	b.n	800668e <USBH_Process+0x342>

    case HOST_ABORT_STATE:
    default :
      break;
 8006668:	bf00      	nop
 800666a:	e010      	b.n	800668e <USBH_Process+0x342>
      break;
 800666c:	bf00      	nop
 800666e:	e00e      	b.n	800668e <USBH_Process+0x342>
      break;
 8006670:	bf00      	nop
 8006672:	e00c      	b.n	800668e <USBH_Process+0x342>
      break;
 8006674:	bf00      	nop
 8006676:	e00a      	b.n	800668e <USBH_Process+0x342>
    break;
 8006678:	bf00      	nop
 800667a:	e008      	b.n	800668e <USBH_Process+0x342>
      break;
 800667c:	bf00      	nop
 800667e:	e006      	b.n	800668e <USBH_Process+0x342>
      break;
 8006680:	bf00      	nop
 8006682:	e004      	b.n	800668e <USBH_Process+0x342>
      break;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <USBH_Process+0x342>
      break;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <USBH_Process+0x342>
      break;
 800668c:	bf00      	nop
  }
  return USBH_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af04      	add	r7, sp, #16
 800669e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b07      	cmp	r3, #7
 80066aa:	f200 80f8 	bhi.w	800689e <USBH_HandleEnum+0x206>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <USBH_HandleEnum+0x1c>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066d5 	.word	0x080066d5
 80066b8:	08006747 	.word	0x08006747
 80066bc:	0800675f 	.word	0x0800675f
 80066c0:	080067d5 	.word	0x080067d5
 80066c4:	080067eb 	.word	0x080067eb
 80066c8:	08006807 	.word	0x08006807
 80066cc:	0800683b 	.word	0x0800683b
 80066d0:	0800686f 	.word	0x0800686f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80066d4:	2108      	movs	r1, #8
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f984 	bl	80069e4 <USBH_Get_DevDesc>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 80df 	bne.w	80068a2 <USBH_HandleEnum+0x20a>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7919      	ldrb	r1, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006708:	b292      	uxth	r2, r2
 800670a:	9202      	str	r2, [sp, #8]
 800670c:	2200      	movs	r2, #0
 800670e:	9201      	str	r2, [sp, #4]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	4603      	mov	r3, r0
 8006714:	2280      	movs	r2, #128	; 0x80
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fe86 	bl	8007428 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	7959      	ldrb	r1, [r3, #5]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006730:	b292      	uxth	r2, r2
 8006732:	9202      	str	r2, [sp, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	9201      	str	r2, [sp, #4]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4603      	mov	r3, r0
 800673c:	2200      	movs	r2, #0
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fe72 	bl	8007428 <USBH_OpenPipe>
      }
      break;
 8006744:	e0ad      	b.n	80068a2 <USBH_HandleEnum+0x20a>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 8006746:	2112      	movs	r1, #18
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f94b 	bl	80069e4 <USBH_Get_DevDesc>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	f040 80a8 	bne.w	80068a6 <USBH_HandleEnum+0x20e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	705a      	strb	r2, [r3, #1]

      }
      break;
 800675c:	e0a3      	b.n	80068a6 <USBH_HandleEnum+0x20e>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800675e:	2101      	movs	r1, #1
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f9eb 	bl	8006b3c <USBH_SetAddress>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 809e 	bne.w	80068aa <USBH_HandleEnum+0x212>
      {
        USBH_Delay(2U);
 800676e:	2002      	movs	r0, #2
 8006770:	f001 f954 	bl	8007a1c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2203      	movs	r2, #3
 8006780:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7919      	ldrb	r1, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006796:	b292      	uxth	r2, r2
 8006798:	9202      	str	r2, [sp, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	9201      	str	r2, [sp, #4]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4603      	mov	r3, r0
 80067a2:	2280      	movs	r2, #128	; 0x80
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fe3f 	bl	8007428 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	7959      	ldrb	r1, [r3, #5]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 80067be:	b292      	uxth	r2, r2
 80067c0:	9202      	str	r2, [sp, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	9201      	str	r2, [sp, #4]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4603      	mov	r3, r0
 80067ca:	2200      	movs	r2, #0
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fe2b 	bl	8007428 <USBH_OpenPipe>
      }
      break;
 80067d2:	e06a      	b.n	80068aa <USBH_HandleEnum+0x212>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 80067d4:	2109      	movs	r1, #9
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f92c 	bl	8006a34 <USBH_Get_CfgDesc>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d165      	bne.n	80068ae <USBH_HandleEnum+0x216>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2204      	movs	r2, #4
 80067e6:	705a      	strb	r2, [r3, #1]
      }
      break;
 80067e8:	e061      	b.n	80068ae <USBH_HandleEnum+0x216>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f91e 	bl	8006a34 <USBH_Get_CfgDesc>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d159      	bne.n	80068b2 <USBH_HandleEnum+0x21a>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2205      	movs	r2, #5
 8006802:	705a      	strb	r2, [r3, #1]
      }
      break;
 8006804:	e055      	b.n	80068b2 <USBH_HandleEnum+0x21a>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800680c:	2b00      	cmp	r3, #0
 800680e:	d010      	beq.n	8006832 <USBH_HandleEnum+0x19a>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800681c:	23ff      	movs	r3, #255	; 0xff
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f92c 	bl	8006a7c <USBH_Get_StringDesc>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d145      	bne.n	80068b6 <USBH_HandleEnum+0x21e>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2206      	movs	r2, #6
 800682e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006830:	e041      	b.n	80068b6 <USBH_HandleEnum+0x21e>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2206      	movs	r2, #6
 8006836:	705a      	strb	r2, [r3, #1]
      break;
 8006838:	e03d      	b.n	80068b6 <USBH_HandleEnum+0x21e>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006840:	2b00      	cmp	r3, #0
 8006842:	d010      	beq.n	8006866 <USBH_HandleEnum+0x1ce>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8006850:	23ff      	movs	r3, #255	; 0xff
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f912 	bl	8006a7c <USBH_Get_StringDesc>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12d      	bne.n	80068ba <USBH_HandleEnum+0x222>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2207      	movs	r2, #7
 8006862:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006864:	e029      	b.n	80068ba <USBH_HandleEnum+0x222>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2207      	movs	r2, #7
 800686a:	705a      	strb	r2, [r3, #1]
      break;
 800686c:	e025      	b.n	80068ba <USBH_HandleEnum+0x222>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00f      	beq.n	8006898 <USBH_HandleEnum+0x200>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8006884:	23ff      	movs	r3, #255	; 0xff
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f8f8 	bl	8006a7c <USBH_Get_StringDesc>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d115      	bne.n	80068be <USBH_HandleEnum+0x226>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006896:	e012      	b.n	80068be <USBH_HandleEnum+0x226>
        Status = USBH_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e00f      	b.n	80068be <USBH_HandleEnum+0x226>

    default:
      break;
 800689e:	bf00      	nop
 80068a0:	e00e      	b.n	80068c0 <USBH_HandleEnum+0x228>
      break;
 80068a2:	bf00      	nop
 80068a4:	e00c      	b.n	80068c0 <USBH_HandleEnum+0x228>
      break;
 80068a6:	bf00      	nop
 80068a8:	e00a      	b.n	80068c0 <USBH_HandleEnum+0x228>
      break;
 80068aa:	bf00      	nop
 80068ac:	e008      	b.n	80068c0 <USBH_HandleEnum+0x228>
      break;
 80068ae:	bf00      	nop
 80068b0:	e006      	b.n	80068c0 <USBH_HandleEnum+0x228>
      break;
 80068b2:	bf00      	nop
 80068b4:	e004      	b.n	80068c0 <USBH_HandleEnum+0x228>
      break;
 80068b6:	bf00      	nop
 80068b8:	e002      	b.n	80068c0 <USBH_HandleEnum+0x228>
      break;
 80068ba:	bf00      	nop
 80068bc:	e000      	b.n	80068c0 <USBH_HandleEnum+0x228>
      break;
 80068be:	bf00      	nop
  }
  return Status;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop

080068cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f804 	bl	800690c <USBH_HandleSof>
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b0b      	cmp	r3, #11
 800691c:	d10a      	bne.n	8006934 <USBH_HandleSof+0x28>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
  }
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800694c:	bf00      	nop
}
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr

08006956 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 8006966:	bf00      	nop
}
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr

08006970 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fee4 	bl	800778a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	791b      	ldrb	r3, [r3, #4]
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fd7c 	bl	80074c6 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	795b      	ldrb	r3, [r3, #5]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fd76 	bl	80074c6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a02:	2100      	movs	r1, #0
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f864 	bl	8006ad2 <USBH_GetDescriptor>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	b292      	uxth	r2, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	f000 f918 	bl	8006c5a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	331c      	adds	r3, #28
 8006a44:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006a46:	887b      	ldrh	r3, [r7, #2]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a50:	2100      	movs	r1, #0
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f83d 	bl	8006ad2 <USBH_GetDescriptor>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	72fb      	strb	r3, [r7, #11]
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d107      	bne.n	8006a72 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f203 3336 	addw	r3, r3, #822	; 0x336
 8006a68:	887a      	ldrh	r2, [r7, #2]
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 f963 	bl	8006d38 <USBH_ParseCfgDesc>
  }

  return status;
 8006a72:	7afb      	ldrb	r3, [r7, #11]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	461a      	mov	r2, r3
 8006a88:	460b      	mov	r3, r1
 8006a8a:	72fb      	strb	r3, [r7, #11]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a98:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006aa0:	893b      	ldrh	r3, [r7, #8]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f812 	bl	8006ad2 <USBH_GetDescriptor>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	75fb      	strb	r3, [r7, #23]
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d107      	bne.n	8006ac8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006abe:	893a      	ldrh	r2, [r7, #8]
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fa34 	bl	8006f30 <USBH_ParseStringDesc>
  }

  return status;
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	607b      	str	r3, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	72fb      	strb	r3, [r7, #11]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	789b      	ldrb	r3, [r3, #2]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d11c      	bne.n	8006b26 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2206      	movs	r2, #6
 8006afc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	893a      	ldrh	r2, [r7, #8]
 8006b02:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006b04:	893b      	ldrh	r3, [r7, #8]
 8006b06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0e:	d104      	bne.n	8006b1a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f240 4209 	movw	r2, #1033	; 0x409
 8006b16:	829a      	strh	r2, [r3, #20]
 8006b18:	e002      	b.n	8006b20 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8b3a      	ldrh	r2, [r7, #24]
 8006b24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006b26:	8b3b      	ldrh	r3, [r7, #24]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 fa4b 	bl	8006fc8 <USBH_CtlReq>
 8006b32:	4603      	mov	r3, r0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	789b      	ldrb	r3, [r3, #2]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d10f      	bne.n	8006b70 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2205      	movs	r2, #5
 8006b5a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b70:	2200      	movs	r2, #0
 8006b72:	2100      	movs	r1, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fa27 	bl	8006fc8 <USBH_CtlReq>
 8006b7a:	4603      	mov	r3, r0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	789b      	ldrb	r3, [r3, #2]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d10e      	bne.n	8006bb6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2209      	movs	r2, #9
 8006ba2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	887a      	ldrh	r2, [r7, #2]
 8006ba8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fa04 	bl	8006fc8 <USBH_CtlReq>
 8006bc0:	4603      	mov	r3, r0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	789b      	ldrb	r3, [r3, #2]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d10f      	bne.n	8006bfe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2203      	movs	r2, #3
 8006be8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2100      	movs	r1, #0
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f9e0 	bl	8006fc8 <USBH_CtlReq>
 8006c08:	4603      	mov	r3, r0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	789b      	ldrb	r3, [r3, #2]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10f      	bne.n	8006c46 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f9bc 	bl	8006fc8 <USBH_CtlReq>
 8006c50:	4603      	mov	r3, r0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	4613      	mov	r3, r2
 8006c66:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	781a      	ldrb	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	785a      	ldrb	r2, [r3, #1]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	3302      	adds	r3, #2
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	3303      	adds	r3, #3
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	791a      	ldrb	r2, [r3, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	795a      	ldrb	r2, [r3, #5]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	799a      	ldrb	r2, [r3, #6]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	79da      	ldrb	r2, [r3, #7]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d939      	bls.n	8006d2e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3309      	adds	r3, #9
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	330a      	adds	r3, #10
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	330b      	adds	r3, #11
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	330d      	adds	r3, #13
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	021b      	lsls	r3, r3, #8
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	4313      	orrs	r3, r2
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	7b9a      	ldrb	r2, [r3, #14]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	7bda      	ldrb	r2, [r3, #15]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	7c1a      	ldrb	r2, [r3, #16]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	7c5a      	ldrb	r2, [r3, #17]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	745a      	strb	r2, [r3, #17]
  }
}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	; 0x28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	781a      	ldrb	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	785a      	ldrb	r2, [r3, #1]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	3303      	adds	r3, #3
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	791a      	ldrb	r2, [r3, #4]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	795a      	ldrb	r2, [r3, #5]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	799a      	ldrb	r2, [r3, #6]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	79da      	ldrb	r2, [r3, #7]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	7a1a      	ldrb	r2, [r3, #8]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b09      	cmp	r3, #9
 8006db2:	d95f      	bls.n	8006e74 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006db4:	2309      	movs	r3, #9
 8006db6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006dbc:	e051      	b.n	8006e62 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006dbe:	f107 0316 	add.w	r3, r7, #22
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dc6:	f000 f8e5 	bl	8006f94 <USBH_GetNextDesc>
 8006dca:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	785b      	ldrb	r3, [r3, #1]
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d146      	bne.n	8006e62 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dd8:	221a      	movs	r2, #26
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	3308      	adds	r3, #8
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	3302      	adds	r3, #2
 8006de6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dea:	69f8      	ldr	r0, [r7, #28]
 8006dec:	f000 f846 	bl	8006e7c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006dfa:	e022      	b.n	8006e42 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006dfc:	f107 0316 	add.w	r3, r7, #22
 8006e00:	4619      	mov	r1, r3
 8006e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e04:	f000 f8c6 	bl	8006f94 <USBH_GetNextDesc>
 8006e08:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	d117      	bne.n	8006e42 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e16:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	00d2      	lsls	r2, r2, #3
 8006e1e:	211a      	movs	r1, #26
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	4413      	add	r3, r2
 8006e26:	3308      	adds	r3, #8
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e32:	69b8      	ldr	r0, [r7, #24]
 8006e34:	f000 f850 	bl	8006ed8 <USBH_ParseEPDesc>
            ep_ix++;
 8006e38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	791b      	ldrb	r3, [r3, #4]
 8006e46:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d204      	bcs.n	8006e58 <USBH_ParseCfgDesc+0x120>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	885a      	ldrh	r2, [r3, #2]
 8006e52:	8afb      	ldrh	r3, [r7, #22]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d8d1      	bhi.n	8006dfc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d804      	bhi.n	8006e74 <USBH_ParseCfgDesc+0x13c>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	885a      	ldrh	r2, [r3, #2]
 8006e6e:	8afb      	ldrh	r3, [r7, #22]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d8a4      	bhi.n	8006dbe <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006e74:	bf00      	nop
 8006e76:	3728      	adds	r7, #40	; 0x28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	785a      	ldrb	r2, [r3, #1]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	789a      	ldrb	r2, [r3, #2]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	78da      	ldrb	r2, [r3, #3]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	791a      	ldrb	r2, [r3, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	795a      	ldrb	r2, [r3, #5]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	799a      	ldrb	r2, [r3, #6]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	79da      	ldrb	r2, [r3, #7]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	7a1a      	ldrb	r2, [r3, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	721a      	strb	r2, [r3, #8]
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	785a      	ldrb	r2, [r3, #1]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	789a      	ldrb	r2, [r3, #2]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	78da      	ldrb	r2, [r3, #3]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	3304      	adds	r3, #4
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	3305      	adds	r3, #5
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	4313      	orrs	r3, r2
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	799a      	ldrb	r2, [r3, #6]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	719a      	strb	r2, [r3, #6]
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d120      	bne.n	8006f8a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	1e9a      	subs	r2, r3, #2
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	4293      	cmp	r3, r2
 8006f52:	bf28      	it	cs
 8006f54:	4613      	movcs	r3, r2
 8006f56:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006f5e:	2300      	movs	r3, #0
 8006f60:	82fb      	strh	r3, [r7, #22]
 8006f62:	e00b      	b.n	8006f7c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006f64:	8afb      	ldrh	r3, [r7, #22]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	781a      	ldrb	r2, [r3, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006f76:	8afb      	ldrh	r3, [r7, #22]
 8006f78:	3302      	adds	r3, #2
 8006f7a:	82fb      	strh	r3, [r7, #22]
 8006f7c:	8afa      	ldrh	r2, [r7, #22]
 8006f7e:	8abb      	ldrh	r3, [r7, #20]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d3ef      	bcc.n	8006f64 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
  }
}
 8006f8a:	bf00      	nop
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	881a      	ldrh	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	4413      	add	r3, r2
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	789b      	ldrb	r3, [r3, #2]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d002      	beq.n	8006fe8 <USBH_CtlReq+0x20>
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d00f      	beq.n	8007006 <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 8006fe6:	e034      	b.n	8007052 <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
      break;
 8007004:	e025      	b.n	8007052 <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 f828 	bl	800705c <USBH_HandleControl>
 800700c:	4603      	mov	r3, r0
 800700e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d108      	bne.n	8007028 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	75fb      	strb	r3, [r7, #23]
      break;
 8007026:	e013      	b.n	8007050 <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	2b03      	cmp	r3, #3
 800702c:	d108      	bne.n	8007040 <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800703a:	2303      	movs	r3, #3
 800703c:	75fb      	strb	r3, [r7, #23]
      break;
 800703e:	e007      	b.n	8007050 <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d104      	bne.n	8007050 <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800704c:	2302      	movs	r3, #2
 800704e:	75fb      	strb	r3, [r7, #23]
      break;
 8007050:	bf00      	nop
  }
  return status;
 8007052:	7dfb      	ldrb	r3, [r7, #23]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af02      	add	r7, sp, #8
 8007062:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007064:	2301      	movs	r3, #1
 8007066:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007068:	2300      	movs	r3, #0
 800706a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7e1b      	ldrb	r3, [r3, #24]
 8007070:	3b01      	subs	r3, #1
 8007072:	2b0a      	cmp	r3, #10
 8007074:	f200 814c 	bhi.w	8007310 <USBH_HandleControl+0x2b4>
 8007078:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <USBH_HandleControl+0x24>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	080070ad 	.word	0x080070ad
 8007084:	080070c7 	.word	0x080070c7
 8007088:	08007131 	.word	0x08007131
 800708c:	08007157 	.word	0x08007157
 8007090:	0800718f 	.word	0x0800718f
 8007094:	080071bb 	.word	0x080071bb
 8007098:	0800720d 	.word	0x0800720d
 800709c:	0800722f 	.word	0x0800722f
 80070a0:	0800726b 	.word	0x0800726b
 80070a4:	08007293 	.word	0x08007293
 80070a8:	080072d1 	.word	0x080072d1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f103 0110 	add.w	r1, r3, #16
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	795b      	ldrb	r3, [r3, #5]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f939 	bl	8007330 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2202      	movs	r2, #2
 80070c2:	761a      	strb	r2, [r3, #24]
      break;
 80070c4:	e12f      	b.n	8007326 <USBH_HandleControl+0x2ca>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	795b      	ldrb	r3, [r3, #5]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fc49 	bl	8007964 <USBH_LL_GetURBState>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d11e      	bne.n	800711a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7c1b      	ldrb	r3, [r3, #16]
 80070e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8adb      	ldrh	r3, [r3, #22]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80070ee:	7b7b      	ldrb	r3, [r7, #13]
 80070f0:	2b80      	cmp	r3, #128	; 0x80
 80070f2:	d103      	bne.n	80070fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2203      	movs	r2, #3
 80070f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070fa:	e10b      	b.n	8007314 <USBH_HandleControl+0x2b8>
            phost->Control.state = CTRL_DATA_OUT;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2205      	movs	r2, #5
 8007100:	761a      	strb	r2, [r3, #24]
      break;
 8007102:	e107      	b.n	8007314 <USBH_HandleControl+0x2b8>
          if (direction == USB_D2H)
 8007104:	7b7b      	ldrb	r3, [r7, #13]
 8007106:	2b80      	cmp	r3, #128	; 0x80
 8007108:	d103      	bne.n	8007112 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2209      	movs	r2, #9
 800710e:	761a      	strb	r2, [r3, #24]
      break;
 8007110:	e100      	b.n	8007314 <USBH_HandleControl+0x2b8>
            phost->Control.state = CTRL_STATUS_IN;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2207      	movs	r2, #7
 8007116:	761a      	strb	r2, [r3, #24]
      break;
 8007118:	e0fc      	b.n	8007314 <USBH_HandleControl+0x2b8>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b04      	cmp	r3, #4
 800711e:	d003      	beq.n	8007128 <USBH_HandleControl+0xcc>
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	2b02      	cmp	r3, #2
 8007124:	f040 80f6 	bne.w	8007314 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	220b      	movs	r2, #11
 800712c:	761a      	strb	r2, [r3, #24]
      break;
 800712e:	e0f1      	b.n	8007314 <USBH_HandleControl+0x2b8>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007136:	b29a      	uxth	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6899      	ldr	r1, [r3, #8]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	899a      	ldrh	r2, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	791b      	ldrb	r3, [r3, #4]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f930 	bl	80073ae <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2204      	movs	r2, #4
 8007152:	761a      	strb	r2, [r3, #24]
      break;
 8007154:	e0e7      	b.n	8007326 <USBH_HandleControl+0x2ca>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	791b      	ldrb	r3, [r3, #4]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fc01 	bl	8007964 <USBH_LL_GetURBState>
 8007162:	4603      	mov	r3, r0
 8007164:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d102      	bne.n	8007172 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2209      	movs	r2, #9
 8007170:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b05      	cmp	r3, #5
 8007176:	d102      	bne.n	800717e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007178:	2303      	movs	r3, #3
 800717a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800717c:	e0cc      	b.n	8007318 <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b04      	cmp	r3, #4
 8007182:	f040 80c9 	bne.w	8007318 <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	220b      	movs	r2, #11
 800718a:	761a      	strb	r2, [r3, #24]
      break;
 800718c:	e0c4      	b.n	8007318 <USBH_HandleControl+0x2bc>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6899      	ldr	r1, [r3, #8]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	899a      	ldrh	r2, [r3, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	7958      	ldrb	r0, [r3, #5]
 800719a:	2301      	movs	r3, #1
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	4603      	mov	r3, r0
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f8df 	bl	8007364 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2206      	movs	r2, #6
 80071b6:	761a      	strb	r2, [r3, #24]
      break;
 80071b8:	e0b5      	b.n	8007326 <USBH_HandleControl+0x2ca>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	795b      	ldrb	r3, [r3, #5]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fbcf 	bl	8007964 <USBH_LL_GetURBState>
 80071c6:	4603      	mov	r3, r0
 80071c8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d103      	bne.n	80071d8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2207      	movs	r2, #7
 80071d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071d6:	e0a1      	b.n	800731c <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_STALL)
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b05      	cmp	r3, #5
 80071dc:	d105      	bne.n	80071ea <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	220c      	movs	r2, #12
 80071e2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80071e4:	2303      	movs	r3, #3
 80071e6:	73fb      	strb	r3, [r7, #15]
      break;
 80071e8:	e098      	b.n	800731c <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d103      	bne.n	80071f8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2205      	movs	r2, #5
 80071f4:	761a      	strb	r2, [r3, #24]
      break;
 80071f6:	e091      	b.n	800731c <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_ERROR)
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	f040 808e 	bne.w	800731c <USBH_HandleControl+0x2c0>
          phost->Control.state = CTRL_ERROR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	220b      	movs	r2, #11
 8007204:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007206:	2302      	movs	r3, #2
 8007208:	73fb      	strb	r3, [r7, #15]
      break;
 800720a:	e087      	b.n	800731c <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	791b      	ldrb	r3, [r3, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	2100      	movs	r1, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f8ca 	bl	80073ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007220:	b29a      	uxth	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2208      	movs	r2, #8
 800722a:	761a      	strb	r2, [r3, #24]

      break;
 800722c:	e07b      	b.n	8007326 <USBH_HandleControl+0x2ca>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	791b      	ldrb	r3, [r3, #4]
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fb95 	bl	8007964 <USBH_LL_GetURBState>
 800723a:	4603      	mov	r3, r0
 800723c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d105      	bne.n	8007250 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	220d      	movs	r2, #13
 8007248:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800724e:	e067      	b.n	8007320 <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_ERROR)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b04      	cmp	r3, #4
 8007254:	d103      	bne.n	800725e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	220b      	movs	r2, #11
 800725a:	761a      	strb	r2, [r3, #24]
      break;
 800725c:	e060      	b.n	8007320 <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_STALL)
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b05      	cmp	r3, #5
 8007262:	d15d      	bne.n	8007320 <USBH_HandleControl+0x2c4>
          status = USBH_NOT_SUPPORTED;
 8007264:	2303      	movs	r3, #3
 8007266:	73fb      	strb	r3, [r7, #15]
      break;
 8007268:	e05a      	b.n	8007320 <USBH_HandleControl+0x2c4>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	795a      	ldrb	r2, [r3, #5]
 800726e:	2301      	movs	r3, #1
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	4613      	mov	r3, r2
 8007274:	2200      	movs	r2, #0
 8007276:	2100      	movs	r1, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f873 	bl	8007364 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	220a      	movs	r2, #10
 800728e:	761a      	strb	r2, [r3, #24]
      break;
 8007290:	e049      	b.n	8007326 <USBH_HandleControl+0x2ca>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	795b      	ldrb	r3, [r3, #5]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb63 	bl	8007964 <USBH_LL_GetURBState>
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d105      	bne.n	80072b4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	220d      	movs	r2, #13
 80072b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80072b2:	e037      	b.n	8007324 <USBH_HandleControl+0x2c8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d103      	bne.n	80072c2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2209      	movs	r2, #9
 80072be:	761a      	strb	r2, [r3, #24]
      break;
 80072c0:	e030      	b.n	8007324 <USBH_HandleControl+0x2c8>
        if (URB_Status == USBH_URB_ERROR)
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d12d      	bne.n	8007324 <USBH_HandleControl+0x2c8>
          phost->Control.state = CTRL_ERROR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	220b      	movs	r2, #11
 80072cc:	761a      	strb	r2, [r3, #24]
      break;
 80072ce:	e029      	b.n	8007324 <USBH_HandleControl+0x2c8>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	7e5b      	ldrb	r3, [r3, #25]
 80072d4:	3301      	adds	r3, #1
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	765a      	strb	r2, [r3, #25]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7e5b      	ldrb	r3, [r3, #25]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d806      	bhi.n	80072f2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80072f0:	e019      	b.n	8007326 <USBH_HandleControl+0x2ca>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80072f8:	2106      	movs	r1, #6
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800730a:	2302      	movs	r3, #2
 800730c:	73fb      	strb	r3, [r7, #15]
      break;
 800730e:	e00a      	b.n	8007326 <USBH_HandleControl+0x2ca>

    default:
      break;
 8007310:	bf00      	nop
 8007312:	e008      	b.n	8007326 <USBH_HandleControl+0x2ca>
      break;
 8007314:	bf00      	nop
 8007316:	e006      	b.n	8007326 <USBH_HandleControl+0x2ca>
      break;
 8007318:	bf00      	nop
 800731a:	e004      	b.n	8007326 <USBH_HandleControl+0x2ca>
      break;
 800731c:	bf00      	nop
 800731e:	e002      	b.n	8007326 <USBH_HandleControl+0x2ca>
      break;
 8007320:	bf00      	nop
 8007322:	e000      	b.n	8007326 <USBH_HandleControl+0x2ca>
      break;
 8007324:	bf00      	nop
  }

  return status;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af04      	add	r7, sp, #16
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800733e:	79f9      	ldrb	r1, [r7, #7]
 8007340:	2300      	movs	r3, #0
 8007342:	9303      	str	r3, [sp, #12]
 8007344:	2308      	movs	r3, #8
 8007346:	9302      	str	r3, [sp, #8]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	2300      	movs	r3, #0
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	2200      	movs	r2, #0
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fad4 	bl	8007902 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af04      	add	r7, sp, #16
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	4611      	mov	r1, r2
 8007370:	461a      	mov	r2, r3
 8007372:	460b      	mov	r3, r1
 8007374:	80fb      	strh	r3, [r7, #6]
 8007376:	4613      	mov	r3, r2
 8007378:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007388:	7979      	ldrb	r1, [r7, #5]
 800738a:	7e3b      	ldrb	r3, [r7, #24]
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	9302      	str	r3, [sp, #8]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	2301      	movs	r3, #1
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	2300      	movs	r3, #0
 800739c:	2200      	movs	r2, #0
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 faaf 	bl	8007902 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b088      	sub	sp, #32
 80073b2:	af04      	add	r7, sp, #16
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	4611      	mov	r1, r2
 80073ba:	461a      	mov	r2, r3
 80073bc:	460b      	mov	r3, r1
 80073be:	80fb      	strh	r3, [r7, #6]
 80073c0:	4613      	mov	r3, r2
 80073c2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80073c4:	7979      	ldrb	r1, [r7, #5]
 80073c6:	2300      	movs	r3, #0
 80073c8:	9303      	str	r3, [sp, #12]
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	9302      	str	r3, [sp, #8]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	2301      	movs	r3, #1
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	2300      	movs	r3, #0
 80073d8:	2201      	movs	r2, #1
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fa91 	bl	8007902 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80073e0:	2300      	movs	r3, #0

}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b088      	sub	sp, #32
 80073ee:	af04      	add	r7, sp, #16
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	4611      	mov	r1, r2
 80073f6:	461a      	mov	r2, r3
 80073f8:	460b      	mov	r3, r1
 80073fa:	71fb      	strb	r3, [r7, #7]
 80073fc:	4613      	mov	r3, r2
 80073fe:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	b29b      	uxth	r3, r3
 8007404:	79b9      	ldrb	r1, [r7, #6]
 8007406:	2200      	movs	r2, #0
 8007408:	9203      	str	r2, [sp, #12]
 800740a:	9302      	str	r3, [sp, #8]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	2301      	movs	r3, #1
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	2303      	movs	r3, #3
 8007416:	2201      	movs	r2, #1
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 fa72 	bl	8007902 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af04      	add	r7, sp, #16
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	4608      	mov	r0, r1
 8007432:	4611      	mov	r1, r2
 8007434:	461a      	mov	r2, r3
 8007436:	4603      	mov	r3, r0
 8007438:	70fb      	strb	r3, [r7, #3]
 800743a:	460b      	mov	r3, r1
 800743c:	70bb      	strb	r3, [r7, #2]
 800743e:	4613      	mov	r3, r2
 8007440:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007442:	7878      	ldrb	r0, [r7, #1]
 8007444:	78ba      	ldrb	r2, [r7, #2]
 8007446:	78f9      	ldrb	r1, [r7, #3]
 8007448:	8b3b      	ldrh	r3, [r7, #24]
 800744a:	9302      	str	r3, [sp, #8]
 800744c:	7d3b      	ldrb	r3, [r7, #20]
 800744e:	9301      	str	r3, [sp, #4]
 8007450:	7c3b      	ldrb	r3, [r7, #16]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4603      	mov	r3, r0
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa05 	bl	8007866 <USBH_LL_OpenPipe>

  return USBH_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa24 	bl	80078c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f832 	bl	80074fc <USBH_GetFreePipe>
 8007498:	4603      	mov	r3, r0
 800749a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800749c:	89fb      	ldrh	r3, [r7, #14]
 800749e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d009      	beq.n	80074ba <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	89fa      	ldrh	r2, [r7, #14]
 80074aa:	f002 020f 	and.w	r2, r2, #15
 80074ae:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	32e0      	adds	r2, #224	; 0xe0
 80074b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 80074ba:	89fb      	ldrh	r3, [r7, #14]
 80074bc:	b2db      	uxtb	r3, r3
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80074d2:	78fb      	ldrb	r3, [r7, #3]
 80074d4:	2b0a      	cmp	r3, #10
 80074d6:	d80b      	bhi.n	80074f0 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	32e0      	adds	r2, #224	; 0xe0
 80074de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e2:	78fa      	ldrb	r2, [r7, #3]
 80074e4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	32e0      	adds	r2, #224	; 0xe0
 80074ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr

080074fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
 800750c:	e00e      	b.n	800752c <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800750e:	7bfa      	ldrb	r2, [r7, #15]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	32e0      	adds	r2, #224	; 0xe0
 8007514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	b29b      	uxth	r3, r3
 8007524:	e007      	b.n	8007536 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	3301      	adds	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	2b0a      	cmp	r3, #10
 8007530:	d9ed      	bls.n	800750e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007532:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007544:	2201      	movs	r2, #1
 8007546:	490e      	ldr	r1, [pc, #56]	; (8007580 <MX_USB_HOST_Init+0x40>)
 8007548:	480e      	ldr	r0, [pc, #56]	; (8007584 <MX_USB_HOST_Init+0x44>)
 800754a:	f7fe fde0 	bl	800610e <USBH_Init>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007554:	f7f9 fae6 	bl	8000b24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8007558:	490b      	ldr	r1, [pc, #44]	; (8007588 <MX_USB_HOST_Init+0x48>)
 800755a:	480a      	ldr	r0, [pc, #40]	; (8007584 <MX_USB_HOST_Init+0x44>)
 800755c:	f7fe fe5b 	bl	8006216 <USBH_RegisterClass>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007566:	f7f9 fadd 	bl	8000b24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800756a:	4806      	ldr	r0, [pc, #24]	; (8007584 <MX_USB_HOST_Init+0x44>)
 800756c:	f7fe fedd 	bl	800632a <USBH_Start>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007576:	f7f9 fad5 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800757a:	bf00      	nop
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	080075a1 	.word	0x080075a1
 8007584:	20000228 	.word	0x20000228
 8007588:	20000010 	.word	0x20000010

0800758c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007590:	4802      	ldr	r0, [pc, #8]	; (800759c <MX_USB_HOST_Process+0x10>)
 8007592:	f7fe fedb 	bl	800634c <USBH_Process>
}
 8007596:	bf00      	nop
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000228 	.word	0x20000228

080075a0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d819      	bhi.n	80075e8 <USBH_UserProcess+0x48>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <USBH_UserProcess+0x1c>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075e9 	.word	0x080075e9
 80075c0:	080075d9 	.word	0x080075d9
 80075c4:	080075e9 	.word	0x080075e9
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	080075d1 	.word	0x080075d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80075d0:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <USBH_UserProcess+0x54>)
 80075d2:	2203      	movs	r2, #3
 80075d4:	701a      	strb	r2, [r3, #0]
  break;
 80075d6:	e008      	b.n	80075ea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80075d8:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <USBH_UserProcess+0x54>)
 80075da:	2202      	movs	r2, #2
 80075dc:	701a      	strb	r2, [r3, #0]
  break;
 80075de:	e004      	b.n	80075ea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <USBH_UserProcess+0x54>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
  break;
 80075e6:	e000      	b.n	80075ea <USBH_UserProcess+0x4a>

  default:
  break;
 80075e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr
 80075f4:	200000b8 	.word	0x200000b8

080075f8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007608:	d113      	bne.n	8007632 <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800760a:	4b0c      	ldr	r3, [pc, #48]	; (800763c <HAL_HCD_MspInit+0x44>)
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	4a0b      	ldr	r2, [pc, #44]	; (800763c <HAL_HCD_MspInit+0x44>)
 8007610:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007614:	6153      	str	r3, [r2, #20]
 8007616:	4b09      	ldr	r3, [pc, #36]	; (800763c <HAL_HCD_MspInit+0x44>)
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007622:	2200      	movs	r2, #0
 8007624:	2100      	movs	r1, #0
 8007626:	2043      	movs	r0, #67	; 0x43
 8007628:	f7f9 fe75 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800762c:	2043      	movs	r0, #67	; 0x43
 800762e:	f7f9 fe8e 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	40021000 	.word	0x40021000

08007640 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff f94a 	bl	80068e8 <USBH_LL_IncTimer>
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff f980 	bl	8006970 <USBH_LL_Connect>
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff f988 	bl	800699c <USBH_LL_Disconnect>
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
 80076a0:	4613      	mov	r3, r2
 80076a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr

080076ae <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff f93d 	bl	800693c <USBH_LL_PortEnabled>
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff f93c 	bl	8006956 <USBH_LL_PortDisabled>
}
 80076de:	bf00      	nop
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d124      	bne.n	8007744 <USBH_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80076fa:	4a15      	ldr	r2, [pc, #84]	; (8007750 <USBH_LL_Init+0x68>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a12      	ldr	r2, [pc, #72]	; (8007750 <USBH_LL_Init+0x68>)
 8007706:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800770a:	4b11      	ldr	r3, [pc, #68]	; (8007750 <USBH_LL_Init+0x68>)
 800770c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007710:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007712:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <USBH_LL_Init+0x68>)
 8007714:	2208      	movs	r2, #8
 8007716:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007718:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <USBH_LL_Init+0x68>)
 800771a:	2201      	movs	r2, #1
 800771c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800771e:	4b0c      	ldr	r3, [pc, #48]	; (8007750 <USBH_LL_Init+0x68>)
 8007720:	2200      	movs	r2, #0
 8007722:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007724:	480a      	ldr	r0, [pc, #40]	; (8007750 <USBH_LL_Init+0x68>)
 8007726:	f7f9 ffcf 	bl	80016c8 <HAL_HCD_Init>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <USBH_LL_Init+0x4c>
  {
    Error_Handler( );
 8007730:	f7f9 f9f8 	bl	8000b24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007734:	4806      	ldr	r0, [pc, #24]	; (8007750 <USBH_LL_Init+0x68>)
 8007736:	f7fa fbcd 	bl	8001ed4 <HAL_HCD_GetCurrentFrame>
 800773a:	4603      	mov	r3, r0
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff f8c4 	bl	80068cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	200005f8 	.word	0x200005f8

08007754 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800776a:	4618      	mov	r0, r3
 800776c:	f7fa fb3c 	bl	8001de8 <HAL_HCD_Start>
 8007770:	4603      	mov	r3, r0
 8007772:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f95c 	bl	8007a34 <USBH_Get_USB_Status>
 800777c:	4603      	mov	r3, r0
 800777e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007780:	7bbb      	ldrb	r3, [r7, #14]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fa fb44 	bl	8001e2e <HAL_HCD_Stop>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f941 	bl	8007a34 <USBH_Get_USB_Status>
 80077b2:	4603      	mov	r3, r0
 80077b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80077c8:	2301      	movs	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fa fb8c 	bl	8001ef0 <HAL_HCD_GetCurrentSpeed>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d007      	beq.n	80077ee <USBH_LL_GetSpeed+0x2e>
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d302      	bcc.n	80077e8 <USBH_LL_GetSpeed+0x28>
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d006      	beq.n	80077f4 <USBH_LL_GetSpeed+0x34>
 80077e6:	e008      	b.n	80077fa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73fb      	strb	r3, [r7, #15]
    break;
 80077ec:	e008      	b.n	8007800 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80077ee:	2301      	movs	r3, #1
 80077f0:	73fb      	strb	r3, [r7, #15]
    break;
 80077f2:	e005      	b.n	8007800 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80077f4:	2302      	movs	r3, #2
 80077f6:	73fb      	strb	r3, [r7, #15]
    break;
 80077f8:	e002      	b.n	8007800 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80077fa:	2301      	movs	r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
    break;
 80077fe:	bf00      	nop
  }
  return  speed;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007820:	4618      	mov	r0, r3
 8007822:	f7fa fb21 	bl	8001e68 <HAL_HCD_ResetPort>
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	4618      	mov	r0, r3
 800782e:	f000 f901 	bl	8007a34 <USBH_Get_USB_Status>
 8007832:	4603      	mov	r3, r0
 8007834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007836:	7bbb      	ldrb	r3, [r7, #14]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	4611      	mov	r1, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f7fa fb28 	bl	8001eac <HAL_HCD_HC_GetXferCount>
 800785c:	4603      	mov	r3, r0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007866:	b590      	push	{r4, r7, lr}
 8007868:	b089      	sub	sp, #36	; 0x24
 800786a:	af04      	add	r7, sp, #16
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	4608      	mov	r0, r1
 8007870:	4611      	mov	r1, r2
 8007872:	461a      	mov	r2, r3
 8007874:	4603      	mov	r3, r0
 8007876:	70fb      	strb	r3, [r7, #3]
 8007878:	460b      	mov	r3, r1
 800787a:	70bb      	strb	r3, [r7, #2]
 800787c:	4613      	mov	r3, r2
 800787e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800788e:	787c      	ldrb	r4, [r7, #1]
 8007890:	78ba      	ldrb	r2, [r7, #2]
 8007892:	78f9      	ldrb	r1, [r7, #3]
 8007894:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007896:	9302      	str	r3, [sp, #8]
 8007898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	4623      	mov	r3, r4
 80078a6:	f7f9 ff71 	bl	800178c <HAL_HCD_HC_Init>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f8bf 	bl	8007a34 <USBH_Get_USB_Status>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd90      	pop	{r4, r7, pc}

080078c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80078de:	78fa      	ldrb	r2, [r7, #3]
 80078e0:	4611      	mov	r1, r2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7f9 ffea 	bl	80018bc <HAL_HCD_HC_Halt>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f8a0 	bl	8007a34 <USBH_Get_USB_Status>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007902:	b590      	push	{r4, r7, lr}
 8007904:	b089      	sub	sp, #36	; 0x24
 8007906:	af04      	add	r7, sp, #16
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	4608      	mov	r0, r1
 800790c:	4611      	mov	r1, r2
 800790e:	461a      	mov	r2, r3
 8007910:	4603      	mov	r3, r0
 8007912:	70fb      	strb	r3, [r7, #3]
 8007914:	460b      	mov	r3, r1
 8007916:	70bb      	strb	r3, [r7, #2]
 8007918:	4613      	mov	r3, r2
 800791a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800792a:	787c      	ldrb	r4, [r7, #1]
 800792c:	78ba      	ldrb	r2, [r7, #2]
 800792e:	78f9      	ldrb	r1, [r7, #3]
 8007930:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007938:	9302      	str	r3, [sp, #8]
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	4623      	mov	r3, r4
 8007946:	f7f9 ffdd 	bl	8001904 <HAL_HCD_HC_SubmitRequest>
 800794a:	4603      	mov	r3, r0
 800794c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	4618      	mov	r0, r3
 8007952:	f000 f86f 	bl	8007a34 <USBH_Get_USB_Status>
 8007956:	4603      	mov	r3, r0
 8007958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800795a:	7bbb      	ldrb	r3, [r7, #14]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	bd90      	pop	{r4, r7, pc}

08007964 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fa fa82 	bl	8001e84 <HAL_HCD_HC_GetURBState>
 8007980:	4603      	mov	r3, r0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800799c:	2b01      	cmp	r3, #1
 800799e:	d103      	bne.n	80079a8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f872 	bl	8007a8c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079a8:	20c8      	movs	r0, #200	; 0xc8
 80079aa:	f7f9 fabf 	bl	8000f2c <HAL_Delay>
  return USBH_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
 80079c4:	4613      	mov	r3, r2
 80079c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	68f9      	ldr	r1, [r7, #12]
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	440b      	add	r3, r1
 80079de:	333b      	adds	r3, #59	; 0x3b
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80079e6:	78fa      	ldrb	r2, [r7, #3]
 80079e8:	68f9      	ldr	r1, [r7, #12]
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	440b      	add	r3, r1
 80079f4:	3350      	adds	r3, #80	; 0x50
 80079f6:	78ba      	ldrb	r2, [r7, #2]
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	e009      	b.n	8007a10 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	68f9      	ldr	r1, [r7, #12]
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	440b      	add	r3, r1
 8007a0a:	3351      	adds	r3, #81	; 0x51
 8007a0c:	78ba      	ldrb	r2, [r7, #2]
 8007a0e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bc80      	pop	{r7}
 8007a1a:	4770      	bx	lr

08007a1c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7f9 fa81 	bl	8000f2c <HAL_Delay>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d817      	bhi.n	8007a78 <USBH_Get_USB_Status+0x44>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <USBH_Get_USB_Status+0x1c>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a67 	.word	0x08007a67
 8007a58:	08007a6d 	.word	0x08007a6d
 8007a5c:	08007a73 	.word	0x08007a73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
    break;
 8007a64:	e00b      	b.n	8007a7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a66:	2302      	movs	r3, #2
 8007a68:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6a:	e008      	b.n	8007a7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a70:	e005      	b.n	8007a7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a72:	2302      	movs	r3, #2
 8007a74:	73fb      	strb	r3, [r7, #15]
    break;
 8007a76:	e002      	b.n	8007a7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a78:	2302      	movs	r3, #2
 8007a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7c:	bf00      	nop
  }
  return usb_status;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop

08007a8c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d102      	bne.n	8007aa6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	e001      	b.n	8007aaa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	461a      	mov	r2, r3
 8007aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ab2:	4803      	ldr	r0, [pc, #12]	; (8007ac0 <MX_DriverVbusFS+0x34>)
 8007ab4:	f7f9 fdd7 	bl	8001666 <HAL_GPIO_WritePin>
}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	40010800 	.word	0x40010800

08007ac4 <__errno>:
 8007ac4:	4b01      	ldr	r3, [pc, #4]	; (8007acc <__errno+0x8>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000030 	.word	0x20000030

08007ad0 <malloc>:
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <malloc+0xc>)
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	f000 b85f 	b.w	8007b98 <_malloc_r>
 8007ada:	bf00      	nop
 8007adc:	20000030 	.word	0x20000030

08007ae0 <free>:
 8007ae0:	4b02      	ldr	r3, [pc, #8]	; (8007aec <free+0xc>)
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f000 b80b 	b.w	8007b00 <_free_r>
 8007aea:	bf00      	nop
 8007aec:	20000030 	.word	0x20000030

08007af0 <memset>:
 8007af0:	4603      	mov	r3, r0
 8007af2:	4402      	add	r2, r0
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d100      	bne.n	8007afa <memset+0xa>
 8007af8:	4770      	bx	lr
 8007afa:	f803 1b01 	strb.w	r1, [r3], #1
 8007afe:	e7f9      	b.n	8007af4 <memset+0x4>

08007b00 <_free_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4605      	mov	r5, r0
 8007b04:	2900      	cmp	r1, #0
 8007b06:	d043      	beq.n	8007b90 <_free_r+0x90>
 8007b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b0c:	1f0c      	subs	r4, r1, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bfb8      	it	lt
 8007b12:	18e4      	addlt	r4, r4, r3
 8007b14:	f000 f8aa 	bl	8007c6c <__malloc_lock>
 8007b18:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <_free_r+0x94>)
 8007b1a:	6813      	ldr	r3, [r2, #0]
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	b933      	cbnz	r3, 8007b2e <_free_r+0x2e>
 8007b20:	6063      	str	r3, [r4, #4]
 8007b22:	6014      	str	r4, [r2, #0]
 8007b24:	4628      	mov	r0, r5
 8007b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b2a:	f000 b8a0 	b.w	8007c6e <__malloc_unlock>
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	d90b      	bls.n	8007b4a <_free_r+0x4a>
 8007b32:	6821      	ldr	r1, [r4, #0]
 8007b34:	1862      	adds	r2, r4, r1
 8007b36:	4293      	cmp	r3, r2
 8007b38:	bf01      	itttt	eq
 8007b3a:	681a      	ldreq	r2, [r3, #0]
 8007b3c:	685b      	ldreq	r3, [r3, #4]
 8007b3e:	1852      	addeq	r2, r2, r1
 8007b40:	6022      	streq	r2, [r4, #0]
 8007b42:	6063      	str	r3, [r4, #4]
 8007b44:	6004      	str	r4, [r0, #0]
 8007b46:	e7ed      	b.n	8007b24 <_free_r+0x24>
 8007b48:	4613      	mov	r3, r2
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	b10a      	cbz	r2, 8007b52 <_free_r+0x52>
 8007b4e:	42a2      	cmp	r2, r4
 8007b50:	d9fa      	bls.n	8007b48 <_free_r+0x48>
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	1858      	adds	r0, r3, r1
 8007b56:	42a0      	cmp	r0, r4
 8007b58:	d10b      	bne.n	8007b72 <_free_r+0x72>
 8007b5a:	6820      	ldr	r0, [r4, #0]
 8007b5c:	4401      	add	r1, r0
 8007b5e:	1858      	adds	r0, r3, r1
 8007b60:	4282      	cmp	r2, r0
 8007b62:	6019      	str	r1, [r3, #0]
 8007b64:	d1de      	bne.n	8007b24 <_free_r+0x24>
 8007b66:	6810      	ldr	r0, [r2, #0]
 8007b68:	6852      	ldr	r2, [r2, #4]
 8007b6a:	4401      	add	r1, r0
 8007b6c:	6019      	str	r1, [r3, #0]
 8007b6e:	605a      	str	r2, [r3, #4]
 8007b70:	e7d8      	b.n	8007b24 <_free_r+0x24>
 8007b72:	d902      	bls.n	8007b7a <_free_r+0x7a>
 8007b74:	230c      	movs	r3, #12
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	e7d4      	b.n	8007b24 <_free_r+0x24>
 8007b7a:	6820      	ldr	r0, [r4, #0]
 8007b7c:	1821      	adds	r1, r4, r0
 8007b7e:	428a      	cmp	r2, r1
 8007b80:	bf01      	itttt	eq
 8007b82:	6811      	ldreq	r1, [r2, #0]
 8007b84:	6852      	ldreq	r2, [r2, #4]
 8007b86:	1809      	addeq	r1, r1, r0
 8007b88:	6021      	streq	r1, [r4, #0]
 8007b8a:	6062      	str	r2, [r4, #4]
 8007b8c:	605c      	str	r4, [r3, #4]
 8007b8e:	e7c9      	b.n	8007b24 <_free_r+0x24>
 8007b90:	bd38      	pop	{r3, r4, r5, pc}
 8007b92:	bf00      	nop
 8007b94:	200000bc 	.word	0x200000bc

08007b98 <_malloc_r>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	1ccd      	adds	r5, r1, #3
 8007b9c:	f025 0503 	bic.w	r5, r5, #3
 8007ba0:	3508      	adds	r5, #8
 8007ba2:	2d0c      	cmp	r5, #12
 8007ba4:	bf38      	it	cc
 8007ba6:	250c      	movcc	r5, #12
 8007ba8:	2d00      	cmp	r5, #0
 8007baa:	4606      	mov	r6, r0
 8007bac:	db01      	blt.n	8007bb2 <_malloc_r+0x1a>
 8007bae:	42a9      	cmp	r1, r5
 8007bb0:	d903      	bls.n	8007bba <_malloc_r+0x22>
 8007bb2:	230c      	movs	r3, #12
 8007bb4:	6033      	str	r3, [r6, #0]
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	bd70      	pop	{r4, r5, r6, pc}
 8007bba:	f000 f857 	bl	8007c6c <__malloc_lock>
 8007bbe:	4a21      	ldr	r2, [pc, #132]	; (8007c44 <_malloc_r+0xac>)
 8007bc0:	6814      	ldr	r4, [r2, #0]
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	b991      	cbnz	r1, 8007bec <_malloc_r+0x54>
 8007bc6:	4c20      	ldr	r4, [pc, #128]	; (8007c48 <_malloc_r+0xb0>)
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	b91b      	cbnz	r3, 8007bd4 <_malloc_r+0x3c>
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f000 f83d 	bl	8007c4c <_sbrk_r>
 8007bd2:	6020      	str	r0, [r4, #0]
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f000 f838 	bl	8007c4c <_sbrk_r>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d124      	bne.n	8007c2a <_malloc_r+0x92>
 8007be0:	230c      	movs	r3, #12
 8007be2:	4630      	mov	r0, r6
 8007be4:	6033      	str	r3, [r6, #0]
 8007be6:	f000 f842 	bl	8007c6e <__malloc_unlock>
 8007bea:	e7e4      	b.n	8007bb6 <_malloc_r+0x1e>
 8007bec:	680b      	ldr	r3, [r1, #0]
 8007bee:	1b5b      	subs	r3, r3, r5
 8007bf0:	d418      	bmi.n	8007c24 <_malloc_r+0x8c>
 8007bf2:	2b0b      	cmp	r3, #11
 8007bf4:	d90f      	bls.n	8007c16 <_malloc_r+0x7e>
 8007bf6:	600b      	str	r3, [r1, #0]
 8007bf8:	18cc      	adds	r4, r1, r3
 8007bfa:	50cd      	str	r5, [r1, r3]
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f000 f836 	bl	8007c6e <__malloc_unlock>
 8007c02:	f104 000b 	add.w	r0, r4, #11
 8007c06:	1d23      	adds	r3, r4, #4
 8007c08:	f020 0007 	bic.w	r0, r0, #7
 8007c0c:	1ac3      	subs	r3, r0, r3
 8007c0e:	d0d3      	beq.n	8007bb8 <_malloc_r+0x20>
 8007c10:	425a      	negs	r2, r3
 8007c12:	50e2      	str	r2, [r4, r3]
 8007c14:	e7d0      	b.n	8007bb8 <_malloc_r+0x20>
 8007c16:	684b      	ldr	r3, [r1, #4]
 8007c18:	428c      	cmp	r4, r1
 8007c1a:	bf16      	itet	ne
 8007c1c:	6063      	strne	r3, [r4, #4]
 8007c1e:	6013      	streq	r3, [r2, #0]
 8007c20:	460c      	movne	r4, r1
 8007c22:	e7eb      	b.n	8007bfc <_malloc_r+0x64>
 8007c24:	460c      	mov	r4, r1
 8007c26:	6849      	ldr	r1, [r1, #4]
 8007c28:	e7cc      	b.n	8007bc4 <_malloc_r+0x2c>
 8007c2a:	1cc4      	adds	r4, r0, #3
 8007c2c:	f024 0403 	bic.w	r4, r4, #3
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d005      	beq.n	8007c40 <_malloc_r+0xa8>
 8007c34:	1a21      	subs	r1, r4, r0
 8007c36:	4630      	mov	r0, r6
 8007c38:	f000 f808 	bl	8007c4c <_sbrk_r>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d0cf      	beq.n	8007be0 <_malloc_r+0x48>
 8007c40:	6025      	str	r5, [r4, #0]
 8007c42:	e7db      	b.n	8007bfc <_malloc_r+0x64>
 8007c44:	200000bc 	.word	0x200000bc
 8007c48:	200000c0 	.word	0x200000c0

08007c4c <_sbrk_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	2300      	movs	r3, #0
 8007c50:	4c05      	ldr	r4, [pc, #20]	; (8007c68 <_sbrk_r+0x1c>)
 8007c52:	4605      	mov	r5, r0
 8007c54:	4608      	mov	r0, r1
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	f7f9 f8a6 	bl	8000da8 <_sbrk>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_sbrk_r+0x1a>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_sbrk_r+0x1a>
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	200008bc 	.word	0x200008bc

08007c6c <__malloc_lock>:
 8007c6c:	4770      	bx	lr

08007c6e <__malloc_unlock>:
 8007c6e:	4770      	bx	lr

08007c70 <_init>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	bf00      	nop
 8007c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c76:	bc08      	pop	{r3}
 8007c78:	469e      	mov	lr, r3
 8007c7a:	4770      	bx	lr

08007c7c <_fini>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr
